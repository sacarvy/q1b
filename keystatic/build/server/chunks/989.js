exports.id = 989;
exports.ids = [989];
exports.modules = {

/***/ 96219:
/***/ ((__unused_webpack_module, exports) => {

Object.defineProperty(exports, "__esModule", ({
  value: !0
}));

class GraphQLError extends Error {
  constructor(e, r, i, n, t, a, o) {
    super(e);
    this.name = "GraphQLError";
    this.message = e;
    if (t) {
      this.path = t;
    }
    if (r) {
      this.nodes = Array.isArray(r) ? r : [ r ];
    }
    if (i) {
      this.source = i;
    }
    if (n) {
      this.positions = n;
    }
    if (a) {
      this.originalError = a;
    }
    var l = o;
    if (!l && a) {
      var u = a.extensions;
      if (u && "object" == typeof u) {
        l = u;
      }
    }
    this.extensions = l || {};
  }
  toJSON() {
    return {
      ...this,
      message: this.message
    };
  }
  toString() {
    return this.message;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
}

var e;

var r;

function error(e) {
  return new GraphQLError(`Syntax Error: Unexpected token at ${r} in ${e}`);
}

function advance(i) {
  i.lastIndex = r;
  if (i.test(e)) {
    return e.slice(r, r = i.lastIndex);
  }
}

var i = / +(?=[^\s])/y;

function blockString(e) {
  var r = e.split("\n");
  var n = "";
  var t = 0;
  var a = 0;
  var o = r.length - 1;
  for (var l = 0; l < r.length; l++) {
    i.lastIndex = 0;
    if (i.test(r[l])) {
      if (l && (!t || i.lastIndex < t)) {
        t = i.lastIndex;
      }
      a = a || l;
      o = l;
    }
  }
  for (var u = a; u <= o; u++) {
    if (u !== a) {
      n += "\n";
    }
    n += r[u].slice(t).replace(/\\"""/g, '"""');
  }
  return n;
}

function ignored() {
  for (var i = 0 | e.charCodeAt(r++); 9 === i || 10 === i || 13 === i || 32 === i || 35 === i || 44 === i || 65279 === i; i = 0 | e.charCodeAt(r++)) {
    if (35 === i) {
      while (10 !== (i = e.charCodeAt(r++)) && 13 !== i) {}
    }
  }
  r--;
}

var n = /[_A-Za-z]\w*/y;

function name() {
  var e;
  if (e = advance(n)) {
    return {
      kind: "Name",
      value: e
    };
  }
}

var t = /(?:null|true|false)/y;

var a = /\$[_A-Za-z]\w*/y;

var o = /-?\d+/y;

var l = /(?:\.\d+)?[eE][+-]?\d+|\.\d+/y;

var u = /\\/g;

var v = /"""(?:"""|(?:[\s\S]*?[^\\])""")/y;

var d = /"(?:"|[^\r\n]*?[^\\]")/y;

function value(i) {
  var s;
  var c;
  if (c = advance(t)) {
    s = "null" === c ? {
      kind: "NullValue"
    } : {
      kind: "BooleanValue",
      value: "true" === c
    };
  } else if (!i && (c = advance(a))) {
    s = {
      kind: "Variable",
      name: {
        kind: "Name",
        value: c.slice(1)
      }
    };
  } else if (c = advance(o)) {
    var f = c;
    if (c = advance(l)) {
      s = {
        kind: "FloatValue",
        value: f + c
      };
    } else {
      s = {
        kind: "IntValue",
        value: f
      };
    }
  } else if (c = advance(n)) {
    s = {
      kind: "EnumValue",
      value: c
    };
  } else if (c = advance(v)) {
    s = {
      kind: "StringValue",
      value: blockString(c.slice(3, -3)),
      block: !0
    };
  } else if (c = advance(d)) {
    s = {
      kind: "StringValue",
      value: u.test(c) ? JSON.parse(c) : c.slice(1, -1),
      block: !1
    };
  } else if (s = function list(i) {
    var n;
    if (91 === e.charCodeAt(r)) {
      r++;
      ignored();
      var t = [];
      while (n = value(i)) {
        t.push(n);
      }
      if (93 !== e.charCodeAt(r++)) {
        throw error("ListValue");
      }
      ignored();
      return {
        kind: "ListValue",
        values: t
      };
    }
  }(i) || function object(i) {
    if (123 === e.charCodeAt(r)) {
      r++;
      ignored();
      var n = [];
      var t;
      while (t = name()) {
        ignored();
        if (58 !== e.charCodeAt(r++)) {
          throw error("ObjectField");
        }
        ignored();
        var a = value(i);
        if (!a) {
          throw error("ObjectField");
        }
        n.push({
          kind: "ObjectField",
          name: t,
          value: a
        });
      }
      if (125 !== e.charCodeAt(r++)) {
        throw error("ObjectValue");
      }
      ignored();
      return {
        kind: "ObjectValue",
        fields: n
      };
    }
  }(i)) {
    return s;
  }
  ignored();
  return s;
}

function arguments_(i) {
  var n = [];
  ignored();
  if (40 === e.charCodeAt(r)) {
    r++;
    ignored();
    var t;
    while (t = name()) {
      ignored();
      if (58 !== e.charCodeAt(r++)) {
        throw error("Argument");
      }
      ignored();
      var a = value(i);
      if (!a) {
        throw error("Argument");
      }
      n.push({
        kind: "Argument",
        name: t,
        value: a
      });
    }
    if (!n.length || 41 !== e.charCodeAt(r++)) {
      throw error("Argument");
    }
    ignored();
  }
  return n;
}

function directives(i) {
  var n = [];
  ignored();
  while (64 === e.charCodeAt(r)) {
    r++;
    var t = name();
    if (!t) {
      throw error("Directive");
    }
    ignored();
    n.push({
      kind: "Directive",
      name: t,
      arguments: arguments_(i)
    });
  }
  return n;
}

function field() {
  var i = name();
  if (i) {
    ignored();
    var n;
    if (58 === e.charCodeAt(r)) {
      r++;
      ignored();
      n = i;
      if (!(i = name())) {
        throw error("Field");
      }
      ignored();
    }
    return {
      kind: "Field",
      alias: n,
      name: i,
      arguments: arguments_(!1),
      directives: directives(!1),
      selectionSet: selectionSet()
    };
  }
}

function type() {
  var i;
  ignored();
  if (91 === e.charCodeAt(r)) {
    r++;
    ignored();
    var n = type();
    if (!n || 93 !== e.charCodeAt(r++)) {
      throw error("ListType");
    }
    i = {
      kind: "ListType",
      type: n
    };
  } else if (i = name()) {
    i = {
      kind: "NamedType",
      name: i
    };
  } else {
    throw error("NamedType");
  }
  ignored();
  if (33 === e.charCodeAt(r)) {
    r++;
    ignored();
    return {
      kind: "NonNullType",
      type: i
    };
  } else {
    return i;
  }
}

var s = /on/y;

function typeCondition() {
  if (advance(s)) {
    ignored();
    var e = name();
    if (!e) {
      throw error("NamedType");
    }
    ignored();
    return {
      kind: "NamedType",
      name: e
    };
  }
}

var c = /\.\.\./y;

function fragmentSpread() {
  if (advance(c)) {
    ignored();
    var e = r;
    var i;
    if ((i = name()) && "on" !== i.value) {
      return {
        kind: "FragmentSpread",
        name: i,
        directives: directives(!1)
      };
    } else {
      r = e;
      var n = typeCondition();
      var t = directives(!1);
      var a = selectionSet();
      if (!a) {
        throw error("InlineFragment");
      }
      return {
        kind: "InlineFragment",
        typeCondition: n,
        directives: t,
        selectionSet: a
      };
    }
  }
}

function selectionSet() {
  var i;
  ignored();
  if (123 === e.charCodeAt(r)) {
    r++;
    ignored();
    var n = [];
    while (i = fragmentSpread() || field()) {
      n.push(i);
    }
    if (!n.length || 125 !== e.charCodeAt(r++)) {
      throw error("SelectionSet");
    }
    ignored();
    return {
      kind: "SelectionSet",
      selections: n
    };
  }
}

var f = /fragment/y;

function fragmentDefinition() {
  if (advance(f)) {
    ignored();
    var e = name();
    if (!e) {
      throw error("FragmentDefinition");
    }
    ignored();
    var r = typeCondition();
    if (!r) {
      throw error("FragmentDefinition");
    }
    var i = directives(!1);
    var n = selectionSet();
    if (!n) {
      throw error("FragmentDefinition");
    }
    return {
      kind: "FragmentDefinition",
      name: e,
      typeCondition: r,
      directives: i,
      selectionSet: n
    };
  }
}

var p = /(?:query|mutation|subscription)/y;

function operationDefinition() {
  var i;
  var n;
  var t = [];
  var o = [];
  if (i = advance(p)) {
    ignored();
    n = name();
    t = function variableDefinitions() {
      var i;
      var n = [];
      ignored();
      if (40 === e.charCodeAt(r)) {
        r++;
        ignored();
        while (i = advance(a)) {
          ignored();
          if (58 !== e.charCodeAt(r++)) {
            throw error("VariableDefinition");
          }
          var t = type();
          var o = void 0;
          if (61 === e.charCodeAt(r)) {
            r++;
            ignored();
            if (!(o = value(!0))) {
              throw error("VariableDefinition");
            }
          }
          ignored();
          n.push({
            kind: "VariableDefinition",
            variable: {
              kind: "Variable",
              name: {
                kind: "Name",
                value: i.slice(1)
              }
            },
            type: t,
            defaultValue: o,
            directives: directives(!0)
          });
        }
        if (41 !== e.charCodeAt(r++)) {
          throw error("VariableDefinition");
        }
        ignored();
      }
      return n;
    }();
    o = directives(!1);
  }
  var l = selectionSet();
  if (l) {
    return {
      kind: "OperationDefinition",
      operation: i || "query",
      name: n,
      variableDefinitions: t,
      directives: o,
      selectionSet: l
    };
  }
}

var m = {};

function printString(e) {
  return JSON.stringify(e);
}

function printBlockString(e) {
  return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
}

var hasItems = e => !(!e || !e.length);

var g = {
  OperationDefinition(e) {
    if ("query" === e.operation && !e.name && !hasItems(e.variableDefinitions) && !hasItems(e.directives)) {
      return g.SelectionSet(e.selectionSet);
    }
    var r = e.operation;
    if (e.name) {
      r += " " + e.name.value;
    }
    if (hasItems(e.variableDefinitions)) {
      if (!e.name) {
        r += " ";
      }
      r += "(" + e.variableDefinitions.map(g.VariableDefinition).join(", ") + ")";
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return r + " " + g.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var r = g.Variable(e.variable) + ": " + print(e.type);
    if (e.defaultValue) {
      r += " = " + print(e.defaultValue);
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return r;
  },
  Field(e) {
    var r = (e.alias ? e.alias.value + ": " : "") + e.name.value;
    if (hasItems(e.arguments)) {
      var i = e.arguments.map(g.Argument);
      var n = r + "(" + i.join(", ") + ")";
      r = n.length > 80 ? r + "(\n  " + i.join("\n").replace(/\n/g, "\n  ") + "\n)" : n;
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return e.selectionSet ? r + " " + g.SelectionSet(e.selectionSet) : r;
  },
  StringValue: e => e.block ? printBlockString(e.value) : printString(e.value),
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + e.values.map(print).join(", ") + "]",
  ObjectValue: e => "{" + e.fields.map(g.ObjectField).join(", ") + "}",
  ObjectField: e => e.name.value + ": " + print(e.value),
  Document: e => hasItems(e.definitions) ? e.definitions.map(print).join("\n\n") : "",
  SelectionSet: e => "{\n  " + e.selections.map(print).join("\n").replace(/\n/g, "\n  ") + "\n}",
  Argument: e => e.name.value + ": " + print(e.value),
  FragmentSpread(e) {
    var r = "..." + e.name.value;
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return r;
  },
  InlineFragment(e) {
    var r = "...";
    if (e.typeCondition) {
      r += " on " + e.typeCondition.name.value;
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return r + " " + print(e.selectionSet);
  },
  FragmentDefinition(e) {
    var r = "fragment " + e.name.value;
    r += " on " + e.typeCondition.name.value;
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(g.Directive).join(" ");
    }
    return r + " " + print(e.selectionSet);
  },
  Directive(e) {
    var r = "@" + e.name.value;
    if (hasItems(e.arguments)) {
      r += "(" + e.arguments.map(g.Argument).join(", ") + ")";
    }
    return r;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + print(e.type) + "]",
  NonNullType: e => print(e.type) + "!"
};

function print(e) {
  return g[e.kind] ? g[e.kind](e) : "";
}

function valueFromASTUntyped(e, r) {
  switch (e.kind) {
   case "NullValue":
    return null;

   case "IntValue":
    return parseInt(e.value, 10);

   case "FloatValue":
    return parseFloat(e.value);

   case "StringValue":
   case "EnumValue":
   case "BooleanValue":
    return e.value;

   case "ListValue":
    var i = [];
    for (var n = 0, t = e.values; n < t.length; n += 1) {
      i.push(valueFromASTUntyped(t[n], r));
    }
    return i;

   case "ObjectValue":
    var a = Object.create(null);
    for (var o = 0, l = e.fields; o < l.length; o += 1) {
      var u = l[o];
      a[u.name.value] = valueFromASTUntyped(u.value, r);
    }
    return a;

   case "Variable":
    return r && r[e.name.value];
  }
}

exports.BREAK = m;

exports.GraphQLError = GraphQLError;

exports.Kind = {
  NAME: "Name",
  DOCUMENT: "Document",
  OPERATION_DEFINITION: "OperationDefinition",
  VARIABLE_DEFINITION: "VariableDefinition",
  SELECTION_SET: "SelectionSet",
  FIELD: "Field",
  ARGUMENT: "Argument",
  FRAGMENT_SPREAD: "FragmentSpread",
  INLINE_FRAGMENT: "InlineFragment",
  FRAGMENT_DEFINITION: "FragmentDefinition",
  VARIABLE: "Variable",
  INT: "IntValue",
  FLOAT: "FloatValue",
  STRING: "StringValue",
  BOOLEAN: "BooleanValue",
  NULL: "NullValue",
  ENUM: "EnumValue",
  LIST: "ListValue",
  OBJECT: "ObjectValue",
  OBJECT_FIELD: "ObjectField",
  DIRECTIVE: "Directive",
  NAMED_TYPE: "NamedType",
  LIST_TYPE: "ListType",
  NON_NULL_TYPE: "NonNullType"
};

exports.OperationTypeNode = {
  QUERY: "query",
  MUTATION: "mutation",
  SUBSCRIPTION: "subscription"
};

exports.parse = function parse(i, n) {
  e = "string" == typeof i.body ? i.body : i;
  r = 0;
  return function document() {
    var e;
    ignored();
    var r = [];
    while (e = fragmentDefinition() || operationDefinition()) {
      r.push(e);
    }
    return {
      kind: "Document",
      definitions: r
    };
  }();
};

exports.parseType = function parseType(i, n) {
  e = "string" == typeof i.body ? i.body : i;
  r = 0;
  return type();
};

exports.parseValue = function parseValue(i, n) {
  e = "string" == typeof i.body ? i.body : i;
  r = 0;
  ignored();
  var t = value(!1);
  if (!t) {
    throw error("ValueNode");
  }
  return t;
};

exports.print = print;

exports.printBlockString = printBlockString;

exports.printString = printString;

exports.valueFromASTUntyped = valueFromASTUntyped;

exports.valueFromTypeNode = function valueFromTypeNode(e, r, i) {
  if ("Variable" === e.kind) {
    return i ? valueFromTypeNode(i[e.name.value], r, i) : void 0;
  } else if ("NonNullType" === r.kind) {
    return "NullValue" !== e.kind ? valueFromTypeNode(e, r, i) : void 0;
  } else if ("NullValue" === e.kind) {
    return null;
  } else if ("ListType" === r.kind) {
    if ("ListValue" === e.kind) {
      var n = [];
      for (var t = 0, a = e.values; t < a.length; t += 1) {
        var o = valueFromTypeNode(a[t], r.type, i);
        if (void 0 === o) {
          return;
        } else {
          n.push(o);
        }
      }
      return n;
    }
  } else if ("NamedType" === r.kind) {
    switch (r.name.value) {
     case "Int":
     case "Float":
     case "String":
     case "Bool":
      return r.name.value + "Value" === e.kind ? valueFromASTUntyped(e, i) : void 0;

     default:
      return valueFromASTUntyped(e, i);
    }
  }
};

exports.visit = function visit(e, r) {
  var i = [];
  var n = [];
  try {
    var t = function traverse(e, t, a) {
      var o = !1;
      var l = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;
      var u = l && l.call(r, e, t, a, n, i);
      if (!1 === u) {
        return e;
      } else if (null === u) {
        return null;
      } else if (u === m) {
        throw m;
      } else if (u && "string" == typeof u.kind) {
        o = u !== e;
        e = u;
      }
      if (a) {
        i.push(a);
      }
      var v;
      var d = {
        ...e
      };
      for (var s in e) {
        n.push(s);
        var c = e[s];
        if (Array.isArray(c)) {
          var f = [];
          for (var p = 0; p < c.length; p++) {
            if (null != c[p] && "string" == typeof c[p].kind) {
              i.push(e);
              n.push(p);
              v = traverse(c[p], p, c);
              n.pop();
              i.pop();
              if (null == v) {
                o = !0;
              } else {
                o = o || v !== c[p];
                f.push(v);
              }
            }
          }
          c = f;
        } else if (null != c && "string" == typeof c.kind) {
          if (void 0 !== (v = traverse(c, s, e))) {
            o = o || c !== v;
            c = v;
          }
        }
        n.pop();
        if (o) {
          d[s] = c;
        }
      }
      if (a) {
        i.pop();
      }
      var g = r[e.kind] && r[e.kind].leave || r.leave;
      var h = g && g.call(r, e, t, a, n, i);
      if (h === m) {
        throw m;
      } else if (void 0 !== h) {
        return h;
      } else if (void 0 !== u) {
        return o ? d : u;
      } else {
        return o ? d : e;
      }
    }(e);
    return void 0 !== t && !1 !== t ? t : e;
  } catch (r) {
    if (r !== m) {
      throw r;
    }
    return e;
  }
};
//# sourceMappingURL=graphql.web.js.map


/***/ }),

/***/ 39106:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ AppShellErrorContext),
/* harmony export */   B: () => (/* binding */ BranchInfoContext),
/* harmony export */   C: () => (/* binding */ CloudAppShellQuery),
/* harmony export */   G: () => (/* binding */ GitHubAppShellDataContext),
/* harmony export */   L: () => (/* binding */ LocalAppShellProvider),
/* harmony export */   R: () => (/* binding */ Ref_base),
/* harmony export */   a: () => (/* binding */ useChanged),
/* harmony export */   b: () => (/* binding */ useRepositoryId),
/* harmony export */   c: () => (/* binding */ useViewer),
/* harmony export */   d: () => (/* binding */ GitHubAppShellProvider),
/* harmony export */   e: () => (/* binding */ useTree),
/* harmony export */   f: () => (/* binding */ GitHubAppShellQuery),
/* harmony export */   g: () => (/* binding */ getAuth),
/* harmony export */   h: () => (/* binding */ useData),
/* harmony export */   i: () => (/* binding */ LOADING),
/* harmony export */   j: () => (/* binding */ getSyncAuth),
/* harmony export */   k: () => (/* binding */ useBaseCommit),
/* harmony export */   l: () => (/* binding */ useSetTreeSha),
/* harmony export */   m: () => (/* binding */ RepoWithWriteAccessContext),
/* harmony export */   n: () => (/* binding */ hydrateTreeCacheWithEntries),
/* harmony export */   o: () => (/* binding */ fetchGitHubTreeData),
/* harmony export */   p: () => (/* binding */ parseRepoConfig),
/* harmony export */   q: () => (/* binding */ mergeDataStates),
/* harmony export */   r: () => (/* binding */ useBranchInfo),
/* harmony export */   s: () => (/* binding */ serializeRepoConfig),
/* harmony export */   t: () => (/* binding */ assertValidRepoConfig),
/* harmony export */   u: () => (/* binding */ useRouter),
/* harmony export */   v: () => (/* binding */ RouterProvider),
/* harmony export */   w: () => (/* binding */ GitHubAppShellDataProvider)
/* harmony export */ });
/* harmony import */ var _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(76772);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var urql__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(40450);
/* harmony import */ var urql__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(urql__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(45533);
/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(48736);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(85916);
/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(496);
/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(52072);










const RouterContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);
function RouterProvider(props) {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RouterContext.Provider, {
    value: props.router,
    children: props.children
  });
}
function useRouter() {
  const router = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(RouterContext);
  if (router == null) {
    throw new Error('useRouter must be used within a RouterProvider');
  }
  return router;
}

const LOADING = Symbol('loading');
function isThenable(value) {
  return value && typeof value.then === 'function';
}
function useData(func) {
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
    kind: 'loading'
  });
  let stateToReturn = state;
  const result = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    try {
      const result = func();
      return {
        kind: 'result',
        result
      };
    } catch (error) {
      return {
        kind: 'error',
        error: error
      };
    }
  }, [func]);
  const resultState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    if (result.kind === 'error' && (state.kind !== 'error' || state.error !== result.error)) {
      return {
        kind: 'error',
        error: result.error
      };
    }
    if (result.kind === 'result' && !isThenable(result.result) && result.result !== LOADING && (state.kind !== 'loaded' || state.data !== result.result)) {
      return {
        kind: 'loaded',
        data: result.result
      };
    }
  }, [result, state]);
  if (resultState && resultState !== state) {
    stateToReturn = resultState;
    setState(resultState);
  }
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (result.kind === 'result' && isThenable(result.result)) {
      setState({
        kind: 'loading'
      });
      let isActive = true;
      result.result.then(result => {
        if (result === LOADING || !isActive) return;
        setState({
          kind: 'loaded',
          data: result
        });
      }, error => {
        if (!isActive) return;
        setState({
          kind: 'error',
          error
        });
      });
      return () => {
        isActive = false;
      };
    }
  }, [result]);
  return stateToReturn;
}
function mergeDataStates(input) {
  const entries = Object.entries(input);
  for (const [, value] of entries) {
    if (value.kind === 'error') {
      return {
        kind: 'error',
        error: value.error
      };
    }
  }
  for (const [, value] of entries) {
    if (value.kind === 'loading') {
      return {
        kind: 'loading'
      };
    }
  }
  return {
    kind: 'loaded',
    data: Object.fromEntries(entries.map(_ref => {
      let [key, val] = _ref;
      return [key, val.data];
    }))
  };
}

const storedTokenSchema = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({
  token: zod__WEBPACK_IMPORTED_MODULE_6__.z.string(),
  validUntil: zod__WEBPACK_IMPORTED_MODULE_6__.z.number().transform(val => new Date(val))
});
function getSyncAuth(config) {
  if (typeof document === 'undefined') {
    return null;
  }
  if (config.storage.kind === 'github') {
    const cookies = (0,cookie__WEBPACK_IMPORTED_MODULE_5__.parse)(document.cookie);
    const accessToken = cookies['keystatic-gh-access-token'];
    if (!accessToken) {
      return null;
    }
    return {
      accessToken
    };
  }
  if (config.storage.kind === 'cloud') {
    const unparsedTokenData = localStorage.getItem('keystatic-cloud-access-token');
    let tokenData;
    try {
      tokenData = storedTokenSchema.parse(JSON.parse(unparsedTokenData));
    } catch (err) {
      return null;
    }
    if (!tokenData || tokenData.validUntil < new Date()) {
      return null;
    }
    return {
      accessToken: tokenData.token
    };
  }
  return null;
}
async function getAuth(config) {
  const token = getSyncAuth(config);
  if (config.storage.kind === 'github' && !token) {
    try {
      const res = await fetch('/api/keystatic/github/refresh-token', {
        method: 'POST'
      });
      if (res.status === 200) {
        const cookies = (0,cookie__WEBPACK_IMPORTED_MODULE_5__.parse)(document.cookie);
        const accessToken = cookies['keystatic-gh-access-token'];
        if (accessToken) {
          return {
            accessToken
          };
        }
      }
    } catch {}
    return null;
  }
  return token;
}

const SidebarFooter_viewer = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  fragment SidebarFooter_viewer on User {
    id
    name
    login
    avatarUrl
    databaseId
  }
`;
const ViewerContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);
function useViewer() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ViewerContext);
}

function parseRepoConfig(repo) {
  if (typeof repo === 'string') {
    const [owner, name] = repo.split('/');
    return {
      owner,
      name
    };
  }
  return repo;
}
function serializeRepoConfig(repo) {
  if (typeof repo === 'string') {
    return repo;
  }
  return `${repo.owner}/${repo.name}`;
}
function assertValidRepoConfig(repo) {
  if (typeof repo === 'string') {
    if (!repo.includes('/')) {
      throw new Error(`Invalid repo config: ${repo}. It must be in the form owner/name`);
    }
  }
  if (typeof repo === 'object') {
    if (!repo.owner && !repo.name) {
      throw new Error(`Invalid repo config: owner and name are missing`);
    }
    if (!repo.owner) {
      throw new Error(`Invalid repo config: owner is missing`);
    }
    if (!repo.name) {
      throw new Error(`Invalid repo config: name is missing`);
    }
  }
}

function fetchLocalTree(sha) {
  if (treeCache.has(sha)) {
    return treeCache.get(sha);
  }
  const promise = fetch('/api/keystatic/tree', {
    headers: {
      'no-cors': '1'
    }
  }).then(x => x.json()).then(async entries => hydrateTreeCacheWithEntries(entries));
  treeCache.set(sha, promise);
  return promise;
}
function useSetTreeSha() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SetTreeShaContext);
}
const SetTreeShaContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(() => {
  throw new Error('SetTreeShaContext not set');
});
function LocalAppShellProvider(props) {
  const [currentTreeSha, setCurrentTreeSha] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('initial');
  const tree = useData((0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => fetchLocalTree(currentTreeSha), [currentTreeSha]));
  const allTreeData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({
    default: tree,
    current: tree,
    merged: mergeDataStates({
      default: tree,
      current: tree
    })
  }), [tree]);
  const changedData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    if (allTreeData.merged.kind !== 'loaded') {
      return {
        collections: new Map(),
        singletons: new Set()
      };
    }
    return getChangedData(props.config, allTreeData.merged.data);
  }, [allTreeData, props.config]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(SetTreeShaContext.Provider, {
    value: setCurrentTreeSha,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ChangedContext.Provider, {
      value: changedData,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TreeContext.Provider, {
        value: allTreeData,
        children: props.children
      })
    })
  });
}
const GitHubAppShellDataContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);
function GitHubAppShellDataProvider(props) {
  const [state] = (0,urql__WEBPACK_IMPORTED_MODULE_7__.useQuery)({
    query: props.config.storage.kind === 'github' ? GitHubAppShellQuery : CloudAppShellQuery,
    variables: props.config.storage.kind === 'github' ? parseRepoConfig(props.config.storage.repo) : {
      name: 'repo-name',
      owner: 'repo-owner'
    }
  });
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(GitHubAppShellDataContext.Provider, {
    value: state,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ViewerContext.Provider, {
      value: state.data && 'viewer' in state.data ? state.data.viewer : undefined,
      children: props.children
    })
  });
}
const writePermissions = new Set(['WRITE', 'ADMIN', 'MAINTAIN']);
function GitHubAppShellProvider(props) {
  var _repo, _repo$refs, _repo$refs$nodes, _repo3, _repo3$refs, _repo3$refs$nodes, _defaultBranchRef$tar, _currentBranchRef$tar, _currentBranchRef$tar2, _currentBranchRef$tar3, _repo5, _repo7, _repo13, _repo13$defaultBranch, _repo14, _repo15, _repo15$refs, _data$repository3, _data$repository4, _repo16;
  const router = useRouter();
  const {
    data,
    error
  } = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(GitHubAppShellDataContext);
  let repo = data === null || data === void 0 ? void 0 : data.repository;
  if (repo && 'viewerPermission' in repo && repo.viewerPermission && !writePermissions.has(repo.viewerPermission) && 'forks' in repo) {
    var _repo$forks$nodes$, _repo$forks, _repo$forks$nodes;
    repo = (_repo$forks$nodes$ = (_repo$forks = repo.forks) === null || _repo$forks === void 0 ? void 0 : (_repo$forks$nodes = _repo$forks.nodes) === null || _repo$forks$nodes === void 0 ? void 0 : _repo$forks$nodes[0]) !== null && _repo$forks$nodes$ !== void 0 ? _repo$forks$nodes$ : repo;
  }
  const defaultBranchRef = (_repo = repo) === null || _repo === void 0 ? void 0 : (_repo$refs = _repo.refs) === null || _repo$refs === void 0 ? void 0 : (_repo$refs$nodes = _repo$refs.nodes) === null || _repo$refs$nodes === void 0 ? void 0 : _repo$refs$nodes.find(x => {
    var _repo2, _repo2$defaultBranchR;
    return (x === null || x === void 0 ? void 0 : x.name) === ((_repo2 = repo) === null || _repo2 === void 0 ? void 0 : (_repo2$defaultBranchR = _repo2.defaultBranchRef) === null || _repo2$defaultBranchR === void 0 ? void 0 : _repo2$defaultBranchR.name);
  });
  const currentBranchRef = (_repo3 = repo) === null || _repo3 === void 0 ? void 0 : (_repo3$refs = _repo3.refs) === null || _repo3$refs === void 0 ? void 0 : (_repo3$refs$nodes = _repo3$refs.nodes) === null || _repo3$refs$nodes === void 0 ? void 0 : _repo3$refs$nodes.find(x => (x === null || x === void 0 ? void 0 : x.name) === props.currentBranch);
  const defaultBranchTreeSha = (_defaultBranchRef$tar = defaultBranchRef === null || defaultBranchRef === void 0 ? void 0 : defaultBranchRef.target.tree.oid) !== null && _defaultBranchRef$tar !== void 0 ? _defaultBranchRef$tar : null;
  const currentBranchTreeSha = (_currentBranchRef$tar = currentBranchRef === null || currentBranchRef === void 0 ? void 0 : currentBranchRef.target.tree.oid) !== null && _currentBranchRef$tar !== void 0 ? _currentBranchRef$tar : null;
  const baseCommit = (_currentBranchRef$tar2 = currentBranchRef === null || currentBranchRef === void 0 ? void 0 : (_currentBranchRef$tar3 = currentBranchRef.target) === null || _currentBranchRef$tar3 === void 0 ? void 0 : _currentBranchRef$tar3.oid) !== null && _currentBranchRef$tar2 !== void 0 ? _currentBranchRef$tar2 : null;
  const defaultBranchTree = useGitHubTreeData(defaultBranchTreeSha, props.config);
  const currentBranchTree = useGitHubTreeData(currentBranchTreeSha, props.config);
  const allTreeData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({
    default: defaultBranchTree,
    current: currentBranchTree,
    merged: mergeDataStates({
      default: defaultBranchTree,
      current: currentBranchTree
    })
  }), [currentBranchTree, defaultBranchTree]);
  const changedData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    if (allTreeData.merged.kind !== 'loaded') {
      return {
        collections: new Map(),
        singletons: new Set()
      };
    }
    return getChangedData(props.config, allTreeData.merged.data);
  }, [allTreeData, props.config]);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    var _error$response, _repo4;
    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {
      if ((0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.a)(props.config)) {
        window.location.href = `/api/keystatic/github/login?from=${router.params.join('/')}`;
      } else {
        (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.r)(router.params.join('/'), props.config);
      }
    }
    if (!((_repo4 = repo) !== null && _repo4 !== void 0 && _repo4.id) && error !== null && error !== void 0 && error.graphQLErrors.some(err => {
      var _err$originalError, _err$originalError2;
      return (err === null || err === void 0 ? void 0 : (_err$originalError = err.originalError) === null || _err$originalError === void 0 ? void 0 : _err$originalError.type) === 'NOT_FOUND' || (err === null || err === void 0 ? void 0 : (_err$originalError2 = err.originalError) === null || _err$originalError2 === void 0 ? void 0 : _err$originalError2.type) === 'FORBIDDEN';
    })) {
      window.location.href = `/api/keystatic/github/repo-not-found?from=${router.params.join('/')}`;
    }
  }, [error, router, (_repo5 = repo) === null || _repo5 === void 0 ? void 0 : _repo5.id, props.config]);
  const baseInfo = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    var _repo$id, _repo6;
    return {
      baseCommit: baseCommit || '',
      repositoryId: (_repo$id = (_repo6 = repo) === null || _repo6 === void 0 ? void 0 : _repo6.id) !== null && _repo$id !== void 0 ? _repo$id : ''
    };
  }, [baseCommit, (_repo7 = repo) === null || _repo7 === void 0 ? void 0 : _repo7.id]);
  const branchInfo = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    var _repo$defaultBranchRe, _repo8, _repo8$defaultBranchR, _repo$id2, _repo9, _repo$refs$nodes$map$, _repo10, _repo10$refs, _repo10$refs$nodes, _repo11, _repo11$refs, _repo11$refs$nodes, _repo12, _repo12$refs, _repo12$refs$nodes, _data$repository$owne, _data$repository, _data$repository$name, _data$repository2;
    return {
      defaultBranch: (_repo$defaultBranchRe = (_repo8 = repo) === null || _repo8 === void 0 ? void 0 : (_repo8$defaultBranchR = _repo8.defaultBranchRef) === null || _repo8$defaultBranchR === void 0 ? void 0 : _repo8$defaultBranchR.name) !== null && _repo$defaultBranchRe !== void 0 ? _repo$defaultBranchRe : '',
      currentBranch: props.currentBranch,
      baseCommit: baseCommit || '',
      repositoryId: (_repo$id2 = (_repo9 = repo) === null || _repo9 === void 0 ? void 0 : _repo9.id) !== null && _repo$id2 !== void 0 ? _repo$id2 : '',
      allBranches: (_repo$refs$nodes$map$ = (_repo10 = repo) === null || _repo10 === void 0 ? void 0 : (_repo10$refs = _repo10.refs) === null || _repo10$refs === void 0 ? void 0 : (_repo10$refs$nodes = _repo10$refs.nodes) === null || _repo10$refs$nodes === void 0 ? void 0 : _repo10$refs$nodes.map(x => x === null || x === void 0 ? void 0 : x.name).filter(emery__WEBPACK_IMPORTED_MODULE_4__.isDefined)) !== null && _repo$refs$nodes$map$ !== void 0 ? _repo$refs$nodes$map$ : [],
      hasPullRequests: !!(currentBranchRef !== null && currentBranchRef !== void 0 && currentBranchRef.associatedPullRequests.totalCount),
      branchNameToId: new Map((_repo11 = repo) === null || _repo11 === void 0 ? void 0 : (_repo11$refs = _repo11.refs) === null || _repo11$refs === void 0 ? void 0 : (_repo11$refs$nodes = _repo11$refs.nodes) === null || _repo11$refs$nodes === void 0 ? void 0 : _repo11$refs$nodes.filter(emery__WEBPACK_IMPORTED_MODULE_4__.isDefined).map(x => [x.name, x.id])),
      branchNameToBaseCommit: new Map((_repo12 = repo) === null || _repo12 === void 0 ? void 0 : (_repo12$refs = _repo12.refs) === null || _repo12$refs === void 0 ? void 0 : (_repo12$refs$nodes = _repo12$refs.nodes) === null || _repo12$refs$nodes === void 0 ? void 0 : _repo12$refs$nodes.flatMap(x => x !== null && x !== void 0 && x.target ? [[x.name, x.target.oid]] : [])),
      mainOwner: (_data$repository$owne = data === null || data === void 0 ? void 0 : (_data$repository = data.repository) === null || _data$repository === void 0 ? void 0 : _data$repository.owner.login) !== null && _data$repository$owne !== void 0 ? _data$repository$owne : '',
      mainRepo: (_data$repository$name = data === null || data === void 0 ? void 0 : (_data$repository2 = data.repository) === null || _data$repository2 === void 0 ? void 0 : _data$repository2.name) !== null && _data$repository$name !== void 0 ? _data$repository$name : ''
    };
  }, [(_repo13 = repo) === null || _repo13 === void 0 ? void 0 : (_repo13$defaultBranch = _repo13.defaultBranchRef) === null || _repo13$defaultBranch === void 0 ? void 0 : _repo13$defaultBranch.name, (_repo14 = repo) === null || _repo14 === void 0 ? void 0 : _repo14.id, (_repo15 = repo) === null || _repo15 === void 0 ? void 0 : (_repo15$refs = _repo15.refs) === null || _repo15$refs === void 0 ? void 0 : _repo15$refs.nodes, props.currentBranch, baseCommit, currentBranchRef === null || currentBranchRef === void 0 ? void 0 : currentBranchRef.associatedPullRequests.totalCount, data === null || data === void 0 ? void 0 : (_data$repository3 = data.repository) === null || _data$repository3 === void 0 ? void 0 : _data$repository3.owner.login, data === null || data === void 0 ? void 0 : (_data$repository4 = data.repository) === null || _data$repository4 === void 0 ? void 0 : _data$repository4.name]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(RepoWithWriteAccessContext.Provider, {
    value: repo && (props.config.storage.kind === 'cloud' || 'viewerPermission' in repo && (_repo16 = repo) !== null && _repo16 !== void 0 && _repo16.viewerPermission && writePermissions.has(repo.viewerPermission)) ? {
      name: repo.name,
      owner: repo.owner.login
    } : null,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(AppShellErrorContext.Provider, {
      value: error,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BranchInfoContext.Provider, {
        value: branchInfo,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(BaseInfoContext.Provider, {
          value: baseInfo,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(ChangedContext.Provider, {
            value: changedData,
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(TreeContext.Provider, {
              value: allTreeData,
              children: props.children
            })
          })
        })
      })
    })
  });
}
const AppShellErrorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);
const BaseInfoContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
  baseCommit: '',
  repositoryId: ''
});
const ChangedContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
  collections: new Map(),
  singletons: new Set()
});
const TreeContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
  current: {
    kind: 'loading'
  },
  default: {
    kind: 'loading'
  },
  merged: {
    kind: 'loading'
  }
});
function useTree() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(TreeContext);
}
function useChanged() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChangedContext);
}
function useBaseCommit() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BaseInfoContext).baseCommit;
}
function useRepositoryId() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BaseInfoContext).repositoryId;
}
const Ref_base = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  fragment Ref_base on Ref {
    id
    name
    target {
      __typename
      id
      oid
      ... on Commit {
        tree {
          id
          oid
        }
      }
    }
    associatedPullRequests(states: [OPEN]) {
      totalCount
    }
  }
`;
const BaseRepo = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  fragment Repo_base on Repository {
    id
    owner {
      id
      login
    }
    name
    defaultBranchRef {
      id
      name
    }
    refs(refPrefix: "refs/heads/", first: 100) {
      nodes {
        ...Ref_base
      }
    }
  }
  ${Ref_base}
`;
const CloudAppShellQuery = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  query CloudAppShell($name: String!, $owner: String!) {
    repository(owner: $owner, name: $name) {
      id
      ...Repo_base
    }
  }
  ${BaseRepo}
`;
const Repo_ghDirect = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  fragment Repo_ghDirect on Repository {
    id
    ...Repo_base
    viewerPermission
  }
  ${BaseRepo}
`;
const Repo_primary = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  fragment Repo_primary on Repository {
    id
    ...Repo_ghDirect
    forks(affiliations: [OWNER], first: 1) {
      nodes {
        ...Repo_ghDirect
      }
    }
  }
  ${Repo_ghDirect}
`;
const GitHubAppShellQuery = _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_0__.gql`
  query GitHubAppShell($name: String!, $owner: String!) {
    repository(owner: $owner, name: $name) {
      id
      ...Repo_primary
    }
    viewer {
      ...SidebarFooter_viewer
    }
  }
  ${Repo_primary}
  ${SidebarFooter_viewer}
`;
const treeCache = new lru_cache__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .Z({
  max: 40
});
async function hydrateTreeCacheWithEntries(entries) {
  const data = {
    entries: new Map(entries.map(entry => [entry.path, entry])),
    tree: (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.z)(entries)
  };
  const sha = await (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.t)(data.tree);
  treeCache.set(sha, data);
  return data;
}
function fetchGitHubTreeData(sha, config) {
  const cached = treeCache.get(sha);
  if (cached) return cached;
  const promise = getAuth(config).then(auth => {
    if (!auth) throw new Error('Not authorized');
    return fetch(config.storage.kind === 'github' ? `https://api.github.com/repos/${serializeRepoConfig(config.storage.repo)}/git/trees/${sha}?recursive=1` : `${_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.K}/v1/github/trees/${sha}`, {
      headers: {
        Authorization: `Bearer ${auth.accessToken}`,
        ...(config.storage.kind === 'cloud' ? _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.l : {})
      }
    }).then(x => x.json());
  }).then(res => hydrateTreeCacheWithEntries(res.tree.map(_ref => {
    let {
      url,
      ...rest
    } = _ref;
    return rest;
  })));
  treeCache.set(sha, promise);
  return promise;
}
function useGitHubTreeData(sha, config) {
  return useData((0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => sha ? fetchGitHubTreeData(sha, config) : LOADING, [sha, config]));
}
const RepoWithWriteAccessContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);
const BranchInfoContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
  currentBranch: '',
  allBranches: [],
  defaultBranch: '',
  hasPullRequests: false,
  branchNameToId: new Map(),
  branchNameToBaseCommit: new Map(),
  mainOwner: '',
  mainRepo: ''
});
function useBranchInfo() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(BranchInfoContext);
}
function getChangedData(config, trees) {
  var _config$collections, _config$singletons;
  return {
    collections: new Map(Object.keys((_config$collections = config.collections) !== null && _config$collections !== void 0 ? _config$collections : {}).map(collection => {
      const currentBranch = new Map((0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.d)(config, collection, trees.current.tree).map(x => [x.slug, x.key]));
      const defaultBranch = new Map((0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.d)(config, collection, trees.default.tree).map(x => [x.slug, x.key]));
      const changed = new Set();
      const added = new Set();
      for (const [key, entry] of currentBranch) {
        const defaultBranchEntry = defaultBranch.get(key);
        if (defaultBranchEntry === undefined) {
          added.add(key);
          continue;
        }
        if (entry !== defaultBranchEntry) {
          changed.add(key);
        }
      }
      const removed = new Set([...defaultBranch.keys()].filter(key => !currentBranch.has(key)));
      return [collection, {
        removed,
        added,
        changed,
        totalCount: currentBranch.size
      }];
    })),
    singletons: new Set(Object.keys((_config$singletons = config.singletons) !== null && _config$singletons !== void 0 ? _config$singletons : {}).filter(singleton => {
      var _getTreeNodeAtPath, _getTreeNodeAtPath2;
      const singletonPath = (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.y)(config, singleton);
      return ((_getTreeNodeAtPath = (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.h)(trees.current.tree, singletonPath)) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.entry.sha) !== ((_getTreeNodeAtPath2 = (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.h)(trees.default.tree, singletonPath)) === null || _getTreeNodeAtPath2 === void 0 ? void 0 : _getTreeNodeAtPath2.entry.sha);
    }))
  };
}




/***/ }),

/***/ 63998:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ FieldDataError)
/* harmony export */ });
class FieldDataError extends Error {
  constructor(message) {
    super(message);
    this.name = 'FieldDataError';
  }
}




/***/ }),

/***/ 85578:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ clientSideValidateProp),
/* harmony export */   p: () => (/* binding */ parseProps),
/* harmony export */   t: () => (/* binding */ toFormattedFormDataError)
/* harmony export */ });
/* unused harmony export f */
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(45533);
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63998);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85916);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32236);





function validateArrayLength(schema, val, path) {
  var _schema$validation, _schema$validation$le, _schema$validation2, _schema$validation2$l;
  if (((_schema$validation = schema.validation) === null || _schema$validation === void 0 ? void 0 : (_schema$validation$le = _schema$validation.length) === null || _schema$validation$le === void 0 ? void 0 : _schema$validation$le.min) !== undefined && val.length < schema.validation.length.min) {
    return new PropValidationError(new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(`Must have at least ${schema.validation.length.min} element${schema.validation.length.min === 1 ? '' : 's'}`), path, schema);
  }
  if (((_schema$validation2 = schema.validation) === null || _schema$validation2 === void 0 ? void 0 : (_schema$validation2$l = _schema$validation2.length) === null || _schema$validation2$l === void 0 ? void 0 : _schema$validation2$l.max) !== undefined && val.length > schema.validation.length.max) {
    return new PropValidationError(new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(`Must have at most ${schema.validation.length.max} element${schema.validation.length.max === 1 ? '' : 's'}}`), path, schema);
  }
}

class PropValidationError extends Error {
  constructor(cause, path, schema) {
    super(`field error at ${path.join('.')}`, {
      cause
    });
    this.path = path;
    this.schema = schema;
    this.cause = cause;
  }
}
function toFormFieldStoredValue(val) {
  if (val === null) {
    return undefined;
  }
  return val;
}
const isArray = Array.isArray;
function parseProps(schema, _value, path, pathWithArrayFieldSlugs, parseFormField, /** This should be true for the reader and false elsewhere */
validateArrayFieldLength) {
  let value = toFormFieldStoredValue(_value);
  if (schema.kind === 'form') {
    try {
      return parseFormField(schema, value, path, pathWithArrayFieldSlugs);
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
  }
  if (schema.kind === 'child') {
    return null;
  }
  if (schema.kind === 'conditional') {
    if (value === undefined) {
      return (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.g)(schema);
    }
    try {
      if (typeof value !== 'object' || value === null || isArray(value)) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F('Must be an object');
      }
      for (const key of Object.keys(value)) {
        if (key !== 'discriminant' && key !== 'value') {
          throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(`Must only contain keys "discriminant" and "value", not "${key}"`);
        }
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const parsedDiscriminant = parseProps(schema.discriminant, value.discriminant, path.concat('discriminant'), pathWithArrayFieldSlugs.concat('discriminant'), parseFormField, validateArrayFieldLength);
    return {
      discriminant: parsedDiscriminant,
      value: parseProps(schema.values[parsedDiscriminant], value.value, path.concat('value'), pathWithArrayFieldSlugs.concat('value'), parseFormField, validateArrayFieldLength)
    };
  }
  if (schema.kind === 'object') {
    if (value === undefined) {
      value = {};
    }
    try {
      if (typeof value !== 'object' || value === null || isArray(value)) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F('Must be an object');
      }
      const allowedKeysSet = new Set(Object.keys(schema.fields));
      for (const key of Object.keys(value)) {
        if (!allowedKeysSet.has(key)) {
          throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(`Key on object value "${key}" is not allowed`);
        }
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const val = {};
    const errors = [];
    for (const key of Object.keys(schema.fields)) {
      let individualVal = value[key];
      try {
        const propVal = parseProps(schema.fields[key], individualVal, path.concat(key), pathWithArrayFieldSlugs.concat(key), parseFormField, validateArrayFieldLength);
        val[key] = propVal;
      } catch (err) {
        errors.push(err);
      }
    }
    if (errors.length) {
      throw new AggregateError(errors);
    }
    return val;
  }
  if (schema.kind === 'array') {
    if (value === undefined) {
      return [];
    }
    try {
      if (!isArray(value)) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F('Must be an array');
      }
    } catch (err) {
      throw new PropValidationError(err, path, schema);
    }
    const errors = [];
    try {
      if (validateArrayFieldLength) {
        const error = validateArrayLength(schema, value, path);
        if (error !== undefined) {
          errors.push(error);
        }
      }
      return value.map((innerVal, i) => {
        try {
          let slug = i.toString();
          if (schema.slugField && typeof innerVal === 'object' && innerVal !== null && !isArray(innerVal)) {
            if (schema.element.kind !== 'object') {
              throw new Error('slugField on array fields requires the an object field element');
            }
            const slugField = schema.element.fields[schema.slugField];
            if (!slugField) {
              throw new Error(`slugField "${schema.slugField}" does not exist on object field`);
            }
            if (slugField.kind !== 'form') {
              throw new Error(`slugField "${schema.slugField}" is not a form field`);
            }
            if (slugField.formKind !== 'slug') {
              throw new Error(`slugField "${schema.slugField}" is not a slug field`);
            }
            let parsedSlugFieldValue;
            try {
              parsedSlugFieldValue = slugField.parse(toFormFieldStoredValue(innerVal[schema.slugField]), undefined);
            } catch (err) {
              throw new AggregateError([err]);
            }
            slug = slugField.serializeWithSlug(parsedSlugFieldValue).slug;
          }
          return parseProps(schema.element, innerVal, path.concat(i), pathWithArrayFieldSlugs.concat(slug), parseFormField, validateArrayFieldLength);
        } catch (err) {
          errors.push(err);
        }
      });
    } finally {
      if (errors.length) {
        throw new AggregateError(errors);
      }
    }
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);
}

function flattenErrors(error) {
  if (error instanceof AggregateError) {
    return error.errors.flatMap(flattenErrors);
  }
  return [error];
}
function formatFormDataError(error) {
  const flatErrors = flattenErrors(error);
  return flatErrors.map(error => {
    if (error instanceof PropValidationError) {
      const path = error.path.join('.');
      return `${path}: ${error.cause instanceof _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F ? error.cause.message : `Unexpected error: ${error.cause}`}`;
    }
    return `Unexpected error: ${error}`;
  }).join('\n');
}
function toFormattedFormDataError(error) {
  const formatted = formatFormDataError(error);
  return new Error(`Field validation failed:\n` + formatted);
}
function clientSideValidateProp(schema, value, slugField) {
  try {
    validateValueWithSchema(schema, value, slugField);
    return true;
  } catch (error) {
    console.warn(toFormattedFormDataError(error));
    return false;
  }
}
function validateValueWithSchema(schema, value, slugField) {
  let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  switch (schema.kind) {
    case 'child':
      {
        return;
      }
    case 'form':
      {
        try {
          if (slugField && path[path.length - 1] === (slugField === null || slugField === void 0 ? void 0 : slugField.field)) {
            schema.validate(value, {
              slugField: {
                slugs: slugField.slugs,
                glob: slugField.glob
              }
            });
            return;
          }
          schema.validate(value, undefined);
        } catch (err) {
          throw new PropValidationError(err, path, schema);
        }
        return;
      }
    case 'conditional':
      {
        schema.discriminant.validate(value.discriminant);
        validateValueWithSchema(schema.values[value.discriminant], value.value, undefined, path.concat('value'));
        return;
      }
    case 'object':
      {
        const errors = [];
        for (const [key, childProp] of Object.entries(schema.fields)) {
          try {
            validateValueWithSchema(childProp, value[key], key === (slugField === null || slugField === void 0 ? void 0 : slugField.field) ? slugField : undefined, path.concat(key));
          } catch (err) {
            errors.push(err);
          }
        }
        if (errors.length > 0) {
          throw new AggregateError(errors);
        }
        return;
      }
    case 'array':
      {
        let slugInfo;
        if (schema.slugField !== undefined && schema.element.kind === 'object') {
          const innerSchema = schema.element.fields;
          const {
            slugField
          } = schema;
          slugInfo = {
            slugField,
            slugs: value.map(val => (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.m)({
              schema: innerSchema,
              slugField
            }, val))
          };
        }
        const errors = [];
        const val = value;
        const error = validateArrayLength(schema, value, path);
        if (error !== undefined) {
          errors.push(error);
        }
        for (const [idx, innerVal] of val.entries()) {
          try {
            validateValueWithSchema(schema.element, innerVal, slugInfo === undefined ? undefined : {
              field: slugInfo.slugField,
              slugs: new Set(slugInfo.slugs.filter((_, i) => idx !== i)),
              glob: '*'
            }, path.concat(idx));
          } catch (err) {
            errors.push(err);
          }
        }
        if (errors.length > 0) {
          throw new AggregateError(errors);
        }
        return;
      }
  }
}




/***/ }),

/***/ 62880:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ ArrayFieldListView),
/* harmony export */   F: () => (/* binding */ FormValueContentFromPreviewProps),
/* harmony export */   I: () => (/* binding */ InnerFormValueContentFromPreviewProps),
/* harmony export */   a: () => (/* binding */ ArrayFieldValidationMessages),
/* harmony export */   c: () => (/* binding */ createGetPreviewProps),
/* harmony export */   i: () => (/* binding */ isNonChildFieldPreviewProps),
/* harmony export */   p: () => (/* binding */ previewPropsToValue),
/* harmony export */   s: () => (/* binding */ setValueToPreviewProps),
/* harmony export */   v: () => (/* binding */ valueToUpdater)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(63815);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(51227);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(6027);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(74404);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(79798);
/* harmony import */ var _react_aria_i18n__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(93009);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(85916);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(32236);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(97712);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(45533);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(85578);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(13005);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__);























function castToMemoizedInfoForSchema(val) {
  return val;
}
function getOrInsert(map, key, val) {
  if (!map.has(key)) {
    map.set(key, val(key));
  }
  return map.get(key);
}
function createGetPreviewProps(rootSchema, rootOnChange, getChildFieldElement) {
  const memoizedInfoForSchema = castToMemoizedInfoForSchema({
    form(schema, onChange) {
      return newVal => onChange(() => newVal);
    },
    array(schema, onChange) {
      return {
        rawOnChange: onChange,
        inner: new Map(),
        onChange(updater) {
          onChange(value => (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.u)(schema, value, updater));
        }
      };
    },
    child() {},
    conditional(schema, onChange) {
      return {
        onChange: (discriminant, value) => onChange(val => (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.u)(schema, val, {
          discriminant,
          value
        })),
        onChangeForValue: cb => onChange(val => ({
          discriminant: val.discriminant,
          value: cb(val.value)
        }))
      };
    },
    object(schema, onChange) {
      return {
        onChange: updater => {
          onChange(value => (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.u)(schema, value, updater));
        },
        innerOnChanges: Object.fromEntries(Object.keys(schema.fields).map(key => {
          return [key, newVal => {
            onChange(val => ({
              ...val,
              [key]: newVal(val[key])
            }));
          }];
        }))
      };
    }
  });
  const previewPropsFactories = {
    form(schema, value, onChange) {
      return {
        value: value,
        onChange,
        schema: schema
      };
    },
    child(schema, value, onChange, path) {
      return {
        element: getChildFieldElement(path),
        schema: schema
      };
    },
    object(schema, value, memoized, path, getInnerProp) {
      const fields = {};
      for (const key of Object.keys(schema.fields)) {
        fields[key] = getInnerProp(schema.fields[key], value[key], memoized.innerOnChanges[key], key);
      }
      const previewProps = {
        fields,
        onChange: memoized.onChange,
        schema: schema
      };
      return previewProps;
    },
    array(schema, value, memoized, path, getInnerProp) {
      const arrayValue = value;
      const keys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.a)(arrayValue);
      const unusedKeys = new Set((0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.a)(value));
      const props = {
        elements: arrayValue.map((val, i) => {
          const key = keys[i];
          unusedKeys.delete(key);
          const element = getOrInsert(memoized.inner, key, () => {
            const onChange = val => {
              memoized.rawOnChange(prev => {
                const keys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.a)(prev);
                const index = keys.indexOf(key);
                const newValue = [...prev];
                newValue[index] = val(newValue[index]);
                (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.s)(newValue, keys);
                return newValue;
              });
            };
            const element = getInnerProp(schema.element, val, onChange, key);
            return {
              element,
              elementWithKey: {
                ...element,
                key
              },
              onChange
            };
          });
          const currentInnerProp = getInnerProp(schema.element, val, element.onChange, key);
          if (element.element !== currentInnerProp) {
            element.element = currentInnerProp;
            element.elementWithKey = {
              ...currentInnerProp,
              key
            };
          }
          return element.elementWithKey;
        }),
        schema: schema,
        onChange: memoized.onChange
      };
      for (const key of unusedKeys) {
        memoized.inner.delete(key);
      }
      return props;
    },
    conditional(schema, value, memoized, path, getInnerProp) {
      const props = {
        discriminant: value.discriminant,
        onChange: memoized.onChange,
        value: getInnerProp(schema.values[value.discriminant.toString()], value.value, memoized.onChangeForValue, 'value'),
        schema: schema
      };
      return props;
    }
  };
  function getPreviewPropsForProp(schema, value, memoedThing, path, getInnerProp) {
    return previewPropsFactories[schema.kind](schema, value, memoedThing, path, getInnerProp);
  }
  function getInitialMemoState(schema, value, onChange, path) {
    const innerState = new Map();
    const memoizedInfo = memoizedInfoForSchema[schema.kind](schema, onChange);
    const state = {
      value,
      inner: innerState,
      props: getPreviewPropsForProp(schema, value, memoizedInfo, path, (schema, value, onChange, key) => {
        const state = getInitialMemoState(schema, value, onChange, path.concat(key));
        innerState.set(key, state);
        return state.props;
      }),
      schema: schema,
      cached: memoizedInfo
    };
    return state;
  }
  function getUpToDateProps(schema, value, onChange, memoState, path) {
    if (memoState.schema !== schema) {
      Object.assign(memoState, getInitialMemoState(schema, value, onChange, path));
      return memoState.props;
    }
    if (memoState.value === value) {
      return memoState.props;
    }
    memoState.value = value;
    const unusedKeys = new Set(memoState.inner.keys());
    memoState.props = getPreviewPropsForProp(schema, value, memoState.cached, path, (schema, value, onChange, innerMemoStateKey) => {
      unusedKeys.delete(innerMemoStateKey);
      if (!memoState.inner.has(innerMemoStateKey)) {
        const innerState = getInitialMemoState(schema, value, onChange, path.concat(innerMemoStateKey));
        memoState.inner.set(innerMemoStateKey, innerState);
        return innerState.props;
      }
      return getUpToDateProps(schema, value, onChange, memoState.inner.get(innerMemoStateKey), path.concat(innerMemoStateKey));
    });
    for (const key of unusedKeys) {
      memoState.inner.delete(key);
    }
    return memoState.props;
  }
  let memoState;
  return value => {
    if (memoState === undefined) {
      memoState = getInitialMemoState(rootSchema, value, rootOnChange, []);
      return memoState.props;
    }
    return getUpToDateProps(rootSchema, value, rootOnChange, memoState, []);
  };
}

function ConditionalFieldInput(_ref) {
  let {
    schema,
    autoFocus,
    discriminant,
    onChange,
    value,
    forceValidation
  } = _ref;
  const schemaDiscriminant = schema.discriminant;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    gap: "xlarge",
    direction: "column",
    children: [(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_1__/* .AddToPathProvider */ .i1, {
      part: "discriminant",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(schemaDiscriminant.Input, {
        autoFocus: !!autoFocus,
        value: discriminant,
        onChange: onChange,
        forceValidation: forceValidation
      })
    }), [autoFocus, schemaDiscriminant, discriminant, onChange, forceValidation]), isNonChildFieldPreviewProps(value) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_1__/* .AddToPathProvider */ .i1, {
      part: "value",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(InnerFormValueContentFromPreviewProps, {
        forceValidation: forceValidation,
        ...value
      })
    })]
  });
}

const previewPropsToValueConverter = {
  child() {
    return null;
  },
  form(props) {
    return props.value;
  },
  array(props) {
    const values = props.elements.map(x => previewPropsToValue(x));
    (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.s)(values, props.elements.map(x => x.key));
    return values;
  },
  conditional(props) {
    return {
      discriminant: props.discriminant,
      value: previewPropsToValue(props.value)
    };
  },
  object(props) {
    return Object.fromEntries(Object.entries(props.fields).map(_ref => {
      let [key, val] = _ref;
      return [key, previewPropsToValue(val)];
    }));
  }
};
function previewPropsToValue(props) {
  return previewPropsToValueConverter[props.schema.kind](props);
}
const valueToUpdaters = {
  child() {
    return undefined;
  },
  form(value) {
    return value;
  },
  array(value, schema) {
    const keys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.a)(value);
    return value.map((x, i) => ({
      key: keys[i],
      value: valueToUpdater(x, schema.element)
    }));
  },
  conditional(value, schema) {
    return {
      discriminant: value.discriminant,
      value: valueToUpdater(value.value, schema.values[value.discriminant.toString()])
    };
  },
  object(value, schema) {
    return Object.fromEntries(Object.entries(schema.fields).map(_ref2 => {
      let [key, schema] = _ref2;
      return [key, valueToUpdater(value[key], schema)];
    }));
  }
};
function valueToUpdater(value, schema) {
  return valueToUpdaters[schema.kind](value, schema);
}
function setValueToPreviewProps(value, props) {
  if (isKind(props, 'child')) {
    // child fields can't be updated through preview props, so we don't do anything here
    return;
  }
  if (isKind(props, 'form') || isKind(props, 'object') || isKind(props, 'array')) {
    props.onChange(valueToUpdater(value, props.schema));
    return;
  }
  if (isKind(props, 'conditional')) {
    const updater = valueToUpdater(value, props.schema);
    props.onChange(updater.discriminant, updater.value);
    return;
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_14__.assertNever)(props);
}

// this exists because for props.schema.kind === 'form', ts doesn't narrow props, only props.schema
function isKind(props, kind) {
  return props.schema.kind === kind;
}

function ArrayFieldInput(props) {
  const labelId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();
  const descriptionId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_21__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  const [modalState, setModalState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    state: 'closed'
  });
  const onModalChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(cb => {
    setModalState(state => {
      if (state.state === 'open') {
        return {
          state: 'open',
          forceValidation: state.forceValidation,
          value: cb(state.value),
          index: state.index
        };
      }
      return state;
    });
  }, [setModalState]);
  const formId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();
  const modalStateIndex = modalState.state === 'open' ? modalState.index : undefined;
  const slugInfo = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    if (props.schema.slugField === undefined || modalState.state !== 'open' || props.schema.element.kind !== 'object') {
      return;
    }
    const val = previewPropsToValue(props);
    const schema = props.schema.element.fields;
    const slugField = props.schema.slugField;
    const slugs = new Set(val.filter((x, i) => i !== modalStateIndex).map(x => (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_17__.m)({
      schema,
      slugField
    }, x)));
    return {
      slugs,
      field: slugField,
      glob: '*'
    };
  }, [modalStateIndex, props, modalState.state]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    elementType: "section",
    gap: "medium",
    role: "group",
    "aria-labelledby": labelId,
    "aria-describedby": props.schema.description ? descriptionId : undefined,
    direction: "column",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_7__/* .FieldLabel */ .Qy, {
      elementType: "h3",
      id: labelId,
      children: props.schema.label
    }), props.schema.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__.Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.schema.description
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__/* .ActionButton */ .Kk, {
      autoFocus: props.autoFocus,
      onPress: () => {
        setModalState({
          state: 'open',
          value: (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_15__.g)(props.schema.element),
          forceValidation: false,
          index: undefined
        });
      },
      alignSelf: "start",
      children: stringFormatter.format('add')
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ArrayFieldListView, {
      ...props,
      labelId: labelId,
      onOpenItem: idx => {
        setModalState({
          state: 'open',
          value: previewPropsToValue(props.elements[idx]),
          forceValidation: false,
          index: idx
        });
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ArrayFieldValidationMessages, {
      ...props
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_5__/* .DialogContainer */ .TW, {
      onDismiss: () => {
        setModalState({
          state: 'closed'
        });
      },
      children: (() => {
        if (modalState.state !== 'open' || props.schema.element.kind === 'child') {
          return;
        }
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_5__/* .Dialog */ .Vq, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__.Heading, {
            children: "Edit item"
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_slots__WEBPACK_IMPORTED_MODULE_11__/* .Content */ .VY, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
              id: formId,
              elementType: "form",
              onSubmit: event => {
                if (event.target !== event.currentTarget) return;
                event.preventDefault();
                if (modalState.state !== 'open') return;
                if (!(0,_errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.c)(props.schema.element, modalState.value, undefined)) {
                  setModalState(state => ({
                    ...state,
                    forceValidation: true
                  }));
                  return;
                }
                if (modalState.index === undefined) {
                  props.onChange([...props.elements.map(x => ({
                    key: x.key
                  })), {
                    key: undefined,
                    value: valueToUpdater(modalState.value, props.schema.element)
                  }]);
                } else {
                  setValueToPreviewProps(modalState.value, props.elements[modalState.index]);
                }
                setModalState({
                  state: 'closed'
                });
              },
              direction: "column",
              gap: "xxlarge",
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ArrayFieldItemModalContent, {
                onChange: onModalChange,
                schema: props.schema.element,
                value: modalState.value,
                slugField: slugInfo
              })
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__/* .ButtonGroup */ .hE, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__/* .Button */ .zx, {
              onPress: () => {
                setModalState({
                  state: 'closed'
                });
              },
              children: stringFormatter.format('cancel')
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__/* .Button */ .zx, {
              form: formId,
              prominence: "high",
              type: "submit",
              children: modalState.index === undefined ? stringFormatter.format('add') : 'Done'
            })]
          })]
        });
      })()
    })]
  });
}
function ArrayFieldValidationMessages(props) {
  var _props$schema$validat, _props$schema$validat2, _props$schema$validat3, _props$schema$validat4;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: props.forceValidation && (((_props$schema$validat = props.schema.validation) === null || _props$schema$validat === void 0 ? void 0 : (_props$schema$validat2 = _props$schema$validat.length) === null || _props$schema$validat2 === void 0 ? void 0 : _props$schema$validat2.min) !== undefined && props.elements.length < props.schema.validation.length.min ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_7__/* .FieldMessage */ .nd, {
      children: ["Must have at least ", props.schema.validation.length.min, " item", props.schema.validation.length.min === 1 ? '' : 's']
    }) : ((_props$schema$validat3 = props.schema.validation) === null || _props$schema$validat3 === void 0 ? void 0 : (_props$schema$validat4 = _props$schema$validat3.length) === null || _props$schema$validat4 === void 0 ? void 0 : _props$schema$validat4.max) !== undefined && props.elements.length > props.schema.validation.length.max ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_7__/* .FieldMessage */ .nd, {
      children: ["Must have at most ", props.schema.validation.length.max, " item", props.schema.validation.length.max === 1 ? '' : 's']
    }) : undefined)
  });
}
function ArrayFieldListView(props) {
  let onMove = (keys, target) => {
    const targetIndex = props.elements.findIndex(x => x.key === target.key);
    if (targetIndex === -1) return;
    const allKeys = props.elements.map(x => ({
      key: x.key
    }));
    const indexToMoveTo = target.dropPosition === 'before' ? targetIndex : targetIndex + 1;
    const indices = keys.map(key => allKeys.findIndex(x => x.key === key));
    props.onChange(move(allKeys, indices, indexToMoveTo));
  };
  const dragType = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => Math.random().toString(36), []);
  let {
    dragAndDropHooks
  } = (0,_keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_6__/* .useDragAndDrop */ .Y)({
    getItems(keys) {
      // Use a drag type so the items can only be reordered within this list
      // and not dragged elsewhere.
      return [...keys].map(key => {
        key = JSON.stringify(key);
        return {
          [dragType]: key,
          'text/plain': key
        };
      });
    },
    getAllowedDropOperations() {
      return ['move', 'cancel'];
    },
    async onDrop(e) {
      if (e.target.type !== 'root' && e.target.dropPosition !== 'on') {
        let keys = [];
        for (let item of e.items) {
          if (item.kind === 'text') {
            let key;
            if (item.types.has(dragType)) {
              key = JSON.parse(await item.getText(dragType));
              keys.push(key);
            } else if (item.types.has('text/plain')) {
              // Fallback for Chrome Android case: https://bugs.chromium.org/p/chromium/issues/detail?id=1293803
              // Multiple drag items are contained in a single string so we need to split them out
              key = await item.getText('text/plain');
              keys = key.split('\n').map(val => val.replaceAll('"', ''));
            }
          }
        }
        onMove(keys, e.target);
      }
    },
    getDropOperation(target) {
      if (target.type === 'root' || target.dropPosition === 'on') {
        return 'cancel';
      }
      return 'move';
    }
  });
  const onRemoveKey = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.u)(key => {
    props.onChange(props.elements.map(x => ({
      key: x.key
    })).filter(val => val.key !== key));
  });
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_21__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_10__/* .ListView */ .B, {
    "aria-labelledby": props.labelId,
    items: props.elements,
    dragAndDropHooks: dragAndDropHooks,
    height: props.elements.length ? undefined : 'scale.2000',
    renderEmptyState: () => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
      direction: "column",
      gap: "large",
      alignItems: "center",
      justifyContent: "center",
      height: "100%",
      padding: "regular",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__.Text, {
        elementType: "h3",
        align: "center",
        color: "neutralSecondary",
        size: "large",
        weight: "medium",
        children: "Empty list"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__.Text, {
        align: "center",
        color: "neutralTertiary",
        children: "Add the first item to see it here."
      })]
    }),
    onAction: key => {
      const idx = props.elements.findIndex(x => x.key === key);
      if (idx === -1) return;
      props.onOpenItem(idx);
    },
    children: item => {
      var _props$schema$itemLab, _props$schema;
      const label = ((_props$schema$itemLab = (_props$schema = props.schema).itemLabel) === null || _props$schema$itemLab === void 0 ? void 0 : _props$schema$itemLab.call(_props$schema, item)) || `Item ${props.elements.indexOf(item) + 1}`;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_10__/* .Item */ .c, {
        textValue: label,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_13__.Text, {
          children: label
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_12__/* .TooltipTrigger */ .a, {
          placement: "start",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_4__/* .ActionButton */ .Kk, {
            onPress: () => {
              onRemoveKey(item.key);
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_8__/* .Icon */ .J, {
              src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_9__/* .trash2Icon */ .S
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_12__/* .Tooltip */ .u, {
            tone: "critical",
            children: stringFormatter.format('delete')
          })]
        })]
      }, item.key);
    }
  });
}

// https://github.com/adobe/react-spectrum/blob/97ff9f95d91befaf87251e52ea484f81daae8f3a/packages/%40react-stately/data/src/useListData.ts#L263
function move(items, indices, toIndex) {
  // Shift the target down by the number of items being moved from before the target
  toIndex -= indices.filter(index => index < toIndex).length;
  let moves = indices.map(from => ({
    from,
    to: toIndex++
  }));

  // Shift later from indices down if they have a larger index
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;
    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a) {
        moves[j].from--;
      }
    }
  }

  // Interleave the moves so they can be applied one by one rather than all at once
  for (let i = 0; i < moves.length; i++) {
    let a = moves[i];
    for (let j = moves.length - 1; j > i; j--) {
      let b = moves[j];
      if (b.from < a.to) {
        a.to++;
      } else {
        b.from++;
      }
    }
  }
  let copy = items.slice();
  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }
  return copy;
}
function ArrayFieldItemModalContent(props) {
  const previewProps = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => createGetPreviewProps(props.schema, props.onChange, () => undefined), [props.schema, props.onChange])(props.value);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(FormValueContentFromPreviewProps, {
    slugField: props.slugField,
    autoFocus: true,
    ...previewProps
  });
}

function isNonChildFieldPreviewProps(props) {
  return props.schema.kind !== 'child';
}
function getInputComponent(schema) {
  if (schema.kind === 'object') {
    var _schema$Input;
    return (_schema$Input = schema.Input) !== null && _schema$Input !== void 0 ? _schema$Input : _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_2__/* .ObjectFieldInput */ .v;
  }
  if (schema.kind === 'conditional') {
    var _schema$Input2;
    return (_schema$Input2 = schema.Input) !== null && _schema$Input2 !== void 0 ? _schema$Input2 : ConditionalFieldInput;
  }
  if (schema.kind === 'array') {
    var _schema$Input3;
    return (_schema$Input3 = schema.Input) !== null && _schema$Input3 !== void 0 ? _schema$Input3 : ArrayFieldInput;
  }
  return schema.Input;
}
const InnerFormValueContentFromPreviewProps = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function InnerFormValueContentFromPreview(props) {
  let Input = getInputComponent(props.schema);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(Input, {
    ...props,
    autoFocus: !!props.autoFocus,
    forceValidation: !!props.forceValidation
  });
});
const emptyArray = [];
const FormValueContentFromPreviewProps = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function FormValueContentFromPreview(_ref) {
  let {
    slugField,
    ...props
  } = _ref;
  let Input = getInputComponent(props.schema);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_1__/* .PathContextProvider */ .o, {
    value: emptyArray,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_1__/* .SlugFieldProvider */ .Ut, {
      value: slugField,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(Input, {
        ...props,
        autoFocus: !!props.autoFocus,
        forceValidation: !!props.forceValidation
      })
    })
  });
});




/***/ }),

/***/ 836:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ integer),
/* harmony export */   v: () => (/* binding */ validateInteger)
/* harmony export */ });
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63998);
/* harmony import */ var _utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5804);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99034);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);





function validateInteger(validation, value, label) {
  if (value !== null && (typeof value !== 'number' || !Number.isFinite(value))) {
    return `${label} is not a valid whole number`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if (value !== null) {
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined && value < validation.min) {
      return `${label} must be at least ${validation.min}`;
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined && value > validation.max) {
      return `${label} must be at most ${validation.max}`;
    }
  }
}
function integer(_ref) {
  let {
    label,
    defaultValue,
    validation,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_0__/* .IntegerFieldInput */ .E, {
        label: label,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value === 'number') {
        return value;
      }
      throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F('Must be a number');
    },
    validate(value) {
      const message = validateInteger(validation, value, label);
      if (message !== undefined) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(message);
      }
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.a)(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    }
  });
}




/***/ }),

/***/ 97712:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   l: () => (/* binding */ l10nMessages)
/* harmony export */ });
var l10nMessages = {
	"ar-AE": {
		add: "يضيف",
		basedOn: "مرتكز على",
		branchName: "اسم الفرع",
		branches: "الفروع",
		cancel: "يلغي",
		clear: "مسح",
		collection: "مجموعة",
		collections: "المجموعات",
		create: "يخلق",
		createPullRequest: "إنشاء طلب سحب",
		currentBranch: "الفرع الحالي",
		dashboard: "لوحة القيادة",
		defaultBranch: "الفرع الافتراضي",
		"delete": "يمسح",
		deleteBranch: "حذف الفرع",
		edit: "يحرر",
		loading: "جارٍ التحميل",
		newBranch: "فرع جديد",
		otherBranches: "الفروع الأخرى",
		pullRequests: "طلبات السحب",
		save: "يحفظ",
		singleton: "سينجلتون",
		search: "بحث",
		singletons: "الفردي",
		theCurrentlyCheckedOutBranch: "الفرع المعاد حاليا. اختر هذا إذا كنت بحاجة إلى البناء على العمل الحالي من الفرع الحالي.",
		theDefaultBranchInYourRepository: "الفرع الافتراضي في المستودع الخاص بك. اختر هذا لبدء شيء جديد لا يعتمد على فرعك الحالي.",
		viewPullRequests: "عرض طلبات السحب"
	},
	"cs-CZ": {
		add: "Přidat",
		basedOn: "Na základě",
		branchName: "Jméno pobočky",
		branches: "Větve",
		cancel: "zrušení",
		clear: "Vymazat",
		collection: "Sbírka",
		collections: "Sbírky",
		create: "Vytvořit",
		createPullRequest: "Vytvořit požadavek na stažení",
		currentBranch: "Současná pobočka",
		dashboard: "Přístrojová deska",
		defaultBranch: "Výchozí větev",
		"delete": "Vymazat",
		deleteBranch: "Smazat větev",
		edit: "Upravit",
		loading: "Načítání",
		newBranch: "Nová pobočka",
		otherBranches: "Ostatní pobočky",
		pullRequests: "Vytáhněte požadavky",
		save: "Uložit",
		search: "Hledat",
		singletons: "Singletons",
		singleton: "Jedináček",
		theCurrentlyCheckedOutBranch: "Aktuálně odhlášená pobočka. Tuto možnost vyberte, pokud potřebujete navázat na stávající práci z aktuální pobočky.",
		theDefaultBranchInYourRepository: "Výchozí větev ve vašem úložišti. Zvolte tuto možnost, chcete-li začít s něčím novým, co není závislé na vaší aktuální větvi.",
		viewPullRequests: "Zobrazit žádosti o stažení"
	},
	"bg-BG": {
		add: "Добавете",
		basedOn: "Базиран на",
		branchName: "Име на клон",
		branches: "Клонове",
		cancel: "Отказ",
		clear: "Изчисти",
		collection: "колекция",
		collections: "Колекции",
		create: "Създавайте",
		createPullRequest: "Създайте заявка за изтегляне",
		currentBranch: "Текущ клон",
		dashboard: "Табло",
		defaultBranch: "Клон по подразбиране",
		"delete": "Изтрий",
		deleteBranch: "Изтриване на клон",
		edit: "редактиране",
		loading: "Зареждане",
		newBranch: "Нов клон",
		otherBranches: "Други клонове",
		pullRequests: "Заявки за изтегляне",
		save: "Запазване",
		search: "Търсене",
		singleton: "Сингълтън",
		singletons: "Единични",
		theCurrentlyCheckedOutBranch: "Текущо провереният клон. Изберете това, ако трябва да надграждате върху съществуваща работа от текущия клон.",
		theDefaultBranchInYourRepository: "Клонът по подразбиране във вашето хранилище. Изберете това, за да започнете с нещо ново, което не зависи от текущия ви клон.",
		viewPullRequests: "Преглед на заявките за изтегляне"
	},
	"da-DK": {
		add: "Tilføje",
		basedOn: "Baseret på",
		branchName: "Afdelingsnavn",
		branches: "Grene",
		cancel: "Afbestille",
		clear: "Ryd",
		collection: "Kollektion",
		collections: "Samlinger",
		create: "skab",
		createPullRequest: "Opret pull-anmodning",
		currentBranch: "Nuværende filial",
		dashboard: "Dashboard",
		defaultBranch: "Standard gren",
		"delete": "Slet",
		deleteBranch: "Slet filial",
		edit: "Redigere",
		loading: "Indlæser",
		newBranch: "Ny filial",
		otherBranches: "Andre grene",
		pullRequests: "Træk anmodninger",
		save: "Gemme",
		search: "Søg",
		singleton: "Singleton",
		singletons: "Singletoner",
		theCurrentlyCheckedOutBranch: "Den aktuelt tjekkede filial. Vælg dette, hvis du skal bygge videre på eksisterende arbejde fra den nuværende filial.",
		theDefaultBranchInYourRepository: "Standardgrenen i dit lager. Vælg dette for at starte på noget nyt, der ikke er afhængigt af din nuværende filial.",
		viewPullRequests: "Se pull-anmodninger"
	},
	"el-GR": {
		add: "Προσθήκη",
		basedOn: "Βασισμένο στο",
		branchName: "Όνομα υποκαταστήματος",
		branches: "Κλαδια δεντρου",
		cancel: "Ματαίωση",
		clear: "Καθαρισμός",
		collection: "Συλλογή",
		create: "Δημιουργώ",
		collections: "Συλλογές",
		createPullRequest: "Δημιουργία αιτήματος έλξης",
		currentBranch: "Τρέχον υποκατάστημα",
		dashboard: "Ταμπλό",
		defaultBranch: "Προεπιλεγμένος κλάδος",
		"delete": "Διαγράφω",
		deleteBranch: "Διαγραφή υποκαταστήματος",
		edit: "Επεξεργασία",
		loading: "Φόρτωση",
		otherBranches: "Άλλα υποκαταστήματα",
		newBranch: "Νέο υποκατάστημα",
		pullRequests: "Τραβήξτε αιτήματα",
		save: "Αποθηκεύσετε",
		search: "Αναζήτηση",
		singleton: "Μοναδικό χαρτί",
		singletons: "Singletons",
		theCurrentlyCheckedOutBranch: "Το υποκατάστημα που ελέγχεται αυτήν τη στιγμή. Επιλέξτε αυτό εάν χρειάζεται να βασιστείτε σε υπάρχουσες εργασίες από τον τρέχοντα κλάδο.",
		theDefaultBranchInYourRepository: "Ο προεπιλεγμένος κλάδος στο αποθετήριο σας. Επιλέξτε αυτό για να ξεκινήσετε κάτι νέο που δεν εξαρτάται από το τρέχον υποκατάστημά σας.",
		viewPullRequests: "Προβολή αιτημάτων έλξης"
	},
	"en-US": {
		add: "Add",
		basedOn: "Based on",
		branchName: "Branch name",
		branches: "Branches",
		cancel: "Cancel",
		clear: "Clear",
		collection: "Collection",
		collections: "Collections",
		create: "Create",
		currentBranch: "Current branch",
		createPullRequest: "Create pull request",
		dashboard: "Dashboard",
		defaultBranch: "Default branch",
		"delete": "Delete",
		deleteBranch: "Delete branch",
		edit: "Edit",
		loading: "Loading",
		newBranch: "New branch…",
		otherBranches: "Other branches",
		pullRequests: "Pull requests",
		save: "Save",
		search: "Search",
		singletons: "Singletons",
		singleton: "Singleton",
		theCurrentlyCheckedOutBranch: "The currently checked out branch. Choose this if you need to build on existing work from the current branch.",
		theDefaultBranchInYourRepository: "The default branch in your repository. Choose this to start something new that's not dependent on your current branch.",
		viewPullRequests: "View pull requests"
	},
	"es-ES": {
		add: "Agregar",
		basedOn: "Residencia en",
		branches: "Sucursales",
		branchName: "Nombre de la sucursal",
		cancel: "Cancelar",
		clear: "Borrar",
		collection: "Colección",
		collections: "Colecciones",
		createPullRequest: "Crear solicitud de extracción",
		create: "Crear",
		dashboard: "Panel",
		currentBranch: "Rama actual",
		defaultBranch: "Rama predeterminada",
		"delete": "Borrar",
		deleteBranch: "Eliminar rama",
		edit: "Editar",
		loading: "Cargando",
		newBranch: "Nueva sucursal",
		otherBranches: "Otras sucursales",
		pullRequests: "Solicitudes de extracción",
		save: "Ahorrar",
		search: "Buscar",
		singleton: "Semifallo",
		singletons: "Solteros",
		theCurrentlyCheckedOutBranch: "La sucursal actualmente desprotegida. Elija esto si necesita desarrollar el trabajo existente de la rama actual.",
		theDefaultBranchInYourRepository: "La rama predeterminada en su repositorio. Elija esto para comenzar algo nuevo que no dependa de su sucursal actual.",
		viewPullRequests: "Ver solicitudes de extracción"
	},
	"fi-FI": {
		add: "Lisätä",
		basedOn: "Perustuen",
		branchName: "Sivukonttorin nimi",
		branches: "Oksat",
		cancel: "Tühista",
		clear: "Kirkas",
		collection: "Kokoelma",
		collections: "Kokoelmat",
		create: "Luoda",
		currentBranch: "Nykyinen haara",
		createPullRequest: "Luo vetopyyntö",
		defaultBranch: "Oletushaara",
		dashboard: "Kojelauta",
		"delete": "Poistaa",
		deleteBranch: "Poista haara",
		edit: "Muokata",
		loading: "Ladataan",
		newBranch: "Uusi haara",
		otherBranches: "Muut haarat",
		pullRequests: "Vedä pyyntöjä",
		save: "Tallentaa",
		search: "Hae",
		singleton: "Singleton",
		singletons: "Singletons",
		theCurrentlyCheckedOutBranch: "Tällä hetkellä uloskirjautunut sivuliike. Valitse tämä, jos haluat rakentaa nykyisen haaran olemassa olevaan työhön.",
		theDefaultBranchInYourRepository: "Oletushaara arkistossasi. Valitse tämä aloittaaksesi jotain uutta, joka ei ole riippuvainen nykyisestä haarastasi.",
		viewPullRequests: "Näytä vetopyynnöt"
	},
	"fr-FR": {
		add: "Ajouter",
		branchName: "Nom de la filiale",
		basedOn: "Basé sur",
		branches: "Branches",
		cancel: "Annuler",
		clear: "Effacer",
		collection: "Collection",
		collections: "Collections",
		create: "Créer",
		createPullRequest: "Créer une demande d'extraction",
		currentBranch: "Succursale actuelle",
		dashboard: "Tableau de bord",
		defaultBranch: "Branche par défaut",
		"delete": "Supprimer",
		deleteBranch: "Supprimer la branche",
		edit: "Modifier",
		loading: "Chargement en cours",
		newBranch: "Nouvelle branche",
		otherBranches: "Autres succursales",
		pullRequests: "Demandes d'extraction",
		save: "Sauvegarder",
		search: "Rechercher",
		singleton: "Singleton",
		singletons: "Célibataires",
		theCurrentlyCheckedOutBranch: "La branche actuellement extraite. Choisissez cette option si vous devez vous appuyer sur le travail existant de la branche actuelle.",
		theDefaultBranchInYourRepository: "La branche par défaut de votre référentiel. Choisissez ceci pour commencer quelque chose de nouveau qui ne dépend pas de votre branche actuelle.",
		viewPullRequests: "Afficher les demandes d'extraction"
	},
	"hr-HR": {
		basedOn: "Na temelju",
		add: "Dodati",
		branches: "Podružnice",
		branchName: "Naziv podružnice",
		cancel: "Otkazati",
		clear: "Izbriši",
		collection: "Kolekcija",
		collections: "Zbirke",
		create: "Stvoriti",
		createPullRequest: "Kreirajte zahtjev za povlačenjem",
		currentBranch: "Trenutna grana",
		dashboard: "Nadzorna ploča",
		defaultBranch: "Zadana grana",
		"delete": "Izbrisati",
		deleteBranch: "Izbriši granu",
		edit: "Uredi",
		loading: "Učitavam",
		newBranch: "Nova grana",
		pullRequests: "Zahtjevi za povlačenjem",
		otherBranches: "Ostale grane",
		save: "Uštedjeti",
		search: "Traži",
		singletons: "Samci",
		singleton: "samac",
		theCurrentlyCheckedOutBranch: "Trenutno odjavljena poslovnica. Odaberite ovo ako trebate graditi na postojećem radu iz trenutne grane.",
		theDefaultBranchInYourRepository: "Zadana grana u vašem spremištu. Odaberite ovo da započnete nešto novo što ne ovisi o vašoj trenutnoj grani.",
		viewPullRequests: "Pregledajte zahtjeve za povlačenjem"
	},
	"he-IL": {
		add: "לְהוֹסִיף",
		basedOn: "מבוסס על",
		branchName: "שם הסניף",
		branches: "ענפים",
		cancel: "לְבַטֵל",
		collection: "אוסף",
		clear: "נקי",
		create: "לִיצוֹר",
		collections: "אוספים",
		createPullRequest: "צור בקשת משיכה",
		currentBranch: "סניף נוכחי",
		dashboard: "לוּחַ מַחווָנִים",
		defaultBranch: "סניף ברירת מחדל",
		"delete": "לִמְחוֹק",
		deleteBranch: "מחק סניף",
		edit: "לַעֲרוֹך",
		loading: "טוען",
		newBranch: "סניף חדש",
		otherBranches: "סניפים אחרים",
		pullRequests: "משוך בקשות",
		save: "להציל",
		search: "חפש",
		singletons: "רווקים",
		singleton: "קְלָף בּוֹדֵד",
		theCurrentlyCheckedOutBranch: "הסניף שנקבע כעת. בחר באפשרות זו אם אתה צריך לבנות על עבודה קיימת מהסניף הנוכחי.",
		theDefaultBranchInYourRepository: "סניף ברירת המחדל במאגר שלך. בחר באפשרות זו כדי להתחיל משהו חדש שאינו תלוי בסניף הנוכחי שלך.",
		viewPullRequests: "הצג בקשות משיכה"
	},
	"hu-HU": {
		add: "Hozzáadás",
		basedOn: "Alapján",
		branchName: "Fiók neve",
		cancel: "Megszünteti",
		branches: "Ágak",
		clear: "Törlés",
		collection: "Gyűjtemény",
		collections: "Gyűjtemények",
		create: "Teremt",
		createPullRequest: "Lehívási kérelem létrehozása",
		currentBranch: "Jelenlegi ág",
		defaultBranch: "Alapértelmezett ág",
		dashboard: "Irányítópult",
		"delete": "Töröl",
		deleteBranch: "Elágazás törlése",
		edit: "Szerkesztés",
		loading: "Betöltés folyamatban",
		newBranch: "Új ág",
		otherBranches: "Egyéb ágak",
		pullRequests: "Lehívási kérések",
		save: "Megment",
		search: "Keresés",
		singleton: "szingli",
		singletons: "Singletons",
		theDefaultBranchInYourRepository: "Az alapértelmezett ág az adattárban. Válassza ezt, ha valami újat szeretne indítani, amely nem függ az aktuális ágtól.",
		theCurrentlyCheckedOutBranch: "A jelenleg kivett fiók. Válassza ezt, ha az aktuális ág meglévő munkájára kell építenie.",
		viewPullRequests: "Lehívási kérelmek megtekintése"
	},
	"it-IT": {
		add: "Aggiungere",
		basedOn: "Basato su",
		branchName: "Nome ramo",
		branches: "Rami",
		cancel: "Annulla",
		clear: "Cancella",
		collection: "Collezione",
		collections: "Collezioni",
		create: "Creare",
		createPullRequest: "Crea richiesta pull",
		currentBranch: "Ramo attuale",
		dashboard: "Pannello di controllo",
		defaultBranch: "Ramo predefinito",
		"delete": "Eliminare",
		deleteBranch: "Elimina ramo",
		edit: "Modificare",
		loading: "Caricamento in corso",
		newBranch: "Nuova filiale",
		otherBranches: "Altri rami",
		pullRequests: "Richieste pull",
		save: "Salva",
		singleton: "Singleton",
		search: "Cerca",
		theCurrentlyCheckedOutBranch: "La filiale attualmente verificata. Scegli questa opzione se devi basarti su un lavoro esistente dal ramo corrente.",
		singletons: "Singletons",
		theDefaultBranchInYourRepository: "Il ramo predefinito nel tuo repository. Scegli questa opzione per iniziare qualcosa di nuovo che non dipenda dal tuo ramo attuale.",
		viewPullRequests: "Visualizza le richieste pull"
	},
	"ja-JP": {
		add: "追加",
		basedOn: "に基づく",
		branchName: "支店名",
		branches: "支店",
		cancel: "キャンセル",
		clear: "クリア",
		collections: "コレクション",
		collection: "コレクション",
		create: "作成",
		createPullRequest: "プルリクエストを作成",
		currentBranch: "現在のブランチ",
		dashboard: "ダッシュボード",
		defaultBranch: "デフォルトのブランチ",
		"delete": "消去",
		deleteBranch: "ブランチを削除",
		edit: "編集",
		loading: "読み込み中",
		newBranch: "新しい支店",
		pullRequests: "プルリクエスト",
		otherBranches: "その他の支店",
		search: "検索",
		save: "保存",
		singleton: "シングルトン",
		singletons: "シングルトン",
		theCurrentlyCheckedOutBranch: "現在チェックアウトされているブランチ。 現在のブランチの既存の作業に基づいて構築する必要がある場合は、これを選択してください。",
		theDefaultBranchInYourRepository: "リポジトリのデフォルト ブランチ。 これを選択して、現在のブランチに依存しない新しい何かを開始します。",
		viewPullRequests: "プル リクエストを表示"
	},
	"lt-LT": {
		add: "Papildyti",
		branchName: "Filialo pavadinimas",
		basedOn: "Remiantis",
		branches: "Filialai",
		cancel: "Atšaukti",
		clear: "Skaidrus",
		collection: "Kolekcija",
		collections: "Kolekcijos",
		create: "Sukurti",
		createPullRequest: "Sukurti ištraukimo užklausą",
		currentBranch: "Dabartinis filialas",
		dashboard: "Prietaisų skydelis",
		defaultBranch: "Numatytoji šaka",
		"delete": "Ištrinti",
		deleteBranch: "Ištrinti šaką",
		edit: "Redaguoti",
		loading: "Įkeliama",
		newBranch: "Naujas filialas",
		otherBranches: "Kitos šakos",
		pullRequests: "Ištraukti užklausas",
		save: "Sutaupyti",
		search: "Ieškoti",
		singletons: "Vienišiai",
		singleton: "vienvietis",
		theCurrentlyCheckedOutBranch: "Šiuo metu išregistruotas filialas. Pasirinkite tai, jei reikia remtis esamu darbu iš dabartinės šakos.",
		theDefaultBranchInYourRepository: "Numatytoji šaka jūsų saugykloje. Pasirinkite tai, kad pradėtumėte ką nors naujo, nepriklausančio nuo dabartinės šakos.",
		viewPullRequests: "Peržiūrėkite ištraukimo užklausas"
	},
	"ko-KR": {
		add: "추가하다",
		basedOn: "기반으로",
		branchName: "지점명",
		branches: "가지",
		cancel: "취소",
		clear: "지우기",
		collection: "수집",
		collections: "컬렉션",
		create: "만들다",
		createPullRequest: "풀 요청 생성",
		currentBranch: "현재 지점",
		dashboard: "계기반",
		defaultBranch: "기본 분기",
		"delete": "삭제",
		deleteBranch: "분기 삭제",
		edit: "편집하다",
		loading: "로드 중",
		newBranch: "새 지점",
		otherBranches: "기타 지점",
		pullRequests: "풀 리퀘스트",
		search: "검색",
		save: "구하다",
		singleton: "하나씩 일어나는 것",
		singletons: "싱글톤",
		theCurrentlyCheckedOutBranch: "현재 체크아웃된 브랜치. 현재 브랜치의 기존 작업을 기반으로 빌드해야 하는 경우 이 옵션을 선택하세요.",
		theDefaultBranchInYourRepository: "리포지토리의 기본 브랜치입니다. 현재 분기에 의존하지 않는 새로운 것을 시작하려면 이것을 선택하십시오.",
		viewPullRequests: "풀 요청 보기"
	},
	"lv-LV": {
		add: "Pievienot",
		basedOn: "Balstoties uz",
		branchName: "Filiāles nosaukums",
		branches: "Nozares",
		cancel: "Atcelt",
		collection: "Kolekcija",
		clear: "Notīrīt",
		collections: "Kolekcijas",
		createPullRequest: "Izveidot izvilkšanas pieprasījumu",
		currentBranch: "Pašreizējā filiāle",
		create: "Izveidot",
		dashboard: "Mērinstrumentu panelis",
		defaultBranch: "Noklusējuma filiāle",
		"delete": "Dzēst",
		deleteBranch: "Dzēst filiāli",
		edit: "Rediģēt",
		loading: "Notiek ielāde",
		newBranch: "Jauna filiāle",
		otherBranches: "Citas filiāles",
		pullRequests: "Izvilkšanas pieprasījumi",
		save: "Saglabāt",
		search: "Meklēt",
		singleton: "Singleton",
		singletons: "Vientuļi",
		theDefaultBranchInYourRepository: "Noklusējuma filiāle jūsu repozitorijā. Izvēlieties šo, lai sāktu kaut ko jaunu, kas nav atkarīgs no jūsu pašreizējās filiāles.",
		theCurrentlyCheckedOutBranch: "Pašlaik izrakstītā filiāle. Izvēlieties šo, ja vēlaties izmantot esošo darbu no pašreizējās filiāles.",
		viewPullRequests: "Skatīt izvilkšanas pieprasījumus"
	},
	"nb-NO": {
		add: "Legg til",
		basedOn: "Basert på",
		branchName: "Filialnavn",
		cancel: "Avbryt",
		branches: "Grener",
		clear: "Tøm",
		collection: "Samling",
		collections: "Samlinger",
		create: "Skape",
		createPullRequest: "Opprett pull-forespørsel",
		currentBranch: "Nåværende gren",
		dashboard: "Dashbord",
		defaultBranch: "Standard gren",
		"delete": "Slett",
		deleteBranch: "Slett filial",
		edit: "Redigere",
		loading: "Laster inn",
		newBranch: "Ny gren",
		otherBranches: "Andre grener",
		pullRequests: "Trekk forespørsler",
		save: "Lagre",
		search: "Søk",
		singleton: "Singleton",
		singletons: "Singletoner",
		theCurrentlyCheckedOutBranch: "Den utsjekkede grenen. Velg dette hvis du skal bygge på eksisterende arbeid fra gjeldende gren.",
		viewPullRequests: "Se pull-forespørsler",
		theDefaultBranchInYourRepository: "Standardgrenen i depotet ditt. Velg dette for å starte noe nytt som ikke er avhengig av din nåværende filial."
	},
	"nl-NL": {
		add: "Toevoegen",
		basedOn: "Gebaseerd op",
		branchName: "Filiaal naam",
		branches: "Takken",
		cancel: "Annuleren",
		clear: "Helder",
		collection: "Verzameling",
		collections: "Collecties",
		create: "Creëren",
		createPullRequest: "Pull-aanvraag maken",
		currentBranch: "Huidige tak",
		dashboard: "Dashboard",
		defaultBranch: "Standaard filiaal",
		"delete": "Verwijderen",
		deleteBranch: "Filiaal verwijderen",
		edit: "Bewerking",
		loading: "Laden",
		newBranch: "Nieuwe tak",
		otherBranches: "Andere takken",
		pullRequests: "Trek verzoeken",
		search: "Zoeken",
		save: "Redden",
		singleton: "eenling",
		singletons: "Eenlingen",
		theCurrentlyCheckedOutBranch: "Het momenteel uitgecheckte filiaal. Kies dit als u moet voortbouwen op bestaand werk van de huidige branch.",
		theDefaultBranchInYourRepository: "De standaard branch in uw repository. Kies dit om iets nieuws te starten dat niet afhankelijk is van uw huidige branche.",
		viewPullRequests: "Bekijk pull-aanvragen"
	},
	"pl-PL": {
		add: "Dodać",
		basedOn: "Oparte na",
		branchName: "Nazwa filii",
		branches: "Gałęzie",
		cancel: "Anulować",
		clear: "Wyczyść",
		collection: "Kolekcja",
		collections: "Kolekcje",
		create: "Tworzyć",
		createPullRequest: "Utwórz żądanie ściągnięcia",
		currentBranch: "Obecny oddział",
		dashboard: "Panel",
		defaultBranch: "Oddział domyślny",
		"delete": "Usuwać",
		deleteBranch: "Usuń oddział",
		edit: "Edytować",
		loading: "Trwa ładowanie",
		newBranch: "Nowa gałąź",
		otherBranches: "Inne gałęzie",
		pullRequests: "Żądania ściągnięcia",
		save: "Ratować",
		search: "Szukaj",
		singleton: "singel",
		singletons: "Singletony",
		theCurrentlyCheckedOutBranch: "Aktualnie wyewidencjonowana gałąź. Wybierz tę opcję, jeśli chcesz oprzeć się na istniejącej pracy z bieżącej gałęzi.",
		theDefaultBranchInYourRepository: "Domyślna gałąź w twoim repozytorium. Wybierz tę opcję, aby rozpocząć coś nowego, co nie jest zależne od bieżącej gałęzi.",
		viewPullRequests: "Wyświetl żądania ściągnięcia"
	},
	"pt-BR": {
		add: "Adicionar",
		basedOn: "Baseado em",
		branchName: "Nome da filial",
		branches: "Galhos",
		cancel: "Cancelar",
		clear: "Limpar",
		collection: "Coleção",
		collections: "Coleções",
		create: "Criar",
		createPullRequest: "Criar solicitação pull",
		currentBranch: "filial atual",
		dashboard: "Painel",
		defaultBranch: "ramo padrão",
		"delete": "Excluir",
		deleteBranch: "Excluir ramificação",
		edit: "Editar",
		loading: "Carregando",
		newBranch: "Nova filial",
		otherBranches: "Outros ramos",
		pullRequests: "Requisições pull",
		save: "Guardar",
		search: "Pesquisar",
		singleton: "solteiro",
		singletons: "Solteiros",
		theCurrentlyCheckedOutBranch: "A ramificação atualmente com check-out. Escolha esta opção se precisar criar um trabalho existente na ramificação atual.",
		theDefaultBranchInYourRepository: "A ramificação padrão em seu repositório. Escolha isso para iniciar algo novo que não dependa de sua ramificação atual.",
		viewPullRequests: "Ver solicitações pull"
	},
	"pt-PT": {
		add: "Adicionar",
		basedOn: "Baseado em",
		branchName: "Nome da filial",
		branches: "Galhos",
		clear: "Limpar",
		cancel: "Cancelar",
		collection: "Coleção",
		collections: "Coleções",
		create: "Criar",
		createPullRequest: "Criar solicitação pull",
		currentBranch: "filial atual",
		dashboard: "Painel",
		"delete": "Excluir",
		defaultBranch: "ramo padrão",
		deleteBranch: "Excluir ramificação",
		edit: "Editar",
		loading: "A carregar",
		newBranch: "Nova filial",
		otherBranches: "Outros ramos",
		pullRequests: "Requisições pull",
		save: "Guardar",
		search: "Procurar",
		singleton: "solteiro",
		singletons: "Solteiros",
		theCurrentlyCheckedOutBranch: "A ramificação atualmente com check-out. Escolha esta opção se precisar criar um trabalho existente na ramificação atual.",
		theDefaultBranchInYourRepository: "A ramificação padrão em seu repositório. Escolha isso para iniciar algo novo que não dependa de sua ramificação atual.",
		viewPullRequests: "Ver solicitações pull"
	},
	"ro-RO": {
		add: "Adăuga",
		basedOn: "Bazat pe",
		branchName: "Numele sucursalei",
		branches: "Ramuri",
		cancel: "Anulare",
		clear: "Golire",
		collection: "Colectie",
		collections: "Colecții",
		create: "Crea",
		currentBranch: "Filiala actuală",
		createPullRequest: "Creați cerere de tragere",
		dashboard: "Bord",
		defaultBranch: "Ramura implicită",
		"delete": "Șterge",
		deleteBranch: "Ștergeți ramura",
		edit: "Editați",
		loading: "Se încarcă",
		newBranch: "Filiala noua",
		otherBranches: "Alte ramuri",
		pullRequests: "Solicitări de tragere",
		save: "Salvați",
		search: "Căutare",
		singleton: "Singleton",
		singletons: "Singletons",
		theCurrentlyCheckedOutBranch: "Sucursala verificată în prezent. Alegeți acest lucru dacă trebuie să vă bazați pe munca existentă din ramura curentă.",
		theDefaultBranchInYourRepository: "Ramura implicită din depozitul dvs. Alegeți acest lucru pentru a începe ceva nou, care nu depinde de ramura dvs. actuală.",
		viewPullRequests: "Vizualizați solicitările de extragere"
	},
	"ru-RU": {
		add: "Добавлять",
		basedOn: "На основе",
		branchName: "Название филиала",
		branches: "Ветви",
		cancel: "Отмена",
		clear: "Очистить",
		collection: "Коллекция",
		collections: "Коллекции",
		create: "Создавать",
		createPullRequest: "Создать запрос на включение",
		currentBranch: "Текущая ветвь",
		dashboard: "Панель приборов",
		defaultBranch: "Ветка по умолчанию",
		"delete": "Удалить",
		deleteBranch: "Удалить ветку",
		edit: "Редактировать",
		loading: "Загрузка",
		newBranch: "Новая ветка",
		otherBranches: "Другие филиалы",
		pullRequests: "Пулл-реквесты",
		save: "Сохранять",
		search: "Поиск",
		singleton: "Синглтон",
		singletons: "Одиночки",
		theCurrentlyCheckedOutBranch: "Текущая проверенная ветвь. Выберите это, если вам нужно опираться на существующую работу из текущей ветки.",
		theDefaultBranchInYourRepository: "Ветка по умолчанию в вашем репозитории. Выберите это, чтобы начать что-то новое, не зависящее от вашей текущей ветки.",
		viewPullRequests: "Посмотреть пул-реквесты"
	},
	"sk-SK": {
		add: "Pridať",
		basedOn: "Založené na",
		branchName: "Meno pobočky",
		branches: "Pobočky",
		cancel: "Zrušiť",
		clear: "Vymazať",
		collection: "Zbierka",
		collections: "zbierky",
		create: "Vytvorte",
		createPullRequest: "Vytvorte požiadavku na stiahnutie",
		currentBranch: "Aktuálna pobočka",
		dashboard: "Dashboard",
		defaultBranch: "Predvolená vetva",
		"delete": "Odstrániť",
		deleteBranch: "Odstrániť vetvu",
		edit: "Upraviť",
		newBranch: "Nová pobočka",
		loading: "Načítava sa",
		otherBranches: "Ostatné pobočky",
		pullRequests: "Vytiahnite žiadosti",
		search: "Vyhľadávať",
		save: "Uložiť",
		singleton: "Singleton",
		singletons: "Singletons",
		theCurrentlyCheckedOutBranch: "Aktuálne odhlásená pobočka. Túto možnosť vyberte, ak potrebujete stavať na existujúcej práci z aktuálnej pobočky.",
		theDefaultBranchInYourRepository: "Predvolená vetva vo vašom úložisku. Zvoľte túto možnosť, ak chcete začať niečo nové, čo nezávisí od vašej aktuálnej pobočky.",
		viewPullRequests: "Zobraziť požiadavky na stiahnutie"
	},
	"sl-SI": {
		add: "Dodaj",
		branchName: "Ime podružnice",
		basedOn: "Temelji na",
		branches: "Podružnice",
		cancel: "Prekliči",
		clear: "Jasen",
		collection: "Zbirka",
		collections: "Zbirke",
		create: "Ustvari",
		createPullRequest: "Ustvari zahtevo za vleko",
		currentBranch: "Trenutna veja",
		dashboard: "Nadzorna plošča",
		defaultBranch: "Privzeta veja",
		"delete": "Izbriši",
		deleteBranch: "Izbriši vejo",
		edit: "Uredi",
		loading: "Nalaganje",
		newBranch: "Nova podružnica",
		otherBranches: "Druge veje",
		pullRequests: "Zahteve za vlečenje",
		save: "Shrani",
		search: "Iskanje",
		singleton: "Singleton",
		singletons: "Samski",
		theCurrentlyCheckedOutBranch: "Trenutno odjavljena podružnica. To izberite, če morate graditi na obstoječem delu iz trenutne veje.",
		theDefaultBranchInYourRepository: "Privzeta veja v vašem skladišču. Izberite to, da začnete nekaj novega, kar ni odvisno od vaše trenutne veje.",
		viewPullRequests: "Oglejte si zahteve za vlečenje"
	},
	"sr-SP": {
		basedOn: "На бази",
		add: "Додати",
		branchName: "Назив огранка",
		branches: "Огранци",
		clear: "Izbriši",
		cancel: "Поништити, отказати",
		collection: "Цоллецтион",
		collections: "Збирке",
		create: "Креирај",
		createPullRequest: "Креирајте захтев за повлачење",
		currentBranch: "Тренутна грана",
		dashboard: "Командна табла",
		defaultBranch: "Подразумевана грана",
		"delete": "Избриши",
		deleteBranch: "Обриши грану",
		edit: "Уредити",
		loading: "Učitavam",
		newBranch: "Нова грана",
		otherBranches: "Остале гране",
		pullRequests: "Захтеви за повлачење",
		save: "сачувати",
		search: "Pretraga",
		singleton: "Синглетон",
		singletons: "Синглетонс",
		theCurrentlyCheckedOutBranch: "Тренутно одјављена филијала. Изаберите ово ако треба да надоградите постојећи рад из тренутне гране.",
		theDefaultBranchInYourRepository: "Подразумевана грана у вашем спремишту. Изаберите ово да започнете нешто ново што не зависи од ваше тренутне гране.",
		viewPullRequests: "Прегледајте захтеве за повлачењем"
	},
	"sv-SE": {
		add: "Lägg till",
		basedOn: "Baserat på",
		branchName: "Filialens namn",
		branches: "Grenar",
		cancel: "Поништити, отказати",
		clear: "Rensa",
		collection: "Samling",
		collections: "Samlingar",
		create: "Skapa",
		createPullRequest: "Skapa pull-förfrågan",
		currentBranch: "Nuvarande gren",
		dashboard: "instrumentbräda",
		"delete": "Radera",
		defaultBranch: "Standardgren",
		deleteBranch: "Ta bort gren",
		edit: "Redigera",
		loading: "Läser in",
		newBranch: "Ny gren",
		otherBranches: "Andra grenar",
		pullRequests: "Dra förfrågningar",
		save: "Spara",
		search: "Sök",
		singleton: "Singleton",
		singletons: "Singlar",
		theCurrentlyCheckedOutBranch: "Den utcheckade filialen. Välj detta om du behöver bygga på befintligt arbete från den aktuella grenen.",
		theDefaultBranchInYourRepository: "Standardgrenen i ditt arkiv. Välj detta för att starta något nytt som inte är beroende av din nuvarande filial.",
		viewPullRequests: "Visa pull-förfrågningar"
	},
	"tr-TR": {
		add: "Avbryt",
		basedOn: "Dayalı",
		branchName: "şube adı",
		branches: "Şubeler",
		cancel: "iptal etmek",
		clear: "Temizle",
		collection: "Toplamak",
		collections: "Koleksiyonlar",
		create: "Yaratmak",
		createPullRequest: "Çekme isteği oluştur",
		currentBranch: "Mevcut şube",
		dashboard: "Gösterge Paneli",
		defaultBranch: "varsayılan dal",
		"delete": "Silmek",
		deleteBranch: "Şubeyi sil",
		edit: "Düzenlemek",
		loading: "Yükleniyor",
		newBranch: "Yeni dal",
		otherBranches: "Diğer şubeler",
		pullRequests: "Çekme istekleri",
		save: "Kaydetmek",
		search: "Ara",
		singleton: "Tekil",
		singletons: "Singleton'lar",
		theCurrentlyCheckedOutBranch: "Şu anda kontrol edilen şube. Geçerli daldaki mevcut işi geliştirmeniz gerekiyorsa bunu seçin.",
		theDefaultBranchInYourRepository: "Deponuzdaki varsayılan şube. Mevcut şubenize bağlı olmayan yeni bir şey başlatmak için bunu seçin.",
		viewPullRequests: "Çekme isteklerini görüntüle"
	},
	"uk-UA": {
		add: "додати",
		basedOn: "На основі",
		branchName: "Назва гілки",
		branches: "Відділення",
		cancel: "скасувати",
		clear: "Очистити",
		collection: "Колекція",
		collections: "Колекції",
		create: "Створити",
		createPullRequest: "Створити запит на отримання",
		currentBranch: "Поточне відділення",
		dashboard: "Панель приладів",
		defaultBranch: "Гілка за замовчуванням",
		"delete": "Видалити",
		deleteBranch: "Видалити гілку",
		edit: "Редагувати",
		loading: "Завантаження",
		newBranch: "Нова гілка",
		otherBranches: "Інші гілки",
		pullRequests: "Запити на витягування",
		save: "зберегти",
		search: "Пошук",
		singleton: "Синглтон",
		singletons: "Одиночки",
		theCurrentlyCheckedOutBranch: "Поточна перевірена гілка. Виберіть це, якщо вам потрібно створити на основі існуючої роботи з поточної гілки.",
		theDefaultBranchInYourRepository: "Стандартна гілка у вашому сховищі. Виберіть це, щоб почати щось нове, що не залежить від вашої поточної гілки.",
		viewPullRequests: "Перегляд запитів на отримання"
	},
	"zh-CN": {
		basedOn: "基于",
		add: "添加",
		branchName: "分店名称",
		branches: "分支机构",
		cancel: "取消",
		clear: "透明",
		collection: "收藏",
		collections: "收藏品",
		create: "创造",
		createPullRequest: "创建拉取请求",
		currentBranch: "当前分支",
		dashboard: "仪表板",
		defaultBranch: "默认分支",
		"delete": "删除",
		deleteBranch: "删除分支",
		edit: "编辑",
		newBranch: "新分行",
		loading: "正在加载",
		otherBranches: "其他分行",
		pullRequests: "拉取请求",
		save: "节省",
		search: "搜索",
		singleton: "单例",
		singletons: "单例",
		theCurrentlyCheckedOutBranch: "当前签出的分支。 如果您需要在当前分支的现有工作的基础上构建，请选择此项。",
		theDefaultBranchInYourRepository: "存储库中的默认分支。 选择此选项可开始一些不依赖于当前分支的新操作。",
		viewPullRequests: "查看拉取请求"
	},
	"zh-TW": {
		add: "添加",
		basedOn: "基於",
		branchName: "分店名稱",
		branches: "分支機構",
		cancel: "取消",
		clear: "清除",
		collection: "收藏",
		collections: "收藏品",
		create: "創造",
		createPullRequest: "創建拉取請求",
		currentBranch: "當前分支",
		dashboard: "儀表板",
		defaultBranch: "默認分支",
		"delete": "刪除",
		deleteBranch: "刪除分支",
		edit: "編輯",
		loading: "正在載入",
		newBranch: "新分行",
		otherBranches: "其他分行",
		pullRequests: "拉取請求",
		save: "節省",
		singleton: "單例",
		search: "搜尋",
		singletons: "單例",
		theCurrentlyCheckedOutBranch: "當前簽出的分支。 如果您需要在當前分支的現有工作的基礎上構建，請選擇此項。",
		theDefaultBranchInYourRepository: "存儲庫中的默認分支。 選擇此選項可開始一些不依賴於當前分支的新操作。",
		viewPullRequests: "查看拉取請求"
	},
	"de-DE": {
		add: "Hinzufügen",
		branches: "Geäst",
		cancel: "Stornieren",
		clear: "Löschen",
		collection: "Sammlung",
		collections: "Sammlungen",
		create: "Erstellen",
		createPullRequest: "Pull-Request erstellen",
		currentBranch: "Aktueller Zweig",
		dashboard: "Armaturenbrett",
		defaultBranch: "Standardzweig",
		"delete": "Löschen",
		deleteBranch: "Zweig löschen",
		edit: "Bearbeiten",
		loading: "Wird geladen",
		newBranch: "Neue Zweig",
		otherBranches: "Andere Filialen",
		save: "Speichern",
		pullRequests: "Pull-Requests",
		search: "Suchen",
		singleton: "Einzelling",
		singletons: "Singles",
		theCurrentlyCheckedOutBranch: "Der aktuell ausgecheckte Zweig. Wählen Sie diese Option, wenn Sie auf vorhandener Arbeit aus dem aktuellen Zweig aufbauen müssen.",
		theDefaultBranchInYourRepository: "Der Standard-Branch in Ihrem Repository. Wählen Sie dies, um etwas Neues zu starten, das nicht von Ihrem aktuellen Zweig abhängt.",
		viewPullRequests: "Pull-Requests anzeigen",
		branchName: "Zweigname",
		basedOn: "Bezogen auf"
	},
	"et-EE": {
		add: "Lisama",
		basedOn: "Põhineb",
		branchName: "Filiaali nimi",
		branches: "Filiaalid",
		cancel: "Tühista",
		clear: "Puhasta",
		collection: "Kollektsioon",
		collections: "Kollektsioonid",
		create: "Loo",
		createPullRequest: "Loo tõmbamistaotlus",
		currentBranch: "Praegune filiaal",
		dashboard: "Armatuurlaud",
		defaultBranch: "Vaikeharu",
		"delete": "Kustuta",
		deleteBranch: "Kustuta haru",
		edit: "Muuda",
		loading: "Laadimine",
		newBranch: "Uus filiaal",
		otherBranches: "Muud oksad",
		pullRequests: "Tõmbetaotlused",
		save: "Salvesta",
		search: "Otsi",
		singletons: "Üksikud",
		theCurrentlyCheckedOutBranch: "Praegu välja registreeritud filiaal. Valige see, kui peate kasutama praeguse haru olemasolevaid töid.",
		theDefaultBranchInYourRepository: "Vaikeharu teie hoidlas. Valige see, et alustada midagi uut, mis ei sõltu teie praegusest harust.",
		viewPullRequests: "Vaadake tõmbamistaotlusi",
		singleton: "üksikud"
	}
};




/***/ }),

/***/ 31168:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ date),
/* harmony export */   v: () => (/* binding */ validateDate)
/* harmony export */ });
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63998);
/* harmony import */ var _utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5804);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11592);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);





function validateDate(validation, value, label) {
  if (value !== null && !/^\d{4}-\d{2}-\d{2}$/.test(value)) {
    return `${label} is not a valid date`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
  if ((validation !== null && validation !== void 0 && validation.min || validation !== null && validation !== void 0 && validation.max) && value !== null) {
    const date = new Date(value);
    if ((validation === null || validation === void 0 ? void 0 : validation.min) !== undefined) {
      const min = new Date(validation.min);
      if (date < min) {
        return `${label} must be after ${min.toLocaleDateString()}`;
      }
    }
    if ((validation === null || validation === void 0 ? void 0 : validation.max) !== undefined) {
      const max = new Date(validation.max);
      if (date > max) {
        return `${label} must be no later than ${max.toLocaleDateString()}`;
      }
    }
  }
}
function date(_ref) {
  let {
    label,
    defaultValue,
    validation,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_0__/* .DateFieldInput */ .o, {
        validation: validation,
        label: label,
        description: description,
        ...props
      });
    },
    defaultValue() {
      if (defaultValue === undefined) {
        return null;
      }
      if (typeof defaultValue === 'string') {
        return defaultValue;
      }
      const today = new Date();
      const year = today.getFullYear();
      const month = String(today.getMonth() + 1).padStart(2, '0');
      const day = String(today.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F('Must be a string');
      }
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    },
    validate(value) {
      const message = validateDate(validation, value, label);
      if (message !== undefined) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.F(message);
      }
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.a)(value, validation, label);
      return value;
    }
  });
}




/***/ }),

/***/ 46824:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CS: () => (/* binding */ useActiveBlockPopover),
/* harmony export */   Jf: () => (/* binding */ ToolbarSeparator),
/* harmony export */   Li: () => (/* binding */ NotEditable),
/* harmony export */   V2: () => (/* binding */ BlockPopover),
/* harmony export */   dy: () => (/* binding */ ActiveBlockPopoverProvider),
/* harmony export */   oR: () => (/* binding */ BlockPopoverTrigger),
/* harmony export */   qm: () => (/* binding */ BlockWrapper)
/* harmony export */ });
/* harmony import */ var _react_aria_overlays__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(43622);
/* harmony import */ var _react_aria_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(41933);
/* harmony import */ var _react_stately_overlays__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(57817);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91526);
/* harmony import */ var _keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52743);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46792);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48727);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9772);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85916);
'use client';














const BlockPopoverContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
function useBlockPopoverContext() {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(BlockPopoverContext);
  if (!context) {
    throw new Error('useBlockPopoverContext must be used within a BlockPopoverTrigger');
  }
  return context;
}
const typeMatcher = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.n)('code', 'component-block', 'image', 'layout', 'link', 'table', 'heading');
const ActiveBlockPopoverContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);
function useActiveBlockPopover() {
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ActiveBlockPopoverContext);
}
function ActiveBlockPopoverProvider(props) {
  const nodeWithPopover = slate__WEBPACK_IMPORTED_MODULE_8__.Editor.above(props.editor, {
    match: typeMatcher
  });
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(ActiveBlockPopoverContext.Provider, {
    value: nodeWithPopover === null || nodeWithPopover === void 0 ? void 0 : nodeWithPopover[0],
    children: props.children
  });
}
const BlockPopoverTrigger = _ref => {
  let {
    children,
    element
  } = _ref;
  const [trigger, popover] = children;
  const activePopoverElement = useActiveBlockPopover();
  const triggerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const state = (0,_react_stately_overlays__WEBPACK_IMPORTED_MODULE_9__/* .useOverlayTriggerState */ .d)({
    isOpen: activePopoverElement === element
  });
  const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({
    state,
    triggerRef
  }), [state, triggerRef]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxs)(BlockPopoverContext.Provider, {
    value: context,
    children: [/*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(trigger, {
      ref: triggerRef
    }), popover]
  });
};
function BlockPopover(props) {
  const {
    state
  } = useBlockPopoverContext();
  let wrapperRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  return (
    /*#__PURE__*/
    /* @ts-expect-error FIXME: resolve ref inconsistencies */
    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_1__/* .Overlay */ .aV, {
      isOpen: state.isOpen,
      nodeRef: wrapperRef,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(BlockPopoverWrapper, {
        wrapperRef: wrapperRef,
        ...props
      })
    })
  );
}
const BlockPopoverWrapper = _ref2 => {
  let {
    children,
    placement: preferredPlacement = 'bottom'
  } = _ref2;
  let popoverRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  let {
    state,
    triggerRef
  } = useBlockPopoverContext();
  let {
    placement,
    popoverProps
  } = useBlockPopover({
    isNonModal: true,
    isKeyboardDismissDisabled: false,
    placement: preferredPlacement,
    triggerRef,
    popoverRef
  }, state);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
    ref: popoverRef,
    ...popoverProps,
    "data-open": state.isOpen,
    "data-placement": placement,
    contentEditable: false,
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .css */ .iv)({
      backgroundColor: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.color.background.surface,
      // TODO: component token?
      borderRadius: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.radius.medium,
      // TODO: component token?
      border: `${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.border.regular} solid ${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.color.border.emphasis}`,
      boxSizing: 'content-box',
      // resolves measurement/scroll issues related to border
      // boxShadow: `0 0 0 ${tokenSchema.size.border.regular} ${tokenSchema.color.border.emphasis}`,
      minHeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.element.regular,
      minWidth: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.element.regular,
      opacity: 0,
      outline: 0,
      pointerEvents: 'auto',
      position: 'absolute',
      // use filter:drop-shadow instead of box-shadow so the arrow is included
      filter: `drop-shadow(0 1px 4px ${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.color.shadow.regular})`,
      // filter bug in safari: https://stackoverflow.com/questions/56478925/safari-drop-shadow-filter-remains-visible-even-with-hidden-element
      willChange: 'filter',
      userSelect: 'none',
      // placement
      '&[data-placement="top"]': {
        marginBottom: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.space.regular,
        transform: `translateY(${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.space.regular})`
      },
      '&[data-placement="bottom"]': {
        marginTop: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.space.regular,
        transform: `translateY(calc(${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .tokenSchema */ .iK.size.space.regular} * -1))`
      },
      '&[data-open="true"]': {
        opacity: 1,
        transform: `translateX(0) translateY(0)`,
        // enter animation
        transition: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .transition */ .eR)(['opacity', 'transform'], {
          easing: 'easeOut'
        })
      }
    }),
    children: typeof children === 'function' ? children(state.close) : children
  });
};

/**
 * Provides the behavior and accessibility implementation for a popover component.
 * A popover is an overlay element positioned relative to a trigger.
 */
function useBlockPopover(props, state) {
  var _triggerRef$current2;
  let {
    triggerRef,
    popoverRef,
    isNonModal,
    isKeyboardDismissDisabled,
    ...otherProps
  } = props;
  let [isSticky, setSticky] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  let {
    overlayProps,
    underlayProps
  } = (0,_react_aria_overlays__WEBPACK_IMPORTED_MODULE_10__/* .useOverlay */ .Ir)({
    isOpen: state.isOpen,
    onClose: state.close,
    shouldCloseOnBlur: true,
    isDismissable: !isNonModal,
    isKeyboardDismissDisabled: false
  }, popoverRef);

  // stick the popover to the bottom of the viewport instead of flipping
  const containerPadding = 8;
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (state.isOpen) {
      const checkForStickiness = () => {
        var _popoverRef$current, _triggerRef$current;
        const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
        let popoverRect = (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.getBoundingClientRect();
        let triggerRect = (_triggerRef$current = triggerRef.current) === null || _triggerRef$current === void 0 ? void 0 : _triggerRef$current.getBoundingClientRect();
        if (popoverRect && triggerRect) {
          setSticky(triggerRect.bottom + popoverRect.height + containerPadding * 2 > vh && triggerRect.top < vh);
        }
      };
      checkForStickiness();
      window.addEventListener('scroll', checkForStickiness);
      return () => {
        checkForStickiness();
        window.removeEventListener('scroll', checkForStickiness);
      };
    }
  }, [popoverRef, triggerRef, state.isOpen]);
  let {
    overlayProps: positionProps,
    arrowProps,
    placement,
    updatePosition
  } = (0,_react_aria_overlays__WEBPACK_IMPORTED_MODULE_10__/* .useOverlayPosition */ .tN)({
    ...otherProps,
    containerPadding,
    shouldFlip: false,
    targetRef: triggerRef,
    overlayRef: popoverRef,
    isOpen: state.isOpen,
    onClose: undefined
  });

  // force update position when the trigger changes
  let previousBoundingRect = usePrevious((_triggerRef$current2 = triggerRef.current) === null || _triggerRef$current2 === void 0 ? void 0 : _triggerRef$current2.getBoundingClientRect());
  (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_11__/* .useLayoutEffect */ .bt)(() => {
    if (previousBoundingRect) {
      var _triggerRef$current3;
      const currentBoundingRect = (_triggerRef$current3 = triggerRef.current) === null || _triggerRef$current3 === void 0 ? void 0 : _triggerRef$current3.getBoundingClientRect();
      if (currentBoundingRect) {
        const hasChanged = previousBoundingRect.height !== currentBoundingRect.height || previousBoundingRect.width !== currentBoundingRect.width || previousBoundingRect.x !== currentBoundingRect.x || previousBoundingRect.y !== currentBoundingRect.y;
        if (hasChanged) {
          updatePosition();
        }
      }
    }
  }, [previousBoundingRect, triggerRef, updatePosition]);

  // make sure popovers are below modal dialogs and their blanket
  if (positionProps.style) {
    positionProps.style.zIndex = 1;
  }

  // switching to position: fixed will undoubtedly bite me later, but this hack works for now
  if (isSticky) {
    positionProps.style = {
      ...positionProps.style,
      // @ts-expect-error
      maxHeight: null,
      position: 'fixed',
      // @ts-expect-error
      top: null,
      bottom: containerPadding
    };
  }
  return {
    arrowProps,
    placement,
    popoverProps: (0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_11__/* .mergeProps */ .dG)(overlayProps, positionProps),
    underlayProps,
    updatePosition
  };
}
function usePrevious(value) {
  const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    ref.current = value;
  });
  return ref.current;
}

const BlockWrapper = props => {
  let {
    attributes,
    children,
    draggable = false
  } = props;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
    draggable: draggable,
    className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_5__.b,
    ...attributes,
    children: children
  });
};

const NotEditable = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function NotEditable(_ref, ref) {
  let {
    className,
    ...props
  } = _ref;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)("div", {
    ...props,
    ref: ref,
    className: [(0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_2__/* .css */ .iv)({
      userSelect: 'none',
      whiteSpace: 'initial'
    }), className].join(' '),
    contentEditable: false
  });
});

const ToolbarSeparator = () => {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_6__/* .Divider */ .iz, {
    orientation: "vertical",
    flexShrink: 0
  });
};




/***/ }),

/***/ 92603:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D: () => (/* binding */ DocumentEditor),
/* harmony export */   u: () => (/* binding */ useIsInDocumentEditor)
/* harmony export */ });
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46105);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var is_hotkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42950);
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(91526);
/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(68051);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(46792);
/* harmony import */ var _react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(93009);
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(26544);
/* harmony import */ var _keystar_ui_icon_icons_externalLinkIcon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69804);
/* harmony import */ var _keystar_ui_icon_icons_linkIcon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(38758);
/* harmony import */ var _keystar_ui_icon_icons_unlinkIcon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(66333);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(71209);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(74404);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(79798);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(97712);
/* harmony import */ var _index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(46824);
/* harmony import */ var _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(62598);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(48727);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(33531);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(69034);
/* harmony import */ var _keystar_ui_icon_icons_boldIcon__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(60485);
/* harmony import */ var _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(47467);
/* harmony import */ var _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(75434);
/* harmony import */ var _keystar_ui_icon_icons_italicIcon__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(41653);
/* harmony import */ var _keystar_ui_icon_icons_maximizeIcon__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(99071);
/* harmony import */ var _keystar_ui_icon_icons_minimizeIcon__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(76361);
/* harmony import */ var _keystar_ui_icon_icons_plusIcon__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(28273);
/* harmony import */ var _keystar_ui_icon_icons_removeFormattingIcon__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(95778);
/* harmony import */ var _keystar_ui_icon_icons_strikethroughIcon__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(51193);
/* harmony import */ var _keystar_ui_icon_icons_subscriptIcon__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(4030);
/* harmony import */ var _keystar_ui_icon_icons_superscriptIcon__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(63833);
/* harmony import */ var _keystar_ui_icon_icons_typeIcon__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(50839);
/* harmony import */ var _keystar_ui_icon_icons_underlineIcon__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(28315);
/* harmony import */ var _keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(42188);
/* harmony import */ var _keystar_ui_picker__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(21991);
/* harmony import */ var _keystar_ui_icon_icons_alignLeftIcon__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(29031);
/* harmony import */ var _keystar_ui_icon_icons_alignRightIcon__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(23708);
/* harmony import */ var _keystar_ui_icon_icons_alignCenterIcon__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(43453);
/* harmony import */ var _keystar_ui_icon_icons_quoteIcon__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(83157);
/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(4315);
/* harmony import */ var match_sorter__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(11868);
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(16817);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(51227);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(99634);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(62880);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(85578);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(32236);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(85916);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_icon_icons_trashIcon__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(29980);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(86522);
/* harmony import */ var _keystar_ui_icon_icons_minusIcon__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(77153);
/* harmony import */ var _keystar_ui_icon_icons_columnsIcon__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(63620);
/* harmony import */ var _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(93934);
/* harmony import */ var _keystar_ui_icon_icons_listOrderedIcon__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(19463);
/* harmony import */ var _keystar_ui_icon_icons_fileUpIcon__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(22992);
/* harmony import */ var _keystar_ui_icon_icons_imageIcon__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(56573);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(92900);
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(85501);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(11592);
/* harmony import */ var _ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(83002);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(99034);
/* harmony import */ var _ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(10772);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(45533);
/* harmony import */ var _ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(74659);
/* harmony import */ var _ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(3112);
/* harmony import */ var _ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(66855);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(34903);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_70___default = /*#__PURE__*/__webpack_require__.n(_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_70__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(63815);
/* harmony import */ var _ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(16293);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(19047);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(21040);
/* harmony import */ var _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(96949);
/* harmony import */ var _keystar_ui_icon_icons_sheetIcon__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(55219);
/* harmony import */ var _keystar_ui_icon_icons_tableIcon__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(80479);
/* harmony import */ var _keystar_ui_utils__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(47187);
/* harmony import */ var scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(72841);
/* harmony import */ var _react_aria_overlays__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(43622);
/* harmony import */ var _react_stately_list__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(41746);
/* harmony import */ var _react_stately_overlays__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(57817);
/* harmony import */ var _keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(66805);
/* harmony import */ var _keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(52743);
/* harmony import */ var slate_history__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(60071);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(27733);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_81___default = /*#__PURE__*/__webpack_require__.n(mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_81__);
/* harmony import */ var mdast_util_gfm_autolink_literal_from_markdown__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(81411);
/* harmony import */ var micromark_extension_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(45518);
/* harmony import */ var mdast_util_gfm_strikethrough_from_markdown__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(71504);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(26567);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_85___default = /*#__PURE__*/__webpack_require__.n(micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_85__);
/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(222);


































































































const ToolbarStateContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext(null);
function useToolbarState() {
  const toolbarState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ToolbarStateContext);
  if (!toolbarState) {
    throw new Error('ToolbarStateProvider must be used to use useToolbarState');
  }
  return toolbarState;
}
const createToolbarState = (editor, componentBlocks, editorDocumentFeatures) => {
  const locationDocumentFeatures = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.g)(editor, editorDocumentFeatures, componentBlocks) || {
    kind: 'block',
    inlineMarks: 'inherit',
    documentFeatures: {
      dividers: true,
      formatting: {
        alignment: {
          center: true,
          end: true
        },
        blockTypes: {
          blockquote: true,
          code: editorDocumentFeatures.formatting.blockTypes.code
        },
        headings: editorDocumentFeatures.formatting.headings,
        listTypes: {
          ordered: true,
          unordered: true
        }
      },
      layouts: editorDocumentFeatures.layouts,
      links: true,
      images: editorDocumentFeatures.images,
      tables: true
    },
    softBreaks: true,
    componentBlocks: true
  };
  let [maybeCodeBlockEntry] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: node => node.type !== 'code' && (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(node)
  });
  const editorMarks = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.marks(editor) || {};
  const marks = Object.fromEntries(_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.d.map(mark => [mark, {
    isDisabled: locationDocumentFeatures.inlineMarks !== 'inherit' && !locationDocumentFeatures.inlineMarks[mark] || !maybeCodeBlockEntry,
    isSelected: !!editorMarks[mark]
  }]));

  // Editor.marks is "what are the marks that would be applied if text was inserted now"
  // that's not really the UX we want, if we have some a document like this
  // <paragraph>
  //   <text>
  //     <anchor />
  //     content
  //   </text>
  //   <text bold>bold</text>
  //   <text>
  //     content
  //     <focus />
  //   </text>
  // </paragraph>

  // we want bold to be shown as selected even though if you inserted text from that selection, it wouldn't be bold
  // so we look at all the text nodes in the selection to get their marks
  // but only if the selection is expanded because if you're in the middle of some text
  // with your selection collapsed with a mark but you've removed it(i.e. editor.removeMark)
  // the text nodes you're in will have the mark but the ui should show the mark as not being selected
  if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isExpanded(editor.selection)) {
    for (const node of slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
      match: slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText
    })) {
      for (const key of Object.keys(node[0])) {
        if (key === 'insertMenu' || key === 'text') {
          continue;
        }
        if (key in marks) {
          marks[key].isSelected = true;
        }
      }
    }
  }
  let [headingEntry] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('heading')
  });
  let [listEntry] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.a
  });
  let [alignableEntry] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('paragraph', 'heading')
  });

  // (we're gonna use markdown here because the equivelant slate structure is quite large and doesn't add value here)
  // let's imagine a document that looks like this:
  // - thing
  //   1. something<cursor />
  // in the toolbar, you don't want to see that both ordered and unordered lists are selected
  // you want to see only ordered list selected, because
  // - you want to know what list you're actually in, you don't really care about the outer list
  // - when you want to change the list to a unordered list, the unordered list button should be inactive to show you can change to it
  const listTypeAbove = getListTypeAbove(editor);
  return {
    marks,
    textStyles: {
      selected: headingEntry ? headingEntry[0].level : 'normal',
      allowedHeadingLevels: locationDocumentFeatures.kind === 'block' && !listEntry ? locationDocumentFeatures.documentFeatures.formatting.headings.levels : []
    },
    code: {
      isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'code'),
      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)
    },
    lists: {
      ordered: {
        isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'ordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'ordered-list'),
        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.ordered && !headingEntry)
      },
      unordered: {
        isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'unordered-list') && (listTypeAbove === 'none' || listTypeAbove === 'unordered-list'),
        isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.listTypes.unordered && !headingEntry)
      }
    },
    alignment: {
      isDisabled: !alignableEntry && !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.alignment),
      selected: (alignableEntry === null || alignableEntry === void 0 ? void 0 : alignableEntry[0].textAlign) || 'start'
    },
    blockquote: {
      isDisabled: !(locationDocumentFeatures.kind === 'block' && locationDocumentFeatures.documentFeatures.formatting.blockTypes.blockquote),
      isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'blockquote')
    },
    layouts: {
      isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'layout')
    },
    links: {
      isDisabled: !editor.selection || slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection) || !locationDocumentFeatures.documentFeatures.links,
      isSelected: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'link')
    },
    editor,
    dividers: {
      isDisabled: locationDocumentFeatures.kind === 'inline' || !locationDocumentFeatures.documentFeatures.dividers
    },
    clearFormatting: {
      isDisabled: !(Object.values(marks).some(x => x.isSelected) || !!hasBlockThatClearsOnClearFormatting(editor))
    },
    editorDocumentFeatures
  };
};
function hasBlockThatClearsOnClearFormatting(editor) {
  const [node] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: node => node.type === 'heading' || node.type === 'code' || node.type === 'blockquote'
  });
  return !!node;
}
function getListTypeAbove(editor) {
  const listAbove = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.a
  });
  if (!listAbove) {
    return 'none';
  }
  return listAbove[0].type;
}
const DocumentEditorConfigContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(null);
function useDocumentEditorConfig() {
  const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DocumentEditorConfigContext);
  if (!context) {
    throw new Error('useDocumentEditorConfig must be used within a DocumentEditorConfigContext.Provider');
  }
  return context;
}
const ToolbarStateProvider = _ref => {
  let {
    children,
    componentBlocks,
    editorDocumentFeatures
  } = _ref;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlate */ .ui)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(DocumentEditorConfigContext.Provider, {
    value: (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => ({
      componentBlocks,
      documentFeatures: editorDocumentFeatures
    }), [componentBlocks, editorDocumentFeatures]),
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ToolbarStateContext.Provider, {
      value: createToolbarState(editor, componentBlocks, editorDocumentFeatures),
      children: children
    })
  });
};

const isLinkActive = editor => {
  return (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'link');
};
const wrapLink = (editor, url) => {
  if (isLinkActive(editor)) {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
      match: n => n.type === 'link'
    });
    return;
  }
  const {
    selection
  } = editor;
  const isCollapsed = selection && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(selection);
  if (isCollapsed) {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
      type: 'link',
      href: url,
      children: [{
        text: url
      }]
    });
  } else {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'link',
      href: url,
      children: [{
        text: ''
      }]
    }, {
      split: true
    });
  }
};
const LinkElement = _ref => {
  let {
    attributes,
    children,
    element: __elementForGettingPath
  } = _ref;
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const [currentElement, setNode] = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.a)(editor, __elementForGettingPath);
  const href = currentElement.href;
  const text = slate__WEBPACK_IMPORTED_MODULE_86__.Node.string(currentElement);
  const [dialogOpen, setDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const activePopoverElement = (0,_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .useActiveBlockPopover */ .CS)();
  const selected = activePopoverElement === __elementForGettingPath;
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (selected && !href) {
      setDialogOpen(true);
    }
  }, [href, selected]);
  const unlink = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.u)(() => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
      at: slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, __elementForGettingPath)
    });
    slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
  });
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
      element: __elementForGettingPath,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("a", {
        href: href,
        ...attributes,
        children: children
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
        placement: "bottom start",
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
          gap: "small",
          padding: "regular",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
              prominence: "low",
              onPress: () => setDialogOpen(true),
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                src: _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_8__/* .editIcon */ .g
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
              children: stringFormatter.format('edit')
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
              prominence: "low",
              onPress: () => {
                window.open(href, '_blank', 'noopener,noreferrer');
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                src: _keystar_ui_icon_icons_externalLinkIcon__WEBPACK_IMPORTED_MODULE_9__/* .externalLinkIcon */ .K
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
                truncate: 3,
                children: href
              })
            })]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
              prominence: "low",
              onPress: unlink,
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                src: _keystar_ui_icon_icons_unlinkIcon__WEBPACK_IMPORTED_MODULE_11__/* .unlinkIcon */ .s
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
              children: "Unlink"
            })]
          })]
        })
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .DialogContainer */ .TW, {
      onDismiss: () => {
        setDialogOpen(false);
        (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.f)(editor);
      },
      children: dialogOpen && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LinkDialog, {
        text: text,
        href: href,
        onSubmit: _ref2 => {
          let {
            href
          } = _ref2;
          setNode({
            href
          });
        }
      })
    })]
  });
};
function LinkDialog(_ref3) {
  let {
    onSubmit,
    ...props
  } = _ref3;
  let [href, setHref] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(props.href || '');
  let [touched, setTouched] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  let {
    dismiss
  } = (0,_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .useDialogContainer */ .SN)();
  let stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  const showInvalidState = touched && !(0,_isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_21__.i)(href);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .Dialog */ .Vq, {
    size: "small",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        if (!showInvalidState) {
          dismiss();
          onSubmit({
            href
          });
        }
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Heading, {
        children: [props.href ? 'Edit' : 'Add', " link"]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_slots__WEBPACK_IMPORTED_MODULE_12__/* .Content */ .VY, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
          gap: "large",
          direction: "column",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_13__/* .TextField */ .nv, {
            label: "Text",
            value: props.text,
            isReadOnly: true
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_13__/* .TextField */ .nv, {
            autoFocus: true,
            isRequired: true,
            onBlur: () => setTouched(true),
            label: "Link",
            onChange: setHref,
            value: href,
            errorMessage: showInvalidState && 'Please provide a valid URL.'
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ButtonGroup */ .hE, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
let _linkIcon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
  src: _keystar_ui_icon_icons_linkIcon__WEBPACK_IMPORTED_MODULE_10__/* .linkIcon */ .N
});
function LinkButton() {
  const {
    editor,
    links: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
    prominence: "low",
    isDisabled: isDisabled,
    isSelected: isSelected,
    onPress: () => {
      wrapLink(editor, '');
      slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
    },
    children: _linkIcon
  }), [isSelected, isDisabled, editor]);
}
const linkButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LinkButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Link"
    })
  })]
});

const values = {
  start: {
    key: 'start',
    label: 'Align Start',
    icon: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_alignLeftIcon__WEBPACK_IMPORTED_MODULE_39__/* .alignLeftIcon */ .$
    })
  },
  center: {
    key: 'center',
    label: 'Align Center',
    icon: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_alignCenterIcon__WEBPACK_IMPORTED_MODULE_41__/* .alignCenterIcon */ .L
    })
  },
  end: {
    key: 'end',
    label: 'Align End',
    icon: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_alignRightIcon__WEBPACK_IMPORTED_MODULE_40__/* .alignRightIcon */ .g
    })
  }
};
const TextAlignMenu = _ref => {
  let {
    alignment
  } = _ref;
  const toolbarState = useToolbarState();
  const items = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => [values.start, ...Object.keys(alignment).map(x => values[x])], [alignment]);
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .MenuTrigger */ .bF, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
        prominence: "low",
        children: [values[toolbarState.alignment.selected].icon, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
          src: _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_25__/* .chevronDownIcon */ .i
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
          children: "Text Alignment"
        })
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .Menu */ .v2, {
      selectionMode: "single",
      selectedKeys: [toolbarState.alignment.selected],
      items: items,
      onAction: key => {
        if (key === 'start') {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(toolbarState.editor, 'textAlign', {
            match: node => node.type === 'paragraph' || node.type === 'heading'
          });
        } else {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(toolbarState.editor, {
            textAlign: key
          }, {
            match: node => node.type === 'paragraph' || node.type === 'heading'
          });
        }
        slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(toolbarState.editor);
      },
      children: item => {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
          textValue: item.label,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
            children: item.label
          }), item.icon]
        }, item.key);
      }
    })]
  }), [items, toolbarState.alignment.selected, toolbarState.editor]);
};

const insertBlockquote = editor => {
  const isActive = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'blockquote');
  if (isActive) {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
      match: node => node.type === 'blockquote'
    });
  } else {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'blockquote',
      children: []
    });
  }
};
const BlockquoteElement = _ref => {
  let {
    attributes,
    children
  } = _ref;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Box */ .xu, {
    UNSAFE_className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
    borderColor: "neutral",
    marginX: 0,
    paddingX: "large",
    borderStartStyle: "solid",
    borderStartWidth: "large",
    ...attributes,
    children: children
  });
};
const BlockquoteButton = () => {
  const {
    editor,
    blockquote: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
    prominence: "low",
    isSelected: isSelected,
    isDisabled: isDisabled,
    onPress: () => {
      insertBlockquote(editor);
      slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_quoteIcon__WEBPACK_IMPORTED_MODULE_42__/* .quoteIcon */ .O
    })
  }), [editor, isDisabled, isSelected]);
};
const blockquoteButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(BlockquoteButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Quote"
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
      children: '>⎵'
    })]
  })]
});

function CustomAttributesDialogInner(props) {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(() => {
    return (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.b)(props.schema, Object.fromEntries(Object.keys(props.schema.fields).map(key => [key, props.element[key]])));
  });
  const [forceValidation, setForceValidation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const previewProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.c)(props.schema, setState, () => undefined), [props.schema])(state);
  let {
    dismiss
  } = (0,_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .useDialogContainer */ .SN)();
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .Dialog */ .Vq, {
    size: "small",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        setForceValidation(true);
        if ((0,_errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_48__.c)(props.schema, state, undefined)) {
          dismiss();
          const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, props.element);
          console.log(state);
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, state, {
            at: path
          });
        }
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Heading, {
        children: [props.nodeLabel, " details"]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_slots__WEBPACK_IMPORTED_MODULE_12__/* .Content */ .VY, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.F, {
          forceValidation: forceValidation,
          autoFocus: true,
          ...previewProps
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ButtonGroup */ .hE, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
function CustomAttributesEditButton(props) {
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
      prominence: "low",
      onPress: props.onPress,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
        src: _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_8__/* .editIcon */ .g
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
      children: stringFormatter.format('edit')
    })]
  });
}
function CustomAttributesDialog(props) {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .DialogContainer */ .TW, {
    onDismiss: () => {
      props.onDismiss();
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.f)(editor);
    },
    children: props.isOpen && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CustomAttributesDialogInner, {
      element: props.element,
      nodeLabel: props.nodeLabel,
      schema: props.schema
    })
  });
}

function CodeButton() {
  const {
    editor,
    code: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
    isSelected: isSelected,
    isDisabled: isDisabled,
    prominence: "low",
    onPress: () => {
      if (isSelected) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
          match: node => node.type === 'code'
        });
      } else {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
          type: 'code',
          children: [{
            text: ''
          }]
        });
      }
      slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_26__/* .codeIcon */ .z
    })
  }), [isDisabled, isSelected, editor]);
}
const codeButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CodeButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Code block"
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
      children: "```"
    })]
  })]
});
function CodeElement(_ref) {
  var _aliasesToLabel$get;
  let {
    attributes,
    children,
    element
  } = _ref;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const triggerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  const [inputValue, setInputValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(element.language ? (_aliasesToLabel$get = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.b.get(element.language)) !== null && _aliasesToLabel$get !== void 0 ? _aliasesToLabel$get : element.language : 'Plain text');
  const [dialogOpen, setDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const {
    documentFeatures
  } = useDocumentEditorConfig();
  const customAttributesSchema = documentFeatures.formatting.blockTypes.code && Object.keys(documentFeatures.formatting.blockTypes.code.schema.fields).length ? documentFeatures.formatting.blockTypes.code.schema : undefined;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockWrapper */ .qm, {
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
        element: element,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("pre", {
          spellCheck: "false",
          className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
            backgroundColor: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.background.surface,
            borderRadius: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.radius.medium,
            color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralEmphasis,
            fontFamily: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.typography.fontFamily.code,
            fontSize: '0.85em',
            lineHeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.typography.lineheight.medium,
            maxWidth: '100%',
            overflow: 'auto',
            padding: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.medium,
            code: {
              fontFamily: 'inherit'
            }
          }),
          ref: triggerRef,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("code", {
            ...attributes,
            children: children
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_44__/* .Combobox */ .hQ, {
              "aria-label": "Language",
              width: "scale.2000",
              allowsCustomValue: true // allow consumers to support other languages
              ,
              inputValue: inputValue,
              onInputChange: setInputValue,
              onBlur: () => {
                const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
                const canonicalName = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.a.get(inputValue);
                if (canonicalName !== undefined) {
                  if (canonicalName === 'plain') {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    return;
                  }
                  setInputValue(_languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.c.get(canonicalName));
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                    language: canonicalName
                  }, {
                    at: path
                  });
                  return;
                }
                const nameFromLabel = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.l.get(inputValue);
                if (nameFromLabel !== undefined) {
                  if (nameFromLabel === 'plain') {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    return;
                  }
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                    language: nameFromLabel
                  }, {
                    at: path
                  });
                  return;
                }
                if (inputValue === '') {
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'language', {
                    at: path
                  });
                  setInputValue('Plain text');
                  return;
                }
                if (inputValue !== element.language) {
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                    language: inputValue
                  }, {
                    at: path
                  });
                }
              },
              onSelectionChange: selection => {
                const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
                if (_languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.a.has(inputValue)) {
                  selection = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.a.get(inputValue);
                }
                if (selection === null) {
                  if (inputValue === '') {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                  } else {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                      language: inputValue
                    }, {
                      at: path
                    });
                  }
                } else if (typeof selection === 'string') {
                  if (selection === 'plain') {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'language', {
                      at: path
                    });
                    setInputValue('Plain text');
                    return;
                  }
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                    language: selection
                  }, {
                    at: path
                  });
                  const label = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.c.get(selection);
                  if (label) {
                    setInputValue(label);
                  }
                }
              },
              selectedKey: element.language ? _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.a.get(element.language) : 'plain',
              items: (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => inputValue === 'Plain text' || _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.l.has(inputValue) ? _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.d : (0,match_sorter__WEBPACK_IMPORTED_MODULE_43__/* .matchSorter */ .Lu)(_languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_46__.d, inputValue, {
                keys: ['label', 'value', 'aliases']
              }), [inputValue]),
              children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_react_stately_collections__WEBPACK_IMPORTED_MODULE_89__/* .Item */ .ck, {
                children: item.label
              }, item.value)
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .ToolbarSeparator */ .Jf, {}), customAttributesSchema !== undefined && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CustomAttributesEditButton, {
              onPress: () => setDialogOpen(true)
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                prominence: "low",
                onPress: () => {
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                    at: slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element)
                  });
                },
                children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                  src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
                })
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      })
    }), customAttributesSchema !== undefined && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CustomAttributesDialog, {
      element: element,
      isOpen: dialogOpen,
      nodeLabel: "Code block",
      schema: customAttributesSchema,
      onDismiss: () => {
        setDialogOpen(false);
      }
    })]
  });
}

function updateComponentBlockElementProps(editor, componentBlock, prevProps, newProps, basePath, setElement) {
  slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
    setElement({
      props: newProps
    });
    const childPropPaths = findChildPropPathsWithPrevious(newProps, prevProps, {
      kind: 'object',
      fields: componentBlock.schema
    }, [], [], []);
    const getNode = () => slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, basePath);
    const elementForChildren = getNode();
    if (childPropPaths.length === 0) {
      const indexes = elementForChildren.children.map((_, i) => i).reverse();
      for (const idx of indexes) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
          at: [...basePath, idx]
        });
      }
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
        type: 'component-inline-prop',
        propPath: undefined,
        children: [{
          text: ''
        }]
      }, {
        at: [...basePath, 0]
      });
      return;
    }
    const initialPropPathsToEditorPath = new Map();
    for (const [idx, node] of elementForChildren.children.entries()) {
      (0,emery__WEBPACK_IMPORTED_MODULE_50__.assert)(node.type === 'component-block-prop' || node.type === 'component-inline-prop');
      initialPropPathsToEditorPath.set(node.propPath === undefined ? undefined : JSON.stringify(node.propPath), idx);
    }
    const childrenLeftToAdd = new Set(childPropPaths);
    for (const childProp of childPropPaths) {
      if (childProp.prevPath === undefined) {
        continue;
      }
      const stringifiedPath = JSON.stringify(childProp.prevPath);
      const idxInChildren = initialPropPathsToEditorPath.get(stringifiedPath);
      if (idxInChildren !== undefined) {
        const prevNode = elementForChildren.children[idxInChildren];
        (0,emery__WEBPACK_IMPORTED_MODULE_50__.assert)(prevNode.propPath !== undefined);
        if (!(0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.b)(childProp.path, prevNode.propPath)) {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
            propPath: childProp.path
          }, {
            at: [...basePath, idxInChildren]
          });
        }
        childrenLeftToAdd.delete(childProp);
        initialPropPathsToEditorPath.delete(stringifiedPath);
      }
    }
    let newIdx = getNode().children.length;
    for (const childProp of childrenLeftToAdd) {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
        type: `component-${childProp.options.kind}-prop`,
        propPath: childProp.path,
        children: [childProp.options.kind === 'block' ? {
          type: 'paragraph',
          children: [{
            text: ''
          }]
        } : {
          text: ''
        }]
      }, {
        at: [...basePath, newIdx]
      });
      newIdx++;
    }
    const pathsToRemove = [];
    for (const [, idxInChildren] of initialPropPathsToEditorPath) {
      pathsToRemove.push(slate__WEBPACK_IMPORTED_MODULE_86__.Editor.pathRef(editor, [...basePath, idxInChildren]));
    }
    for (const pathRef of pathsToRemove) {
      const path = pathRef.unref();
      (0,emery__WEBPACK_IMPORTED_MODULE_50__.assert)(path !== null);
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
        at: path
      });
    }
    const propPathsToExpectedIndexes = new Map();
    for (const [idx, thing] of childPropPaths.entries()) {
      propPathsToExpectedIndexes.set(JSON.stringify(thing.path), idx);
    }
    outer: while (true) {
      for (const [idx, childNode] of getNode().children.entries()) {
        (0,emery__WEBPACK_IMPORTED_MODULE_50__.assert)(childNode.type === 'component-block-prop' || childNode.type === 'component-inline-prop');
        const expectedIndex = propPathsToExpectedIndexes.get(JSON.stringify(childNode.propPath));
        (0,emery__WEBPACK_IMPORTED_MODULE_50__.assert)(expectedIndex !== undefined);
        if (idx === expectedIndex) continue;
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.moveNodes(editor, {
          at: [...basePath, idx],
          to: [...basePath, expectedIndex]
        });

        // start the for-loop again
        continue outer;
      }
      break;
    }
  });
}
function findChildPropPathsWithPrevious(value, prevValue, schema, newPath, prevPath, pathWithKeys) {
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        path: newPath,
        prevPath,
        options: schema.options
      }];
    case 'conditional':
      const hasChangedDiscriminant = value.discriminant === prevValue.discriminant;
      return findChildPropPathsWithPrevious(value.value, hasChangedDiscriminant ? prevValue.value : (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.g)(schema.values[value.discriminant]), schema.values[value.discriminant], newPath.concat('value'), hasChangedDiscriminant ? undefined : prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat('value'), hasChangedDiscriminant ? undefined : pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat('value'));
    case 'object':
      {
        const paths = [];
        for (const key of Object.keys(schema.fields)) {
          paths.push(...findChildPropPathsWithPrevious(value[key], prevValue[key], schema.fields[key], newPath.concat(key), prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat(key), pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat(key)));
        }
        return paths;
      }
    case 'array':
      {
        const paths = [];
        const prevKeys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.a)(prevValue);
        const keys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.a)(value);
        for (const [i, val] of value.entries()) {
          const key = keys[i];
          const prevIdx = prevKeys.indexOf(key);
          let prevVal;
          if (prevIdx === -1) {
            prevVal = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.g)(schema.element);
          } else {
            prevVal = prevValue[prevIdx];
          }
          paths.push(...findChildPropPathsWithPrevious(val, prevVal, schema.element, newPath.concat(i), prevIdx === -1 ? undefined : prevPath === null || prevPath === void 0 ? void 0 : prevPath.concat(prevIdx), prevIdx === -1 ? undefined : pathWithKeys === null || pathWithKeys === void 0 ? void 0 : pathWithKeys.concat(key)));
        }
        return paths;
      }
  }
}

const ChildrenByPathContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext({});
function ChildFieldEditable(_ref) {
  let {
    path
  } = _ref;
  const childrenByPath = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ChildrenByPathContext);
  const child = childrenByPath[JSON.stringify(path)];
  if (child === undefined) {
    return null;
  }
  return child;
}
function ComponentBlockRender(_ref2) {
  let {
    componentBlock,
    element,
    onChange,
    children
  } = _ref2;
  const getPreviewProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    return (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.c)({
      kind: 'object',
      fields: componentBlock.schema
    }, onChange, path => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ChildFieldEditable, {
      path: path
    }));
  }, [onChange, componentBlock]);
  const previewProps = getPreviewProps(element.props);
  const childrenByPath = {};
  let maybeChild;
  children.forEach(child => {
    const propPath = child.props.children.props.element.propPath;
    if (propPath === undefined) {
      maybeChild = child;
    } else {
      childrenByPath[JSON.stringify(propPathWithIndiciesToKeys(propPath, element.props))] = child;
    }
  });
  const ComponentBlockPreview = componentBlock.preview;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ChildrenByPathContext.Provider, {
    value: childrenByPath,
    children: [(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ComponentBlockPreview, {
      ...previewProps
    }), [previewProps, ComponentBlockPreview]), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        caretColor: 'transparent',
        '& ::selection': {
          backgroundColor: 'transparent'
        }
      }),
      children: maybeChild
    })]
  });
}

// note this is written to avoid crashing when the given prop path doesn't exist in the value
// this is because editor updates happen asynchronously but we have some logic to ensure
// that updating the props of a component block synchronously updates it
// (this is primarily to not mess up things like cursors in inputs)
// this means that sometimes the child elements will be inconsistent with the values
// so to deal with this, we return a prop path this is "wrong" but won't break anything
function propPathWithIndiciesToKeys(propPath, val) {
  return propPath.map(key => {
    var _val2;
    if (typeof key === 'string') {
      var _val;
      val = (_val = val) === null || _val === void 0 ? void 0 : _val[key];
      return key;
    }
    if (!Array.isArray(val)) {
      val = undefined;
      return '';
    }
    const keys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.a)(val);
    val = (_val2 = val) === null || _val2 === void 0 ? void 0 : _val2[key];
    return keys[key];
  });
}

function ChromefulComponentBlockElement(props) {
  var _props$componentBlock;
  const selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSelected */ .vt)();
  const isValid = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_48__.c)({
    kind: 'object',
    fields: props.componentBlock.schema
  }, props.elementProps, undefined), [props.componentBlock, props.elementProps]);
  const [editMode, setEditMode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const onCloseEditMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    setEditMode(false);
  }, []);
  const onShowEditMode = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(() => {
    setEditMode(true);
  }, []);
  const ChromefulToolbar = (_props$componentBlock = props.componentBlock.toolbar) !== null && _props$componentBlock !== void 0 ? _props$componentBlock : DefaultToolbarWithChrome;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(BlockPrimitive, {
    selected: selected,
    ...props.attributes,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
      gap: "medium",
      direction: "column",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .NotEditable */ .Li, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
          casing: "uppercase",
          color: "neutralSecondary",
          weight: "medium",
          size: "small",
          children: props.componentBlock.label
        })
      }), editMode ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(FormValue, {
          isValid: isValid,
          props: props.previewProps,
          onClose: onCloseEditMode
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
          className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
            display: 'none'
          }),
          children: props.children
        })]
      }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {
        children: [props.renderedBlock, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ChromefulToolbar, {
          isValid: isValid,
          onRemove: props.onRemove,
          onShowEditMode: onShowEditMode,
          props: props.previewProps
        })]
      })]
    })
  });
}

/**
 * Wrap block content, delimiting it from surrounding content, and provide a
 * focus indicator because the cursor may not be present.
 */
const BlockPrimitive = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(function BlockPrimitive(_ref, ref) {
  let {
    children,
    selected,
    ...attributes
  } = _ref;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    ...attributes,
    ref: ref,
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)(_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b, {
      position: 'relative',
      paddingInlineStart: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.xlarge,
      '::before': {
        display: 'block',
        content: '" "',
        backgroundColor: selected ? _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected : _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderIdle,
        borderRadius: 4,
        width: 4,
        position: 'absolute',
        left: 0,
        top: 0,
        bottom: 0,
        zIndex: 1
      }
    }),
    children: children
  });
});
function DefaultToolbarWithChrome(_ref2) {
  let {
    onShowEditMode,
    onRemove,
    isValid
  } = _ref2;
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .NotEditable */ .Li, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
      direction: "column",
      gap: "medium",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
        alignItems: "center",
        gap: "regular",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
          onPress: () => onShowEditMode(),
          children: stringFormatter.format('edit')
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
            prominence: "low",
            onPress: onRemove,
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
              src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
            tone: "critical",
            children: stringFormatter.format('delete')
          })]
        })]
      }), !isValid && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_51__/* .FieldMessage */ .nd, {
        children: "Contains invalid fields. Please edit."
      })]
    })
  });
}
function FormValue(_ref3) {
  let {
    onClose,
    props,
    isValid
  } = _ref3;
  const [forceValidation, setForceValidation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    direction: "column",
    gap: "medium",
    contentEditable: false,
    UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      whiteSpace: 'initial'
    }),
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.F, {
      ...props,
      forceValidation: forceValidation
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
      alignSelf: "start",
      tone: "accent",
      onPress: () => {
        if (isValid) {
          onClose();
        } else {
          setForceValidation(true);
        }
      },
      children: "Done"
    })]
  });
}

function ChromelessComponentBlockElement(props) {
  var _props$componentBlock;
  const ChromelessToolbar = (_props$componentBlock = props.componentBlock.toolbar) !== null && _props$componentBlock !== void 0 ? _props$componentBlock : DefaultToolbarWithoutChrome;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    ...props.attributes,
    className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
      element: props.element,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        children: props.renderedBlock
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ChromelessToolbar, {
          onRemove: props.onRemove,
          props: props.previewProps
        })
      })]
    })
  });
}
function DefaultToolbarWithoutChrome(_ref) {
  let {
    onRemove
  } = _ref;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
      onPress: onRemove,
      margin: "regular",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
        src: _keystar_ui_icon_icons_trashIcon__WEBPACK_IMPORTED_MODULE_52__/* .trashIcon */ .y
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
      tone: "critical",
      children: "Remove"
    })]
  });
}

function ComponentInlineProp(props) {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
    ...props.attributes,
    children: props.children
  });
}
function getInitialValue(type, componentBlock) {
  const props = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_49__.g)({
    kind: 'object',
    fields: componentBlock.schema
  });
  return {
    type: 'component-block',
    component: type,
    props,
    children: (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.f)(props, componentBlock.schema).map(x => ({
      type: `component-${x.options.kind}-prop`,
      propPath: x.path,
      children: [x.options.kind === 'block' ? {
        type: 'paragraph',
        children: [{
          text: ''
        }]
      } : {
        text: ''
      }]
    }))
  };
}
function insertComponentBlock(editor, componentBlocks, componentBlock) {
  const node = getInitialValue(componentBlock, componentBlocks[componentBlock]);
  (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, node);
  const componentBlockEntry = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: node => node.type === 'component-block'
  });
  if (componentBlockEntry) {
    const start = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, componentBlockEntry[1]);
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setSelection(editor, {
      anchor: start,
      focus: start
    });
  }
}
const ComponentBlocksElement = _ref => {
  let {
    attributes,
    children,
    element: __elementToGetPath
  } = _ref;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const [currentElement, setElement] = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.a)(editor, __elementToGetPath);
  const blockComponents = useDocumentEditorConfig().componentBlocks;
  const componentBlock = blockComponents[currentElement.component];
  const elementToGetPathRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({
    __elementToGetPath,
    currentElement
  });
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    elementToGetPathRef.current = {
      __elementToGetPath,
      currentElement
    };
  });
  const onRemove = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.u)(() => {
    const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, __elementToGetPath);
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
      at: path
    });
  });
  const onPropsChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(cb => {
    const prevProps = elementToGetPathRef.current.currentElement.props;
    updateComponentBlockElementProps(editor, componentBlock, prevProps, cb(prevProps), slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, elementToGetPathRef.current.__elementToGetPath), setElement);
  }, [setElement, componentBlock, editor]);
  const getToolbarPreviewProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    if (!componentBlock) {
      return () => {
        throw new Error('expected component block to exist when called');
      };
    }
    return (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.c)({
      kind: 'object',
      fields: componentBlock.schema
    }, onPropsChange, () => undefined);
  }, [componentBlock, onPropsChange]);
  if (!componentBlock) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("div", {
      style: {
        border: 'red 4px solid',
        padding: 8
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("pre", {
        contentEditable: false,
        style: {
          userSelect: 'none'
        },
        children: `The block "${currentElement.component}" no longer exists.

Props:

${JSON.stringify(currentElement.props, null, 2)}

Content:`
      }), children]
    });
  }
  const toolbarPreviewProps = getToolbarPreviewProps(currentElement.props);
  const renderedBlock = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ComponentBlockRender, {
    children: children,
    componentBlock: componentBlock,
    element: currentElement,
    onChange: onPropsChange
  });
  return componentBlock.chromeless ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ChromelessComponentBlockElement, {
    element: __elementToGetPath,
    attributes: attributes,
    renderedBlock: renderedBlock,
    componentBlock: componentBlock,
    onRemove: onRemove,
    previewProps: toolbarPreviewProps
  }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ChromefulComponentBlockElement, {
    attributes: attributes,
    children: children,
    componentBlock: componentBlock,
    onRemove: onRemove,
    previewProps: toolbarPreviewProps,
    renderedBlock: renderedBlock,
    elementProps: currentElement.props
  });
};

function insertDivider(editor) {
  (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
    type: 'divider',
    children: [{
      text: ''
    }]
  });
  slate__WEBPACK_IMPORTED_MODULE_86__.Editor.insertNode(editor, {
    type: 'paragraph',
    children: [{
      text: ''
    }]
  });
}
const DividerButton = () => {
  const {
    editor,
    dividers: {
      isDisabled
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
    prominence: "low",
    isDisabled: isDisabled,
    onPress: () => {
      insertDivider(editor);
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_minusIcon__WEBPACK_IMPORTED_MODULE_54__/* .minusIcon */ .$
    })
  }), [editor, isDisabled]);
};
const dividerButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  delay: 200,
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(DividerButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Divider"
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
      children: "---"
    })]
  })]
});
function DividerElement(_ref) {
  let {
    attributes,
    children
  } = _ref;
  const selected = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSelected */ .vt)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Box */ .xu, {
    ...attributes,
    paddingY: "medium",
    UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      caretColor: 'transparent'
    }),
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("hr", {
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        backgroundColor: selected ? _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected : _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderIdle,
        border: 0,
        height: 2
      })
    }), children]
  });
}

const LayoutContainer = _ref => {
  let {
    attributes,
    children,
    element
  } = _ref;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const layout = element.layout;
  const layoutOptions = useDocumentEditorConfig().documentFeatures.layouts;
  const currentLayoutIndex = layoutOptions.findIndex(x => x.toString() === layout.toString());
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
    ...attributes,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
      element: element,
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
          columnGap: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.regular,
          display: 'grid'
        }),
        style: {
          gridTemplateColumns: layout.map(x => `${x}fr`).join(' ')
        },
        children: children
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
          padding: "regular",
          gap: "regular",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .ActionGroup */ .W, {
            selectionMode: "single",
            prominence: "low",
            density: "compact",
            onAction: key => {
              const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
              const layoutOption = layoutOptions[key];
              slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
                type: 'layout',
                layout: layoutOption
              }, {
                at: path
              });
              slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
            },
            selectedKeys: currentLayoutIndex !== -1 ? [currentLayoutIndex.toString()] : [],
            children: layoutOptions.map((layoutOption, i) => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
              children: makeLayoutIcon(layoutOption)
            }, i))
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .ToolbarSeparator */ .Jf, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
              prominence: "low",
              onPress: () => {
                const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
                slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                  at: path
                });
              },
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
              })
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
              tone: "critical",
              children: "Remove"
            })]
          })]
        })
      })]
    })
  });
};
const LayoutArea = _ref2 => {
  let {
    attributes,
    children
  } = _ref2;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      borderColor: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.border.neutral,
      borderRadius: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.radius.regular,
      borderStyle: 'dashed',
      borderWidth: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.border.regular,
      padding: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.medium
    }),
    ...attributes,
    children: children
  });
};
const insertLayout = (editor, layout) => {
  (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, [{
    type: 'layout',
    layout,
    children: [{
      type: 'layout-area',
      children: [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }]
    }]
  }]);
  const layoutEntry = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: x => x.type === 'layout'
  });
  if (layoutEntry) {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, [...layoutEntry[1], 0]);
  }
};

// Utils
// ------------------------------

function makeLayoutIcon(ratios) {
  const size = 16;
  const element = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    role: "img",
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      display: 'grid',
      gridTemplateColumns: ratios.map(r => `${r}fr`).join(' '),
      gap: 2,
      width: size,
      height: size
    }),
    children: ratios.map((_, i) => {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
          backgroundColor: 'currentcolor',
          borderRadius: 1
        })
      }, i);
    })
  });
  return element;
}
const layoutsIcon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
  src: _keystar_ui_icon_icons_columnsIcon__WEBPACK_IMPORTED_MODULE_55__/* .columnsIcon */ .b
});
const LayoutsButton = _ref3 => {
  let {
    layouts
  } = _ref3;
  const {
    editor,
    layouts: {
      isSelected
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
      prominence: "low",
      isSelected: isSelected,
      onPress: () => {
        if ((0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, 'layout')) {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
            match: node => node.type === 'layout'
          });
        } else {
          insertLayout(editor, layouts[0]);
        }
        slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
      },
      children: layoutsIcon
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
      children: "Layouts"
    })]
  }), [editor, isSelected, layouts]);
};

const toggleList = (editor, format) => {
  const listAbove = getListTypeAbove(editor);
  const isActive = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.f)(editor, format) && (listAbove === 'none' || listAbove === format);
  slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
      match: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.a,
      split: true,
      mode: isActive ? 'all' : 'lowest'
    });
    if (!isActive) {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
        type: format,
        children: []
      }, {
        match: x => x.type !== 'list-item-content' && (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(x)
      });
    }
  });
};
function ListButtons(props) {
  const {
    editor,
    lists
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    const disabledKeys = [];
    if (lists.ordered.isDisabled) disabledKeys.push('ordered');
    if (lists.unordered.isDisabled) disabledKeys.push('unordered');
    const selectedKeys = [];
    if (lists.ordered.isSelected) selectedKeys.push('ordered');
    if (lists.unordered.isSelected) selectedKeys.push('unordered');
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .ActionGroup */ .W, {
      flexShrink: 0,
      "aria-label": "Lists",
      selectionMode: "single",
      buttonLabelBehavior: "hide",
      density: "compact"
      // overflowMode="collapse"
      ,
      prominence: "low",
      summaryIcon: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
        src: _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_56__/* .listIcon */ .U
      }),
      selectedKeys: selectedKeys,
      disabledKeys: disabledKeys,
      onAction: key => {
        const format = `${key}-list`;
        toggleList(editor, format);
        slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
      },
      children: [props.lists.unordered && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
        textValue: "Bullet List (- )",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
          src: _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_56__/* .listIcon */ .U
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
          children: "Bullet List"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
          children: "-\u23B5"
        })]
      }, "unordered"), props.lists.ordered && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
        textValue: "Numbered List (1.)",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
          src: _keystar_ui_icon_icons_listOrderedIcon__WEBPACK_IMPORTED_MODULE_57__/* .listOrderedIcon */ .P
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
          children: "Numbered List"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
          children: "1.\u23B5"
        })]
      }, "ordered")].filter(x => x !== false)
    });
  }, [editor, lists.ordered.isDisabled, lists.ordered.isSelected, lists.unordered.isDisabled, lists.unordered.isSelected, props.lists.ordered, props.lists.unordered]);
}
function nestList(editor) {
  const block = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
  });
  if (!block || block[0].type !== 'list-item-content') {
    return false;
  }
  const listItemPath = slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(block[1]);
  // we're the first item in the list therefore we can't nest
  if (listItemPath[listItemPath.length - 1] === 0) {
    return false;
  }
  const previousListItemPath = slate__WEBPACK_IMPORTED_MODULE_86__.Path.previous(listItemPath);
  const previousListItemNode = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, previousListItemPath);
  if (previousListItemNode.children.length !== 1) {
    // there's a list nested inside our previous sibling list item so move there
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.moveNodes(editor, {
      at: listItemPath,
      to: [...previousListItemPath, previousListItemNode.children.length - 1, previousListItemNode.children[previousListItemNode.children.length - 1].children.length]
    });
    return true;
  }
  const type = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.parent(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(block[1]))[0].type;
  slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type,
      children: []
    }, {
      at: listItemPath
    });
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.moveNodes(editor, {
      to: [...previousListItemPath, previousListItemNode.children.length],
      at: listItemPath
    });
  });
  return true;
}
function unnestList(editor) {
  const block = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
  });
  if (block && block[0].type === 'list-item-content') {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
      match: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.a,
      split: true
    });
    return true;
  }
  return false;
}

const ImageElement = _ref => {
  let {
    attributes,
    children,
    element: __elementForGettingPath
  } = _ref;
  const [dialogOpen, setDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  const [aspectRatio, setAspectRatio] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)();
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const [currentElement, setNode] = (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.a)(editor, __elementForGettingPath);
  const objectUrl = (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_60__/* .useObjectURL */ .qA)(currentElement.src.content);
  const activePopoverElement = (0,_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .useActiveBlockPopover */ .CS)();
  const selected = activePopoverElement === __elementForGettingPath;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockWrapper */ .qm, {
      attributes: attributes,
      children: [children, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
        element: __elementForGettingPath,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
          style: {
            alignItems: 'center',
            display: 'flex',
            flexDirection: 'column'
          },
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .NotEditable */ .Li, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("img", {
              ...attributes,
              src: objectUrl,
              alt: currentElement.alt,
              "data-selected": selected,
              onLoad: e => {
                const target = e.target;
                setAspectRatio(target.width / target.height);
              },
              className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
                boxSizing: 'border-box',
                borderRadius: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.radius.regular,
                display: 'block',
                maxHeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.scale[3600],
                maxWidth: '100%',
                transition: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .transition */ .eR)('box-shadow'),
                '&[data-selected=true]': {
                  boxShadow: `0 0 0 ${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.border.regular} ${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected}`
                }
              })
            })
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
          hideArrow: true,
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
              gap: "small",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                  prominence: "low",
                  onPress: () => setDialogOpen(true),
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                    src: _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_8__/* .editIcon */ .g
                  })
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                  children: stringFormatter.format('edit')
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                  prominence: "low",
                  onPress: async () => {
                    const src = await (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_60__/* .getUploadedImage */ .tH)();
                    if (src) {
                      setNode({
                        src
                      });
                    }
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                    src: _keystar_ui_icon_icons_fileUpIcon__WEBPACK_IMPORTED_MODULE_58__/* .fileUpIcon */ .Y
                  })
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                  children: "Choose file"
                })]
              })]
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Divider */ .iz, {
              orientation: "vertical"
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                prominence: "low",
                onPress: () => {
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                    at: slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, __elementForGettingPath)
                  });
                },
                children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                  src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
                })
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      }, aspectRatio)]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .DialogContainer */ .TW, {
      onDismiss: () => {
        setDialogOpen(false);
        (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.f)(editor);
      },
      children: dialogOpen && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ImageDialog, {
        alt: currentElement.alt,
        title: currentElement.title,
        filename: currentElement.src.filename,
        onSubmit: _ref2 => {
          let {
            alt,
            filename,
            title
          } = _ref2;
          setNode({
            alt,
            title,
            src: {
              content: currentElement.src.content,
              filename
            }
          });
        }
      })
    })]
  });
};
function ImageDialog(props) {
  const {
    images
  } = useDocumentEditorConfig().documentFeatures;
  if (!images) {
    throw new Error('unexpected image rendered when images are disabled');
  }
  const schema = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_66__.o)(images.schema), [images]);
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
    alt: props.alt,
    title: props.title
  });
  const previewProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.c)(schema, setState, () => undefined), [schema])(state);
  const [filenameWithoutExtension, filenameExtension] = splitFilename(props.filename);
  const [forceValidation, setForceValidation] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  let [fileName, setFileName] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(filenameWithoutExtension);
  let [fileNameTouched, setFileNameTouched] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  let {
    dismiss
  } = (0,_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .useDialogContainer */ .SN)();
  let stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_88__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_16__.l);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_6__/* .Dialog */ .Vq, {
    size: "small",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("form", {
      style: {
        display: 'contents'
      },
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        setForceValidation(true);
        if (fileName && (0,_errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_48__.c)(schema, state, undefined)) {
          dismiss();
          props.onSubmit({
            alt: state.alt,
            title: state.title,
            filename: [fileName, filenameExtension].join('.')
          });
        }
      },
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Heading, {
        children: "Image details"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_slots__WEBPACK_IMPORTED_MODULE_12__/* .Content */ .VY, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
          gap: "large",
          direction: "column",
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_13__/* .TextField */ .nv, {
            label: "File name",
            onChange: setFileName,
            onBlur: () => setFileNameTouched(true),
            value: fileName,
            isRequired: true,
            errorMessage: (fileNameTouched || forceValidation) && !fileName ? 'Please provide a file name.' : undefined,
            endElement: filenameExtension ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
              alignItems: "center",
              justifyContent: "center",
              paddingEnd: "regular",
              children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
                color: "neutralTertiary",
                children: [".", filenameExtension]
              })
            }) : null
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_47__.F, {
            forceValidation: forceValidation,
            autoFocus: true,
            ...previewProps
          })]
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ButtonGroup */ .hE, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          onPress: dismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
          prominence: "high",
          type: "submit",
          children: stringFormatter.format('save')
        })]
      })]
    })
  });
}
function splitFilename(filename) {
  const dotIndex = filename.lastIndexOf('.');
  if (dotIndex === -1) {
    return [filename, ''];
  }
  return [filename.substring(0, dotIndex), filename.substring(dotIndex + 1)];
}
let _imageIcon = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
  src: _keystar_ui_icon_icons_imageIcon__WEBPACK_IMPORTED_MODULE_59__/* .imageIcon */ .y
});
function ImageButton() {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
      prominence: "low",
      onPress: async () => {
        const src = await (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_60__/* .getUploadedImage */ .tH)();
        if (src) {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
            type: 'image',
            src,
            alt: '',
            title: '',
            children: [{
              text: ''
            }]
          });
        }
      },
      children: _imageIcon
    })
  });
}
const imageButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ImageButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Image"
    })
  })]
});
function withImages(editor) {
  const {
    insertData
  } = editor;
  editor.insertData = data => {
    const images = Array.from(data.files).filter(x => x.type.startsWith('image/'));
    if (images.length) {
      Promise.all(images.map(async file => ({
        name: file.name,
        data: new Uint8Array(await file.arrayBuffer())
      }))).then(images => {
        (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
          type: 'image',
          src: {
            content: images[0].data,
            filename: images[0].name
          },
          alt: '',
          title: '',
          children: [{
            text: ''
          }]
        });
      });
      return;
    }
    insertData(data);
  };
  return editor;
}

const insertTable = editor => {
  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
    type: 'table',
    children: [{
      type: 'table-head',
      children: [{
        type: 'table-row',
        children: [(0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(true), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(true), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(true)]
      }]
    }, {
      type: 'table-body',
      children: [{
        type: 'table-row',
        children: [(0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false)]
      }, {
        type: 'table-row',
        children: [(0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false), (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false)]
      }]
    }]
  });
};
const SelectedCellsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);
function getSelectedCells(table, row, column) {
  var _table$children$;
  const selectedCells = new Set();
  const first = table.children[0].type === 'table-head' || table.children[0].type === 'table-body' ? table.children[0] : undefined;
  if (!first) return selectedCells;
  const second = ((_table$children$ = table.children[1]) === null || _table$children$ === void 0 ? void 0 : _table$children$.type) === 'table-body' ? table.children[1] : undefined;
  for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
    const row = second ? rowIndex === 0 ? first.children[0] : second.children[rowIndex - 1] : first.children[rowIndex];
    if (!slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(row)) continue;
    for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
      selectedCells.add(row.children[cellIndex]);
    }
  }
  return selectedCells;
}
function TableSelectionProvider(props) {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlate */ .ui)();
  const selectedTableArea = (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.c)(editor);
  if (selectedTableArea) {
    var _Editor$above, _editor$selection;
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(SelectedCellsContext.Provider, {
      value: {
        cells: selectedTableArea.singleCell === 'not-selected' ? new Set() : getSelectedCells(selectedTableArea.table, selectedTableArea.row, selectedTableArea.column),
        table: selectedTableArea.table,
        focus: (_Editor$above = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
          match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table-cell'),
          at: (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.focus.path
        })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[0]
      },
      children: props.children
    });
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(SelectedCellsContext.Provider, {
    value: undefined,
    children: props.children
  });
}
const StartElementsContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({
  top: new Map(),
  left: new Map()
});
const TableElement = _ref => {
  var _element$children$;
  let {
    attributes,
    children,
    element
  } = _ref;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const selectedCellsContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SelectedCellsContext);
  const selectedCells = (selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.table) === element ? selectedCellsContext : undefined;
  const startElements = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    const firstTableChild = element.children[0];
    if (!slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(firstTableChild) || !slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(firstTableChild.children[0])) {
      return {
        top: new Map(),
        left: new Map()
      };
    }
    const top = new Map();
    const left = new Map();
    for (const [idx, cell] of firstTableChild.children[0].children.entries()) {
      if (cell.type !== 'table-cell') continue;
      top.set(cell, element.children.every(headOrBody => slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(headOrBody) ? headOrBody.children.every(row => slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(row) && (selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.cells.has(row.children[idx]))) : false));
    }
    for (const headOrBody of element.children) {
      if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
        continue;
      }
      for (const row of headOrBody.children) {
        if (row.type !== 'table-row' || row.children[0].type !== 'table-cell') {
          continue;
        }
        left.set(row.children[0], row.children.every(element => selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.cells.has(element)));
      }
    }
    return {
      top,
      left
    };
  }, [element, selectedCells]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(StartElementsContext.Provider, {
    value: startElements,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(SelectedCellsContext.Provider, {
      value: selectedCells,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockWrapper */ .qm, {
        attributes: attributes,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
          element: element,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("table", {
            className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
              width: '100%',
              tableLayout: 'fixed',
              position: 'relative',
              borderSpacing: 0,
              '& *::selection': selectedCells !== null && selectedCells !== void 0 && selectedCells.cells.size ? {
                backgroundColor: 'transparent'
              } : undefined
            }),
            children: children
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
              gap: "regular",
              padding: "regular",
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                  prominence: "low",
                  isSelected: ((_element$children$ = element.children[0]) === null || _element$children$ === void 0 ? void 0 : _element$children$.type) === 'table-head',
                  onPress: () => {
                    const tablePath = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
                    slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
                      if (element.children[0].type === 'table-head') {
                        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.moveNodes(editor, {
                          at: [...tablePath, 0, 0],
                          to: [...tablePath, 1, 0]
                        });
                        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                          at: [...tablePath, 0]
                        });
                        return;
                      }
                      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
                        type: 'table-head',
                        children: []
                      }, {
                        at: [...tablePath, 0]
                      });
                      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.moveNodes(editor, {
                        at: [...tablePath, 1, 0],
                        to: [...tablePath, 0, 0]
                      });
                    });
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                    src: _keystar_ui_icon_icons_sheetIcon__WEBPACK_IMPORTED_MODULE_76__/* .sheetIcon */ .x
                  })
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                  children: "Header row"
                })]
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .ToolbarSeparator */ .Jf, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
                children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                  prominence: "low",
                  onPress: () => {
                    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                      at: slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element)
                    });
                  },
                  children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                    src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
                  })
                }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                  tone: "critical",
                  children: "Remove"
                })]
              })]
            })
          })]
        })
      })
    })
  });
};
const TableBodyElement = _ref2 => {
  let {
    attributes,
    children
  } = _ref2;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("tbody", {
    ...attributes,
    children: children
  });
};
const TableHeadElement = _ref3 => {
  let {
    attributes,
    children
  } = _ref3;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("thead", {
    ...attributes,
    children: children
  });
};
const TableRowElement = _ref4 => {
  var _useContext, _table$children$index;
  let {
    attributes,
    children,
    element
  } = _ref4;
  const table = (_useContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SelectedCellsContext)) === null || _useContext === void 0 ? void 0 : _useContext.table;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(RowIndexContext.Provider, {
    value: (_table$children$index = table === null || table === void 0 ? void 0 : table.children.indexOf(element)) !== null && _table$children$index !== void 0 ? _table$children$index : -1,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("tr", {
      ...attributes,
      children: children
    })
  });
};
const RowIndexContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(-1);
function TableCellElement(_ref5) {
  let {
    attributes,
    children,
    element
  } = _ref5;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const selectedCellsContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SelectedCellsContext);
  const startElements = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(StartElementsContext);
  const isSelected = selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.cells.has(element);
  const size = `calc(100% + 2px)`;
  const ElementType = element.header ? 'th' : 'td';
  const borderColor = isSelected ? _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected : _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderIdle;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ElementType, {
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      borderInlineEnd: `1px solid ${borderColor}`,
      borderBottom: `1px solid ${borderColor}`,
      borderTop: startElements.top.has(element) ? `1px solid ${borderColor}` : undefined,
      borderInlineStart: startElements.left.has(element) ? `1px solid ${borderColor}` : undefined,
      backgroundColor: selectedCellsContext !== null && selectedCellsContext !== void 0 && selectedCellsContext.cells.has(element) ? _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.backgroundSelected : element.header ? _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.slate3 : undefined,
      position: 'relative',
      margin: 0,
      padding: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.regular,
      fontWeight: 'inherit',
      boxSizing: 'border-box',
      textAlign: 'start',
      verticalAlign: 'top'
    }),
    ...attributes,
    children: [isSelected && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        contentEditable: false,
        className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
          position: 'absolute',
          top: -1,
          insetInlineStart: -1,
          background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected,
          height: size,
          width: 1
        })
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        contentEditable: false,
        className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
          position: 'absolute',
          top: -1,
          insetInlineStart: -1,
          background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected,
          height: 1,
          width: size
        })
      })]
    }), startElements.top.has(element) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CellSelection, {
      location: "top",
      selected: !!startElements.top.get(element),
      label: "Select Column",
      onClick: () => {
        const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
        const table = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
          match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table'),
          at: path
        });
        if (!table) return;
        const lastTableIndex = table[0].children.length - 1;
        const tableBody = table[0].children[lastTableIndex];
        if (tableBody.type !== 'table-body') return;
        const cellIndex = path[path.length - 1];
        const endPath = [...table[1], table[0].children.length - 1, tableBody.children.length - 1, cellIndex];
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, {
          anchor: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, path),
          focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, endPath)
        });
      }
    }), startElements.left.has(element) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CellSelection, {
      location: "left",
      selected: !!startElements.left.get(element),
      label: "Select Row",
      onClick: () => {
        const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, {
          anchor: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(path)),
          focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(path))
        });
      }
    }), startElements.left.has(element) && startElements.top.has(element) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CellSelection, {
      location: "top-left",
      selected: !!(startElements.top.get(element) && startElements.left.get(element)),
      label: "Select Table",
      onClick: () => {
        const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element);
        const table = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
          match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table'),
          at: path
        });
        if (!table) return;
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, {
          anchor: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, table[1]),
          focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, table[1])
        });
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
      children: children
    }), (selectedCellsContext === null || selectedCellsContext === void 0 ? void 0 : selectedCellsContext.focus) === element && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CellMenu, {
      cell: element,
      table: selectedCellsContext.table
    })]
  });
}
function CellSelection(props) {
  const selectedCellsContext = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SelectedCellsContext);
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("div", {
    contentEditable: false,
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("button", {
      tabIndex: -1,
      type: "button",
      ...(0,_keystar_ui_utils__WEBPACK_IMPORTED_MODULE_78__/* .toDataAttributes */ .a9)(props, new Set(['location', 'selected'])),
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.slate3,
        border: `1px solid ${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderIdle}`,
        margin: 0,
        padding: 0,
        position: 'absolute',
        ':hover': {
          background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.slate4
        },
        // ever so slightly larger hit area
        '::before': {
          content: '""',
          inset: -1,
          position: 'absolute'
        },
        // location
        '&[data-location=top]': {
          top: -9,
          insetInlineStart: -1,
          width: 'calc(100% + 2px)',
          height: 8
        },
        '&[data-location=left]': {
          top: -1,
          insetInlineStart: -9,
          width: 8,
          height: 'calc(100% + 2px)'
        },
        '&[data-location=top-left]': {
          top: -9,
          insetInlineStart: -9,
          width: 8,
          height: 8
        },
        '&:not([data-location=top])': {
          borderInlineEnd: 'none'
        },
        '&:not([data-location=left])': {
          borderBottom: 'none'
        },
        // state
        '&[data-selected=true]': {
          background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.indigo8,
          borderColor: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected
        }
      }),
      style: {
        visibility: selectedCellsContext !== null && selectedCellsContext !== void 0 && selectedCellsContext.focus ? 'visible' : 'hidden'
      },
      "aria-label": props.label,
      onClick: () => {
        slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
        props.onClick();
      }
    }), props.selected && (props.location === 'top' ? /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        position: 'absolute',
        top: -9,
        insetInlineEnd: -1,
        background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected,
        height: 8,
        width: 1,
        zIndex: 2
      })
    }) : /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        position: 'absolute',
        bottom: -1,
        insetInlineStart: -9,
        background: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.alias.borderSelected,
        height: 1,
        width: 8,
        zIndex: 2
      })
    }))]
  });
}
const cellActions = {
  deleteRow: {
    label: 'Delete row',
    action: (editor, cellPath) => {
      const tablePath = cellPath.slice(0, -3);
      const table = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      const hasHead = table.children[0].type === 'table-head';
      const rowPath = slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(cellPath);
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
        at: hasHead && rowPath[cellPath.length - 3] === 0 ? slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(rowPath) : rowPath
      });
    }
  },
  deleteColumn: {
    label: 'Delete column',
    action: (editor, path) => {
      const cellIndex = path[path.length - 1];
      const tablePath = path.slice(0, -3);
      const table = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
        for (const [headOrBodyIdx, headOrBody] of table.children.entries()) {
          if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
            continue;
          }
          for (const idx of headOrBody.children.keys()) {
            slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
              at: [...tablePath, headOrBodyIdx, idx, cellIndex]
            });
          }
        }
      });
    }
  },
  insertRowBelow: {
    label: 'Insert row below',
    action: (editor, path) => {
      const tableRow = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Path.parent(path));
      const tablePath = path.slice(0, -3);
      const table = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, tablePath);
      if (tableRow.type !== 'table-row' || table.type !== 'table') {
        return;
      }
      const hasHead = table.children[0].type === 'table-head';
      const newRowPath = [...tablePath, hasHead ? 1 : 0, hasHead && path[path.length - 3] === 0 ? 0 : path[path.length - 2] + 1];
      slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, {
          type: 'table-row',
          children: tableRow.children.map(() => (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(false))
        }, {
          at: newRowPath
        });
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, [...newRowPath, path[path.length - 1]]);
      });
    }
  },
  insertColumnRight: {
    label: 'Insert column right',
    action: (editor, path) => {
      const newCellIndex = path[path.length - 1] + 1;
      const tablePath = path.slice(0, -3);
      const table = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, tablePath);
      if (table.type !== 'table') return;
      slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
        for (const [headOrBodyIdx, headOrBody] of table.children.entries()) {
          if (headOrBody.type !== 'table-head' && headOrBody.type !== 'table-body') {
            continue;
          }
          for (const rowIdx of headOrBody.children.keys()) {
            slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertNodes(editor, (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.h)(headOrBody.type === 'table-head'), {
              at: [...tablePath, headOrBodyIdx, rowIdx, newCellIndex]
            });
          }
        }
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Path.next(path)));
      });
    }
  }
};
const _cellActions = cellActions;
function CellMenu(props) {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const gutter = _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.small;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
    contentEditable: false,
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      top: gutter,
      insetInlineEnd: gutter,
      position: 'absolute'
    }),
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .MenuTrigger */ .bF, {
        align: "end",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
          prominence: "low",
          UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
            borderRadius: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.radius.small,
            height: 'auto',
            minWidth: 0,
            padding: 0,
            // tiny buttons; increase the hit area
            '&::before': {
              content: '""',
              inset: `calc(${gutter} * -1)`,
              position: 'absolute'
            }
          }),
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
            src: _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_25__/* .chevronDownIcon */ .i
          })
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .Menu */ .v2, {
          onAction: key => {
            if (key in _cellActions) {
              _cellActions[key].action(editor, slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, props.cell));
            }
          },
          items: Object.entries(_cellActions).map(_ref6 => {
            let [key, item] = _ref6;
            return {
              ...item,
              key
            };
          }),
          children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .Item */ .ck, {
            children: item.label
          }, item.key)
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
        children: "Options"
      })]
    })
  });
}
const TableButton = () => {
  const {
    editor,
    blockquote: {
      isDisabled,
      isSelected
    }
  } = useToolbarState();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
    prominence: "low",
    isSelected: isSelected,
    isDisabled: isDisabled,
    onPress: () => {
      insertTable(editor);
      slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
    },
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
      src: _keystar_ui_icon_icons_tableIcon__WEBPACK_IMPORTED_MODULE_77__/* .tableIcon */ .I
    })
  }), [editor, isDisabled, isSelected]);
};
const tableButton = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
  children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableButton, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
      children: "Table"
    })
  })]
});
function getCellPathInDirection(editor, path, direction) {
  if (direction === 'left' || direction === 'right') {
    const row = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table-row'),
      at: path
    });
    if (!row) return;
    const currentCellIdx = path[path.length - 1];
    const diff = direction === 'left' ? -1 : 1;
    const nextCellIdx = currentCellIdx + diff;
    const nextCell = row[0].children[nextCellIdx];
    if (!nextCell) return;
    return [...row[1], nextCellIdx];
  }
  const table = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table'),
    at: path
  });
  if (!table) return;
  const diff = direction === 'up' ? -1 : 1;
  const rowIndex = path[path.length - 3] + path[path.length - 2];
  const nextRowIndex = rowIndex + diff;
  const relativeRowPath = (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.e)(table[0].children[0].type === 'table-head', nextRowIndex);
  if (!slate__WEBPACK_IMPORTED_MODULE_86__.Node.has(table[0], relativeRowPath)) return;
  return [...table[1], ...relativeRowPath, path[path.length - 1]];
}

function Toolbar(_ref) {
  let {
    documentFeatures,
    viewState
  } = _ref;
  const blockComponent = useDocumentEditorConfig().componentBlocks;
  const hasBlockItems = Object.keys(blockComponent).length;
  const hasMarks = Object.values(documentFeatures.formatting.inlineMarks).some(x => x);
  const hasAlignment = documentFeatures.formatting.alignment.center || documentFeatures.formatting.alignment.end;
  const hasLists = documentFeatures.formatting.listTypes.unordered || documentFeatures.formatting.listTypes.ordered;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ToolbarContainer, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ToolbarScrollArea, {
      children: [!!documentFeatures.formatting.headings.levels.length && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(HeadingMenu, {
        headingLevels: documentFeatures.formatting.headings.levels
      }), hasMarks && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(InlineMarks, {
        marks: documentFeatures.formatting.inlineMarks
      }), (hasAlignment || hasLists) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ToolbarGroup, {
        children: [hasAlignment && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TextAlignMenu, {
          alignment: documentFeatures.formatting.alignment
        }), hasLists && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ListButtons, {
          lists: documentFeatures.formatting.listTypes
        })]
      }), (documentFeatures.dividers || documentFeatures.links || !!documentFeatures.images || documentFeatures.formatting.blockTypes.blockquote || documentFeatures.tables || !!documentFeatures.layouts.length || documentFeatures.formatting.blockTypes.code) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(ToolbarGroup, {
        children: [documentFeatures.dividers && dividerButton, documentFeatures.links && linkButton, documentFeatures.images && imageButton, documentFeatures.formatting.blockTypes.blockquote && blockquoteButton, !!documentFeatures.layouts.length && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LayoutsButton, {
          layouts: documentFeatures.layouts
        }), documentFeatures.formatting.blockTypes.code && codeButton, documentFeatures.tables && tableButton]
      })]
    }), (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
      return viewState && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
        gap: "xsmall",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .ToolbarSeparator */ .Jf, {}), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .Button */ .zx, {
            prominence: "low",
            onPress: () => {
              viewState.toggle();
            },
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
              src: viewState.expanded ? _keystar_ui_icon_icons_minimizeIcon__WEBPACK_IMPORTED_MODULE_29__/* .minimizeIcon */ .Y : _keystar_ui_icon_icons_maximizeIcon__WEBPACK_IMPORTED_MODULE_28__/* .maximizeIcon */ .M
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
            children: viewState.expanded ? 'Collapse' : 'Expand'
          })]
        })]
      });
    }, [viewState]), !!hasBlockItems && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(InsertBlockMenu, {})]
  });
}

/** Group buttons together that don't fit into an `ActionGroup` semantically. */
const ToolbarGroup = _ref2 => {
  let {
    children
  } = _ref2;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    gap: "regular",
    children: children
  });
};
const ToolbarContainer = _ref3 => {
  let {
    children
  } = _ref3;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    minWidth: 0,
    backgroundColor: "canvas",
    borderTopStartRadius: "medium",
    borderTopEndRadius: "medium",
    position: "sticky",
    zIndex: 2,
    insetTop: 0,
    children: [children, /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
      role: "presentation" // dividing line
      ,
      borderBottom: "muted",
      position: "absolute",
      insetX: "medium",
      insetBottom: 0
    })]
  });
};
const ToolbarScrollArea = props => {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC
  // borderRadius="regular"
  // backgroundColor="surfaceSecondary"
  , {
    padding: "regular",
    paddingEnd: "medium",
    gap: "large",
    flex: true,
    minWidth: 0,
    UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      msOverflowStyle: 'none' /* for Internet Explorer, Edge */,
      scrollbarWidth: 'none' /* for Firefox */,
      overflowX: 'auto',
      /* for Chrome, Safari, and Opera */
      '&::-webkit-scrollbar': {
        display: 'none'
      }
    }),
    ...props
  });
};
const headingMenuVals = new Map([['normal', 'normal'], ['1', 1], ['2', 2], ['3', 3], ['4', 4], ['5', 5], ['6', 6]]);
const HeadingMenu = _ref4 => {
  let {
    headingLevels
  } = _ref4;
  const {
    editor,
    textStyles
  } = useToolbarState();
  const isDisabled = textStyles.allowedHeadingLevels.length === 0;
  const items = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    let resolvedItems = [{
      name: 'Paragraph',
      id: 'normal'
    }];
    headingLevels.forEach(level => {
      resolvedItems.push({
        name: `Heading ${level}`,
        id: level.toString()
      });
    });
    return resolvedItems;
  }, [headingLevels]);
  const selected = textStyles.selected.toString();
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_picker__WEBPACK_IMPORTED_MODULE_38__/* .Picker */ .cW, {
    flexShrink: 0,
    width: "scale.1700",
    prominence: "low",
    "aria-label": "Text block",
    items: items,
    isDisabled: isDisabled,
    selectedKey: selected,
    onSelectionChange: selected => {
      let key = headingMenuVals.get(selected);
      if (key === 'normal') {
        slate__WEBPACK_IMPORTED_MODULE_86__.Editor.withoutNormalizing(editor, () => {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'level', {
            match: n => n.type === 'heading'
          });
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
            type: 'paragraph'
          }, {
            match: n => n.type === 'heading'
          });
        });
      } else if (key) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
          type: 'heading',
          level: key
        }, {
          match: node => node.type === 'paragraph' || node.type === 'heading'
        });
      }
      slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
    },
    children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
      children: item.name
    }, item.id)
  }), [editor, isDisabled, items, selected]);
};
function InsertBlockMenu() {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const componentBlocks = useDocumentEditorConfig().componentBlocks;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .MenuTrigger */ .bF, {
    align: "end",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
        marginY: "regular",
        marginEnd: "medium",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
          src: _keystar_ui_icon_icons_plusIcon__WEBPACK_IMPORTED_MODULE_30__/* .plusIcon */ .R
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
          src: _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_25__/* .chevronDownIcon */ .i
        })]
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
          children: "Insert"
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
          children: "/"
        })]
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_37__/* .Menu */ .v2, {
      onAction: key => {
        insertComponentBlock(editor, componentBlocks, key);
      },
      items: Object.entries(componentBlocks),
      children: _ref5 => {
        let [key, item] = _ref5;
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
          children: item.label
        }, key);
      }
    })]
  });
}
const inlineMarks = [{
  key: 'bold',
  label: 'Bold',
  icon: _keystar_ui_icon_icons_boldIcon__WEBPACK_IMPORTED_MODULE_24__/* .boldIcon */ .r,
  shortcut: `B`
}, {
  key: 'italic',
  label: 'Italic',
  icon: _keystar_ui_icon_icons_italicIcon__WEBPACK_IMPORTED_MODULE_27__/* .italicIcon */ .Z,
  shortcut: `I`
}, {
  key: 'underline',
  label: 'Underline',
  icon: _keystar_ui_icon_icons_underlineIcon__WEBPACK_IMPORTED_MODULE_36__/* .underlineIcon */ .Q,
  shortcut: `U`
}, {
  key: 'strikethrough',
  label: 'Strikethrough',
  icon: _keystar_ui_icon_icons_strikethroughIcon__WEBPACK_IMPORTED_MODULE_32__/* .strikethroughIcon */ .U
}, {
  key: 'code',
  label: 'Code',
  icon: _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_26__/* .codeIcon */ .z
}, {
  key: 'superscript',
  label: 'Superscript',
  icon: _keystar_ui_icon_icons_superscriptIcon__WEBPACK_IMPORTED_MODULE_34__/* .superscriptIcon */ .Y
}, {
  key: 'subscript',
  label: 'Subscript',
  icon: _keystar_ui_icon_icons_subscriptIcon__WEBPACK_IMPORTED_MODULE_33__/* .subscriptIcon */ .N
}, {
  key: 'clearFormatting',
  label: 'Clear formatting',
  icon: _keystar_ui_icon_icons_removeFormattingIcon__WEBPACK_IMPORTED_MODULE_31__/* .removeFormattingIcon */ .v
}];
function InlineMarks(_ref6) {
  let {
    marks: _marksShown
  } = _ref6;
  const {
    editor,
    clearFormatting: {
      isDisabled
    },
    marks
  } = useToolbarState();
  const marksShown = useMemoStringified(_marksShown);
  const selectedKeys = useMemoStringified(Object.keys(marks).filter(key => marks[key].isSelected));
  const disabledKeys = useMemoStringified(Object.keys(marks).filter(key => marks[key].isDisabled).concat(isDisabled ? 'clearFormatting' : []));
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    const items = inlineMarks.filter(item => item.key === 'clearFormatting' || marksShown[item.key]);
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .ActionGroup */ .W, {
      UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        minWidth: `calc(${_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.element.medium} * 4)`
      }),
      prominence: "low",
      density: "compact",
      buttonLabelBehavior: "hide",
      overflowMode: "collapse",
      summaryIcon: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
        src: _keystar_ui_icon_icons_typeIcon__WEBPACK_IMPORTED_MODULE_35__/* .typeIcon */ .R
      }),
      items: items,
      selectionMode: "multiple",
      selectedKeys: selectedKeys,
      disabledKeys: disabledKeys,
      onAction: key => {
        if (key === 'clearFormatting') {
          (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.h)(editor);
        } else {
          var _Editor$marks;
          const mark = key;
          if ((_Editor$marks = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.marks(editor)) !== null && _Editor$marks !== void 0 && _Editor$marks[mark]) {
            slate__WEBPACK_IMPORTED_MODULE_86__.Editor.removeMark(editor, mark);
          } else {
            slate__WEBPACK_IMPORTED_MODULE_86__.Editor.addMark(editor, mark, true);
          }
        }
        slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
      },
      children: item => {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_23__/* .Item */ .c, {
          textValue: item.label,
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Text, {
            children: item.label
          }), 'shortcut' in item && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_15__.Kbd, {
            meta: true,
            children: item.shortcut
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
            src: item.icon
          })]
        }, item.key);
      }
    });
  }, [disabledKeys, editor, marksShown, selectedKeys]);
}
function useMemoStringified(value) {
  // eslint-disable-next-line react-hooks/exhaustive-deps
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => value, [JSON.stringify(value)]);
}

const HeadingElement = _ref => {
  let {
    attributes,
    children,
    element
  } = _ref;
  const ElementType = `h${element.level}`;
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlateStatic */ ._7)();
  const {
    documentFeatures
  } = useDocumentEditorConfig();
  const [dialogOpen, setDialogOpen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);
  if (Object.keys(documentFeatures.formatting.headings.schema).length === 0) {
    return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ElementType, {
      ...attributes,
      className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
      style: {
        color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralEmphasis,
        textAlign: element.textAlign
      },
      children: children
    });
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ElementType, {
      className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
      style: {
        color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralEmphasis,
        textAlign: element.textAlign
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopoverTrigger */ .oR, {
        element: element,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
          children: children
        }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .BlockPopover */ .V2, {
          children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
            gap: "regular",
            padding: "regular",
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CustomAttributesEditButton, {
              onPress: () => setDialogOpen(true)
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .TooltipTrigger */ .a, {
              children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_5__/* .ActionButton */ .Kk, {
                prominence: "low",
                onPress: () => {
                  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.removeNodes(editor, {
                    at: slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, element)
                  });
                },
                children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_icon__WEBPACK_IMPORTED_MODULE_7__/* .Icon */ .J, {
                  src: _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_45__/* .trash2Icon */ .S
                })
              }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_14__/* .Tooltip */ .u, {
                tone: "critical",
                children: "Remove"
              })]
            })]
          })
        })]
      })
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CustomAttributesDialog, {
      element: element,
      schema: documentFeatures.formatting.headings.schema,
      isOpen: dialogOpen,
      nodeLabel: "Heading",
      onDismiss: () => setDialogOpen(false)
    })]
  });
};

const renderElement = props => {
  switch (props.element.type) {
    case 'layout':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LayoutContainer, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'layout-area':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LayoutArea, {
        ...props
      });
    case 'code':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(CodeElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'component-block':
      {
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ComponentBlocksElement, {
          attributes: props.attributes,
          children: props.children,
          element: props.element
        });
      }
    case 'component-inline-prop':
    case 'component-block-prop':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ComponentInlineProp, {
        ...props
      });
    case 'heading':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(HeadingElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'link':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(LinkElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'ordered-list':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("ol", {
        className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
        ...props.attributes,
        children: props.children
      });
    case 'unordered-list':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("ul", {
        className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
        ...props.attributes,
        children: props.children
      });
    case 'list-item':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("li", {
        ...props.attributes,
        children: props.children
      });
    case 'list-item-content':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
        ...props.attributes,
        children: props.children
      });
    case 'blockquote':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(BlockquoteElement, {
        ...props
      });
    case 'divider':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(DividerElement, {
        ...props
      });
    case 'image':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ImageElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-head':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableHeadElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-body':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableBodyElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-row':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableRowElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    case 'table-cell':
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableCellElement, {
        attributes: props.attributes,
        children: props.children,
        element: props.element
      });
    default:
      let {
        textAlign
      } = props.element;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("p", {
        className: _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.b,
        style: {
          textAlign
        },
        ...props.attributes,
        children: props.children
      });
  }
};

function getOptions(toolbarState, componentBlocks) {
  const options = [...Object.keys(componentBlocks).map(key => ({
    label: componentBlocks[key].label,
    insert: editor => {
      insertComponentBlock(editor, componentBlocks, key);
    }
  })), ...toolbarState.textStyles.allowedHeadingLevels.filter(a => toolbarState.editorDocumentFeatures.formatting.headings.levels.includes(a)).map(level => ({
    label: `Heading ${level}`,
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'heading',
        level,
        children: [{
          text: ''
        }]
      });
    }
  })), !toolbarState.blockquote.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.blockquote && {
    label: 'Blockquote',
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'blockquote',
        children: [{
          text: ''
        }]
      });
    }
  }, !toolbarState.code.isDisabled && toolbarState.editorDocumentFeatures.formatting.blockTypes.code && {
    label: 'Code block',
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'code',
        children: [{
          text: ''
        }]
      });
    }
  }, !!toolbarState.editorDocumentFeatures.images && {
    label: 'Image',
    async insert(editor) {
      const image = await (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_60__/* .getUploadedImage */ .tH)();
      if (image) {
        (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
          type: 'image',
          src: image,
          alt: '',
          title: '',
          children: [{
            text: ''
          }]
        });
      }
    }
  }, !!toolbarState.editorDocumentFeatures.tables && {
    label: 'Table',
    insert: insertTable
  }, !toolbarState.dividers.isDisabled && toolbarState.editorDocumentFeatures.dividers && {
    label: 'Divider',
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'divider',
        children: [{
          text: ''
        }]
      });
    }
  }, !!toolbarState.editorDocumentFeatures.layouts.length && {
    label: 'Layout',
    insert(editor) {
      insertLayout(editor, toolbarState.editorDocumentFeatures.layouts[0]);
    }
  }, !toolbarState.lists.ordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.ordered && {
    label: 'Numbered List',
    keywords: ['ordered list'],
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'ordered-list',
        children: [{
          text: ''
        }]
      });
    }
  }, !toolbarState.lists.unordered.isDisabled && toolbarState.editorDocumentFeatures.formatting.listTypes.unordered && {
    label: 'Bullet List',
    keywords: ['unordered list'],
    insert(editor) {
      (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, {
        type: 'unordered-list',
        children: [{
          text: ''
        }]
      });
    }
  }];
  return options.filter(x => typeof x !== 'boolean');
}
function insertOption(editor, text, option) {
  const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, text);
  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.delete(editor, {
    at: {
      focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, path),
      anchor: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, path)
    }
  });
  option.insert(editor);
}
function InsertMenu(_ref) {
  let {
    children,
    text
  } = _ref;
  const toolbarState = useToolbarState();
  const {
    editor
  } = toolbarState;
  const {
    componentBlocks
  } = useDocumentEditorConfig();
  const options = (0,match_sorter__WEBPACK_IMPORTED_MODULE_43__/* .matchSorter */ .Lu)(getOptions(toolbarState, componentBlocks), text.text.slice(1), {
    keys: ['label', 'keywords']
  }).map((option, index) => ({
    ...option,
    index
  }));
  const stateRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({
    options,
    text
  });
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    stateRef.current = {
      options,
      text
    };
  });
  const listenerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(_event => {});
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    listenerRef.current = event => {
      if (event.defaultPrevented) return;
      switch (event.key) {
        case 'ArrowDown':
          {
            if (stateRef.current.options.length) {
              event.preventDefault();
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey((Number(state.selectionManager.focusedKey) === stateRef.current.options.length - 1 ? 0 : Number(state.selectionManager.focusedKey) + 1).toString());
            }
            return;
          }
        case 'ArrowUp':
          {
            if (stateRef.current.options.length) {
              event.preventDefault();
              state.selectionManager.setFocused(true);
              state.selectionManager.setFocusedKey((state.selectionManager.focusedKey === '0' ? stateRef.current.options.length - 1 : Number(state.selectionManager.focusedKey) - 1).toString());
            }
            return;
          }
        case 'Enter':
          {
            const option = stateRef.current.options[Number(state.selectionManager.focusedKey)];
            if (option) {
              insertOption(editor, stateRef.current.text, option);
              event.preventDefault();
            }
            return;
          }
        case 'Escape':
          {
            const path = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.findPath(editor, stateRef.current.text);
            slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'insertMenu', {
              at: path
            });
            event.preventDefault();
            return;
          }
      }
    };
  });
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    const domNode = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMNode(editor, editor);
    let listener = event => listenerRef.current(event);
    domNode.addEventListener('keydown', listener);
    return () => {
      domNode.removeEventListener('keydown', listener);
    };
  }, [editor]);
  const triggerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  const overlayState = (0,_react_stately_overlays__WEBPACK_IMPORTED_MODULE_90__/* .useOverlayTriggerState */ .d)({
    isOpen: true
  });
  const {
    triggerProps: {
      onPress,
      ...triggerProps
    },
    overlayProps
  } = (0,_react_aria_overlays__WEBPACK_IMPORTED_MODULE_91__/* .useOverlayTrigger */ .IB)({
    type: 'listbox'
  }, overlayState, triggerRef);
  let state = (0,_react_stately_list__WEBPACK_IMPORTED_MODULE_92__/* .useListState */ .n_)({
    items: options,
    children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_79__/* .Item */ .ck, {
      children: item.label
    }, item.index)
  });
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    if (!state.selectionManager.isFocused && state.collection.size) {
      state.selectionManager.setFocused(true);
      state.selectionManager.setFocusedKey('0');
    }
  }, [state]);
  const scrollableRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    var _scrollableRef$curren, _scrollableRef$curren2;
    const element = (_scrollableRef$curren = scrollableRef.current) === null || _scrollableRef$curren === void 0 ? void 0 : (_scrollableRef$curren2 = _scrollableRef$curren.querySelector('[role="listbox"] [role="presentation"]')) === null || _scrollableRef$curren2 === void 0 ? void 0 : _scrollableRef$curren2.children[state.selectionManager.focusedKey];
    if (element) {
      (0,scroll_into_view_if_needed__WEBPACK_IMPORTED_MODULE_93__/* ["default"] */ .Z)(element, {
        scrollMode: 'if-needed',
        boundary: scrollableRef.current,
        block: 'nearest'
      });
    }
  }, [state.selectionManager.focusedKey]);
  const listboxRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);
  let layout = (0,_keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_79__/* .useListBoxLayout */ .vG)(state);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, {
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
      ...triggerProps,
      role: "button",
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.accent,
        fontWeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.typography.fontWeight.medium
      }),
      ref: triggerRef,
      children: children
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_80__/* .Popover */ .J2, {
      width: "alias.singleLineWidth",
      placement: "bottom start",
      isNonModal: true,
      hideArrow: true,
      ...overlayProps,
      state: overlayState,
      triggerRef: triggerRef,
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("div", {
        className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
          overflow: 'scroll',
          maxHeight: 300
        }),
        ref: scrollableRef,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_79__/* .ListBoxBase */ .W5, {
          "aria-label": "Insert block",
          state: state,
          shouldUseVirtualFocus: true,
          layout: layout,
          ref: listboxRef,
          onAction: key => {
            insertOption(editor, text, options[key]);
          }
        })
      })
    })]
  });
}
const nodeListsWithoutInsertMenu = new WeakSet();
const nodesWithoutInsertMenu = new WeakSet();
function findPathWithInsertMenu(node, path) {
  if (slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText(node)) {
    return node.insertMenu ? path : undefined;
  }
  if (nodeListsWithoutInsertMenu.has(node.children)) {
    return;
  }
  for (const [index, child] of node.children.entries()) {
    if (nodesWithoutInsertMenu.has(child)) continue;
    let maybePath = findPathWithInsertMenu(child, [...path, index]);
    if (maybePath) {
      return maybePath;
    }
    nodesWithoutInsertMenu.add(child);
  }
  nodeListsWithoutInsertMenu.add(node.children);
}
function removeInsertMenuMarkWhenOutsideOfSelection(editor) {
  var _Editor$marks;
  const path = findPathWithInsertMenu(editor, []);
  if (path && !((_Editor$marks = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.marks(editor)) !== null && _Editor$marks !== void 0 && _Editor$marks.insertMenu) && (!editor.selection || !slate__WEBPACK_IMPORTED_MODULE_86__.Path.equals(editor.selection.anchor.path, path) || !slate__WEBPACK_IMPORTED_MODULE_86__.Path.equals(editor.selection.focus.path, path))) {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'insertMenu', {
      at: path
    });
    return true;
  }
  return false;
}
function withInsertMenu(editor) {
  const {
    normalizeNode,
    apply,
    insertText
  } = editor;
  editor.normalizeNode = _ref2 => {
    let [node, path] = _ref2;
    if (slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText(node) && node.insertMenu) {
      if (node.text[0] !== '/') {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'insertMenu', {
          at: path
        });
        return;
      }
      const whitespaceMatch = /\s/.exec(node.text);
      if (whitespaceMatch) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unsetNodes(editor, 'insertMenu', {
          at: {
            anchor: {
              path,
              offset: whitespaceMatch.index
            },
            focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, path)
          },
          match: slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText,
          split: true
        });
        return;
      }
    }
    if (slate__WEBPACK_IMPORTED_MODULE_86__.Editor.isEditor(editor) && removeInsertMenuMarkWhenOutsideOfSelection(editor)) {
      return;
    }
    normalizeNode([node, path]);
  };
  editor.apply = op => {
    apply(op);
    // we're calling this here AND in normalizeNode
    // because normalizeNode won't be called on selection changes
    // but apply will
    // we're still calling this from normalizeNode though because we want it to happen
    // when normalization happens
    if (op.type === 'set_selection') {
      removeInsertMenuMarkWhenOutsideOfSelection(editor);
    }
  };
  editor.insertText = text => {
    insertText(text);
    if (editor.selection && text === '/') {
      const startOfBlock = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
        match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
      })[1]);
      const before = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.before(editor, editor.selection.anchor, {
        unit: 'character'
      });
      if (before && (slate__WEBPACK_IMPORTED_MODULE_86__.Point.equals(startOfBlock, before) || before.offset !== 0 && /\s/.test(slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, before.path).text[before.offset - 1]))) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
          insertMenu: true
        }, {
          at: {
            anchor: before,
            focus: editor.selection.anchor
          },
          match: slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText,
          split: true
        });
      }
    }
  };
  return editor;
}

function Placeholder(_ref) {
  let {
    placeholder,
    children
  } = _ref;
  const [width, setWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)("span", {
    className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
      position: 'relative',
      display: 'inline-block',
      width
    }),
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
      contentEditable: false,
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        position: 'absolute',
        pointerEvents: 'none',
        display: 'inline-block',
        left: 0,
        top: 0,
        maxWidth: '100%',
        whiteSpace: 'nowrap',
        opacity: '0.5',
        userSelect: 'none',
        fontStyle: 'normal',
        fontWeight: 'normal',
        textDecoration: 'none',
        textAlign: 'left'
      }),
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
        ref: node => {
          if (node) {
            const offsetWidth = node.offsetWidth;
            if (offsetWidth !== width) {
              setWidth(offsetWidth);
            }
          }
        },
        children: placeholder
      })
    }), children]
  });
}
const Leaf = _ref2 => {
  let {
    leaf,
    text,
    children,
    attributes
  } = _ref2;
  const {
    underline,
    strikethrough,
    bold,
    italic,
    code,
    keyboard,
    superscript,
    subscript,
    placeholder,
    insertMenu,
    ...rest
  } = leaf;
  if (placeholder !== undefined) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(Placeholder, {
      placeholder: placeholder,
      children: children
    });
  }
  if (insertMenu) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(InsertMenu, {
      text: text,
      children: children
    });
  }
  if (code) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Box */ .xu, {
      elementType: "code",
      backgroundColor: "accent",
      paddingX: "xsmall",
      paddingY: 2,
      borderRadius: "small",
      UNSAFE_className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
        color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralEmphasis,
        fontSize: '0.85em',
        fontFamily: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.typography.fontFamily.code
      }),
      children: children
    });
  }
  if (bold) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("strong", {
      children: children
    });
  }
  if (strikethrough) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("s", {
      children: children
    });
  }
  if (italic) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("em", {
      children: children
    });
  }
  if (keyboard) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("kbd", {
      children: children
    });
  }
  if (superscript) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("sup", {
      children: children
    });
  }
  if (subscript) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("sub", {
      children: children
    });
  }
  if (underline) {
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("u", {
      children: children
    });
  }
  const prismClassNames = Object.keys(rest).filter(x => x.startsWith('prism_')).map(x => styles$1.get(x.replace('prism_', '')));
  if (prismClassNames.length) {
    const className = prismClassNames.join(' ');
    children = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
      className: className,
      children: children
    });
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)("span", {
    ...attributes,
    children: children
  });
};
const renderLeaf = props => {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(Leaf, {
    ...props
  });
};
const styles$1 = new Map([{
  types: ['comment', 'prolog', 'doctype', 'cdata'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralTertiary,
    fontStyle: 'italic'
  }
}, {
  types: ['atrule', 'attr-name', 'class-name', 'selector'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.amber11
  }
}, {
  types: ['boolean', 'constant', 'inserted-sign', 'entity', 'inserted', 'number', 'regex', 'symbol', 'variable'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.green11
  }
}, {
  types: ['attr-value', 'builtin', 'char', 'constant', 'generics', 'url'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.pink11
  }
}, {
  types: ['string'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.indigo9
  }
}, {
  types: ['annotation', 'deleted', 'deleted-sign', 'decorator', 'important', 'tag'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.red11
  }
}, {
  types: ['function', 'function-variable', 'operator'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.purple11
  }
}, {
  types: ['tag', 'selector', 'keyword'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.scale.indigo11
  }
}, {
  types: ['punctuation'],
  style: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutralSecondary
  }
}].flatMap(style => {
  const className = (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)(style.style);
  return style.types.map(x => [x, className]);
}));

function withBlockMarkdownShortcuts(documentFeatures, componentBlocks, editor) {
  const {
    insertText
  } = editor;
  const shortcuts = Object.create(null);
  const editorDocumentFeaturesForNormalizationToCheck = {
    ...documentFeatures
  };
  let addShortcut = function (text, insert, shouldBeEnabledInComponentBlock) {
    let type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'paragraph';
    if (!shouldBeEnabledInComponentBlock(editorDocumentFeaturesForNormalizationToCheck)) {
      return;
    }
    const trigger = text[text.length - 1];
    if (!shortcuts[trigger]) {
      shortcuts[trigger] = Object.create(null);
    }
    shortcuts[trigger][text] = {
      insert,
      type,
      shouldBeEnabledInComponentBlock
    };
  };
  addShortcut('1. ', () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'ordered-list',
      children: []
    }, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
    });
  }, features => features.formatting.listTypes.ordered);
  addShortcut('- ', () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'unordered-list',
      children: []
    }, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
    });
  }, features => features.formatting.listTypes.unordered);
  addShortcut('* ', () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'unordered-list',
      children: []
    }, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
    });
  }, features => features.formatting.listTypes.unordered);
  documentFeatures.formatting.headings.levels.forEach(level => {
    addShortcut('#'.repeat(level) + ' ', () => {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
        type: 'heading',
        level
      }, {
        match: node => node.type === 'paragraph' || node.type === 'heading'
      });
    }, features => features.formatting.headings.levels.includes(level), 'heading-or-paragraph');
  });
  addShortcut('> ', () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
      type: 'blockquote',
      children: []
    }, {
      match: node => node.type === 'paragraph'
    });
  }, features => features.formatting.blockTypes.blockquote);
  addShortcut('---', () => {
    insertDivider(editor);
  }, features => features.dividers);
  editor.insertText = text => {
    insertText(text);
    const shortcutsForTrigger = shortcuts[text];
    if (shortcutsForTrigger && editor.selection && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection)) {
      const {
        anchor
      } = editor.selection;
      const block = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
        match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
      });
      if (!block || block[0].type !== 'paragraph' && block[0].type !== 'heading') {
        return;
      }
      const start = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, block[1]);
      const range = {
        anchor,
        focus: start
      };
      const shortcutText = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.string(editor, range);
      const shortcut = shortcutsForTrigger[shortcutText];
      if (!shortcut || shortcut.type === 'paragraph' && block[0].type !== 'paragraph') {
        return;
      }
      const locationDocumentFeatures = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.g)(editor, documentFeatures, componentBlocks);
      if (locationDocumentFeatures && (locationDocumentFeatures.kind === 'inline' || !shortcut.shouldBeEnabledInComponentBlock(locationDocumentFeatures.documentFeatures))) {
        return;
      }

      // so that this starts a new undo group
      editor.history.undos.push({
        operations: [],
        selectionBefore: editor.selection
      });
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, range);
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.delete(editor);
      shortcut.insert();
    }
  };
  return editor;
}

function getDirectBlockquoteParentFromSelection(editor) {
  if (!editor.selection) return {
    isInside: false
  };
  const [, parentPath] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.parent(editor, editor.selection);
  if (!parentPath.length) {
    return {
      isInside: false
    };
  }
  const [maybeBlockquoteParent, maybeBlockquoteParentPath] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.parent(editor, parentPath);
  const isBlockquote = maybeBlockquoteParent.type === 'blockquote';
  return isBlockquote ? {
    isInside: true,
    path: maybeBlockquoteParentPath
  } : {
    isInside: false
  };
}
function withBlockquote(editor) {
  const {
    insertBreak,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const parentBlockquote = getDirectBlockquoteParentFromSelection(editor);
      if (parentBlockquote.isInside && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection) &&
      // the selection is at the start of the paragraph
      editor.selection.anchor.offset === 0 &&
      // it's the first paragraph in the panel
      editor.selection.anchor.path[editor.selection.anchor.path.length - 2] === 0) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
          match: node => node.type === 'blockquote',
          split: true
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const panel = getDirectBlockquoteParentFromSelection(editor);
    if (editor.selection && panel.isInside) {
      const [node, nodePath] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.node(editor, editor.selection);
      if (slate__WEBPACK_IMPORTED_MODULE_86__.Path.isDescendant(nodePath, panel.path) && slate__WEBPACK_IMPORTED_MODULE_86__.Node.string(node) === '') {
        slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
          match: node => node.type === 'blockquote',
          split: true
        });
        return;
      }
    }
    insertBreak();
  };
  return editor;
}

function withHeading(editor) {
  const {
    insertBreak
  } = editor;
  editor.insertBreak = () => {
    insertBreak();
    const entry = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: n => n.type === 'heading'
    });
    if (!entry || !editor.selection || !slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection)) {
      return;
    }
    const path = entry[1];
    if (
    // we want to unwrap the heading when the user inserted a break at the end of the heading
    // when the user inserts a break at the end of a heading, the new heading
    // that we want to unwrap will be empty so the end will be equal to the selection
    slate__WEBPACK_IMPORTED_MODULE_86__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_86__.Editor.end(editor, path), editor.selection.anchor)) {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
        at: path
      });
      return;
    }
    // we also want to unwrap the _previous_ heading when the user inserted a break
    // at the start of the heading, essentially just inserting an empty paragraph above the heading
    if (!slate__WEBPACK_IMPORTED_MODULE_86__.Path.hasPrevious(path)) {
      return;
    }
    const previousPath = slate__WEBPACK_IMPORTED_MODULE_86__.Path.previous(path);
    const previousNode = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, previousPath);
    if (previousNode.type === 'heading' && previousNode.children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText(previousNode.children[0]) && previousNode.children[0].text === '') {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.unwrapNodes(editor, {
        at: previousPath
      });
    }
  };
  return editor;
}

const allMarkdownShortcuts = {
  bold: ['**', '__'],
  italic: ['*', '_'],
  strikethrough: ['~~'],
  code: ['`']
};
function applyMark(editor, mark, shortcutText, startOfStartPoint) {
  // so that this starts a new undo group
  editor.history.undos.push({
    operations: [],
    selectionBefore: editor.selection
  });
  const startPointRef = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.pointRef(editor, startOfStartPoint);
  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.delete(editor, {
    at: editor.selection.anchor,
    distance: shortcutText.length,
    reverse: true
  });
  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.delete(editor, {
    at: startOfStartPoint,
    distance: shortcutText.length
  });
  slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setNodes(editor, {
    [mark]: true
  }, {
    match: slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText,
    split: true,
    at: {
      anchor: startPointRef.unref(),
      focus: editor.selection.anchor
    }
  });
  // once you've ended the shortcut, you're done with the mark
  // so we need to remove it so the text you insert after doesn't have it
  editor.removeMark(mark);
}
function withMarks(editorDocumentFeatures, componentBlocks, editor) {
  const {
    insertText,
    insertBreak
  } = editor;
  editor.insertBreak = () => {
    insertBreak();
    const marksAfterInsertBreak = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.marks(editor);
    if (!marksAfterInsertBreak || !editor.selection) return;
    const parentBlock = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
    });
    if (!parentBlock) return;
    const point = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.E)(editor, editor.selection.anchor);
    const marksAfterInsertBreakArr = Object.keys(marksAfterInsertBreak);
    if (!point || !slate__WEBPACK_IMPORTED_MODULE_86__.Path.isDescendant(point.path, parentBlock[1])) {
      for (const mark of marksAfterInsertBreakArr) {
        editor.removeMark(mark);
      }
      return;
    }
    const textNode = slate__WEBPACK_IMPORTED_MODULE_86__.Node.get(editor, point.path);
    for (const mark of marksAfterInsertBreakArr) {
      if (!textNode[mark]) {
        editor.removeMark(mark);
      }
    }
  };
  const selectedMarkdownShortcuts = {};
  const enabledMarks = editorDocumentFeatures.formatting.inlineMarks;
  Object.keys(allMarkdownShortcuts).forEach(mark => {
    if (enabledMarks[mark]) {
      selectedMarkdownShortcuts[mark] = allMarkdownShortcuts[mark];
    }
  });
  if (Object.keys(selectedMarkdownShortcuts).length === 0) return editor;
  editor.insertText = text => {
    insertText(text);
    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection)) {
      for (const [mark, shortcuts] of Object.entries(selectedMarkdownShortcuts)) {
        for (const shortcutText of shortcuts) {
          if (text === shortcutText[shortcutText.length - 1]) {
            // this function is not inlined because
            // https://github.com/swc-project/swc/issues/2622
            const startOfBlock = getStartOfBlock(editor);
            let startOfBlockToEndOfShortcutString = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.string(editor, {
              anchor: editor.selection.anchor,
              focus: startOfBlock
            });
            const hasWhitespaceBeforeEndOfShortcut = /\s/.test(startOfBlockToEndOfShortcutString.slice(-shortcutText.length - 1, -shortcutText.length));
            const endOfShortcutContainsExpectedContent = shortcutText === startOfBlockToEndOfShortcutString.slice(-shortcutText.length);
            if (hasWhitespaceBeforeEndOfShortcut || !endOfShortcutContainsExpectedContent) {
              continue;
            }
            const strToMatchOn = startOfBlockToEndOfShortcutString.slice(0, -shortcutText.length - 1);
            // TODO: use regex probs
            for (const [offsetFromStartOfBlock] of [...strToMatchOn].reverse().entries()) {
              const expectedShortcutText = strToMatchOn.slice(offsetFromStartOfBlock, offsetFromStartOfBlock + shortcutText.length);
              if (expectedShortcutText !== shortcutText) {
                continue;
              }
              const startOfStartOfShortcut = offsetFromStartOfBlock === 0 ? startOfBlock : (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.E)(editor, startOfBlock, {
                distance: offsetFromStartOfBlock
              });
              const endOfStartOfShortcut = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.after(editor, startOfStartOfShortcut, {
                distance: shortcutText.length
              });
              if (offsetFromStartOfBlock !== 0 && !/\s/.test(slate__WEBPACK_IMPORTED_MODULE_86__.Editor.string(editor, {
                anchor: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.before(editor, startOfStartOfShortcut, {
                  unit: 'character'
                }),
                focus: startOfStartOfShortcut
              }))) {
                continue;
              }
              const contentBetweenShortcuts = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.string(editor, {
                anchor: endOfStartOfShortcut,
                focus: editor.selection.anchor
              }).slice(0, -shortcutText.length);
              if (contentBetweenShortcuts === '' || /\s/.test(contentBetweenShortcuts[0])) {
                continue;
              }

              // this is a bit of a weird one
              // let's say you had <text>__thing _<cursor /></text> and you insert `_`.
              // without the below, that would turn into <text italic>_thing _<cursor /></text>
              // but it's probably meant to be bold but it's not because of the space before the ending _
              // there's probably a better way to do this but meh, this works
              if (mark === 'italic' && (contentBetweenShortcuts[0] === '_' || contentBetweenShortcuts[0] === '*')) {
                continue;
              }
              // this is the start of a code block shortcut
              if (mark === 'code' && contentBetweenShortcuts === '`') {
                continue;
              }
              const ancestorComponentChildFieldDocumentFeatures = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.g)(editor, editorDocumentFeatures, componentBlocks);
              if (ancestorComponentChildFieldDocumentFeatures && ancestorComponentChildFieldDocumentFeatures.inlineMarks !== 'inherit' && ancestorComponentChildFieldDocumentFeatures.inlineMarks[mark] === false) {
                continue;
              }
              applyMark(editor, mark, shortcutText, startOfStartOfShortcut);
              return;
            }
          }
        }
      }
    }
  };
  return editor;
}
function getStartOfBlock(editor) {
  return slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
    match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
  })[1]);
}

// very loosely based on https://github.com/ianstormtaylor/slate/blob/d22c76ae1313fe82111317417912a2670e73f5c9/site/examples/paste-html.tsx
function getAlignmentFromElement(element) {
  const parent = element.parentElement;
  // confluence
  const attribute = parent === null || parent === void 0 ? void 0 : parent.getAttribute('data-align');
  // note: we don't show html that confluence would parse as alignment
  // we could change that but meh
  // (they match on div.fabric-editor-block-mark with data-align)
  if (attribute === 'center' || attribute === 'end') {
    return attribute;
  }
  if (element instanceof HTMLElement) {
    // Google docs
    const textAlign = element.style.textAlign;
    if (textAlign === 'center') {
      return 'center';
    }
    // TODO: RTL things?
    if (textAlign === 'right' || textAlign === 'end') {
      return 'end';
    }
  }
}
const headings = {
  H1: 1,
  H2: 2,
  H3: 3,
  H4: 4,
  H5: 5,
  H6: 6
};
const TEXT_TAGS = {
  CODE: 'code',
  DEL: 'strikethrough',
  S: 'strikethrough',
  STRIKE: 'strikethrough',
  EM: 'italic',
  I: 'italic',
  STRONG: 'bold',
  U: 'underline',
  SUP: 'superscript',
  SUB: 'subscript',
  KBD: 'keyboard'
};
function marksFromElementAttributes(element) {
  const marks = new Set();
  const style = element.style;
  const {
    nodeName
  } = element;
  const markFromNodeName = TEXT_TAGS[nodeName];
  if (markFromNodeName) {
    marks.add(markFromNodeName);
  }
  const {
    fontWeight,
    textDecoration,
    verticalAlign
  } = style;
  if (textDecoration === 'underline') {
    marks.add('underline');
  } else if (textDecoration === 'line-through') {
    marks.add('strikethrough');
  }
  // confluence
  if (nodeName === 'SPAN' && element.classList.contains('code')) {
    marks.add('code');
  }
  // Google Docs does weird things with <b>
  if (nodeName === 'B' && fontWeight !== 'normal') {
    marks.add('bold');
  } else if (typeof fontWeight === 'string' && (fontWeight === 'bold' || fontWeight === 'bolder' || fontWeight === '1000' || /^[5-9]\d{2}$/.test(fontWeight))) {
    marks.add('bold');
  }
  if (style.fontStyle === 'italic') {
    marks.add('italic');
  }
  // Google Docs uses vertical align for subscript and superscript instead of <sup> and <sub>
  if (verticalAlign === 'super') {
    marks.add('superscript');
  } else if (verticalAlign === 'sub') {
    marks.add('subscript');
  }
  return marks;
}
function deserializeHTML(html) {
  const parsed = new DOMParser().parseFromString(html, 'text/html');
  return fixNodesForBlockChildren(deserializeNodes(parsed.body.childNodes));
}
function deserializeHTMLNode(el) {
  if (!(el instanceof globalThis.HTMLElement)) {
    const text = el.textContent;
    if (!text) {
      return [];
    }
    return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)(text);
  }
  if (el.nodeName === 'BR') {
    return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)('\n');
  }
  if (el.nodeName === 'IMG') {
    const alt = el.getAttribute('alt');
    return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)(alt !== null && alt !== void 0 ? alt : '');
  }
  if (el.nodeName === 'HR') {
    return [{
      type: 'divider',
      children: [{
        text: ''
      }]
    }];
  }
  const marks = marksFromElementAttributes(el);

  // Dropbox Paper displays blockquotes as lists for some reason
  if (el.classList.contains('listtype-quote')) {
    marks.delete('italic');
    return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.k)(marks, () => [{
      type: 'blockquote',
      children: fixNodesForBlockChildren(deserializeNodes(el.childNodes))
    }]);
  }
  return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.k)(marks, () => {
    const {
      nodeName
    } = el;
    if (nodeName === 'A') {
      const href = el.getAttribute('href');
      if (href) {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.l)(href, () => (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.m)('underline', () => deserializeNodes(el.childNodes)));
      }
    }
    if (nodeName === 'PRE' && el.textContent) {
      return [{
        type: 'code',
        children: [{
          text: el.textContent || ''
        }]
      }];
    }
    const deserialized = deserializeNodes(el.childNodes);
    const children = fixNodesForBlockChildren(deserialized);
    if (nodeName === 'LI') {
      let nestedList;
      const listItemContent = {
        type: 'list-item-content',
        children: children.filter(node => {
          if (nestedList === undefined && (node.type === 'ordered-list' || node.type === 'unordered-list')) {
            nestedList = node;
            return false;
          }
          return true;
        })
      };
      const listItemChildren = nestedList ? [listItemContent, nestedList] : [listItemContent];
      return [{
        type: 'list-item',
        children: listItemChildren
      }];
    }
    if (nodeName === 'P') {
      return [{
        type: 'paragraph',
        textAlign: getAlignmentFromElement(el),
        children
      }];
    }
    const headingLevel = headings[nodeName];
    if (typeof headingLevel === 'number') {
      return [{
        type: 'heading',
        level: headingLevel,
        textAlign: getAlignmentFromElement(el),
        children
      }];
    }
    if (nodeName === 'BLOCKQUOTE') {
      return [{
        type: 'blockquote',
        children
      }];
    }
    if (nodeName === 'OL') {
      return [{
        type: 'ordered-list',
        children
      }];
    }
    if (nodeName === 'UL') {
      return [{
        type: 'unordered-list',
        children
      }];
    }
    if (nodeName === 'DIV' && !(0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(children[0])) {
      return [{
        type: 'paragraph',
        children
      }];
    }
    return deserialized;
  });
}
function deserializeNodes(nodes) {
  const outputNodes = [];
  for (const node of nodes) {
    outputNodes.push(...deserializeHTMLNode(node));
  }
  return outputNodes;
}
function fixNodesForBlockChildren(deserializedNodes) {
  if (!deserializedNodes.length) {
    // Slate also gets unhappy if an element has no children
    // the empty text nodes will get normalized away if they're not needed
    return [{
      text: ''
    }];
  }
  if (deserializedNodes.some(_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)) {
    const result = [];
    let queuedInlines = [];
    const flushInlines = () => {
      if (queuedInlines.length) {
        result.push({
          type: 'paragraph',
          children: queuedInlines
        });
        queuedInlines = [];
      }
    };
    for (const node of deserializedNodes) {
      if ((0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(node)) {
        flushInlines();
        result.push(node);
        continue;
      }
      // we want to ignore whitespace between block level elements
      // useful info about whitespace in html:
      // https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Whitespace
      if (slate__WEBPACK_IMPORTED_MODULE_86__.Node.string(node).trim() !== '') {
        queuedInlines.push(node);
      }
    }
    flushInlines();
    return result;
  }
  return deserializedNodes;
}

const markdownConfig = {
  mdastExtensions: [mdast_util_gfm_autolink_literal_from_markdown__WEBPACK_IMPORTED_MODULE_82__, mdast_util_gfm_strikethrough_from_markdown__WEBPACK_IMPORTED_MODULE_84__],
  extensions: [micromark_extension_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_83__, micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_85___default()()]
};
function deserializeMarkdown(markdown) {
  const root = mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_81___default()(markdown, markdownConfig);
  let nodes = root.children;
  if (nodes.length === 1 && nodes[0].type === 'paragraph') {
    nodes = nodes[0].children;
  }
  return deserializeChildren(nodes, markdown);
}
function deserializeChildren(nodes, input) {
  const outputNodes = [];
  for (const node of nodes) {
    const result = deserializeMarkdownNode(node, input);
    if (result.length) {
      outputNodes.push(...result);
    }
  }
  if (!outputNodes.length) {
    outputNodes.push({
      text: ''
    });
  }
  return outputNodes;
}
function deserializeMarkdownNode(node, input) {
  switch (node.type) {
    case 'blockquote':
      {
        return [{
          type: 'blockquote',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'link':
      {
        // arguably this could just return a link node rather than use setLinkForChildren since the children _should_ only be inlines
        // but rather than relying on the markdown parser we use being correct in this way since it isn't nicely codified in types
        // let's be safe since we already have the code to do it the safer way because of html pasting
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.l)(node.url, () => deserializeChildren(node.children, input));
      }
    case 'code':
      {
        return [{
          type: 'code',
          children: [{
            text: node.value
          }]
        }];
      }
    case 'paragraph':
      {
        return [{
          type: 'paragraph',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'heading':
      {
        return [{
          type: 'heading',
          level: node.depth,
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'list':
      {
        return [{
          type: node.ordered ? 'ordered-list' : 'unordered-list',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'listItem':
      {
        return [{
          type: 'list-item',
          children: deserializeChildren(node.children, input)
        }];
      }
    case 'thematicBreak':
      {
        return [{
          type: 'divider',
          children: [{
            text: ''
          }]
        }];
      }
    case 'break':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)('\n');
      }
    case 'delete':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.n)('strikethrough', () => deserializeChildren(node.children, input));
      }
    case 'strong':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.n)('bold', () => deserializeChildren(node.children, input));
      }
    case 'emphasis':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.n)('italic', () => deserializeChildren(node.children, input));
      }
    case 'inlineCode':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.n)('code', () => (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)(node.value));
      }
    case 'text':
      {
        return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)(node.value);
      }
  }
  return (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.j)(input.slice(node.position.start.offset, node.position.end.offset));
}

const urlPattern = /https?:\/\//;
function insertFragmentButDifferent(editor, nodes) {
  if ((0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(nodes[0])) {
    (0,_ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i)(editor, nodes);
  } else {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertFragment(editor, nodes);
  }
}
const clipboardFormatKey = 'x-keystatic-fragment';
const getDefaultView = value => {
  return value && value.ownerDocument && value.ownerDocument.defaultView || null;
};
const isDOMNode = value => {
  const window = getDefaultView(value);
  return !!window && value instanceof window.Node;
};
const isDOMText = value => {
  return isDOMNode(value) && value.nodeType === 3;
};
const isDOMElement = value => {
  return isDOMNode(value) && value.nodeType === 1;
};
const getPlainText = domNode => {
  let text = '';
  if (isDOMText(domNode) && domNode.nodeValue) {
    return domNode.nodeValue;
  }
  if (isDOMElement(domNode)) {
    for (const childNode of Array.from(domNode.childNodes)) {
      text += getPlainText(childNode);
    }
    const display = getComputedStyle(domNode).getPropertyValue('display');
    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {
      text += '\n';
    }
  }
  return text;
};
function setFragmentData(e, data) {
  const {
    selection
  } = e;
  if (!selection) {
    return;
  }
  const [start, end] = slate__WEBPACK_IMPORTED_MODULE_86__.Range.edges(selection);
  const startVoid = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.void(e, {
    at: start.path
  });
  const endVoid = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.void(e, {
    at: end.path
  });
  if (slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(selection) && !startVoid) {
    return;
  }

  // Create a fake selection so that we can add a Base64-encoded copy of the
  // fragment to the HTML, to decode on future pastes.
  const domRange = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMRange(e, selection);
  let contents = domRange.cloneContents();
  let attach = contents.childNodes[0];

  // Make sure attach is non-empty, since empty nodes will not get copied.
  contents.childNodes.forEach(node => {
    if (node.textContent && node.textContent.trim() !== '') {
      attach = node;
    }
  });

  // COMPAT: If the end node is a void node, we need to move the end of the
  // range from the void node's spacer span, to the end of the void node's
  // content, since the spacer is before void's content in the DOM.
  if (endVoid) {
    const [voidNode] = endVoid;
    const r = domRange.cloneRange();
    const domNode = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMNode(e, voidNode);
    r.setEndAfter(domNode);
    contents = r.cloneContents();
  }

  // COMPAT: If the start node is a void node, we need to attach the encoded
  // fragment to the void node's content node instead of the spacer, because
  // attaching it to empty `<div>/<span>` nodes will end up having it erased by
  // most browsers. (2018/04/27)
  if (startVoid) {
    attach = contents.querySelector('[data-slate-spacer]');
  }

  // Remove any zero-width space spans from the cloned DOM so that they don't
  // show up elsewhere when pasted.
  Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(zw => {
    const isNewline = zw.getAttribute('data-slate-zero-width') === 'n';
    zw.textContent = isNewline ? '\n' : '';
  });

  // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up
  // in the HTML, and can be used for intra-Slate pasting. If it's a text
  // node, wrap it in a `<span>` so we have something to set an attribute on.
  if (isDOMText(attach)) {
    const span = attach.ownerDocument.createElement('span');
    // COMPAT: In Chrome and Safari, if we don't add the `white-space` style
    // then leading and trailing spaces will be ignored. (2017/09/21)
    span.style.whiteSpace = 'pre';
    span.appendChild(attach);
    contents.appendChild(span);
    attach = span;
  }
  const fragment = e.getFragment();
  const string = JSON.stringify(fragment, (key, val) => {
    if (val instanceof Uint8Array) {
      return {
        [bytesName]: (0,js_base64__WEBPACK_IMPORTED_MODULE_94__/* .fromUint8Array */ .kZ)(val)
      };
    }
    return val;
  });
  const encoded = window.btoa(encodeURIComponent(string));
  attach.setAttribute('data-keystatic-fragment', encoded);
  data.setData(`application/${clipboardFormatKey}`, encoded);

  // Add the content to a <div> so that we can get its inner HTML.
  const div = contents.ownerDocument.createElement('div');
  div.appendChild(contents);
  div.setAttribute('hidden', 'true');
  contents.ownerDocument.body.appendChild(div);
  data.setData('text/html', div.innerHTML);
  data.setData('text/plain', getPlainText(div));
  contents.ownerDocument.body.removeChild(div);
}
const catchSlateFragment = /data-keystatic-fragment="(.+?)"/m;
const getSlateFragmentAttribute = dataTransfer => {
  const htmlData = dataTransfer.getData('text/html');
  const [, fragment] = htmlData.match(catchSlateFragment) || [];
  return fragment;
};
const bytesName = '$$keystaticUint8Array$$';
function withPasting(editor) {
  const {
    insertTextData
  } = editor;
  editor.setFragmentData = data => {
    setFragmentData(editor, data);
  };
  editor.insertFragmentData = data => {
    /**
     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment
     */
    const fragment = data.getData(`application/${clipboardFormatKey}`) || getSlateFragmentAttribute(data);
    if (fragment) {
      const decoded = decodeURIComponent(window.atob(fragment));
      const parsed = JSON.parse(decoded, (key, val) => typeof val === 'object' && val !== null && bytesName in val && typeof val[bytesName] === 'string' ? (0,js_base64__WEBPACK_IMPORTED_MODULE_94__/* .toUint8Array */ ._f)(val[bytesName]) : val);
      editor.insertFragment(parsed);
      return true;
    }
    return false;
  };
  editor.insertTextData = data => {
    const blockAbove = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
    });
    if ((blockAbove === null || blockAbove === void 0 ? void 0 : blockAbove[0].type) === 'code') {
      const plain = data.getData('text/plain');
      editor.insertText(plain);
      return true;
    }
    let vsCodeEditorData = data.getData('vscode-editor-data');
    if (vsCodeEditorData) {
      try {
        const vsCodeData = JSON.parse(vsCodeEditorData);
        if ((vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'markdown' || (vsCodeData === null || vsCodeData === void 0 ? void 0 : vsCodeData.mode) === 'mdx') {
          const plain = data.getData('text/plain');
          if (plain) {
            const fragment = deserializeMarkdown(plain);
            insertFragmentButDifferent(editor, fragment);
            return true;
          }
        }
      } catch (err) {
        console.log(err);
      }
    }
    const plain = data.getData('text/plain');
    if (
    // isValidURL is a bit more permissive than a user might expect
    // so for pasting, we'll constrain it to starting with https:// or http://
    urlPattern.test(plain) && (0,_isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_21__.i)(plain) && editor.selection && !slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection) &&
    // we only want to turn the selected text into a link if the selection is within the same block
    slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: node => (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(node) && !(0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i)(node.children[0])
    }) &&
    // and there is only text(potentially with marks) in the selection
    // no other links
    slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
      match: node => node.type === 'link'
    }).next().done) {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.wrapNodes(editor, {
        type: 'link',
        href: plain,
        children: []
      }, {
        split: true
      });
      return true;
    }
    const html = data.getData('text/html');
    if (html) {
      const fragment = deserializeHTML(html);
      insertFragmentButDifferent(editor, fragment);
      return true;
    }
    if (plain) {
      const fragment = deserializeMarkdown(plain);
      insertFragmentButDifferent(editor, fragment);
      return true;
    }
    return insertTextData(data);
  };
  return editor;
}

const shortcuts = {
  '...': '…',
  '-->': '→',
  '->': '→',
  '<-': '←',
  '<--': '←',
  '--': '–'
};
function withShortcuts(editor) {
  const {
    insertText
  } = editor;
  editor.insertText = text => {
    insertText(text);
    if (text === ' ' && editor.selection && slate__WEBPACK_IMPORTED_MODULE_86__.Range.isCollapsed(editor.selection)) {
      const selectionPoint = editor.selection.anchor;
      const ancestorBlock = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
        match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i
      });
      if (ancestorBlock) {
        Object.keys(shortcuts).forEach(shortcut => {
          const pointBefore = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.before(editor, selectionPoint, {
            unit: 'character',
            distance: shortcut.length + 1
          });
          if (pointBefore && slate__WEBPACK_IMPORTED_MODULE_86__.Path.isDescendant(pointBefore.path, ancestorBlock[1])) {
            const range = {
              anchor: selectionPoint,
              focus: pointBefore
            };
            const str = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.string(editor, range);
            if (str.slice(0, shortcut.length) === shortcut) {
              editor.history.undos.push({
                operations: [],
                selectionBefore: editor.selection
              });
              slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, range);
              editor.insertText(shortcuts[shortcut] + ' ');
            }
          }
        });
      }
    }
  };
  return editor;
}

function withSoftBreaks(editor) {
  // TODO: should soft breaks only work in particular places
  editor.insertSoftBreak = () => {
    slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.insertText(editor, '\n');
  };
  return editor;
}

const HOTKEYS = {
  'mod+b': 'bold',
  'mod+i': 'italic',
  'mod+u': 'underline'
};
function isMarkActive(editor, mark) {
  const marks = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.marks(editor);
  if (marks !== null && marks !== void 0 && marks[mark]) {
    return true;
  }
  // see the stuff about marks in toolbar-state for why this is here
  for (const entry of slate__WEBPACK_IMPORTED_MODULE_86__.Editor.nodes(editor, {
    match: slate__WEBPACK_IMPORTED_MODULE_86__.Text.isText
  })) {
    if (entry[0][mark]) {
      return true;
    }
  }
  return false;
}
const arrowKeyToDirection = new Map([['ArrowUp', 'up'], ['ArrowDown', 'down'], ['ArrowLeft', 'left'], ['ArrowRight', 'right']]);
const getKeyDownHandler = (editor, documentFeatures) => event => {
  if (event.defaultPrevented) return;
  for (const hotkey in HOTKEYS) {
    if (documentFeatures.formatting.inlineMarks[HOTKEYS[hotkey]] && (0,is_hotkey__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .ZP)(hotkey, event.nativeEvent)) {
      event.preventDefault();
      const mark = HOTKEYS[hotkey];
      const isActive = isMarkActive(editor, mark);
      if (isActive) {
        slate__WEBPACK_IMPORTED_MODULE_86__.Editor.removeMark(editor, mark);
      } else {
        slate__WEBPACK_IMPORTED_MODULE_86__.Editor.addMark(editor, mark, true);
      }
      return;
    }
  }
  if ((0,is_hotkey__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .ZP)('mod+\\', event.nativeEvent)) {
    (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.h)(editor);
    return;
  }
  if (documentFeatures.links && (0,is_hotkey__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .ZP)('mod+k', event.nativeEvent)) {
    event.preventDefault();
    wrapLink(editor, '');
    return;
  }
  if (event.key === 'Tab') {
    const didAction = event.shiftKey ? unnestList(editor) : nestList(editor);
    if (didAction) {
      event.preventDefault();
      return;
    }
  }
  if (event.key === 'Tab' && editor.selection) {
    const layoutArea = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: node => node.type === 'layout-area' || node.type === 'table-cell'
    });
    if (layoutArea) {
      const layoutAreaToEnter = event.shiftKey ? slate__WEBPACK_IMPORTED_MODULE_86__.Editor.before(editor, layoutArea[1], {
        unit: 'block'
      }) : slate__WEBPACK_IMPORTED_MODULE_86__.Editor.after(editor, layoutArea[1], {
        unit: 'block'
      });
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.setSelection(editor, {
        anchor: layoutAreaToEnter,
        focus: layoutAreaToEnter
      });
      event.preventDefault();
    }
  }
  if ((0,is_hotkey__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .ZP)('mod+a', event)) {
    const parentTable = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
      match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table')
    });
    if (parentTable) {
      slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, parentTable[1]);
      event.preventDefault();
      return;
    }
  }
  const direction = arrowKeyToDirection.get(event.key);
  const {
    selection
  } = editor;
  if (direction && selection) {
    const selectedTableArea = (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__.c)(editor);
    if (selectedTableArea) {
      var _Editor$above, _Editor$above2;
      const focusCellPath = (_Editor$above = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
        match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table-cell'),
        at: selection.focus.path
      })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[1];
      const anchorCellPath = (_Editor$above2 = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
        match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.n)('table-cell'),
        at: selection.anchor.path
      })) === null || _Editor$above2 === void 0 ? void 0 : _Editor$above2[1];
      if (!focusCellPath || !anchorCellPath) return;
      const newCellPath = getCellPathInDirection(editor, focusCellPath, direction);
      if (newCellPath) {
        if (selectedTableArea.singleCell === 'not-selected') {
          if (direction !== 'up' && direction !== 'down') return;
          const [node, offset] = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMPoint(editor, selection.focus);
          const blockElement = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.above(editor, {
            match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.i,
            at: selection.focus.path
          });
          if (!blockElement) return;
          if (direction === 'up' && blockElement[1].slice(focusCellPath.length).some(idx => idx !== 0)) {
            return;
          }
          if (direction === 'down') {
            const [parentNode] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.parent(editor, blockElement[1]);
            if (parentNode.children.length - 1 !== blockElement[1][blockElement[1].length - 1]) {
              return;
            }
            for (const [node, path] of slate__WEBPACK_IMPORTED_MODULE_86__.Node.ancestors(editor, blockElement[1], {
              reverse: true
            })) {
              if (node.type === 'table-cell') break;
              const [parentNode] = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.parent(editor, path);
              if (parentNode.children.length - 1 === path[path.length - 1]) {
                continue;
              }
              return;
            }
          }
          const domNodeForBlockElement = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMNode(editor, blockElement[0]);
          const rangeOfWholeBlock = document.createRange();
          rangeOfWholeBlock.selectNodeContents(domNodeForBlockElement);
          const rectsOfRangeOfWholeBlock = Array.from(rangeOfWholeBlock.getClientRects());
          const newRange = document.createRange();
          newRange.setStart(node, offset);
          newRange.setEnd(node, offset);
          const rangeRects = Array.from(newRange.getClientRects());
          const lastRangeRect = rangeRects[rangeRects.length - 1];
          const key = direction === 'up' ? 'top' : 'bottom';
          const expected = key === 'top' ? Math.min(...rectsOfRangeOfWholeBlock.map(x => x.top)) : Math.max(...rectsOfRangeOfWholeBlock.map(x => x.bottom));
          if (lastRangeRect[key] === expected) {
            const focus = slate__WEBPACK_IMPORTED_MODULE_86__.Editor[direction === 'up' ? 'end' : 'start'](editor, newCellPath);
            slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, {
              focus,
              anchor: event.shiftKey ? selection.anchor : focus
            });
            event.preventDefault();
          }
          return;
        }
        if (!event.shiftKey) return;
        if (slate__WEBPACK_IMPORTED_MODULE_86__.Path.equals(newCellPath, anchorCellPath)) {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, newCellPath);
        } else {
          slate__WEBPACK_IMPORTED_MODULE_86__.Transforms.select(editor, {
            anchor: selection.anchor,
            focus: slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, newCellPath)
          });
        }
        event.preventDefault();
      }
    }
  }
};
function createDocumentEditor(documentFeatures, componentBlocks) {
  return withPasting(withImages(withSoftBreaks(withInsertMenu(withShortcuts(withHeading(withBlockquote(withMarks(documentFeatures, componentBlocks, withBlockMarkdownShortcuts(documentFeatures, componentBlocks, (0,_index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_18__._)((0,slate_history__WEBPACK_IMPORTED_MODULE_95__/* .withHistory */ .VC)((0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .withReact */ .BU)((0,slate__WEBPACK_IMPORTED_MODULE_86__.createEditor)())), documentFeatures, componentBlocks))))))))));
}
function DocumentEditor(_ref) {
  let {
    onChange,
    value,
    componentBlocks,
    documentFeatures,
    ...props
  } = _ref;
  const editor = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => createDocumentEditor(documentFeatures, componentBlocks), [documentFeatures, componentBlocks]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Box */ .xu, {
    backgroundColor: "canvas",
    border: "neutral",
    borderRadius: "medium",
    minWidth: 0,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsxs)(DocumentEditorProvider, {
      componentBlocks: componentBlocks,
      documentFeatures: documentFeatures,
      editor: editor,
      value: value,
      onChange: value => {
        onChange === null || onChange === void 0 ? void 0 : onChange(value);
        // this fixes a strange issue in Safari where the selection stays inside of the editor
        // after a blur event happens but the selection is still in the editor
        // so the cursor is visually in the wrong place and it inserts text backwards
        const selection = window.getSelection();
        if (selection && !slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.isFocused(editor)) {
          const editorNode = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMNode(editor, editor);
          if (selection.anchorNode === editorNode) {
            slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
          }
        }
      },
      children: [(0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => onChange !== undefined && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(Toolbar, {
        documentFeatures: documentFeatures
      }), [documentFeatures, onChange]), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(DocumentEditorEditable, {
        id: "document-editor-boundary",
        ...props,
        readOnly: onChange === undefined
      }),
      // for debugging
      false ]
    })
  });
}
const IsInEditorContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(false);
function useIsInDocumentEditor() {
  return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(IsInEditorContext);
}
function DocumentEditorProvider(_ref2) {
  let {
    children,
    editor,
    onChange,
    value,
    componentBlocks,
    documentFeatures
  } = _ref2;
  // eslint-disable-next-line react-hooks/exhaustive-deps
  const identity = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => Math.random().toString(36), [editor]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(IsInEditorContext.Provider, {
    value: true,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_87__/* .Slate */ .mH
    // this fixes issues with Slate crashing when a fast refresh occcurs
    , {
      editor: editor,
      value: value,
      onChange: value => {
        onChange(value);
        // this fixes a strange issue in Safari where the selection stays inside of the editor
        // after a blur event happens but the selection is still in the editor
        // so the cursor is visually in the wrong place and it inserts text backwards
        const selection = window.getSelection();
        if (selection && !slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.isFocused(editor)) {
          const editorNode = slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.toDOMNode(editor, editor);
          if (selection.anchorNode === editorNode) {
            slate_react__WEBPACK_IMPORTED_MODULE_87__/* .ReactEditor */ .F3.focus(editor);
          }
        }
      },
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(TableSelectionProvider, {
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(ToolbarStateProvider, {
          componentBlocks: componentBlocks,
          editorDocumentFeatures: documentFeatures,
          children: children
        })
      })
    }, identity)
  });
}
function getPrismTokenLength(token) {
  if (typeof token === 'string') {
    return token.length;
  } else if (Array.isArray(token.content)) {
    return token.content.reduce((l, t) => l + getPrismTokenLength(t), 0);
  } else {
    return getPrismTokenLength(token.content);
  }
}
function DocumentEditorEditable(props) {
  const editor = (0,slate_react__WEBPACK_IMPORTED_MODULE_87__/* .useSlate */ .ui)();
  const {
    componentBlocks,
    documentFeatures
  } = useDocumentEditorConfig();
  const onKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => getKeyDownHandler(editor, documentFeatures), [editor, documentFeatures]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(_index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_17__/* .ActiveBlockPopoverProvider */ .dy, {
    editor: editor,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_20__.jsx)(slate_react__WEBPACK_IMPORTED_MODULE_87__/* .Editable */ .CX, {
      decorate: (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(_ref3 => {
        let [node, path] = _ref3;
        let decorations = [];
        if (node.type === 'component-block') {
          if (node.children.length === 1 && slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(node.children[0]) && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined) {
            return decorations;
          }
          node.children.forEach((child, index) => {
            if (slate__WEBPACK_IMPORTED_MODULE_86__.Node.string(child) === '' && slate__WEBPACK_IMPORTED_MODULE_86__.Element.isElement(child) && (child.type === 'component-block-prop' || child.type === 'component-inline-prop') && child.propPath !== undefined) {
              const start = slate__WEBPACK_IMPORTED_MODULE_86__.Editor.start(editor, [...path, index]);
              const placeholder = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_19__.j)(child.propPath, componentBlocks[node.component].schema, node.props);
              if (placeholder) {
                decorations.push({
                  placeholder,
                  anchor: start,
                  focus: start
                });
              }
            }
          });
        }
        if (node.type === 'code' && node.children.length === 1 && node.children[0].type === undefined && node.language && node.language in _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.languages) {
          const textPath = [...path, 0];
          const tokens = _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.tokenize(node.children[0].text, _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.languages[node.language]);
          function consumeTokens(start, tokens) {
            for (const token of tokens) {
              const length = getPrismTokenLength(token);
              const end = start + length;
              if (typeof token !== 'string') {
                decorations.push({
                  ['prism_' + token.type]: true,
                  anchor: {
                    path: textPath,
                    offset: start
                  },
                  focus: {
                    path: textPath,
                    offset: end
                  }
                });
                consumeTokens(start, Array.isArray(token.content) ? token.content : [token.content]);
              }
              start = end;
            }
          }
          consumeTokens(0, tokens);
        }
        return decorations;
      }, [editor, componentBlocks]),
      onKeyDown: onKeyDown,
      renderElement: renderElement,
      renderLeaf: renderLeaf,
      ...props,
      className: (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .classNames */ .AK)(editableStyles, props.className)
    })
  });
}
const orderedListStyles = ['lower-roman', 'decimal', 'lower-alpha'];
const unorderedListStyles = ['square', 'disc', 'circle'];
let styles = {
  color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.neutral,
  flex: 1,
  fontFamily: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.typography.fontFamily.base,
  fontSize: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.fontsize.text.regular.size,
  height: 'auto',
  lineHeight: 1.4,
  minHeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.scale[2000],
  minWidth: 0,
  padding: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.size.space.medium,
  // antialiased editor text, to match the rest of the app
  MozOsxFontSmoothing: 'grayscale',
  WebkitFontSmoothing: 'antialiased'
};
let listDepth = 10;
while (listDepth--) {
  let arr = Array.from({
    length: listDepth
  });
  if (arr.length) {
    styles[arr.map(() => `ol`).join(' ')] = {
      listStyle: orderedListStyles[listDepth % 3]
    };
    styles[arr.map(() => `ul`).join(' ')] = {
      listStyle: unorderedListStyles[listDepth % 3]
    };
  }
}
const editableStyles = (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .css */ .iv)({
  ...styles,
  a: {
    color: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_4__/* .tokenSchema */ .iK.color.foreground.accent
  }
});




/***/ }),

/***/ 30422:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ text),
/* harmony export */   v: () => (/* binding */ validateText)
/* harmony export */ });
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63998);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63815);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);




function validateText(val, min, max, fieldLabel, slugInfo) {
  if (val.length < min) {
    if (min === 1) {
      return `${fieldLabel} must not be empty`;
    } else {
      return `${fieldLabel} must be at least ${min} characters long`;
    }
  }
  if (val.length > max) {
    return `${fieldLabel} must be no longer than ${max} characters`;
  }
  if (slugInfo) {
    if (val === '') {
      return `${fieldLabel} must not be empty`;
    }
    if (val === '..') {
      return `${fieldLabel} must not be ..`;
    }
    if (val === '.') {
      return `${fieldLabel} must not be .`;
    }
    if (slugInfo.glob === '**') {
      const split = val.split('/');
      if (split.some(s => s === '..')) {
        return `${fieldLabel} must not contain ..`;
      }
      if (split.some(s => s === '.')) {
        return `${fieldLabel} must not be .`;
      }
    }
    if ((slugInfo.glob === '*' ? /[\\/]/ : /[\\]/).test(val)) {
      return `${fieldLabel} must not contain slashes`;
    }
    if (slugInfo.slugs.has(val)) {
      return `${fieldLabel} must be unique`;
    }
  }
}
function parseAsNormalField(value) {
  if (value === undefined) {
    return '';
  }
  if (typeof value !== 'string') {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.F('Must be a string');
  }
  return value;
}
const emptySet = new Set();
function text(_ref) {
  let {
    label,
    defaultValue = '',
    validation: {
      length: {
        max = Infinity,
        min = 0
      } = {}
    } = {},
    description,
    multiline = false
  } = _ref;
  function validate(value, slugField) {
    const message = validateText(value, min, max, label, slugField);
    if (message !== undefined) {
      throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.F(message);
    }
    return value;
  }
  return {
    kind: 'form',
    formKind: 'slug',
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_0__/* .TextFieldInput */ .Nl, {
        label: label,
        description: description,
        min: min,
        max: max,
        multiline: multiline,
        ...props
      });
    },
    defaultValue() {
      return typeof defaultValue === 'string' ? defaultValue : defaultValue();
    },
    parse(value, args) {
      if ((args === null || args === void 0 ? void 0 : args.slug) !== undefined) {
        return args.slug;
      }
      return parseAsNormalField(value);
    },
    serialize(value) {
      return {
        value: value === '' ? undefined : value
      };
    },
    serializeWithSlug(value) {
      return {
        slug: value,
        value: undefined
      };
    },
    reader: {
      parse(value) {
        const parsed = parseAsNormalField(value);
        return validate(parsed, undefined);
      },
      parseWithSlug(_value, args) {
        validate(parseAsNormalField(args.slug), {
          glob: args.glob,
          slugs: emptySet
        });
        return null;
      }
    },
    validate(value, args) {
      return validate(value, args === null || args === void 0 ? void 0 : args.slugField);
    }
  };
}




/***/ }),

/***/ 62598:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _: () => (/* binding */ _createDocumentEditor),
/* harmony export */   a: () => (/* binding */ isListNode),
/* harmony export */   b: () => (/* binding */ areArraysEqual),
/* harmony export */   c: () => (/* binding */ getSelectedTableArea),
/* harmony export */   d: () => (/* binding */ document),
/* harmony export */   e: () => (/* binding */ getRelativeRowPath),
/* harmony export */   f: () => (/* binding */ findChildPropPaths),
/* harmony export */   h: () => (/* binding */ cell),
/* harmony export */   i: () => (/* binding */ image),
/* harmony export */   j: () => (/* binding */ getInlineNodes),
/* harmony export */   k: () => (/* binding */ addMarksToChildren),
/* harmony export */   l: () => (/* binding */ setLinkForChildren),
/* harmony export */   m: () => (/* binding */ forceDisableMarkForChildren),
/* harmony export */   n: () => (/* binding */ addMarkToChildren),
/* harmony export */   s: () => (/* binding */ serializeProps)
/* harmony export */ });
/* unused harmony export g */
/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(33048);
/* harmony import */ var _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(91526);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(86522);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32236);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(45533);
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(63998);
/* harmony import */ var _utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5804);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(92900);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30422);
/* harmony import */ var _ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(67956);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(48727);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99634);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(85916);
/* harmony import */ var _emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(86160);
















function getValueAtPropPath(value, inputPath) {
  const path = [...inputPath];
  while (path.length) {
    const key = path.shift();
    value = value[key];
  }
  return value;
}
function traverseProps(schema, value, visitor) {
  let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  if (schema.kind === 'form' || schema.kind === 'child') {
    visitor(schema, value, path);
    return;
  }
  if (schema.kind === 'object') {
    for (const [key, childProp] of Object.entries(schema.fields)) {
      traverseProps(childProp, value[key], visitor, [...path, key]);
    }
    visitor(schema, value, path);
    return;
  }
  if (schema.kind === 'array') {
    for (const [idx, val] of value.entries()) {
      traverseProps(schema.element, val, visitor, path.concat(idx));
    }
    return visitor(schema, value, path);
  }
  if (schema.kind === 'conditional') {
    const discriminant = value.discriminant;
    visitor(schema, discriminant, path.concat('discriminant'));
    traverseProps(schema.values[discriminant.toString()], value.value, visitor, path.concat('value'));
    visitor(schema, value, path);
    return;
  }
  (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function transformProps(schema, value, visitors) {
  let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  if (schema.kind === 'form' || schema.kind === 'child') {
    if (visitors[schema.kind]) {
      return visitors[schema.kind](schema, value, path);
    }
    return value;
  }
  if (schema.kind === 'object') {
    const val = Object.fromEntries(Object.entries(schema.fields).map(_ref => {
      let [key, val] = _ref;
      return [key, transformProps(val, value[key], visitors, [...path, key])];
    }));
    if (visitors.object) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  if (schema.kind === 'array') {
    const val = value.map((val, idx) => transformProps(schema.element, val, visitors, path.concat(idx)));
    if (visitors.array) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  if (schema.kind === 'conditional') {
    const discriminant = transformProps(schema.discriminant, value.discriminant, visitors, path.concat('discriminant'));
    const conditionalVal = transformProps(schema.values[discriminant.toString()], value.value, visitors, path.concat('value'));
    const val = {
      discriminant,
      value: conditionalVal
    };
    if (visitors.conditional) {
      return visitors[schema.kind](schema, val, path);
    }
    return val;
  }
  (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function replaceValueAtPropPath(schema, value, newValue, path) {
  if (path.length === 0) {
    return newValue;
  }
  const [key, ...newPath] = path;
  if (schema.kind === 'object') {
    return {
      ...value,
      [key]: replaceValueAtPropPath(schema.fields[key], value[key], newValue, newPath)
    };
  }
  if (schema.kind === 'conditional') {
    const conditionalValue = value;
    // replaceValueAtPropPath should not be used to only update the discriminant of a conditional field
    // if you want to update the discriminant of a conditional field, replace the value of the whole conditional field
    (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assert)(key === 'value');
    return {
      discriminant: conditionalValue.discriminant,
      value: replaceValueAtPropPath(schema.values[key], conditionalValue.value, newValue, newPath)
    };
  }
  if (schema.kind === 'array') {
    const prevVal = value;
    const newVal = [...prevVal];
    (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.s)(newVal, (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.a)(prevVal));
    newVal[key] = replaceValueAtPropPath(schema.element, newVal[key], newValue, newPath);
    return newVal;
  }

  // we should never reach here since form or child fields don't contain other fields
  // so the only thing that can happen to them is to be replaced which happens at the start of this function when path.length === 0
  (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assert)(schema.kind !== 'form' && schema.kind !== 'child');
  (0,emery_assertions__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}

// a v important note
// marks in the markdown ast/html are represented quite differently to how they are in slate
// if you had the markdown **something https://keystonejs.com something**
// the bold node is the parent of the link node
// but in slate, marks are only represented on text nodes

const currentlyActiveMarks = new Set();
const currentlyDisabledMarks = new Set();
let currentLink = null;
function addMarkToChildren(mark, cb) {
  const wasPreviouslyActive = currentlyActiveMarks.has(mark);
  currentlyActiveMarks.add(mark);
  try {
    return cb();
  } finally {
    if (!wasPreviouslyActive) {
      currentlyActiveMarks.delete(mark);
    }
  }
}
function setLinkForChildren(href, cb) {
  // we'll only use the outer link
  if (currentLink !== null) {
    return cb();
  }
  currentLink = href;
  try {
    return cb();
  } finally {
    currentLink = null;
  }
}
function addMarksToChildren(marks, cb) {
  const marksToRemove = new Set();
  for (const mark of marks) {
    if (!currentlyActiveMarks.has(mark)) {
      marksToRemove.add(mark);
    }
    currentlyActiveMarks.add(mark);
  }
  try {
    return cb();
  } finally {
    for (const mark of marksToRemove) {
      currentlyActiveMarks.delete(mark);
    }
  }
}
function forceDisableMarkForChildren(mark, cb) {
  const wasPreviouslyDisabled = currentlyDisabledMarks.has(mark);
  currentlyDisabledMarks.add(mark);
  try {
    return cb();
  } finally {
    if (!wasPreviouslyDisabled) {
      currentlyDisabledMarks.delete(mark);
    }
  }
}

/**
 * This type is more strict than `Element & { type: 'link'; }` because `children`
 * is constrained to only contain Text nodes. This can't be assumed generally around the editor
 * (because of potentially future inline components or nested links(which are normalized away but the editor needs to not break if it happens))
 * but where this type is used, we're only going to allow links to contain Text and that's important
 * so that we know a block will never be inside an inline because Slate gets unhappy when that happens
 * (really the link inline should probably be a mark rather than an inline,
 * non-void inlines are probably always bad but that would imply changing the document
 * structure which would be such unnecessary breakage)
 */

function getInlineNodes(text) {
  const node = {
    text
  };
  for (const mark of currentlyActiveMarks) {
    if (!currentlyDisabledMarks.has(mark)) {
      node[mark] = true;
    }
  }
  if (currentLink !== null) {
    return [{
      text: ''
    }, {
      type: 'link',
      href: currentLink,
      children: [node]
    }, {
      text: ''
    }];
  }
  return [node];
}

class VariableChildFields extends Error {
  constructor() {
    super('There are a variable number of child fields');
  }
}
function findSingleChildField(schema) {
  try {
    const result = _findConstantChildFields(schema, [], new Set());
    if (result.length === 1) {
      return result[0];
    }
    return;
  } catch (err) {
    if (err instanceof VariableChildFields) {
      return;
    }
    throw err;
  }
}
function _findConstantChildFields(schema, path, seenSchemas) {
  if (seenSchemas.has(schema)) {
    return [];
  }
  seenSchemas.add(schema);
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        relativePath: path,
        options: schema.options,
        kind: 'child'
      }];
    case 'conditional':
      {
        if (couldContainChildField(schema)) {
          throw new VariableChildFields();
        }
        return [];
      }
    case 'array':
      {
        if (schema.asChildTag) {
          const child = _findConstantChildFields(schema.element, [], seenSchemas);
          if (child.length > 1) {
            return [];
          }
          return [{
            kind: 'array',
            asChildTag: schema.asChildTag,
            field: schema,
            relativePath: path,
            child: child[0]
          }];
        }
        if (couldContainChildField(schema)) {
          throw new VariableChildFields();
        }
        return [];
      }
    case 'object':
      {
        const paths = [];
        for (const [key, value] of Object.entries(schema.fields)) {
          paths.push(..._findConstantChildFields(value, path.concat(key), seenSchemas));
        }
        return paths;
      }
  }
}
function couldContainChildField(schema) {
  let seen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();
  if (seen.has(schema)) {
    return false;
  }
  seen.add(schema);
  switch (schema.kind) {
    case 'form':
      return false;
    case 'child':
      return true;
    case 'conditional':
      return Object.values(schema.values).some(value => couldContainChildField(value, seen));
    case 'object':
      return Object.keys(schema.fields).some(key => couldContainChildField(schema.fields[key], seen));
    case 'array':
      return couldContainChildField(schema.element, seen);
  }
}

function inlineNodeFromMarkdoc(node) {
  if (node.type === 'inline') {
    return inlineChildrenFromMarkdoc(node.children);
  }
  if (node.type === 'link') {
    return setLinkForChildren(node.attributes.href, () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'text') {
    return getInlineNodes(node.attributes.content);
  }
  if (node.type === 'strong') {
    return addMarkToChildren('bold', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'code') {
    return addMarkToChildren('code', () => [{
      text: node.attributes.content,
      code: true
    }]);
  }
  if (node.type === 'em') {
    return addMarkToChildren('italic', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 's') {
    return addMarkToChildren('strikethrough', () => inlineChildrenFromMarkdoc(node.children));
  }
  if (node.type === 'tag') {
    if (node.tag === 'u') {
      return addMarkToChildren('underline', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'kbd') {
      return addMarkToChildren('keyboard', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'sub') {
      return addMarkToChildren('subscript', () => inlineChildrenFromMarkdoc(node.children));
    }
    if (node.tag === 'sup') {
      return addMarkToChildren('superscript', () => inlineChildrenFromMarkdoc(node.children));
    }
  }
  if (node.type === 'softbreak') {
    return getInlineNodes(' ');
  }
  if (node.type === 'hardbreak') {
    return getInlineNodes('\n');
  }
  if (node.tag === 'component-inline-prop' && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every(x => typeof x === 'string' || typeof x === 'number')) {
    return {
      type: 'component-inline-prop',
      children: inlineFromMarkdoc(node.children),
      propPath: node.attributes.propPath
    };
  }
  throw new Error(`Unknown inline node type: ${node.type}`);
}
function inlineChildrenFromMarkdoc(nodes) {
  return nodes.flatMap(inlineNodeFromMarkdoc);
}
function inlineFromMarkdoc(nodes) {
  const transformedNodes = nodes.flatMap(inlineNodeFromMarkdoc);
  const nextNodes = [];
  let lastNode;
  for (const [idx, node] of transformedNodes.entries()) {
    var _lastNode;
    if (node.type === undefined && node.text === '' && ((_lastNode = lastNode) === null || _lastNode === void 0 ? void 0 : _lastNode.type) === undefined && idx !== transformedNodes.length - 1) {
      continue;
    }
    nextNodes.push(node);
    lastNode = node;
  }
  if (!nextNodes.length) {
    nextNodes.push({
      text: ''
    });
  }
  return nextNodes;
}
function fromMarkdoc(node, componentBlocks) {
  const nodes = node.children.flatMap(x => fromMarkdocNode(x, componentBlocks));
  if (nodes.length === 0) {
    return [{
      type: 'paragraph',
      children: [{
        text: ''
      }]
    }];
  }
  if (nodes[nodes.length - 1].type !== 'paragraph') {
    nodes.push({
      type: 'paragraph',
      children: [{
        text: ''
      }]
    });
  }
  return nodes;
}
function fromMarkdocNode(node, componentBlocks) {
  if (node.type === 'blockquote') {
    return {
      type: 'blockquote',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'fence') {
    const {
      language,
      content,
      ...rest
    } = node.attributes;
    return {
      type: 'code',
      children: [{
        text: content.replace(/\n$/, '')
      }],
      ...(typeof language === 'string' ? {
        language
      } : {}),
      ...rest
    };
  }
  if (node.type === 'heading') {
    return {
      ...node.attributes,
      level: node.attributes.level,
      type: 'heading',
      children: inlineFromMarkdoc(node.children)
    };
  }
  if (node.type === 'list') {
    return {
      type: node.attributes.ordered ? 'ordered-list' : 'unordered-list',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'item') {
    var _node$children$;
    const children = [{
      type: 'list-item-content',
      children: inlineFromMarkdoc([node.children[0]])
    }];
    if (((_node$children$ = node.children[1]) === null || _node$children$ === void 0 ? void 0 : _node$children$.type) === 'list') {
      const list = node.children[1];
      children.push({
        type: list.attributes.ordered ? 'ordered-list' : 'unordered-list',
        children: list.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      });
    }
    return {
      type: 'list-item',
      children
    };
  }
  if (node.type === 'paragraph') {
    if (node.children.length === 1 && node.children[0].type === 'inline' && node.children[0].children.length === 1 && node.children[0].children[0].type === 'image') {
      var _image$attributes$tit;
      const image = node.children[0].children[0];
      return {
        type: 'image',
        src: decodeURI(image.attributes.src),
        alt: image.attributes.alt,
        title: (_image$attributes$tit = image.attributes.title) !== null && _image$attributes$tit !== void 0 ? _image$attributes$tit : '',
        children: [{
          text: ''
        }]
      };
    }
    const children = inlineFromMarkdoc(node.children);
    if (children.length === 1 && children[0].type === 'component-inline-prop') {
      return children[0];
    }
    return {
      type: 'paragraph',
      children,
      textAlign: node.attributes.textAlign
    };
  }
  if (node.type === 'hr') {
    return {
      type: 'divider',
      children: [{
        text: ''
      }]
    };
  }
  if (node.type === 'table') {
    return {
      type: 'table',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tbody') {
    return {
      type: 'table-body',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'thead') {
    if (!node.children.length) return [];
    return {
      type: 'table-head',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tr') {
    return {
      type: 'table-row',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'td') {
    return {
      type: 'table-cell',
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'th') {
    return {
      type: 'table-cell',
      header: true,
      children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
    };
  }
  if (node.type === 'tag') {
    if (node.tag === 'table') {
      return fromMarkdocNode(node.children[0], componentBlocks);
    }
    if (node.tag === 'layout') {
      return {
        type: 'layout',
        layout: node.attributes.layout,
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'layout-area') {
      return {
        type: 'layout-area',
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'component-block') {
      return {
        type: 'component-block',
        component: node.attributes.component,
        props: node.attributes.props,
        children: node.children.length === 0 ? [{
          type: 'component-inline-prop',
          children: [{
            text: ''
          }]
        }] : node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
      };
    }
    if (node.tag === 'component-block-prop' && Array.isArray(node.attributes.propPath) && node.attributes.propPath.every(x => typeof x === 'string' || typeof x === 'number')) {
      return {
        type: 'component-block-prop',
        children: node.children.flatMap(x => fromMarkdocNode(x, componentBlocks)),
        propPath: node.attributes.propPath
      };
    }
    if (node.tag) {
      const componentBlock = componentBlocks[node.tag];
      if (componentBlock) {
        const singleChildField = findSingleChildField({
          kind: 'object',
          fields: componentBlock.schema
        });
        if (singleChildField) {
          const newAttributes = JSON.parse(JSON.stringify(node.attributes));
          const children = [];
          toChildrenAndProps$1(node.children, children, newAttributes, singleChildField, [], componentBlocks);
          return {
            type: 'component-block',
            component: node.tag,
            props: newAttributes,
            children
          };
        }
        return {
          type: 'component-block',
          component: node.tag,
          props: node.attributes,
          children: node.children.length === 0 ? [{
            type: 'component-inline-prop',
            children: [{
              text: ''
            }]
          }] : node.children.flatMap(x => fromMarkdocNode(x, componentBlocks))
        };
      }
    }
    throw new Error(`Unknown tag: ${node.tag}`);
  }
  return inlineNodeFromMarkdoc(node);
}
function toChildrenAndProps$1(fromMarkdoc, resultingChildren, value, singleChildField, parentPropPath, componentBlocks) {
  if (singleChildField.kind === 'child') {
    const children = fromMarkdoc.flatMap(x => fromMarkdocNode(x, componentBlocks));
    resultingChildren.push({
      type: `component-${singleChildField.options.kind}-prop`,
      propPath: [...parentPropPath, ...singleChildField.relativePath],
      children
    });
  }
  if (singleChildField.kind === 'array') {
    const arr = [];
    for (let [idx, child] of fromMarkdoc.entries()) {
      if (child.type === 'paragraph') {
        child = child.children[0].children[0];
      }
      if (child.type !== 'tag') {
        throw new Error(`expected tag ${singleChildField.asChildTag}, found type: ${child.type}`);
      }
      if (child.tag !== singleChildField.asChildTag) {
        throw new Error(`expected tag ${singleChildField.asChildTag}, found tag: ${child.tag}`);
      }
      const attributes = JSON.parse(JSON.stringify(child.attributes));
      if (singleChildField.child) {
        toChildrenAndProps$1(child.children, resultingChildren, attributes, singleChildField.child, [...parentPropPath, ...singleChildField.relativePath, idx], componentBlocks);
      }
      arr.push(attributes);
    }
    const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];
    const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));
    parent[key] = arr;
  }
}

function areArraysEqual(a, b) {
  return a.length === b.length && a.every((x, i) => x === b[i]);
}
function normalizeTextBasedOnInlineMarksAndSoftBreaks(_ref, editor, inlineMarks, softBreaks) {
  let [node, path] = _ref;
  const marksToRemove = Object.keys(node).filter(x => x !== 'text' && x !== 'insertMenu' && inlineMarks[x] !== true);
  if (marksToRemove.length) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unsetNodes(editor, marksToRemove, {
      at: path
    });
    return true;
  }
  if (!softBreaks) {
    const hasSoftBreaks = node.text.includes('\n');
    if (hasSoftBreaks) {
      const [parentNode] = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.parent(editor, path);
      if (parentNode.type !== 'code') {
        for (const position of slate__WEBPACK_IMPORTED_MODULE_10__.Editor.positions(editor, {
          at: path
        })) {
          const character = slate__WEBPACK_IMPORTED_MODULE_10__.Node.get(editor, position.path).text[position.offset];
          if (character === '\n') {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.delete(editor, {
              at: position
            });
            return true;
          }
        }
      }
    }
  }
  return false;
}
function normalizeInlineBasedOnLinks(_ref2, editor, links) {
  let [node, path] = _ref2;
  if (node.type === 'link' && !links) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertText(editor, ` (${node.href})`, {
      at: slate__WEBPACK_IMPORTED_MODULE_10__.Editor.end(editor, path)
    });
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
      at: path
    });
    return true;
  }
  return false;
}
function normalizeElementBasedOnDocumentFeatures(_ref3, editor, _ref4) {
  let [node, path] = _ref3;
  let {
    formatting,
    dividers,
    layouts,
    links,
    images,
    tables
  } = _ref4;
  if (node.type === 'heading' && (!formatting.headings.levels.length || !formatting.headings.levels.includes(node.level)) || node.type === 'ordered-list' && !formatting.listTypes.ordered || node.type === 'unordered-list' && !formatting.listTypes.unordered || node.type === 'code' && !formatting.blockTypes.code || node.type === 'blockquote' && !formatting.blockTypes.blockquote || node.type === 'image' && !images || node.type === 'table' && !tables || node.type === 'layout' && (layouts.length === 0 || !layouts.some(layout => areArraysEqual(layout, node.layout)))) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
      at: path
    });
    return true;
  }
  if ((node.type === 'paragraph' || node.type === 'heading') && (!formatting.alignment.center && node.textAlign === 'center' || !formatting.alignment.end && node.textAlign === 'end' || 'textAlign' in node && node.textAlign !== 'center' && node.textAlign !== 'end')) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unsetNodes(editor, 'textAlign', {
      at: path
    });
    return true;
  }
  if (node.type === 'divider' && !dividers) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
      at: path
    });
    return true;
  }
  return normalizeInlineBasedOnLinks([node, path], editor, links);
}
function withDocumentFeaturesNormalization(documentFeatures, editor) {
  const {
    normalizeNode
  } = editor;
  editor.normalizeNode = _ref5 => {
    let [node, path] = _ref5;
    if (slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(node)) {
      normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, documentFeatures.formatting.inlineMarks, documentFeatures.formatting.softBreaks);
    } else if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(node)) {
      normalizeElementBasedOnDocumentFeatures([node, path], editor, documentFeatures);
    }
    normalizeNode([node, path]);
  };
  return editor;
}

function image(_ref) {
  let {
    label,
    directory,
    validation,
    description,
    publicPath
  } = _ref;
  return {
    kind: 'form',
    formKind: 'asset',
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_3__/* .ImageFieldInput */ .Sd, {
        label: label,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === 'string') {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return undefined;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_11__.F('Must be a string');
      }
      if (args.asset === undefined) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ''
      };
    },
    validate(value) {
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_12__.a)(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: undefined,
          asset: undefined
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + '.' + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.A)(directory) : undefined,
    reader: {
      parse(value) {
        if (typeof value !== 'string' && value !== undefined) {
          throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_11__.F('Must be a string');
        }
        const val = value === undefined ? null : value;
        (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_12__.a)(val, validation, label);
        return val;
      }
    }
  };
}
function getSrcPrefix(publicPath, slug) {
  return typeof publicPath === 'string' ? `/${(0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.A)(publicPath)}/${slug === undefined ? '' : slug + '/'}` : '';
}

function deserializeFiles(nodes, componentBlocks, files, otherFiles, mode, documentFeatures, slug) {
  return nodes.map(node => {
    if (node.type === 'component-block') {
      const componentBlock = componentBlocks[node.component];
      if (!componentBlock) return node;
      const schema = (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(componentBlock.schema);
      return {
        ...node,
        props: deserializeProps(schema, node.props, files, otherFiles, mode, slug)
      };
    }
    if (node.type === 'image' && typeof node.src === 'string' && mode === 'edit') {
      var _ref;
      const prefix = getSrcPrefixForImageBlock(documentFeatures, slug);
      const filename = node.src.slice(prefix.length);
      const content = (_ref = typeof documentFeatures.images === 'object' && typeof documentFeatures.images.directory === 'string' ? otherFiles.get((0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.A)(documentFeatures.images.directory)) : files) === null || _ref === void 0 ? void 0 : _ref.get(filename);
      if (!content) {
        return {
          type: 'paragraph',
          children: [{
            text: `Missing image ${filename}`
          }]
        };
      }
      return {
        type: 'image',
        src: {
          filename,
          content
        },
        alt: node.alt,
        title: node.title,
        children: [{
          text: ''
        }]
      };
    }
    if (typeof node.type === 'string') {
      const children = deserializeFiles(node.children, componentBlocks, files, otherFiles, mode, documentFeatures, slug);
      return {
        ...node,
        children
      };
    }
    return node;
  });
}
function deserializeProps(schema, value, files, otherFiles, mode, slug) {
  return transformProps(schema, value, {
    form: (schema, value) => {
      if (schema.formKind === 'asset') {
        var _otherFiles$get;
        if (mode === 'read') {
          return schema.reader.parse(value);
        }
        const filename = schema.filename(value, {
          slug,
          suggestedFilenamePrefix: undefined
        });
        return schema.parse(value, {
          asset: filename ? schema.directory ? (_otherFiles$get = otherFiles.get(schema.directory)) === null || _otherFiles$get === void 0 ? void 0 : _otherFiles$get.get(filename) : files.get(filename) : undefined,
          slug
        });
      }
      if (schema.formKind === 'content') {
        throw new Error('Not implemented');
      }
      if (mode === 'read') {
        return schema.reader.parse(value);
      }
      return schema.parse(value, undefined);
    }
  });
}
function getSrcPrefixForImageBlock(documentFeatures, slug) {
  return getSrcPrefix(typeof documentFeatures.images === 'object' ? documentFeatures.images.publicPath : undefined, slug);
}

function serializeProps(rootValue, rootSchema,
// note you might have a slug without a slug field when serializing props inside a component block or etc. in the editor
slugField, slug, shouldSuggestFilenamePrefix) {
  const extraFiles = [];
  return {
    value: transformProps(rootSchema, rootValue, {
      form(schema, value, propPath) {
        if (propPath.length === 1 && slugField === propPath[0]) {
          if (schema.formKind !== 'slug') {
            throw new Error('slugField is a not a slug field');
          }
          return schema.serializeWithSlug(value).value;
        }
        if (schema.formKind === 'asset') {
          const {
            asset,
            value: forYaml
          } = schema.serialize(value, {
            suggestedFilenamePrefix: shouldSuggestFilenamePrefix ? getPropPathPortion(propPath, rootSchema, rootValue) : undefined,
            slug
          });
          if (asset) {
            extraFiles.push({
              path: asset.filename,
              contents: asset.content,
              parent: schema.directory
            });
          }
          return forYaml;
        }
        if (schema.formKind === 'content') {
          const {
            other,
            external,
            content,
            value: forYaml
          } = schema.serialize(value, {
            slug
          });
          if (content) {
            extraFiles.push({
              path: getPropPathPortion(propPath, rootSchema, rootValue) + schema.contentExtension,
              contents: content,
              parent: undefined
            });
          }
          for (const [key, contents] of other) {
            extraFiles.push({
              path: getPropPathPortion(propPath, rootSchema, rootValue) + '/' + key,
              contents,
              parent: undefined
            });
          }
          const allowedDirectories = new Set(schema.directories);
          for (const [directory, contents] of external) {
            if (!allowedDirectories.has(directory)) {
              throw new Error(`Invalid directory ${directory} in content field serialization`);
            }
            for (const [filename, fileContents] of contents) {
              extraFiles.push({
                path: filename,
                contents: fileContents,
                parent: directory
              });
            }
          }
          return forYaml;
        }
        return schema.serialize(value).value;
      },
      object(_schema, value) {
        return Object.fromEntries(Object.entries(value).filter(_ref => {
          let [_, val] = _ref;
          return val !== undefined;
        }));
      },
      array(_schema, value) {
        return value.map(val => val === undefined ? null : val);
      },
      child() {
        return undefined;
      }
    }),
    extraFiles
  };
}
function getPropPathPortion(path, schema, value) {
  const end = [];
  for (const portion of path) {
    if (schema.kind === 'array') {
      value = value[portion];
      if (schema.slugField && schema.element.kind === 'object') {
        const slug = (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.m)({
          schema: schema.element.fields,
          slugField: schema.slugField
        }, value);
        end.push(slug);
      } else {
        end.push(portion);
      }
      schema = schema.element;
      continue;
    }
    end.push(portion);
    if (schema.kind === 'object') {
      value = value[portion];
      schema = schema.fields[portion];
      continue;
    }
    if (schema.kind === 'conditional') {
      if (portion === 'discriminant') {
        schema = schema.discriminant;
      } else if (portion === 'value') {
        schema = schema.values[value.discriminant];
      }
      value = value[portion];
      continue;
    }
    throw new Error(`unexpected ${schema.kind}`);
  }
  return end.join('/');
}

function toInline(nodes) {
  return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('inline', {}, nodes.flatMap(toMarkdocInline));
}
const markToMarkdoc = {
  bold: {
    type: 'strong'
  },
  code: {
    type: 'code'
  },
  italic: {
    type: 'em'
  },
  underline: {
    type: 'tag',
    tag: 'u'
  },
  keyboard: {
    type: 'tag',
    tag: 'kbd'
  },
  strikethrough: {
    type: 's'
  },
  subscript: {
    type: 'tag',
    tag: 'sub'
  },
  superscript: {
    type: 'tag',
    tag: 'sup'
  }
};
function toMarkdocInline(node) {
  if (node.type === 'link') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('link', {
      href: node.href
    }, node.children.flatMap(toMarkdocInline));
  }
  if (node.type !== undefined) {
    throw new Error(`unexpected inline node type: ${node.type}`);
  }
  if (node.code) {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('code', {
      content: node.text
    }, []);
  }
  const marks = Object.keys(node).filter(mark => mark !== 'text').sort();
  let markdocNode = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('text', {
    content: node.text
  });
  for (const mark of marks) {
    const config = markToMarkdoc[mark];
    if (config) {
      markdocNode = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node(config.type, {}, [markdocNode], config.tag);
    }
  }
  return markdocNode;
}
function toMarkdocDocument(nodes, _config) {
  const extraFiles = [];
  const config = {
    ..._config,
    extraFiles
  };
  const node = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('document', {}, nodes.flatMap(x => toMarkdoc(x, config)));
  return {
    node,
    extraFiles
  };
}
function toChildrenAndProps(childrenAsMarkdoc, resultingChildren, value, singleChildField) {
  if (singleChildField.kind === 'child') {
    const child = childrenAsMarkdoc.find(x => areArraysEqual(x.propPath, singleChildField.relativePath));
    if (child) {
      resultingChildren.push(...child.children);
    }
    return;
  }
  if (singleChildField.kind === 'array') {
    const key = singleChildField.relativePath[singleChildField.relativePath.length - 1];
    const parent = getValueAtPropPath(value, singleChildField.relativePath.slice(0, -1));
    const valueAtPropPath = parent[key];
    delete parent[key];
    const childNodes = new Map();
    for (const child of childrenAsMarkdoc) {
      const innerPropPath = child.propPath.slice(singleChildField.relativePath.length + 1);
      const num = child.propPath[singleChildField.relativePath.length];
      if (childNodes.get(num) === undefined) {
        childNodes.set(num, []);
      }
      childNodes.get(num).push({
        children: child.children,
        propPath: innerPropPath
      });
    }
    resultingChildren.push(...valueAtPropPath.map((x, i) => {
      var _childNodes$get;
      const newChildrenAsMarkdoc = (_childNodes$get = childNodes.get(i)) !== null && _childNodes$get !== void 0 ? _childNodes$get : [];
      const children = [];
      toChildrenAndProps(newChildrenAsMarkdoc, children, x, singleChildField.child);
      return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', x, children, singleChildField.asChildTag);
    }));
  }
}
function toMarkdoc(node, config) {
  if (node.type === 'paragraph') {
    const markdocNode = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('paragraph', node.textAlign ? {
      textAlign: node.textAlign
    } : {}, [toInline(node.children)]);
    if (node.textAlign) {
      markdocNode.annotations.push({
        name: 'textAlign',
        value: node.textAlign,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === 'image') {
    config.extraFiles.push({
      contents: node.src.content,
      path: node.src.filename,
      parent: typeof config.documentFeatures.images === 'object' && typeof config.documentFeatures.images.directory === 'string' ? (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.A)(config.documentFeatures.images.directory) : undefined
    });
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('paragraph', {}, [new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('inline', {}, [new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('image', {
      src: encodeURI(`${getSrcPrefixForImageBlock(config.documentFeatures, config.slug)}${node.src.filename}`),
      alt: node.alt,
      title: node.title
    })])]);
  }
  if (node.type === 'code') {
    const extraAttributes = {};
    const {
      children,
      language,
      type,
      ...rest
    } = node;
    const schema = typeof config.documentFeatures.formatting.blockTypes.code === 'object' ? config.documentFeatures.formatting.blockTypes.code.schema : undefined;
    if (schema && Object.keys(schema.fields).length > 0) {
      const serialized = serializeProps((0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.b)(schema, rest), schema, undefined, config.slug, false);
      Object.assign(extraAttributes, serialized.value);
      config.extraFiles.push(...serialized.extraFiles);
    }
    let content = children[0].text + '\n';
    const markdocNode = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('fence', {
      content,
      language,
      ...extraAttributes
    }, [new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('text', {
      content
    })]);
    for (const [key, value] of Object.entries(extraAttributes)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  const _toMarkdoc = node => toMarkdoc(node, config);
  if (node.type === 'blockquote') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('blockquote', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'divider') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('hr');
  }
  if (node.type === 'table') {
    const head = node.children.find(x => x.type === 'table-head');
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', {}, [new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('table', {}, [new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('thead', {}, head ? head.children.map(_toMarkdoc) : []), _toMarkdoc(node.children.find(x => x.type === 'table-body'))])], 'table');
  }
  if (node.type === 'table-body') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tbody', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'table-row') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tr', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'table-cell') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node(node.header ? 'th' : 'td', {}, node.children.map(_toMarkdoc));
  }
  if (node.type === 'heading') {
    const extraAttributes = {};
    if (node.textAlign) {
      extraAttributes.textAlign = node.textAlign;
    }
    const {
      children,
      level,
      textAlign,
      type,
      ...rest
    } = node;
    const schema = config.documentFeatures.formatting.headings.schema;
    if (Object.keys(schema.fields).length > 0) {
      Object.assign(extraAttributes, serializeProps((0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.b)(schema, rest), schema, undefined, config.slug, false).value);
    }
    const markdocNode = new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('heading', {
      level: node.level,
      ...extraAttributes
    }, [toInline(node.children)]);
    for (const [key, value] of Object.entries(extraAttributes)) {
      markdocNode.annotations.push({
        name: key,
        value,
        type: 'attribute'
      });
    }
    return markdocNode;
  }
  if (node.type === 'ordered-list') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('list', {
      ordered: true
    }, node.children.map(_toMarkdoc));
  }
  if (node.type === 'unordered-list') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('list', {
      ordered: false
    }, node.children.map(_toMarkdoc));
  }
  if (node.type === 'layout') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', {
      layout: node.layout
    }, node.children.map(_toMarkdoc), 'layout');
  }
  if (node.type === 'layout-area') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', {}, node.children.flatMap(_toMarkdoc), 'layout-area');
  }
  if (node.type === 'component-block') {
    const isVoid = node.children.length === 1 && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined;
    const componentBlock = config.componentBlocks[node.component];
    const childrenAsMarkdoc = [];
    for (const child of node.children) {
      if ((child.type === 'component-block-prop' || child.type === 'component-inline-prop') && child.propPath !== undefined) {
        childrenAsMarkdoc.push({
          type: child.type,
          propPath: child.propPath,
          children: child.type === 'component-block-prop' ? child.children.flatMap(_toMarkdoc) : [toInline(child.children)]
        });
      }
    }
    let attributes = node.props;
    if (componentBlock) {
      const serialized = serializeProps(node.props, {
        kind: 'object',
        fields: componentBlock.schema
      }, undefined, config.slug, false);
      attributes = serialized.value;
      config.extraFiles.push(...serialized.extraFiles);
      const singleChildField = findSingleChildField({
        kind: 'object',
        fields: componentBlock.schema
      });
      if (singleChildField) {
        const children = [];
        toChildrenAndProps(childrenAsMarkdoc, children, attributes, singleChildField);
        return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', attributes, children, node.component);
      }
    }
    const children = isVoid ? [] : childrenAsMarkdoc.map(x => new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', {
      propPath: x.propPath
    }, x.children, x.type));
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', attributes, children, node.component);
  }
  if (node.type === 'component-block-prop' || node.type === 'component-inline-prop') {
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('tag', {
      propPath: node.propPath
    }, node.type === 'component-inline-prop' ? [toInline(node.children)] : node.children.flatMap(_toMarkdoc), node.type);
  }
  if (node.type === 'list-item') {
    const listItemContent = node.children[0];
    if (listItemContent.type !== 'list-item-content') {
      throw new Error('list item content must contain a list-item-content');
    }
    const inline = toInline(listItemContent.children);
    const children = [inline];
    const nestedList = node.children[1];
    if (nestedList) {
      children.push(toMarkdoc(nestedList, config));
    }
    return new _markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13__.Ast.Node('item', {}, children);
  }
  if (node.type === 'list-item-content') {
    throw new Error('list-item-content in unexpected position');
  }
  debugger;
  throw new Error(`unexpected node type: ${node.type}`);
}

const codeBlockShortcutPattern = /^```(\w+)? ?$/;
function withCodeBlock(documentFeatures, componentBlocks, editor) {
  const {
    insertBreak,
    normalizeNode,
    insertText
  } = editor;
  function codeBlockShortcut(block) {
    var _aliasesToCanonicalNa;
    if ((block === null || block === void 0 ? void 0 : block[0].type) !== 'paragraph' || block[0].children.length !== 1 || block[0].children[0].type !== undefined) {
      return false;
    }
    const match = codeBlockShortcutPattern.exec(block[0].children[0].text);
    if (!match) {
      return false;
    }
    const locationDocumentFeatures = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.g)(editor, documentFeatures, componentBlocks);
    if (locationDocumentFeatures && (locationDocumentFeatures.kind === 'inline' || !locationDocumentFeatures.documentFeatures.formatting.blockTypes.code)) {
      return false;
    }

    // so that this starts a new undo group
    editor.history.undos.push({
      operations: [],
      selectionBefore: editor.selection
    });
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.select(editor, block[1]);
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.delete(editor);
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.wrapNodes(editor, {
      type: 'code',
      ...(match[1] ? {
        language: (_aliasesToCanonicalNa = _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.a.get(match[1].toLowerCase())) !== null && _aliasesToCanonicalNa !== void 0 ? _aliasesToCanonicalNa : match[1]
      } : {}),
      children: []
    }, {
      match: node => node.type === 'paragraph'
    });
    return true;
  }
  editor.insertBreak = () => {
    const block = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
      match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i
    });
    if ((block === null || block === void 0 ? void 0 : block[0].type) === 'code' && slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(block[0].children[0])) {
      const text = block[0].children[0].text;
      if (text[text.length - 1] === '\n' && editor.selection && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_10__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_10__.Editor.end(editor, block[1]), editor.selection.anchor)) {
        insertBreak();
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
          type: 'paragraph',
          children: []
        });
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.delete(editor, {
          distance: 1,
          at: {
            path: [...block[1], 0],
            offset: text.length - 1
          }
        });
        return;
      }
      editor.insertText('\n');
      return;
    }
    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) && codeBlockShortcut(block)) {
      return;
    }
    insertBreak();
  };
  editor.insertText = text => {
    insertText(text);
    if (text === ' ' && editor.selection && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection)) {
      codeBlockShortcut(slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
        match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i
      }));
    }
  };
  editor.normalizeNode = _ref => {
    let [node, path] = _ref;
    if (node.type === 'code' && slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(node)) {
      for (const [index, childNode] of node.children.entries()) {
        if (!slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(childNode)) {
          if (editor.isVoid(childNode)) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: [...path, index]
            });
          } else {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
              at: [...path, index]
            });
          }
          return;
        }
        const marks = Object.keys(childNode).filter(x => x !== 'text');
        if (marks.length) {
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unsetNodes(editor, marks, {
            at: [...path, index]
          });
          return;
        }
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}

function findChildPropPathsForProp(value, schema, path) {
  switch (schema.kind) {
    case 'form':
      return [];
    case 'child':
      return [{
        path: path,
        options: schema.options
      }];
    case 'conditional':
      return findChildPropPathsForProp(value.value, schema.values[value.discriminant], path.concat('value'));
    case 'object':
      {
        const paths = [];
        Object.keys(schema.fields).forEach(key => {
          paths.push(...findChildPropPathsForProp(value[key], schema.fields[key], path.concat(key)));
        });
        return paths;
      }
    case 'array':
      {
        const paths = [];
        value.forEach((val, i) => {
          paths.push(...findChildPropPathsForProp(val, schema.element, path.concat(i)));
        });
        return paths;
      }
  }
}
function findChildPropPaths(value, props) {
  const propPaths = findChildPropPathsForProp(value, {
    kind: 'object',
    fields: props
  }, []);
  if (!propPaths.length) {
    return [{
      path: undefined,
      options: {
        kind: 'inline',
        placeholder: ''
      }
    }];
  }
  return propPaths;
}

function getAncestorComponentBlock(editor) {
  if (editor.selection) {
    const ancestorEntry = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
      match: node => (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(node) && node.type !== 'paragraph'
    });
    if (ancestorEntry && (ancestorEntry[0].type === 'component-block-prop' || ancestorEntry[0].type === 'component-inline-prop')) {
      return {
        isInside: true,
        componentBlock: slate__WEBPACK_IMPORTED_MODULE_10__.Editor.parent(editor, ancestorEntry[1]),
        prop: ancestorEntry
      };
    }
  }
  return {
    isInside: false
  };
}
const alreadyNormalizedThings = new WeakMap();
function normalizeNodeWithinComponentProp(_ref, editor, fieldOptions) {
  let [node, path] = _ref;
  let alreadyNormalizedNodes = alreadyNormalizedThings.get(fieldOptions);
  if (!alreadyNormalizedNodes) {
    alreadyNormalizedNodes = new WeakSet();
    alreadyNormalizedThings.set(fieldOptions, alreadyNormalizedNodes);
  }
  if (alreadyNormalizedNodes.has(node)) {
    return false;
  }
  let didNormalization = false;
  if (fieldOptions.inlineMarks !== 'inherit' && slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(node)) {
    didNormalization = normalizeTextBasedOnInlineMarksAndSoftBreaks([node, path], editor, fieldOptions.inlineMarks, fieldOptions.softBreaks);
  }
  if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(node)) {
    let childrenHasChanged = node.children.map((node, i) => normalizeNodeWithinComponentProp([node, [...path, i]], editor, fieldOptions))
    // .map then .some because we don't want to exit early
    .some(x => x);
    if (fieldOptions.kind === 'block') {
      if (node.type === 'component-block') {
        if (!fieldOptions.componentBlocks) {
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
            at: path
          });
          didNormalization = true;
        }
      } else {
        didNormalization = normalizeElementBasedOnDocumentFeatures([node, path], editor, fieldOptions.documentFeatures) || childrenHasChanged;
      }
    } else {
      didNormalization = normalizeInlineBasedOnLinks([node, path], editor, fieldOptions.documentFeatures.links);
    }
  }
  if (didNormalization === false) {
    alreadyNormalizedNodes.add(node);
  }
  return didNormalization;
}
function canSchemaContainChildField(rootSchema) {
  const queue = new Set([rootSchema]);
  for (const schema of queue) {
    if (schema.kind === 'form') ; else if (schema.kind === 'child') {
      return true;
    } else if (schema.kind === 'array') {
      queue.add(schema.element);
    } else if (schema.kind === 'object') {
      for (const innerProp of Object.values(schema.fields)) {
        queue.add(innerProp);
      }
    } else if (schema.kind === 'conditional') {
      for (const innerProp of Object.values(schema.values)) {
        queue.add(innerProp);
      }
    } else {
      (0,emery__WEBPACK_IMPORTED_MODULE_9__.assertNever)(schema);
    }
  }
  return false;
}
function doesSchemaOnlyEverContainASingleChildField(rootSchema) {
  const queue = new Set([rootSchema]);
  let hasFoundChildField = false;
  for (const schema of queue) {
    if (schema.kind === 'form') ; else if (schema.kind === 'child') {
      if (hasFoundChildField) {
        return false;
      }
      hasFoundChildField = true;
    } else if (schema.kind === 'array') {
      if (canSchemaContainChildField(schema.element)) {
        return false;
      }
    } else if (schema.kind === 'object') {
      for (const innerProp of Object.values(schema.fields)) {
        queue.add(innerProp);
      }
    } else if (schema.kind === 'conditional') {
      for (const innerProp of Object.values(schema.values)) {
        queue.add(innerProp);
      }
    } else {
      (0,emery__WEBPACK_IMPORTED_MODULE_9__.assertNever)(schema);
    }
  }
  return hasFoundChildField;
}
function findArrayFieldsWithSingleChildField(schema, value) {
  const propPaths = [];
  traverseProps(schema, value, (schema, value, path) => {
    if (schema.kind === 'array' && doesSchemaOnlyEverContainASingleChildField(schema.element)) {
      propPaths.push([path, schema]);
    }
  });
  return propPaths;
}
function isEmptyChildFieldNode(element) {
  const firstChild = element.children[0];
  return element.children.length === 1 && (element.type === 'component-inline-prop' && firstChild.type === undefined && firstChild.text === '' || element.type === 'component-block-prop' && firstChild.type === 'paragraph' && firstChild.children.length === 1 && firstChild.children[0].type === undefined && firstChild.children[0].text === '');
}
function withComponentBlocks(blockComponents, editorDocumentFeatures, editor) {
  // note that conflicts between the editor document features
  // and the child field document features are dealt with elsewhere
  const memoizedGetDocumentFeaturesForChildField = (0,_emotion_weak_memoize__WEBPACK_IMPORTED_MODULE_14__/* ["default"] */ .Z)(options => {
    return (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.a)(editorDocumentFeatures, options);
  });
  const {
    normalizeNode,
    deleteBackward,
    insertBreak
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const ancestorComponentBlock = getAncestorComponentBlock(editor);
      if (ancestorComponentBlock.isInside && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isStart(editor, editor.selection.anchor, ancestorComponentBlock.prop[1]) && ancestorComponentBlock.prop[1][ancestorComponentBlock.prop[1].length - 1] === 0) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
          at: ancestorComponentBlock.componentBlock[1]
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const ancestorComponentBlock = getAncestorComponentBlock(editor);
    if (editor.selection && ancestorComponentBlock.isInside) {
      const {
        prop: [componentPropNode, componentPropPath],
        componentBlock: [componentBlockNode, componentBlockPath]
      } = ancestorComponentBlock;
      const isLastProp = componentPropPath[componentPropPath.length - 1] === componentBlockNode.children.length - 1;
      if (componentPropNode.type === 'component-block-prop') {
        const [[paragraphNode, paragraphPath]] = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.nodes(editor, {
          match: node => node.type === 'paragraph'
        });
        const isLastParagraph = paragraphPath[paragraphPath.length - 1] === componentPropNode.children.length - 1;
        if (slate__WEBPACK_IMPORTED_MODULE_10__.Node.string(paragraphNode) === '' && isLastParagraph) {
          if (isLastProp) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
              at: paragraphPath,
              to: slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(ancestorComponentBlock.componentBlock[1])
            });
          } else {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.move(editor, {
              distance: 1,
              unit: 'line'
            });
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: paragraphPath
            });
          }
          return;
        }
      }
      if (componentPropNode.type === 'component-inline-prop') {
        slate__WEBPACK_IMPORTED_MODULE_10__.Editor.withoutNormalizing(editor, () => {
          const componentBlock = blockComponents[componentBlockNode.component];
          if (componentPropNode.propPath !== undefined && componentBlock !== undefined) {
            const rootSchema = {
              kind: 'object',
              fields: componentBlock.schema
            };
            const ancestorFields = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.b)(rootSchema, componentPropNode.propPath, componentBlockNode.props);
            const idx = [...ancestorFields].reverse().findIndex(item => item.kind === 'array');
            if (idx !== -1) {
              const arrayFieldIdx = ancestorFields.length - 1 - idx;
              const arrayField = ancestorFields[arrayFieldIdx];
              (0,emery__WEBPACK_IMPORTED_MODULE_9__.assert)(arrayField.kind === 'array');
              const val = getValueAtPropPath(componentBlockNode.props, componentPropNode.propPath.slice(0, arrayFieldIdx));
              if (doesSchemaOnlyEverContainASingleChildField(arrayField.element)) {
                if (slate__WEBPACK_IMPORTED_MODULE_10__.Node.string(componentPropNode) === '' && val.length - 1 === componentPropNode.propPath[arrayFieldIdx]) {
                  slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
                    at: componentPropPath
                  });
                  if (isLastProp) {
                    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, {
                      type: 'paragraph',
                      children: [{
                        text: ''
                      }]
                    }, {
                      at: slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(componentBlockPath)
                    });
                    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.select(editor, slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(componentBlockPath));
                  } else {
                    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.move(editor, {
                      distance: 1,
                      unit: 'line'
                    });
                  }
                } else {
                  insertBreak();
                }
                return;
              }
            }
          }
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.splitNodes(editor, {
            always: true
          });
          const splitNodePath = slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(componentPropPath);
          if (isLastProp) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
              at: splitNodePath,
              to: slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(componentBlockPath)
            });
          } else {
            (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.m)(editor, splitNodePath, [...slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(splitNodePath), 0]);
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: splitNodePath
            });
          }
        });
        return;
      }
    }
    insertBreak();
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (node.type === 'component-inline-prop' && !node.propPath && (node.children.length !== 1 || !slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(node.children[0]) || node.children[0].text !== '')) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
        at: path
      });
      return;
    }
    if (node.type === 'component-block') {
      const componentBlock = blockComponents[node.component];
      if (componentBlock) {
        const rootSchema = {
          kind: 'object',
          fields: componentBlock.schema
        };
        const updatedProps = addMissingFields(node.props, rootSchema);
        if (updatedProps !== node.props) {
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
            props: updatedProps
          }, {
            at: path
          });
          return;
        }
        for (const [propPath, arrayField] of findArrayFieldsWithSingleChildField(rootSchema, node.props)) {
          if (node.children.length === 1 && node.children[0].type === 'component-inline-prop' && node.children[0].propPath === undefined) {
            break;
          }
          const nodesWithin = [];
          for (const [idx, childNode] of node.children.entries()) {
            if ((childNode.type === 'component-block-prop' || childNode.type === 'component-inline-prop') && childNode.propPath !== undefined) {
              const subPath = childNode.propPath.concat();
              while (subPath.length) {
                if (typeof subPath.pop() === 'number') break;
              }
              if (areArraysEqual(propPath, subPath)) {
                nodesWithin.push([idx, childNode]);
              }
            }
          }
          const arrVal = getValueAtPropPath(node.props, propPath);
          const prevKeys = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.a)(arrVal);
          const prevKeysSet = new Set(prevKeys);
          const alreadyUsedIndicies = new Set();
          const newVal = [];
          const newKeys = [];
          const getNewKey = () => {
            let key = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.c)();
            while (prevKeysSet.has(key)) {
              key = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.c)();
            }
            return key;
          };
          for (const [, node] of nodesWithin) {
            const idxFromValue = node.propPath[propPath.length];
            (0,emery__WEBPACK_IMPORTED_MODULE_9__.assert)(typeof idxFromValue === 'number');
            if (arrVal.length <= idxFromValue || alreadyUsedIndicies.has(idxFromValue) && isEmptyChildFieldNode(node)) {
              newVal.push((0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.g)(arrayField.element));
              newKeys.push(getNewKey());
            } else {
              alreadyUsedIndicies.add(idxFromValue);
              newVal.push(arrVal[idxFromValue]);
              newKeys.push(alreadyUsedIndicies.has(idxFromValue) ? getNewKey() : prevKeys[idxFromValue]);
            }
          }
          (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.s)(newVal, newKeys);
          if (!areArraysEqual(arrVal, newVal)) {
            const transformedProps = replaceValueAtPropPath(rootSchema, node.props, newVal, propPath);
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
              props: transformedProps
            }, {
              at: path
            });
            for (const [idx, [idxInChildrenOfBlock, nodeWithin]] of nodesWithin.entries()) {
              const newPropPath = [...nodeWithin.propPath];
              newPropPath[propPath.length] = idx;
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
                propPath: newPropPath
              }, {
                at: [...path, idxInChildrenOfBlock]
              });
            }
            return;
          }
        }
        const missingKeys = new Map(findChildPropPaths(node.props, componentBlock.schema).map(x => [JSON.stringify(x.path), x.options.kind]));
        node.children.forEach(node => {
          (0,emery__WEBPACK_IMPORTED_MODULE_9__.assert)(node.type === 'component-block-prop' || node.type === 'component-inline-prop');
          missingKeys.delete(JSON.stringify(node.propPath));
        });
        if (missingKeys.size) {
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, [...missingKeys].map(_ref2 => {
            let [prop, kind] = _ref2;
            return {
              type: `component-${kind}-prop`,
              propPath: prop ? JSON.parse(prop) : prop,
              children: [{
                text: ''
              }]
            };
          }), {
            at: [...path, node.children.length]
          });
          return;
        }
        const foundProps = new Set();
        const stringifiedInlinePropPaths = {};
        findChildPropPaths(node.props, blockComponents[node.component].schema).forEach((x, index) => {
          stringifiedInlinePropPaths[JSON.stringify(x.path)] = {
            options: x.options,
            index
          };
        });
        for (const [index, childNode] of node.children.entries()) {
          if (
          // children that are not these will be handled by
          // the generic allowedChildren normalization
          childNode.type !== 'component-inline-prop' && childNode.type !== 'component-block-prop') {
            continue;
          }
          const childPath = [...path, index];
          const stringifiedPropPath = JSON.stringify(childNode.propPath);
          if (stringifiedInlinePropPaths[stringifiedPropPath] === undefined) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: childPath
            });
            return;
          }
          if (foundProps.has(stringifiedPropPath)) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: childPath
            });
            return;
          }
          foundProps.add(stringifiedPropPath);
          const propInfo = stringifiedInlinePropPaths[stringifiedPropPath];
          const expectedIndex = propInfo.index;
          if (index !== expectedIndex) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
              at: childPath,
              to: [...path, expectedIndex]
            });
            return;
          }
          const expectedChildNodeType = `component-${propInfo.options.kind}-prop`;
          if (childNode.type !== expectedChildNodeType) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
              type: expectedChildNodeType
            }, {
              at: childPath
            });
            return;
          }
          const documentFeatures = memoizedGetDocumentFeaturesForChildField(propInfo.options);
          if (normalizeNodeWithinComponentProp([childNode, childPath], editor, documentFeatures)) {
            return;
          }
        }
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

// the only thing that this will fix is a new field being added to an object field, nothing else.
function addMissingFields(value, schema) {
  if (schema.kind === 'child' || schema.kind === 'form') {
    return value;
  }
  if (schema.kind === 'conditional') {
    const conditionalValue = value;
    const updatedInnerValue = addMissingFields(conditionalValue.value, schema.values[conditionalValue.discriminant.toString()]);
    if (updatedInnerValue === conditionalValue.value) {
      return value;
    }
    return {
      discriminant: conditionalValue.discriminant,
      value: updatedInnerValue
    };
  }
  if (schema.kind === 'array') {
    const arrValue = value;
    const newArrValue = arrValue.map(x => addMissingFields(x, schema.element));
    if (areArraysEqual(arrValue, newArrValue)) {
      return value;
    }
    return newArrValue;
  }
  if (schema.kind === 'object') {
    const objectValue = value;
    let hasChanged = false;
    const newObjectValue = {};
    for (const [key, innerSchema] of Object.entries(schema.fields)) {
      const innerValue = objectValue[key];
      if (innerValue === undefined) {
        hasChanged = true;
        newObjectValue[key] = (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.g)(innerSchema);
        continue;
      }
      const newInnerValue = addMissingFields(innerValue, innerSchema);
      if (newInnerValue !== innerValue) {
        hasChanged = true;
      }
      newObjectValue[key] = newInnerValue;
    }
    if (hasChanged) {
      return newObjectValue;
    }
    return value;
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_9__.assertNever)(schema);
}

const paragraphElement = () => ({
  type: 'paragraph',
  children: [{
    text: ''
  }]
});
function withParagraphs(editor) {
  const {
    normalizeNode
  } = editor;
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isEditor(node)) {
      let lastNode = node.children[node.children.length - 1];
      if ((lastNode === null || lastNode === void 0 ? void 0 : lastNode.type) !== 'paragraph') {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, paragraphElement(), {
          at: [...path, node.children.length]
        });
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

function withLayouts(editor) {
  const {
    normalizeNode,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) &&
    // this is just an little optimisation
    // we're only doing things if we're at the start of a layout area
    // and the start of anything will always be offset 0
    // so we'll bailout if we're not at offset 0
    editor.selection.anchor.offset === 0) {
      const [aboveNode, abovePath] = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
        match: node => node.type === 'layout-area'
      }) || [editor, []];
      if (aboveNode.type === 'layout-area' && slate__WEBPACK_IMPORTED_MODULE_10__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, abovePath), editor.selection.anchor)) {
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(node) && node.type === 'layout') {
      if (node.layout === undefined) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      if (node.children.length < node.layout.length) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, Array.from({
          length: node.layout.length - node.children.length
        }).map(() => ({
          type: 'layout-area',
          children: [paragraphElement()]
        })), {
          at: [...path, node.children.length]
        });
        return;
      }
      if (node.children.length > node.layout.length) {
        Array.from({
          length: node.children.length - node.layout.length
        }).map((_, i) => i).reverse().forEach(i => {
          const layoutAreaToRemovePath = [...path, i + node.layout.length];
          const child = node.children[i + node.layout.length];
          (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.m)(editor, layoutAreaToRemovePath, [...path, node.layout.length - 1, node.children[node.layout.length - 1].children.length], node => node.type !== 'paragraph' || slate__WEBPACK_IMPORTED_MODULE_10__.Node.string(child) !== '');
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
            at: layoutAreaToRemovePath
          });
        });
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

const markdownLinkPattern = /(^|\s)\[(.+?)\]\((\S+)\)$/;
function withLink(editorDocumentFeatures, componentBlocks, editor) {
  const {
    insertText,
    isInline,
    normalizeNode
  } = editor;
  editor.isInline = element => {
    return element.type === 'link' ? true : isInline(element);
  };
  if (editorDocumentFeatures.links) {
    editor.insertText = text => {
      insertText(text);
      if (text !== ')' || !editor.selection) {
        return;
      }
      const startOfBlock = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
        match: _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i
      })[1]);
      const startOfBlockToEndOfShortcutString = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.string(editor, {
        anchor: editor.selection.anchor,
        focus: startOfBlock
      });
      const match = markdownLinkPattern.exec(startOfBlockToEndOfShortcutString);
      if (!match) {
        return;
      }
      const ancestorComponentChildFieldDocumentFeatures = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.g)(editor, editorDocumentFeatures, componentBlocks);
      if ((ancestorComponentChildFieldDocumentFeatures === null || ancestorComponentChildFieldDocumentFeatures === void 0 ? void 0 : ancestorComponentChildFieldDocumentFeatures.documentFeatures.links) === false) {
        return;
      }
      const [, maybeWhitespace, linkText, href] = match;
      // by doing this, the insertText(')') above will happen in a different undo than the link replacement
      // so that means that when someone does an undo after this
      // it will undo to the state of "[content](link)" rather than "[content](link" (note the missing closing bracket)
      editor.history.undos.push({
        operations: [],
        selectionBefore: editor.selection
      });
      const startOfShortcut = match.index === 0 ? startOfBlock : (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.E)(editor, startOfBlock, {
        distance: match.index
      });
      const startOfLinkText = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.E)(editor, startOfShortcut, {
        distance: maybeWhitespace === '' ? 1 : 2
      });
      const endOfLinkText = (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.E)(editor, startOfLinkText, {
        distance: linkText.length
      });
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.delete(editor, {
        at: {
          anchor: endOfLinkText,
          focus: editor.selection.anchor
        }
      });
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.delete(editor, {
        at: {
          anchor: startOfShortcut,
          focus: startOfLinkText
        }
      });
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.wrapNodes(editor, {
        type: 'link',
        href,
        children: []
      }, {
        at: {
          anchor: editor.selection.anchor,
          focus: startOfShortcut
        },
        split: true
      });
      const nextNode = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.next(editor);
      if (nextNode) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.select(editor, nextNode[1]);
      }
    };
  }
  editor.normalizeNode = _ref => {
    let [node, path] = _ref;
    if (node.type === 'link') {
      if (slate__WEBPACK_IMPORTED_MODULE_10__.Node.string(node) === '') {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      for (const [idx, child] of node.children.entries()) {
        if (child.type === 'link') {
          // links cannot contain links
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
            at: [...path, idx]
          });
          return;
        }
      }
    }
    if ((0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.c)(node)) {
      let lastMergableLink = null;
      for (const [idx, child] of node.children.entries()) {
        var _lastMergableLink;
        if (child.type === 'link' && child.href === ((_lastMergableLink = lastMergableLink) === null || _lastMergableLink === void 0 ? void 0 : _lastMergableLink.node.href)) {
          const firstLinkPath = [...path, lastMergableLink.index];
          const secondLinkPath = [...path, idx];
          const to = [...firstLinkPath, lastMergableLink.node.children.length];
          // note this is going in reverse, js doesn't have double-ended iterators so it's a for(;;)
          for (let i = child.children.length - 1; i >= 0; i--) {
            const childPath = [...secondLinkPath, i];
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
              at: childPath,
              to
            });
          }
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
            at: secondLinkPath
          });
          return;
        }
        if (!slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(child) || child.text !== '') {
          lastMergableLink = null;
        }
        if (child.type === 'link') {
          lastMergableLink = {
            index: idx,
            node: child
          };
        }
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}

const isListType = type => type === 'ordered-list' || type === 'unordered-list';
const isListNode = node => isListType(node.type);
function getAncestorList(editor) {
  if (editor.selection) {
    const listItem = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
      match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('list-item')
    });
    const list = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
      match: isListNode
    });
    if (listItem && list) {
      return {
        isInside: true,
        listItem,
        list
      };
    }
  }
  return {
    isInside: false
  };
}
function withList(editor) {
  const {
    insertBreak,
    normalizeNode,
    deleteBackward
  } = editor;
  editor.deleteBackward = unit => {
    if (editor.selection) {
      const ancestorList = getAncestorList(editor);
      if (ancestorList.isInside && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) && slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isStart(editor, editor.selection.anchor, ancestorList.list[1])) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
          match: isListNode,
          split: true
        });
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.insertBreak = () => {
    const [listItem] = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.nodes(editor, {
      match: node => node.type === 'list-item',
      mode: 'lowest'
    });
    if (listItem && slate__WEBPACK_IMPORTED_MODULE_10__.Node.string(listItem[0]) === '') {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
        match: isListNode,
        split: true
      });
      return;
    }
    insertBreak();
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(node) || slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isEditor(node)) {
      const isElementBeingNormalizedAList = isListNode(node);
      for (const [childNode, childPath] of slate__WEBPACK_IMPORTED_MODULE_10__.Node.children(editor, path)) {
        const index = childPath[childPath.length - 1];
        // merge sibling lists
        if (isListNode(childNode)) {
          var _node$children;
          if (((_node$children = node.children[childPath[childPath.length - 1] + 1]) === null || _node$children === void 0 ? void 0 : _node$children.type) === childNode.type) {
            const siblingNodePath = slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(childPath);
            (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.m)(editor, siblingNodePath, [...childPath, childNode.children.length]);
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: siblingNodePath
            });
            return;
          }
          if (isElementBeingNormalizedAList) {
            const previousChild = node.children[index - 1];
            if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(previousChild)) {
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
                at: childPath,
                to: [...slate__WEBPACK_IMPORTED_MODULE_10__.Path.previous(childPath), previousChild.children.length - 1]
              });
            } else {
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
                at: childPath
              });
            }
            return;
          }
        }
        if (node.type === 'list-item' && childNode.type !== 'list-item-content' && index === 0 && (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(childNode)) {
          if (path[path.length - 1] !== 0) {
            const previousChild = slate__WEBPACK_IMPORTED_MODULE_10__.Node.get(editor, slate__WEBPACK_IMPORTED_MODULE_10__.Path.previous(path));
            if (slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(previousChild)) {
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
                at: path,
                to: [...slate__WEBPACK_IMPORTED_MODULE_10__.Path.previous(path), previousChild.children.length]
              });
              return;
            }
          }
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
            at: childPath
          });
          return;
        }
        if (node.type === 'list-item' && childNode.type === 'list-item-content' && index !== 0) {
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.splitNodes(editor, {
            at: childPath
          });
          return;
        }
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

function order(a, b) {
  return {
    start: Math.min(a, b),
    end: Math.max(a, b)
  };
}
function getRelativeRowPath(hasHead, rowIndex) {
  return hasHead ? rowIndex === 0 ? [0, 0] : [1, rowIndex - 1] : [0, rowIndex];
}
function getSelectedTableArea(editor) {
  var _Editor$above, _editor$selection, _Editor$above2, _editor$selection2;
  const anchor = (_Editor$above = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('table-cell'),
    at: (_editor$selection = editor.selection) === null || _editor$selection === void 0 ? void 0 : _editor$selection.anchor.path
  })) === null || _Editor$above === void 0 ? void 0 : _Editor$above[1];
  const focus = (_Editor$above2 = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('table-cell'),
    at: (_editor$selection2 = editor.selection) === null || _editor$selection2 === void 0 ? void 0 : _editor$selection2.focus.path
  })) === null || _Editor$above2 === void 0 ? void 0 : _Editor$above2[1];
  const table = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
    match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('table')
  });
  if (editor.selection && table && slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(table[0].children[0]) && anchor && focus && slate__WEBPACK_IMPORTED_MODULE_10__.Path.equals(anchor.slice(0, -3), focus.slice(0, -3))) {
    const [start, end] = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.edges(editor, editor.selection);
    return {
      tablePath: table[1],
      table: table[0],
      singleCell: slate__WEBPACK_IMPORTED_MODULE_10__.Path.equals(anchor, focus) ? slate__WEBPACK_IMPORTED_MODULE_10__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, anchor), start) && slate__WEBPACK_IMPORTED_MODULE_10__.Point.equals(slate__WEBPACK_IMPORTED_MODULE_10__.Editor.end(editor, anchor), end) && !slate__WEBPACK_IMPORTED_MODULE_10__.Point.equals(start, end) ? 'selected' : 'not-selected' : 'many',
      row: order(anchor[anchor.length - 2] + anchor[anchor.length - 3], focus[focus.length - 2] + focus[anchor.length - 3]),
      column: order(anchor[anchor.length - 1], focus[focus.length - 1])
    };
  }
}
const cell = header => ({
  type: 'table-cell',
  ...(header ? {
    header: true
  } : {}),
  children: [{
    type: 'paragraph',
    children: [{
      text: ''
    }]
  }]
});
function cloneDescendant(node) {
  if (slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(node)) return {
    ...node
  };
  return {
    ...node,
    children: node.children.map(cloneDescendant)
  };
}
function withTable(editor) {
  const {
    deleteFragment,
    normalizeNode,
    getFragment,
    insertFragment,
    deleteBackward
  } = editor;
  editor.insertFragment = fragment => {
    const selectedTableArea = getSelectedTableArea(editor);
    if (!selectedTableArea || fragment.length !== 1 || fragment[0].type !== 'table') {
      insertFragment(fragment);
      return;
    }
    const newRows = fragment[0].children.flatMap(child => child.type === 'table-head' || child.type === 'table-body' ? child.children : []);
    if (!newRows.every((0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('table-row'))) {
      insertFragment(fragment);
      return;
    }
    let {
      row,
      column,
      tablePath,
      table
    } = selectedTableArea;
    const existingBody = selectedTableArea.table.children[selectedTableArea.table.children.length === 1 ? 0 : 1];
    if (newRows[0].type !== 'table-row' || existingBody.type !== 'table-body' || existingBody.children[0].type !== 'table-row') {
      insertFragment(fragment);
      return;
    }
    const hasHead = table.children[0].type === 'table-head';
    if (selectedTableArea.singleCell !== 'many') {
      row = {
        start: row.start,
        end: Math.min(row.start + newRows.length - 1, existingBody.children.length - 1 + (hasHead ? 1 : 0))
      };
      column = {
        start: column.start,
        end: Math.min(column.start + newRows[0].children.length - 1, existingBody.children[0].children.length - 1)
      };
    }
    slate__WEBPACK_IMPORTED_MODULE_10__.Editor.withoutNormalizing(editor, () => {
      for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
        const newRow = newRows[(rowIndex - row.start) % newRows.length];
        for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
          const relativeCellPath = [...getRelativeRowPath(hasHead, rowIndex), cellIndex];
          const cell = slate__WEBPACK_IMPORTED_MODULE_10__.Node.get(table, relativeCellPath);
          const newCell = newRow.children[(cellIndex - column.start) % newRow.children.length];
          if (cell.type !== 'table-cell' || newCell.type !== 'table-cell') {
            continue;
          }
          const cellPath = [...tablePath, ...relativeCellPath];
          for (const childIdx of [...cell.children.keys()].reverse()) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: [...cellPath, childIdx]
            });
          }
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, newCell.children.map(cloneDescendant), {
            at: [...cellPath, 0]
          });
        }
      }
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setSelection(editor, {
        anchor: slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, [...tablePath, ...getRelativeRowPath(hasHead, row.start), column.start]),
        focus: slate__WEBPACK_IMPORTED_MODULE_10__.Editor.end(editor, [...tablePath, ...getRelativeRowPath(hasHead, row.end), column.end])
      });
    });
  };
  editor.deleteBackward = unit => {
    if (editor.selection && slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection) && editor.selection.anchor.offset === 0) {
      const tableCell = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.above(editor, {
        match: (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.n)('table-cell')
      });
      if (tableCell && tableCell[0].children[0].type === 'paragraph' && tableCell[0].children[0].children[0].type === undefined && slate__WEBPACK_IMPORTED_MODULE_10__.Path.equals(editor.selection.anchor.path, [...tableCell[1], 0, 0])) {
        return;
      }
    }
    deleteBackward(unit);
  };
  editor.getFragment = () => {
    const selectedTableArea = getSelectedTableArea(editor);
    if (selectedTableArea && selectedTableArea.singleCell !== 'not-selected') {
      var _table$children$;
      const {
        table
      } = selectedTableArea;
      const first = table.children[0].type === 'table-head' || table.children[0].type === 'table-body' ? table.children[0] : undefined;
      if (!first) {
        return getFragment();
      }
      const second = ((_table$children$ = table.children[1]) === null || _table$children$ === void 0 ? void 0 : _table$children$.type) === 'table-body' ? table.children[1] : undefined;
      const body = second || first;
      const hasHead = first.type === 'table-head';
      const isSelectionInHead = selectedTableArea.row.start === 0 && !!second;
      const columnLength = selectedTableArea.column.end - selectedTableArea.column.start + 1;
      return [{
        type: 'table',
        children: [...(isSelectionInHead ? [{
          type: 'table-head',
          children: [{
            type: 'table-row',
            children: Array.from({
              length: columnLength
            }).map((_, columnIndex) => first.children[0].children[columnIndex + selectedTableArea.column.start])
          }]
        }] : []), {
          type: 'table-body',
          children: Array.from({
            length: selectedTableArea.row.end - selectedTableArea.row.start + (isSelectionInHead ? 0 : 1)
          }).map((_, rowIndex) => ({
            type: 'table-row',
            children: Array.from({
              length: columnLength
            }).map((_, columnIndex) => body.children[rowIndex + selectedTableArea.row.start - (hasHead && !isSelectionInHead ? 1 : 0)].children[columnIndex + selectedTableArea.column.start])
          }))
        }]
      }];
    }
    return getFragment();
  };
  editor.deleteFragment = direction => {
    if (!editor.selection || slate__WEBPACK_IMPORTED_MODULE_10__.Range.isCollapsed(editor.selection)) {
      deleteFragment(direction);
      return;
    }
    const selectedTableArea = getSelectedTableArea(editor);
    if (!selectedTableArea || selectedTableArea.singleCell === 'not-selected') {
      deleteFragment(direction);
      return;
    }
    const headOrBody = selectedTableArea.table.children[0];
    if (!slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(headOrBody) || !slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(headOrBody.children[0])) {
      deleteFragment(direction);
      return;
    }
    const maxRowIdx = selectedTableArea.table.children.reduce((sum, headOrBody) => sum + (headOrBody.type === 'table-head' || headOrBody.type === 'table-body' ? headOrBody.children.length : 0), 0) - 1;
    const {
      row,
      column,
      tablePath
    } = selectedTableArea;
    // note the fact that hasWholeColumnSelected uses row and hasWholeRowSelected uses column
    // is not a mistake. if a whole column has been selected, then the starting row is 0 and the end is the last row
    const hasWholeColumnSelected = row.start === 0 && row.end === maxRowIdx;
    const hasWholeRowSelected = column.start === 0 && column.end === headOrBody.children[0].children.length - 1;
    if (hasWholeColumnSelected && hasWholeRowSelected) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
        at: tablePath
      });
      return;
    }
    const hasHead = headOrBody.type === 'table-head';
    if (hasWholeRowSelected) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Editor.withoutNormalizing(editor, () => {
        for (let i = row.end; i >= row.start; i--) {
          if (hasHead) {
            if (i === 0) {
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
                at: [...tablePath, 0]
              });
              continue;
            }
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: [...tablePath, 1, i - 1]
            });
            continue;
          }
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
            at: [...tablePath, 0, i]
          });
        }
      });
      return;
    }
    if (hasWholeColumnSelected) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Editor.withoutNormalizing(editor, () => {
        for (let i = column.end; i >= column.start; i--) {
          for (let rowIdx = 0; rowIdx <= maxRowIdx; rowIdx++) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: [...tablePath, ...getRelativeRowPath(hasHead, rowIdx), i]
            });
          }
        }
        const selectionPath = [...tablePath, 0, 0, column.start];
        const point = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, column.start === 0 ? selectionPath : slate__WEBPACK_IMPORTED_MODULE_10__.Path.previous(selectionPath));
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.select(editor, point);
      });
      return;
    }
    const selectionStart = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.start(editor, editor.selection).path;
    slate__WEBPACK_IMPORTED_MODULE_10__.Editor.withoutNormalizing(editor, () => {
      for (let rowIndex = row.start; rowIndex <= row.end; rowIndex++) {
        for (let cellIndex = column.start; cellIndex <= column.end; cellIndex++) {
          const relativeCellPath = [...getRelativeRowPath(hasHead, rowIndex), cellIndex];
          const cell = slate__WEBPACK_IMPORTED_MODULE_10__.Node.get(selectedTableArea.table, relativeCellPath);
          if (!slate__WEBPACK_IMPORTED_MODULE_10__.Element.isElement(cell)) {
            continue;
          }
          const cellPath = [...tablePath, ...relativeCellPath];
          slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, {
            type: 'paragraph',
            children: [{
              text: ''
            }]
          }, {
            at: [...cellPath, 0]
          });
          for (const childIdx of [...cell.children.keys()].reverse()) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.removeNodes(editor, {
              at: [...cellPath, childIdx + 1]
            });
          }
        }
      }
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.select(editor, selectionStart);
    });
  };
  editor.normalizeNode = entry => {
    const [node, path] = entry;
    if (node.type === 'table-head' && node.children.length > 1) {
      (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.m)(editor, path, slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(path), (_, i) => i !== 0);
      return;
    }
    let didUpdateThings = false;
    for (const parent of ['table-body', 'table-head']) {
      if (node.type === parent) {
        for (const [rowIdx, row] of node.children.entries()) {
          if (row.type === 'table-row') {
            for (const [cellIdx, cell] of row.children.entries()) {
              if (cell.type === 'table-cell') {
                const at = [...path, rowIdx, cellIdx];
                if (cell.header && parent === 'table-body') {
                  slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unsetNodes(editor, 'header', {
                    at
                  });
                  didUpdateThings = true;
                }
                if (!cell.header && parent === 'table-head') {
                  slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
                    header: true
                  }, {
                    at
                  });
                  didUpdateThings = true;
                }
              }
            }
          }
        }
      }
    }
    if (didUpdateThings) {
      return;
    }
    if (node.type === 'table') {
      const maxRowCount = node.children.reduce((max, node) => node.type === 'table-head' || node.type === 'table-body' ? node.children.reduce((max, node) => node.type === 'table-row' ? Math.max(max, node.children.length) : max, max) : max, 0);
      let didInsert = false;
      for (const [idx, child] of node.children.entries()) {
        if (child.type === 'table-body' || child.type === 'table-head') {
          for (const [rowIdx, row] of child.children.entries()) {
            if (row.type === 'table-row' && row.children.length !== maxRowCount) {
              slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, Array.from({
                length: maxRowCount - row.children.length
              }, () => cell(child.type === 'table-head')), {
                at: [...path, idx, rowIdx, row.children.length]
              });
              didInsert = true;
            }
          }
        }
      }
      if (didInsert) {
        return;
      }
      if (node.children.length === 1 && node.children[0].type === 'table-head') {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.insertNodes(editor, {
          type: 'table-body',
          children: Array.from({
            length: node.children[0].children.length
          }, () => cell(false))
        }, {
          at: [...path, 1]
        });
        return;
      }
      if (node.children.length === 2 && node.children[1].type === 'table-head') {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
          at: [...path, 1],
          to: [...path, 0]
        });
        return;
      }
      if (node.children.length > 2) {
        (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.m)(editor, path, slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(path), (_, i) => i !== 0 && i !== 1);
        return;
      }
    }
    normalizeNode(entry);
  };
  return editor;
}

function createDocumentEditorForNormalization(documentFeatures, componentBlocks) {
  return _createDocumentEditor((0,slate__WEBPACK_IMPORTED_MODULE_10__.createEditor)(), documentFeatures, componentBlocks);
}
function _createDocumentEditor(baseEditor, documentFeatures, componentBlocks) {
  return withBlocksSchema(withParagraphs(withLink(documentFeatures, componentBlocks, withList(withTable(withComponentBlocks(componentBlocks, documentFeatures, withVoidElements(withLayouts(withCodeBlock(documentFeatures, componentBlocks, withDocumentFeaturesNormalization(documentFeatures, baseEditor))))))))));
}
function withBlocksSchema(editor) {
  const {
    normalizeNode
  } = editor;
  editor.normalizeNode = _ref => {
    let [node, path] = _ref;
    if (!slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(node) && node.type !== 'link') {
      const nodeType = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isEditor(node) ? 'editor' : node.type;
      if (typeof nodeType !== 'string' || _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.e[nodeType] === undefined) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
          at: path
        });
        return;
      }
      const info = _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.e[nodeType];
      if (info.kind === 'blocks' && node.children.length !== 0 && node.children.every(child => !(0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(child))) {
        slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.wrapNodes(editor, {
          type: info.blockToWrapInlinesIn,
          children: []
        }, {
          at: path,
          match: node => !(0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(node)
        });
        return;
      }
      let didUpdate = false;
      for (const [index, childNode] of [...node.children.entries()].reverse()) {
        const childPath = [...path, index];
        if (info.kind === 'inlines') {
          if (!slate__WEBPACK_IMPORTED_MODULE_10__.Text.isText(childNode) && (0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(childNode)) {
            handleNodeInInvalidPosition(editor, [childNode, childPath], path);
            didUpdate = true;
            continue;
          }
        } else {
          if (!(0,_utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.i)(childNode)) {
            slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.wrapNodes(editor, {
              type: info.blockToWrapInlinesIn,
              children: []
            }, {
              at: childPath
            });
            didUpdate = true;
            continue;
          }
          if (!info.allowedChildren.has(childNode.type)) {
            handleNodeInInvalidPosition(editor, [childNode, childPath], path);
            didUpdate = true;
            continue;
          }
        }
      }
      if (didUpdate) {
        return;
      }
    }
    normalizeNode([node, path]);
  };
  return editor;
}
function handleNodeInInvalidPosition(editor, _ref2, ancestorPath) {
  let [node, path] = _ref2;
  const nodeType = node.type;
  const childNodeInfo = _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.e[nodeType];
  // the parent of a block will never be an inline so this casting is okay
  const ancestorNode = slate__WEBPACK_IMPORTED_MODULE_10__.Node.get(editor, ancestorPath);
  const parentNodeType = slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isEditor(ancestorNode) ? 'editor' : ancestorNode.type;
  const parentNodeInfo = _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.e[parentNodeType];
  if (!childNodeInfo || childNodeInfo.invalidPositionHandleMode === 'unwrap') {
    if (parentNodeInfo.kind === 'blocks' && parentNodeInfo.blockToWrapInlinesIn) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.setNodes(editor, {
        type: parentNodeInfo.blockToWrapInlinesIn,
        ...Object.fromEntries(Object.keys(node).filter(key => key !== 'type' && key !== 'children').map(key => [key, null])) // the Slate types don't understand that null is allowed and it will unset properties with setNodes
      }, {
        at: path
      });
      return;
    }
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
      at: path
    });
    return;
  }
  const info = _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.e[ancestorNode.type || 'editor'];
  if ((info === null || info === void 0 ? void 0 : info.kind) === 'blocks' && info.allowedChildren.has(nodeType)) {
    if (ancestorPath.length === 0) {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
        at: path,
        to: [path[0] + 1]
      });
    } else {
      slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
        at: path,
        to: slate__WEBPACK_IMPORTED_MODULE_10__.Path.next(ancestorPath)
      });
    }
    return;
  }
  if (slate__WEBPACK_IMPORTED_MODULE_10__.Editor.isEditor(ancestorNode)) {
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.moveNodes(editor, {
      at: path,
      to: [path[0] + 1]
    });
    slate__WEBPACK_IMPORTED_MODULE_10__.Transforms.unwrapNodes(editor, {
      at: [path[0] + 1]
    });
    return;
  }
  handleNodeInInvalidPosition(editor, [node, path], ancestorPath.slice(0, -1));
}
function withVoidElements(editor) {
  const {
    isVoid
  } = editor;
  editor.isVoid = node => {
    return node.type === 'divider' || node.type === 'image' || isVoid(node);
  };
  return editor;
}

const textEncoder = new TextEncoder();
const textDecoder = new TextDecoder();
const defaultAltField = (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_5__.t)({
  label: 'Alt text',
  description: 'This text will be used by screen readers and search engines.'
});
const emptyTitleField = (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_12__.b)({
  Input() {
    return null;
  },
  defaultValue() {
    return '';
  },
  parse(value) {
    if (value === undefined) return '';
    if (typeof value !== 'string') {
      throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_11__.F('Must be string');
    }
    return value;
  },
  validate(value) {
    return value;
  },
  serialize(value) {
    return {
      value
    };
  }
});
function normaliseDocumentFeatures(config) {
  var _config$formatting, _formatting$alignment, _formatting$alignment2, _formatting$blockType, _formatting$inlineMar, _formatting$inlineMar2, _formatting$inlineMar3, _formatting$inlineMar4, _formatting$inlineMar5, _formatting$inlineMar6, _formatting$inlineMar7, _formatting$inlineMar8, _formatting$listTypes, _formatting$listTypes2, _imagesConfig$schema$, _imagesConfig$schema, _imagesConfig$schema$2, _imagesConfig$schema2;
  const formatting = config.formatting === true ? {
    alignment: true,
    blockTypes: true,
    headingLevels: true,
    inlineMarks: true,
    listTypes: true,
    softBreaks: true
  } : (_config$formatting = config.formatting) !== null && _config$formatting !== void 0 ? _config$formatting : {};
  const imagesConfig = config.images === true ? {} : config.images;
  return {
    formatting: {
      alignment: formatting.alignment === true ? {
        center: true,
        end: true
      } : {
        center: !!((_formatting$alignment = formatting.alignment) !== null && _formatting$alignment !== void 0 && _formatting$alignment.center),
        end: !!((_formatting$alignment2 = formatting.alignment) !== null && _formatting$alignment2 !== void 0 && _formatting$alignment2.end)
      },
      blockTypes: (formatting === null || formatting === void 0 ? void 0 : formatting.blockTypes) === true ? {
        blockquote: true,
        code: {
          schema: (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)({})
        }
      } : {
        blockquote: !!((_formatting$blockType = formatting.blockTypes) !== null && _formatting$blockType !== void 0 && _formatting$blockType.blockquote),
        code: (() => {
          var _formatting$blockType2;
          if (((_formatting$blockType2 = formatting.blockTypes) === null || _formatting$blockType2 === void 0 ? void 0 : _formatting$blockType2.code) === undefined) {
            return false;
          }
          if (formatting.blockTypes.code === true || !formatting.blockTypes.code.schema) {
            return {
              schema: (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)({})
            };
          }
          for (const key of ['type', 'children', 'language']) {
            if (key in formatting.blockTypes.code.schema) {
              throw new Error(`"${key}" cannot be a key in the schema for code blocks`);
            }
          }
          return {
            schema: (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(formatting.blockTypes.code.schema)
          };
        })()
      },
      headings: (() => {
        var _obj$schema;
        const opt = formatting === null || formatting === void 0 ? void 0 : formatting.headingLevels;
        const obj = typeof opt === 'object' && 'levels' in opt ? opt : {
          levels: opt,
          schema: undefined
        };
        if (obj.schema) {
          for (const key of ['type', 'children', 'level', 'textAlign']) {
            if (key in obj.schema) {
              throw new Error(`"${key}" cannot be a key in the schema for headings`);
            }
          }
        }
        return {
          levels: [...new Set(obj.levels === true ? [1, 2, 3, 4, 5, 6] : obj.levels)],
          schema: (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)((_obj$schema = obj.schema) !== null && _obj$schema !== void 0 ? _obj$schema : {})
        };
      })(),
      inlineMarks: formatting.inlineMarks === true ? {
        bold: true,
        code: true,
        italic: true,
        keyboard: true,
        strikethrough: true,
        subscript: true,
        superscript: true,
        underline: true
      } : {
        bold: !!((_formatting$inlineMar = formatting.inlineMarks) !== null && _formatting$inlineMar !== void 0 && _formatting$inlineMar.bold),
        code: !!((_formatting$inlineMar2 = formatting.inlineMarks) !== null && _formatting$inlineMar2 !== void 0 && _formatting$inlineMar2.code),
        italic: !!((_formatting$inlineMar3 = formatting.inlineMarks) !== null && _formatting$inlineMar3 !== void 0 && _formatting$inlineMar3.italic),
        strikethrough: !!((_formatting$inlineMar4 = formatting.inlineMarks) !== null && _formatting$inlineMar4 !== void 0 && _formatting$inlineMar4.strikethrough),
        underline: !!((_formatting$inlineMar5 = formatting.inlineMarks) !== null && _formatting$inlineMar5 !== void 0 && _formatting$inlineMar5.underline),
        keyboard: !!((_formatting$inlineMar6 = formatting.inlineMarks) !== null && _formatting$inlineMar6 !== void 0 && _formatting$inlineMar6.keyboard),
        subscript: !!((_formatting$inlineMar7 = formatting.inlineMarks) !== null && _formatting$inlineMar7 !== void 0 && _formatting$inlineMar7.subscript),
        superscript: !!((_formatting$inlineMar8 = formatting.inlineMarks) !== null && _formatting$inlineMar8 !== void 0 && _formatting$inlineMar8.superscript)
      },
      listTypes: formatting.listTypes === true ? {
        ordered: true,
        unordered: true
      } : {
        ordered: !!((_formatting$listTypes = formatting.listTypes) !== null && _formatting$listTypes !== void 0 && _formatting$listTypes.ordered),
        unordered: !!((_formatting$listTypes2 = formatting.listTypes) !== null && _formatting$listTypes2 !== void 0 && _formatting$listTypes2.unordered)
      },
      softBreaks: !!formatting.softBreaks
    },
    links: !!config.links,
    layouts: [...new Set((config.layouts || []).map(x => JSON.stringify(x)))].map(x => JSON.parse(x)),
    dividers: !!config.dividers,
    images: imagesConfig === undefined ? false : {
      ...imagesConfig,
      schema: {
        alt: (_imagesConfig$schema$ = (_imagesConfig$schema = imagesConfig.schema) === null || _imagesConfig$schema === void 0 ? void 0 : _imagesConfig$schema.alt) !== null && _imagesConfig$schema$ !== void 0 ? _imagesConfig$schema$ : defaultAltField,
        title: (_imagesConfig$schema$2 = (_imagesConfig$schema2 = imagesConfig.schema) === null || _imagesConfig$schema2 === void 0 ? void 0 : _imagesConfig$schema2.title) !== null && _imagesConfig$schema$2 !== void 0 ? _imagesConfig$schema$2 : emptyTitleField
      }
    },
    tables: !!config.tables
  };
}
function document(_ref) {
  let {
    label,
    componentBlocks = {},
    description,
    ...documentFeaturesConfig
  } = _ref;
  const documentFeatures = normaliseDocumentFeatures(documentFeaturesConfig);
  const parse = mode => (_value, data) => {
    const markdoc = textDecoder.decode(data.content);
    const document = fromMarkdoc(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13___default().parse(markdoc), componentBlocks);
    const editor = createDocumentEditorForNormalization(documentFeatures, componentBlocks);
    editor.children = document;
    slate__WEBPACK_IMPORTED_MODULE_10__.Editor.normalize(editor, {
      force: true
    });
    return deserializeFiles(editor.children, componentBlocks, data.other, data.external || new Map(), mode, documentFeatures, data.slug);
  };
  return {
    kind: 'form',
    formKind: 'content',
    defaultValue() {
      return [{
        type: 'paragraph',
        children: [{
          text: ''
        }]
      }];
    },
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_6__/* .DocumentFieldInput */ .d, {
        componentBlocks: componentBlocks,
        description: description,
        label: label,
        documentFeatures: documentFeatures,
        ...props
      });
    },
    parse: parse('edit'),
    contentExtension: '.mdoc',
    validate(value) {
      return value;
    },
    directories: [...(0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.B)((0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(Object.fromEntries(Object.entries(componentBlocks).map(_ref2 => {
      let [name, block] = _ref2;
      return [name, (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.o)(block.schema)];
    })))), ...(typeof documentFeatures.images === 'object' && typeof documentFeatures.images.directory === 'string' ? [documentFeatures.images.directory] : [])],
    serialize(value, opts) {
      const {
        extraFiles,
        node
      } = toMarkdocDocument(value, {
        componentBlocks,
        documentFeatures,
        slug: opts.slug
      });
      const other = new Map();
      const external = new Map();
      for (const file of extraFiles) {
        if (file.parent === undefined) {
          other.set(file.path, file.contents);
          continue;
        }
        if (!external.has(file.parent)) {
          external.set(file.parent, new Map());
        }
        external.get(file.parent).set(file.path, file.contents);
      }
      return {
        content: textEncoder.encode(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13___default().format(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13___default().parse(_markdoc_markdoc__WEBPACK_IMPORTED_MODULE_13___default().format(node)))),
        other,
        external,
        value: undefined
      };
    },
    reader: {
      parse: parse('read')
    }
  };
}




/***/ }),

/***/ 96560:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ url),
/* harmony export */   v: () => (/* binding */ validateUrl)
/* harmony export */ });
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33531);
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(63998);
/* harmony import */ var _utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5804);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21040);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);






function validateUrl(validation, value, label) {
  if (value !== null && (typeof value !== 'string' || !(0,_isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(value))) {
    return `${label} is not a valid URL`;
  }
  if (validation !== null && validation !== void 0 && validation.isRequired && value === null) {
    return `${label} is required`;
  }
}
function url(_ref) {
  let {
    label,
    defaultValue = '',
    validation,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_1__/* .UrlFieldInput */ .i, {
        label: label,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_4__.F('Must be a string');
      }
      return value;
    },
    validate(value) {
      const message = validateUrl(validation, value, label);
      if (message !== undefined) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_4__.F(message);
      }
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.a)(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    }
  });
}




/***/ }),

/***/ 32236:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ getKeysForArrayValue),
/* harmony export */   b: () => (/* binding */ getInitialPropsValueFromInitializer),
/* harmony export */   c: () => (/* binding */ getNewArrayElementKey),
/* harmony export */   g: () => (/* binding */ getInitialPropsValue),
/* harmony export */   s: () => (/* binding */ setKeysForArrayValue),
/* harmony export */   u: () => (/* binding */ updateValue)
/* harmony export */ });
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85916);


const arrayValuesToElementKeys = new WeakMap();
let counter = 0;
function getKeysForArrayValue(value) {
  if (!arrayValuesToElementKeys.has(value)) {
    arrayValuesToElementKeys.set(value, Array.from({
      length: value.length
    }, getNewArrayElementKey));
  }
  return arrayValuesToElementKeys.get(value);
}
function setKeysForArrayValue(value, elementIds) {
  arrayValuesToElementKeys.set(value, elementIds);
}
function getNewArrayElementKey() {
  return (counter++).toString();
}
const getInitialPropsValue = _getInitialPropsValue;
function _getInitialPropsValue(schema) {
  switch (schema.kind) {
    case 'form':
      return schema.defaultValue();
    case 'child':
      return null;
    case 'conditional':
      {
        const defaultValue = schema.discriminant.defaultValue();
        return {
          discriminant: defaultValue,
          value: getInitialPropsValue(schema.values[defaultValue.toString()])
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = getInitialPropsValue(schema.fields[key]);
        }
        return obj;
      }
    case 'array':
      {
        return [];
      }
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function getInitialPropsValueFromInitializer(schema, initializer) {
  switch (schema.kind) {
    case 'form':
      return initializer === undefined ? schema.defaultValue() : initializer;
    case 'child':
      return null;
    case 'conditional':
      {
        const defaultValue = initializer === undefined ? schema.discriminant.defaultValue() : initializer.discriminant;
        return {
          discriminant: defaultValue,
          value: getInitialPropsValueFromInitializer(schema.values[defaultValue.toString()], initializer === undefined ? undefined : initializer.value)
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = getInitialPropsValueFromInitializer(schema.fields[key], initializer === undefined ? undefined : initializer[key]);
        }
        return obj;
      }
    case 'array':
      {
        return (initializer !== null && initializer !== void 0 ? initializer : []).map(x => getInitialPropsValueFromInitializer(schema.element, x.value));
      }
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function updateValue(schema, currentValue, updater) {
  if (updater === undefined) return currentValue;
  switch (schema.kind) {
    case 'form':
      return updater;
    case 'child':
      return null;
    case 'conditional':
      {
        return {
          discriminant: updater.discriminant,
          value: updater.discriminant === currentValue.discriminant ? updateValue(schema.values[updater.discriminant.toString()], currentValue.value, updater.value) : getInitialPropsValueFromInitializer(schema.values[updater.discriminant.toString()], updater.value)
        };
      }
    case 'object':
      {
        const obj = {};
        for (const key of Object.keys(schema.fields)) {
          obj[key] = updateValue(schema.fields[key], currentValue[key], updater[key]);
        }
        return obj;
      }
    case 'array':
      {
        const currentArrVal = currentValue;
        const newVal = updater;
        const uniqueKeys = new Set();
        for (const x of newVal) {
          if (x.key !== undefined) {
            if (uniqueKeys.has(x.key)) {
              throw new Error('Array elements must have unique keys');
            }
            uniqueKeys.add(x.key);
          }
        }
        const keys = newVal.map(x => {
          if (x.key !== undefined) return x.key;
          let elementKey = getNewArrayElementKey();
          // just in case someone gives a key that is above our counter
          while (uniqueKeys.has(elementKey)) {
            elementKey = getNewArrayElementKey();
          }
          uniqueKeys.add(elementKey);
          return elementKey;
        });
        const prevKeys = getKeysForArrayValue(currentArrVal);
        const prevValuesByKey = new Map(currentArrVal.map((value, i) => {
          return [prevKeys[i], value];
        }));
        const val = newVal.map((x, i) => {
          const id = keys[i];
          if (prevValuesByKey.has(id)) {
            return updateValue(schema.element, prevValuesByKey.get(id), x.value);
          }
          return getInitialPropsValueFromInitializer(schema.element, x.value);
        });
        setKeysForArrayValue(val, keys);
        return val;
      }
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}




/***/ }),

/***/ 33531:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ isValidURL)
/* harmony export */ });
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19047);


function isValidURL(url) {
  return url === (0,_braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_0__/* .sanitizeUrl */ .N)(url);
}




/***/ }),

/***/ 32153:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   XU: () => (/* binding */ index),
/* harmony export */   hJ: () => (/* binding */ collection),
/* harmony export */   ri: () => (/* binding */ singleton),
/* harmony export */   vc: () => (/* binding */ config)
/* harmony export */ });
/* unused harmony export component */
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85501);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79798);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(11592);
/* harmony import */ var _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62598);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(85916);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(92900);
/* harmony import */ var _ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(83002);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99034);
/* harmony import */ var _ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(10772);
/* harmony import */ var _ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(74659);
/* harmony import */ var _ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(3112);
/* harmony import */ var _ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(66855);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(34903);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(63815);
/* harmony import */ var _ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(16293);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(19047);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(21040);
/* harmony import */ var _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(96949);
/* harmony import */ var _index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(46824);
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(63998);
/* harmony import */ var _utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(5804);
/* harmony import */ var _index_361cf096_node_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(31168);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(45533);
/* harmony import */ var _index_118cbd18_node_esm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(836);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(30422);
/* harmony import */ var _index_b64ae589_node_esm_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(96560);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(86522);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(32236);
/* harmony import */ var _ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(67956);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(48727);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(99634);
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(46105);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(33531);








































function array(element, opts) {
  var _opts$label;
  return {
    kind: 'array',
    element,
    label: (_opts$label = opts === null || opts === void 0 ? void 0 : opts.label) !== null && _opts$label !== void 0 ? _opts$label : 'Items',
    description: opts === null || opts === void 0 ? void 0 : opts.description,
    itemLabel: opts === null || opts === void 0 ? void 0 : opts.itemLabel,
    asChildTag: opts === null || opts === void 0 ? void 0 : opts.asChildTag,
    slugField: opts === null || opts === void 0 ? void 0 : opts.slugField,
    validation: opts === null || opts === void 0 ? void 0 : opts.validation
  };
}

function checkbox(_ref) {
  let {
    label,
    defaultValue = false,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input(_ref2) {
      let {
        value,
        onChange,
        autoFocus
      } = _ref2;
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxs)(_keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_0__.Checkbox, {
        isSelected: value,
        onChange: onChange,
        autoFocus: autoFocus,
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_1__.Text, {
          children: label
        }), description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_1__.Text, {
          slot: "description",
          children: description
        })]
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === undefined) return defaultValue;
      if (typeof value !== 'boolean') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a boolean');
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
}

function child(options) {
  return {
    kind: 'child',
    options: options.kind === 'block' ? {
      kind: 'block',
      placeholder: options.placeholder,
      dividers: options.dividers,
      formatting: options.formatting === 'inherit' ? {
        blockTypes: 'inherit',
        headingLevels: 'inherit',
        inlineMarks: 'inherit',
        listTypes: 'inherit',
        alignment: 'inherit',
        softBreaks: 'inherit'
      } : options.formatting,
      links: options.links,
      images: options.images,
      tables: options.tables,
      componentBlocks: options.componentBlocks
    } : {
      kind: 'inline',
      placeholder: options.placeholder,
      formatting: options.formatting === 'inherit' ? {
        inlineMarks: 'inherit',
        softBreaks: 'inherit'
      } : options.formatting,
      links: options.links
    }
  };
}

function conditional(discriminant, values) {
  return {
    kind: 'conditional',
    discriminant,
    values: values
  };
}

function emptyDocument() {
  return {
    kind: 'form',
    formKind: 'content',
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    contentExtension: '.mdoc',
    serialize() {
      return {
        value: undefined,
        content: new Uint8Array(),
        external: new Map(),
        other: new Map()
      };
    },
    validate(value) {
      return value;
    },
    reader: {
      parse() {
        return null;
      }
    }
  };
}

function empty() {
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input() {
      return null;
    },
    defaultValue() {
      return null;
    },
    parse() {
      return null;
    },
    serialize() {
      return {
        value: undefined
      };
    },
    validate(value) {
      return value;
    }
  });
}

function file(_ref) {
  let {
    label,
    directory,
    validation,
    description,
    publicPath
  } = _ref;
  return {
    kind: 'form',
    formKind: 'asset',
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_7__/* .FileFieldInput */ .n, {
        label: label,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    filename(value, args) {
      if (typeof value === 'string') {
        return value.slice(getSrcPrefix(publicPath, args.slug).length);
      }
      return undefined;
    },
    parse(value, args) {
      var _value$match$, _value$match;
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
      }
      if (args.asset === undefined) {
        return null;
      }
      return {
        data: args.asset,
        filename: value.slice(getSrcPrefix(publicPath, args.slug).length),
        extension: (_value$match$ = (_value$match = value.match(/\.([^.]+$)/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : ''
      };
    },
    validate(value) {
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.a)(value, validation, label);
      return value;
    },
    serialize(value, args) {
      if (value === null) {
        return {
          value: undefined,
          asset: undefined
        };
      }
      const filename = args.suggestedFilenamePrefix ? args.suggestedFilenamePrefix + '.' + value.extension : value.filename;
      return {
        value: `${getSrcPrefix(publicPath, args.slug)}${filename}`,
        asset: {
          filename,
          content: value.data
        }
      };
    },
    directory: directory ? (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_21__.A)(directory) : undefined,
    reader: {
      parse(value) {
        if (typeof value !== 'string' && value !== undefined) {
          throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
        }
        const val = value === undefined ? null : value;
        (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.a)(val, validation, label);
        return val;
      }
    }
  };
}
function getSrcPrefix(publicPath, slug) {
  return typeof publicPath === 'string' ? `/${(0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_21__.A)(publicPath)}/${slug === undefined ? '' : slug + '/'}` : '';
}

function multiselect(_ref) {
  let {
    label,
    options,
    defaultValue = [],
    description
  } = _ref;
  const valuesToOption = new Map(options.map(x => [x.value, x]));
  const field = (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_9__/* .MultiselectFieldInput */ .W, {
        label: label,
        description: description,
        options: options,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === undefined) {
        return [];
      }
      if (!Array.isArray(value)) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be an array of options');
      }
      if (!value.every(x => typeof x === 'string' && valuesToOption.has(x))) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F(`Must be an array with one of ${options.map(x => x.value).join(', ')}`);
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}

function pathReference(_ref) {
  let {
    label,
    pattern,
    validation,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_10__/* .PathReferenceInput */ .V, {
        label: label,
        pattern: pattern,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
      }
      return value;
    },
    validate(value) {
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.a)(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    }
  });
}

function relationship(_ref) {
  let {
    label,
    collection,
    validation,
    description
  } = _ref;
  return (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_11__/* .RelationshipInput */ .Y, {
        label: label,
        collection: collection,
        description: description,
        validation: validation,
        ...props
      });
    },
    defaultValue() {
      return null;
    },
    parse(value) {
      if (value === undefined) {
        return null;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
      }
      return value;
    },
    validate(value) {
      (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.a)(value, validation, label);
      return value;
    },
    serialize(value) {
      return {
        value: value === null ? undefined : value
      };
    }
  });
}

function select(_ref) {
  let {
    label,
    options,
    defaultValue,
    description
  } = _ref;
  const optionValuesSet = new Set(options.map(x => x.value));
  if (!optionValuesSet.has(defaultValue)) {
    throw new Error(`A defaultValue of ${defaultValue} was provided to a select field but it does not match the value of one of the options provided`);
  }
  const field = (0,_utils_503b8a80_node_esm_js__WEBPACK_IMPORTED_MODULE_33__.b)({
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_12__/* .SelectFieldInput */ .W, {
        label: label,
        options: options,
        description: description,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value) {
      if (value === undefined) {
        return defaultValue;
      }
      if (typeof value !== 'string') {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
      }
      if (!optionValuesSet.has(value)) {
        throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a valid option');
      }
      return value;
    },
    validate(value) {
      return value;
    },
    serialize(value) {
      return {
        value
      };
    }
  });
  return {
    ...field,
    options
  };
}

function parseSlugFieldAsNormalField(value) {
  if (value === undefined) {
    return {
      name: '',
      slug: ''
    };
  }
  if (typeof value !== 'object') {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be an object');
  }
  if (Object.keys(value).length !== 2) {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Unexpected keys');
  }
  if (!('name' in value) || !('slug' in value)) {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Missing name or slug');
  }
  if (typeof value.name !== 'string') {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('name must be a string');
  }
  if (typeof value.slug !== 'string') {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('slug must be a string');
  }
  return {
    name: value.name,
    slug: value.slug
  };
}
function parseAsSlugField(value, slug) {
  if (value === undefined) {
    return {
      name: '',
      slug
    };
  }
  if (typeof value !== 'string') {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F('Must be a string');
  }
  return {
    name: value,
    slug
  };
}
function slug(args) {
  var _args$slug, _args$name$defaultVal, _args$name$defaultVal2;
  const naiveGenerateSlug = ((_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.generate) || (_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_13___default());
  const defaultValue = {
    name: (_args$name$defaultVal = args.name.defaultValue) !== null && _args$name$defaultVal !== void 0 ? _args$name$defaultVal : '',
    slug: naiveGenerateSlug((_args$name$defaultVal2 = args.name.defaultValue) !== null && _args$name$defaultVal2 !== void 0 ? _args$name$defaultVal2 : '')
  };
  function validate(value) {
    var _args$name$validation, _args$name$validation2, _args$name$validation3, _args$name$validation4, _args$name$validation5, _args$name$validation6, _args$slug$validation, _args$slug2, _args$slug2$validatio, _args$slug2$validatio2, _args$slug$validation2, _args$slug3, _args$slug3$validatio, _args$slug3$validatio2, _args$slug$label, _args$slug4;
    let {
      slugField
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      slugField: undefined
    };
    const nameMessage = (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_23__.v)(value.name, (_args$name$validation = (_args$name$validation2 = args.name.validation) === null || _args$name$validation2 === void 0 ? void 0 : (_args$name$validation3 = _args$name$validation2.length) === null || _args$name$validation3 === void 0 ? void 0 : _args$name$validation3.min) !== null && _args$name$validation !== void 0 ? _args$name$validation : 0, (_args$name$validation4 = (_args$name$validation5 = args.name.validation) === null || _args$name$validation5 === void 0 ? void 0 : (_args$name$validation6 = _args$name$validation5.length) === null || _args$name$validation6 === void 0 ? void 0 : _args$name$validation6.max) !== null && _args$name$validation4 !== void 0 ? _args$name$validation4 : Infinity, args.name.label, undefined);
    if (nameMessage !== undefined) {
      throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F(nameMessage);
    }
    const slugMessage = (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_23__.v)(value.slug, (_args$slug$validation = (_args$slug2 = args.slug) === null || _args$slug2 === void 0 ? void 0 : (_args$slug2$validatio = _args$slug2.validation) === null || _args$slug2$validatio === void 0 ? void 0 : (_args$slug2$validatio2 = _args$slug2$validatio.length) === null || _args$slug2$validatio2 === void 0 ? void 0 : _args$slug2$validatio2.min) !== null && _args$slug$validation !== void 0 ? _args$slug$validation : 1, (_args$slug$validation2 = (_args$slug3 = args.slug) === null || _args$slug3 === void 0 ? void 0 : (_args$slug3$validatio = _args$slug3.validation) === null || _args$slug3$validatio === void 0 ? void 0 : (_args$slug3$validatio2 = _args$slug3$validatio.length) === null || _args$slug3$validatio2 === void 0 ? void 0 : _args$slug3$validatio2.max) !== null && _args$slug$validation2 !== void 0 ? _args$slug$validation2 : Infinity, (_args$slug$label = (_args$slug4 = args.slug) === null || _args$slug4 === void 0 ? void 0 : _args$slug4.label) !== null && _args$slug$label !== void 0 ? _args$slug$label : 'Slug', slugField ? slugField : {
      slugs: emptySet,
      glob: '*'
    });
    if (slugMessage !== undefined) {
      throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_34__.F(slugMessage);
    }
    return value;
  }
  const emptySet = new Set();
  return {
    kind: 'form',
    formKind: 'slug',
    Input(props) {
      return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_2__.jsx)(_ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_15__/* .SlugFieldInput */ .E, {
        args: args,
        naiveGenerateSlug: naiveGenerateSlug,
        defaultValue: defaultValue,
        ...props
      });
    },
    defaultValue() {
      return defaultValue;
    },
    parse(value, args) {
      if ((args === null || args === void 0 ? void 0 : args.slug) !== undefined) {
        return parseAsSlugField(value, args.slug);
      }
      return parseSlugFieldAsNormalField(value);
    },
    validate,
    serialize(value) {
      return {
        value
      };
    },
    serializeWithSlug(value) {
      return {
        value: value.name,
        slug: value.slug
      };
    },
    reader: {
      parse(value) {
        const parsed = parseSlugFieldAsNormalField(value);
        return validate(parsed);
      },
      parseWithSlug(value, args) {
        return validate(parseAsSlugField(value, args.slug), {
          slugField: {
            glob: args.glob,
            slugs: emptySet
          }
        }).name;
      }
    }
  };
}

function blocks(blocks, opts) {
  const entries = Object.entries(blocks);
  if (!entries.length) {
    throw new Error('fields.blocks must have at least one entry');
  }
  const select$1 = select({
    label: 'Kind',
    defaultValue: entries[0][0],
    options: Object.entries(blocks).map(_ref => {
      let [key, {
        label
      }] = _ref;
      return {
        label,
        value: key
      };
    })
  });
  const element = conditional(select$1, Object.fromEntries(entries.map(_ref2 => {
    let [key, {
      schema
    }] = _ref2;
    return [key, schema];
  })));
  return {
    ...array(element, {
      label: opts.label,
      description: opts.description,
      validation: opts.validation,
      itemLabel(props) {
        const kind = props.discriminant;
        const block = blocks[kind];
        if (!block.itemLabel) return block.label;
        return block.itemLabel(props.value);
      }
    }),
    Input: _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_18__/* .BlocksFieldInput */ .u
  };
}

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  array: array,
  checkbox: checkbox,
  child: child,
  conditional: conditional,
  date: _index_361cf096_node_esm_js__WEBPACK_IMPORTED_MODULE_20__.d,
  document: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_4__.d,
  emptyDocument: emptyDocument,
  empty: empty,
  image: _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_4__.i,
  file: file,
  integer: _index_118cbd18_node_esm_js__WEBPACK_IMPORTED_MODULE_22__.i,
  multiselect: multiselect,
  object: _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_21__.o,
  pathReference: pathReference,
  relationship: relationship,
  select: select,
  slug: slug,
  text: _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_23__.t,
  url: _index_b64ae589_node_esm_js__WEBPACK_IMPORTED_MODULE_24__.u,
  blocks: blocks
});

// this is written like this rather than ArrayField<ComponentSchema> to avoid TypeScript erroring about circularity
function component(options) {
  return options;
}

function config(config) {
  return config;
}
function collection(collection) {
  return collection;
}
function singleton(collection) {
  return collection;
}




/***/ }),

/***/ 99634:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ aliasesToCanonicalName),
/* harmony export */   b: () => (/* binding */ aliasesToLabel),
/* harmony export */   c: () => (/* binding */ canonicalNameToLabel),
/* harmony export */   d: () => (/* binding */ languagesWithAliases),
/* harmony export */   l: () => (/* binding */ labelToCanonicalName)
/* harmony export */ });
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46105);


const languages = [{
  label: 'C',
  value: 'c'
}, {
  label: 'C++',
  value: 'cpp'
}, {
  label: 'Arduino',
  value: 'arduino'
}, {
  label: 'Bash',
  value: 'bash'
}, {
  label: 'C#',
  value: 'csharp'
}, {
  label: 'CSS',
  value: 'css'
}, {
  label: 'Diff',
  value: 'diff'
}, {
  label: 'Go',
  value: 'go'
}, {
  label: 'INI',
  value: 'ini'
}, {
  label: 'Java',
  value: 'java'
}, {
  label: 'JavaScript',
  value: 'javascript'
}, {
  label: 'JSX',
  value: 'jsx'
}, {
  label: 'JSON',
  value: 'json'
}, {
  label: 'Kotlin',
  value: 'kotlin'
}, {
  label: 'Less',
  value: 'less'
}, {
  label: 'Lua',
  value: 'lua'
}, {
  label: 'Makefile',
  value: 'makefile'
}, {
  label: 'Markdown',
  value: 'markdown'
}, {
  label: 'Objective-C',
  value: 'objectivec'
}, {
  label: 'Perl',
  value: 'perl'
}, {
  label: 'PHP',
  value: 'php'
}, {
  label: 'Python',
  value: 'python'
}, {
  label: 'R',
  value: 'r'
}, {
  label: 'Ruby',
  value: 'ruby'
}, {
  label: 'Rust',
  value: 'rust'
}, {
  label: 'Sass',
  value: 'sass'
}, {
  label: 'SCSS',
  value: 'scss'
}, {
  label: 'SQL',
  value: 'sql'
}, {
  label: 'Swift',
  value: 'swift'
}, {
  label: 'TypeScript',
  value: 'typescript'
}, {
  label: 'TSX',
  value: 'tsx'
}, {
  label: 'VB.NET',
  value: 'vbnet'
}, {
  label: 'YAML',
  value: 'yaml'
}];
const canonicalNameToLabel = new Map(languages.map(x => [x.value, x.label]));
const labelToCanonicalName = new Map(languages.map(x => [x.label, x.value]));
const languageToCanonicalName = new Map(languages.map(lang => [_prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.languages[lang.value], lang.value]));
const aliasesToCanonicalName = new Map(Object.keys(_prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.languages).flatMap(lang => {
  const canonicalName = languageToCanonicalName.get(_prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.P.languages[lang]);
  if (canonicalName === undefined) {
    return [];
  }
  return [[lang, canonicalName]];
}));
const languagesToAliases = new Map(languages.map(lang => [lang.value, []]));
for (const [alias, canonicalName] of aliasesToCanonicalName) {
  languagesToAliases.get(canonicalName).push(alias);
}
const languagesWithAliases = [{
  label: 'Plain text',
  value: 'plain',
  aliases: []
}, ...[...languagesToAliases].map(_ref => {
  let [canonicalName, aliases] = _ref;
  return {
    label: canonicalNameToLabel.get(canonicalName),
    value: canonicalName,
    aliases
  };
})];
const aliasesToLabel = new Map([...aliasesToCanonicalName].map(_ref2 => {
  let [alias, canonicalName] = _ref2;
  return [alias, canonicalNameToLabel.get(canonicalName)];
}));




/***/ }),

/***/ 46105:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   P: () => (/* binding */ Prism)
/* harmony export */ });
/* eslint-disable */
globalThis.Prism = {
  manual: true
};

/* **********************************************
     Begin prism-core.js
********************************************** */

/// <reference lib="WebWorker"/>

var _self = globalThis;

/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
var Prism = function (_self) {
  // Private helper vars
  var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
  var uniqueId = 0;

  // The grammar object for plaintext
  var plainTextGrammar = {};
  var _ = {
    /**
     * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
     * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
     * additional languages or plugins yourself.
     *
     * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
     *
     * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
     * empty Prism object into the global scope before loading the Prism script like this:
     *
     * ```js
     * window.Prism = window.Prism || {};
     * Prism.manual = true;
     * // add a new <script> to load Prism's script
     * ```
     *
     * @default false
     * @type {boolean}
     * @memberof Prism
     * @public
     */
    manual: _self.Prism && _self.Prism.manual,
    /**
     * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
     * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
     * own worker, you don't want it to do this.
     *
     * By setting this value to `true`, Prism will not add its own listeners to the worker.
     *
     * You obviously have to change this value before Prism executes. To do this, you can add an
     * empty Prism object into the global scope before loading the Prism script like this:
     *
     * ```js
     * window.Prism = window.Prism || {};
     * Prism.disableWorkerMessageHandler = true;
     * // Load Prism's script
     * ```
     *
     * @default false
     * @type {boolean}
     * @memberof Prism
     * @public
     */
    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
    /**
     * A namespace for utility methods.
     *
     * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
     * change or disappear at any time.
     *
     * @namespace
     * @memberof Prism
     */
    util: {
      encode: function encode(tokens) {
        if (tokens instanceof Token) {
          return new Token(tokens.type, encode(tokens.content), tokens.alias);
        } else if (Array.isArray(tokens)) {
          return tokens.map(encode);
        } else {
          return tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\u00a0/g, ' ');
        }
      },
      /**
       * Returns the name of the type of the given value.
       *
       * @param {any} o
       * @returns {string}
       * @example
       * type(null)      === 'Null'
       * type(undefined) === 'Undefined'
       * type(123)       === 'Number'
       * type('foo')     === 'String'
       * type(true)      === 'Boolean'
       * type([1, 2])    === 'Array'
       * type({})        === 'Object'
       * type(String)    === 'Function'
       * type(/abc+/)    === 'RegExp'
       */
      type: function (o) {
        return Object.prototype.toString.call(o).slice(8, -1);
      },
      /**
       * Returns a unique number for the given object. Later calls will still return the same number.
       *
       * @param {Object} obj
       * @returns {number}
       */
      objId: function (obj) {
        if (!obj['__id']) {
          Object.defineProperty(obj, '__id', {
            value: ++uniqueId
          });
        }
        return obj['__id'];
      },
      /**
       * Creates a deep clone of the given object.
       *
       * The main intended use of this function is to clone language definitions.
       *
       * @param {T} o
       * @param {Record<number, any>} [visited]
       * @returns {T}
       * @template T
       */
      clone: function deepClone(o, visited) {
        visited = visited || {};
        var clone;
        var id;
        switch (_.util.type(o)) {
          case 'Object':
            id = _.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = /** @type {Record<string, any>} */{};
            visited[id] = clone;
            for (var key in o) {
              if (o.hasOwnProperty(key)) {
                clone[key] = deepClone(o[key], visited);
              }
            }
            return (/** @type {any} */clone
            );
          case 'Array':
            id = _.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = [];
            visited[id] = clone;
            /** @type {Array} */ /** @type {any} */o.forEach(function (v, i) {
              clone[i] = deepClone(v, visited);
            });
            return (/** @type {any} */clone
            );
          default:
            return o;
        }
      },
      /**
       * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
       *
       * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
       *
       * @param {Element} element
       * @returns {string}
       */
      getLanguage: function (element) {
        while (element) {
          var m = lang.exec(element.className);
          if (m) {
            return m[1].toLowerCase();
          }
          element = element.parentElement;
        }
        return 'none';
      },
      /**
       * Sets the Prism `language-xxxx` class of the given element.
       *
       * @param {Element} element
       * @param {string} language
       * @returns {void}
       */
      setLanguage: function (element, language) {
        // remove all `language-xxxx` classes
        // (this might leave behind a leading space)
        element.className = element.className.replace(RegExp(lang, 'gi'), '');

        // add the new `language-xxxx` class
        // (using `classList` will automatically clean up spaces for us)
        element.classList.add('language-' + language);
      },
      /**
       * Returns the script element that is currently executing.
       *
       * This does __not__ work for line script element.
       *
       * @returns {HTMLScriptElement | null}
       */
      currentScript: function () {
        if (typeof document === 'undefined') {
          return null;
        }
        if ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {
          return (/** @type {any} */document.currentScript
          );
        }

        // IE11 workaround
        // we'll get the src of the current script by parsing IE11's error stack trace
        // this will not work for inline scripts

        try {
          throw new Error();
        } catch (err) {
          // Get file src url from stack. Specifically works with the format of stack traces in IE.
          // A stack will look like this:
          //
          // Error
          //    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)
          //    at Global code (http://localhost/components/prism-core.js:606:1)

          var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
          if (src) {
            var scripts = document.getElementsByTagName('script');
            for (var i in scripts) {
              if (scripts[i].src == src) {
                return scripts[i];
              }
            }
          }
          return null;
        }
      },
      /**
       * Returns whether a given class is active for `element`.
       *
       * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
       * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
       * given class is just the given class with a `no-` prefix.
       *
       * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
       * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
       * ancestors have the given class or the negated version of it, then the default activation will be returned.
       *
       * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
       * version of it, the class is considered active.
       *
       * @param {Element} element
       * @param {string} className
       * @param {boolean} [defaultActivation=false]
       * @returns {boolean}
       */
      isActive: function (element, className, defaultActivation) {
        var no = 'no-' + className;
        while (element) {
          var classList = element.classList;
          if (classList.contains(className)) {
            return true;
          }
          if (classList.contains(no)) {
            return false;
          }
          element = element.parentElement;
        }
        return !!defaultActivation;
      }
    },
    /**
     * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
     *
     * @namespace
     * @memberof Prism
     * @public
     */
    languages: {
      /**
       * The grammar for plain, unformatted text.
       */
      plain: plainTextGrammar,
      plaintext: plainTextGrammar,
      text: plainTextGrammar,
      txt: plainTextGrammar,
      /**
       * Creates a deep copy of the language with the given id and appends the given tokens.
       *
       * If a token in `redef` also appears in the copied language, then the existing token in the copied language
       * will be overwritten at its original position.
       *
       * ## Best practices
       *
       * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
       * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
       * understand the language definition because, normally, the order of tokens matters in Prism grammars.
       *
       * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
       * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
       *
       * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
       * @param {Grammar} redef The new tokens to append.
       * @returns {Grammar} The new language created.
       * @public
       * @example
       * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
       *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
       *     // at its original position
       *     'comment': { ... },
       *     // CSS doesn't have a 'color' token, so this token will be appended
       *     'color': /\b(?:red|green|blue)\b/
       * });
       */
      extend: function (id, redef) {
        var lang = _.util.clone(_.languages[id]);
        for (var key in redef) {
          lang[key] = redef[key];
        }
        return lang;
      },
      /**
       * Inserts tokens _before_ another token in a language definition or any other grammar.
       *
       * ## Usage
       *
       * This helper method makes it easy to modify existing languages. For example, the CSS language definition
       * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
       * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
       * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
       * this:
       *
       * ```js
       * Prism.languages.markup.style = {
       *     // token
       * };
       * ```
       *
       * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
       * before existing tokens. For the CSS example above, you would use it like this:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'cdata', {
       *     'style': {
       *         // token
       *     }
       * });
       * ```
       *
       * ## Special cases
       *
       * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
       * will be ignored.
       *
       * This behavior can be used to insert tokens after `before`:
       *
       * ```js
       * Prism.languages.insertBefore('markup', 'comment', {
       *     'comment': Prism.languages.markup.comment,
       *     // tokens after 'comment'
       * });
       * ```
       *
       * ## Limitations
       *
       * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
       * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
       * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
       * deleting properties which is necessary to insert at arbitrary positions.
       *
       * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
       * Instead, it will create a new object and replace all references to the target object with the new one. This
       * can be done without temporarily deleting properties, so the iteration order is well-defined.
       *
       * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
       * you hold the target object in a variable, then the value of the variable will not change.
       *
       * ```js
       * var oldMarkup = Prism.languages.markup;
       * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
       *
       * assert(oldMarkup !== Prism.languages.markup);
       * assert(newMarkup === Prism.languages.markup);
       * ```
       *
       * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
       * object to be modified.
       * @param {string} before The key to insert before.
       * @param {Grammar} insert An object containing the key-value pairs to be inserted.
       * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
       * object to be modified.
       *
       * Defaults to `Prism.languages`.
       * @returns {Grammar} The new grammar object.
       * @public
       */
      insertBefore: function (inside, before, insert, root) {
        root = root || /** @type {any} */_.languages;
        var grammar = root[inside];
        /** @type {Grammar} */
        var ret = {};
        for (var token in grammar) {
          if (grammar.hasOwnProperty(token)) {
            if (token == before) {
              for (var newToken in insert) {
                if (insert.hasOwnProperty(newToken)) {
                  ret[newToken] = insert[newToken];
                }
              }
            }

            // Do not insert token which also occur in insert. See #1525
            if (!insert.hasOwnProperty(token)) {
              ret[token] = grammar[token];
            }
          }
        }
        var old = root[inside];
        root[inside] = ret;

        // Update references in other language definitions
        _.languages.DFS(_.languages, function (key, value) {
          if (value === old && key != inside) {
            this[key] = ret;
          }
        });
        return ret;
      },
      // Traverse a language definition with Depth First Search
      DFS: function DFS(o, callback, type, visited) {
        visited = visited || {};
        var objId = _.util.objId;
        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            callback.call(o, i, o[i], type || i);
            var property = o[i];
            var propertyType = _.util.type(property);
            if (propertyType === 'Object' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, null, visited);
            } else if (propertyType === 'Array' && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, i, visited);
            }
          }
        }
      }
    },
    plugins: {},
    /**
     * This is the most high-level function in Prism’s API.
     * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
     * each one of them.
     *
     * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
     *
     * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
     * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
     * @memberof Prism
     * @public
     */
    highlightAll: function (async, callback) {
      _.highlightAllUnder(document, async, callback);
    },
    /**
     * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
     * {@link Prism.highlightElement} on each one of them.
     *
     * The following hooks will be run:
     * 1. `before-highlightall`
     * 2. `before-all-elements-highlight`
     * 3. All hooks of {@link Prism.highlightElement} for each element.
     *
     * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
     * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
     * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
     * @memberof Prism
     * @public
     */
    highlightAllUnder: function (container, async, callback) {
      var env = {
        callback: callback,
        container: container,
        selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
      };
      _.hooks.run('before-highlightall', env);
      env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
      _.hooks.run('before-all-elements-highlight', env);
      for (var i = 0, element; element = env.elements[i++];) {
        _.highlightElement(element, async === true, env.callback);
      }
    },
    /**
     * Highlights the code inside a single element.
     *
     * The following hooks will be run:
     * 1. `before-sanity-check`
     * 2. `before-highlight`
     * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
     * 4. `before-insert`
     * 5. `after-highlight`
     * 6. `complete`
     *
     * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
     * the element's language.
     *
     * @param {Element} element The element containing the code.
     * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
     * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
     * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
     * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
     *
     * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
     * asynchronous highlighting to work. You can build your own bundle on the
     * [Download page](https://prismjs.com/download.html).
     * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
     * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
     * @memberof Prism
     * @public
     */
    highlightElement: function (element, async, callback) {
      // Find language
      var language = _.util.getLanguage(element);
      var grammar = _.languages[language];

      // Set language on the element, if not present
      _.util.setLanguage(element, language);

      // Set language on the parent, for styling
      var parent = element.parentElement;
      if (parent && parent.nodeName.toLowerCase() === 'pre') {
        _.util.setLanguage(parent, language);
      }
      var code = element.textContent;
      var env = {
        element: element,
        language: language,
        grammar: grammar,
        code: code
      };
      function insertHighlightedCode(highlightedCode) {
        env.highlightedCode = highlightedCode;
        _.hooks.run('before-insert', env);
        env.element.innerHTML = env.highlightedCode;
        _.hooks.run('after-highlight', env);
        _.hooks.run('complete', env);
        callback && callback.call(env.element);
      }
      _.hooks.run('before-sanity-check', env);

      // plugins may change/add the parent/element
      parent = env.element.parentElement;
      if (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {
        parent.setAttribute('tabindex', '0');
      }
      if (!env.code) {
        _.hooks.run('complete', env);
        callback && callback.call(env.element);
        return;
      }
      _.hooks.run('before-highlight', env);
      if (!env.grammar) {
        insertHighlightedCode(_.util.encode(env.code));
        return;
      }
      if (async && _self.Worker) {
        var worker = new Worker(_.filename);
        worker.onmessage = function (evt) {
          insertHighlightedCode(evt.data);
        };
        worker.postMessage(JSON.stringify({
          language: env.language,
          code: env.code,
          immediateClose: true
        }));
      } else {
        insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
      }
    },
    /**
     * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
     * and the language definitions to use, and returns a string with the HTML produced.
     *
     * The following hooks will be run:
     * 1. `before-tokenize`
     * 2. `after-tokenize`
     * 3. `wrap`: On each {@link Token}.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @param {string} language The name of the language definition passed to `grammar`.
     * @returns {string} The highlighted HTML.
     * @memberof Prism
     * @public
     * @example
     * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
     */
    highlight: function (text, grammar, language) {
      var env = {
        code: text,
        grammar: grammar,
        language: language
      };
      _.hooks.run('before-tokenize', env);
      if (!env.grammar) {
        throw new Error('The language "' + env.language + '" has no grammar.');
      }
      env.tokens = _.tokenize(env.code, env.grammar);
      _.hooks.run('after-tokenize', env);
      return Token.stringify(_.util.encode(env.tokens), env.language);
    },
    /**
     * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
     * and the language definitions to use, and returns an array with the tokenized code.
     *
     * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
     *
     * This method could be useful in other contexts as well, as a very crude parser.
     *
     * @param {string} text A string with the code to be highlighted.
     * @param {Grammar} grammar An object containing the tokens to use.
     *
     * Usually a language definition like `Prism.languages.markup`.
     * @returns {TokenStream} An array of strings and tokens, a token stream.
     * @memberof Prism
     * @public
     * @example
     * let code = `var foo = 0;`;
     * let tokens = Prism.tokenize(code, Prism.languages.javascript);
     * tokens.forEach(token => {
     *     if (token instanceof Prism.Token && token.type === 'number') {
     *         console.log(`Found numeric literal: ${token.content}`);
     *     }
     * });
     */
    tokenize: function (text, grammar) {
      var rest = grammar.rest;
      if (rest) {
        for (var token in rest) {
          grammar[token] = rest[token];
        }
        delete grammar.rest;
      }
      var tokenList = new LinkedList();
      addAfter(tokenList, tokenList.head, text);
      matchGrammar(text, tokenList, grammar, tokenList.head, 0);
      return toArray(tokenList);
    },
    /**
     * @namespace
     * @memberof Prism
     * @public
     */
    hooks: {
      all: {},
      /**
       * Adds the given callback to the list of callbacks for the given hook.
       *
       * The callback will be invoked when the hook it is registered for is run.
       * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
       *
       * One callback function can be registered to multiple hooks and the same hook multiple times.
       *
       * @param {string} name The name of the hook.
       * @param {HookCallback} callback The callback function which is given environment variables.
       * @public
       */
      add: function (name, callback) {
        var hooks = _.hooks.all;
        hooks[name] = hooks[name] || [];
        hooks[name].push(callback);
      },
      /**
       * Runs a hook invoking all registered callbacks with the given environment variables.
       *
       * Callbacks will be invoked synchronously and in the order in which they were registered.
       *
       * @param {string} name The name of the hook.
       * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
       * @public
       */
      run: function (name, env) {
        var callbacks = _.hooks.all[name];
        if (!callbacks || !callbacks.length) {
          return;
        }
        for (var i = 0, callback; callback = callbacks[i++];) {
          callback(env);
        }
      }
    },
    Token: Token
  };
  _self.Prism = _;

  // Typescript note:
  // The following can be used to import the Token type in JSDoc:
  //
  //   @typedef {InstanceType<import("./prism-core")["Token"]>} Token

  /**
   * Creates a new token.
   *
   * @param {string} type See {@link Token#type type}
   * @param {string | TokenStream} content See {@link Token#content content}
   * @param {string|string[]} [alias] The alias(es) of the token.
   * @param {string} [matchedStr=""] A copy of the full string this token was created from.
   * @class
   * @global
   * @public
   */
  function Token(type, content, alias, matchedStr) {
    /**
     * The type of the token.
     *
     * This is usually the key of a pattern in a {@link Grammar}.
     *
     * @type {string}
     * @see GrammarToken
     * @public
     */
    this.type = type;
    /**
     * The strings or tokens contained by this token.
     *
     * This will be a token stream if the pattern matched also defined an `inside` grammar.
     *
     * @type {string | TokenStream}
     * @public
     */
    this.content = content;
    /**
     * The alias(es) of the token.
     *
     * @type {string|string[]}
     * @see GrammarToken
     * @public
     */
    this.alias = alias;
    // Copy of the full string this token was created from
    this.length = (matchedStr || '').length | 0;
  }

  /**
   * A token stream is an array of strings and {@link Token Token} objects.
   *
   * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process
   * them.
   *
   * 1. No adjacent strings.
   * 2. No empty strings.
   *
   *    The only exception here is the token stream that only contains the empty string and nothing else.
   *
   * @typedef {Array<string | Token>} TokenStream
   * @global
   * @public
   */

  /**
   * Converts the given token or token stream to an HTML representation.
   *
   * The following hooks will be run:
   * 1. `wrap`: On each {@link Token}.
   *
   * @param {string | Token | TokenStream} o The token or token stream to be converted.
   * @param {string} language The name of current language.
   * @returns {string} The HTML representation of the token or token stream.
   * @memberof Token
   * @static
   */
  Token.stringify = function stringify(o, language) {
    if (typeof o == 'string') {
      return o;
    }
    if (Array.isArray(o)) {
      var s = '';
      o.forEach(function (e) {
        s += stringify(e, language);
      });
      return s;
    }
    var env = {
      type: o.type,
      content: stringify(o.content, language),
      tag: 'span',
      classes: ['token', o.type],
      attributes: {},
      language: language
    };
    var aliases = o.alias;
    if (aliases) {
      if (Array.isArray(aliases)) {
        Array.prototype.push.apply(env.classes, aliases);
      } else {
        env.classes.push(aliases);
      }
    }
    _.hooks.run('wrap', env);
    var attributes = '';
    for (var name in env.attributes) {
      attributes += ' ' + name + '="' + (env.attributes[name] || '').replace(/"/g, '&quot;') + '"';
    }
    return '<' + env.tag + ' class="' + env.classes.join(' ') + '"' + attributes + '>' + env.content + '</' + env.tag + '>';
  };

  /**
   * @param {RegExp} pattern
   * @param {number} pos
   * @param {string} text
   * @param {boolean} lookbehind
   * @returns {RegExpExecArray | null}
   */
  function matchPattern(pattern, pos, text, lookbehind) {
    pattern.lastIndex = pos;
    var match = pattern.exec(text);
    if (match && lookbehind && match[1]) {
      // change the match to remove the text matched by the Prism lookbehind group
      var lookbehindLength = match[1].length;
      match.index += lookbehindLength;
      match[0] = match[0].slice(lookbehindLength);
    }
    return match;
  }

  /**
   * @param {string} text
   * @param {LinkedList<string | Token>} tokenList
   * @param {any} grammar
   * @param {LinkedListNode<string | Token>} startNode
   * @param {number} startPos
   * @param {RematchOptions} [rematch]
   * @returns {void}
   * @private
   *
   * @typedef RematchOptions
   * @property {string} cause
   * @property {number} reach
   */
  function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
    for (var token in grammar) {
      if (!grammar.hasOwnProperty(token) || !grammar[token]) {
        continue;
      }
      var patterns = grammar[token];
      patterns = Array.isArray(patterns) ? patterns : [patterns];
      for (var j = 0; j < patterns.length; ++j) {
        if (rematch && rematch.cause == token + ',' + j) {
          return;
        }
        var patternObj = patterns[j];
        var inside = patternObj.inside;
        var lookbehind = !!patternObj.lookbehind;
        var greedy = !!patternObj.greedy;
        var alias = patternObj.alias;
        if (greedy && !patternObj.pattern.global) {
          // Without the global flag, lastIndex won't work
          var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
          patternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');
        }

        /** @type {RegExp} */
        var pattern = patternObj.pattern || patternObj;
        for (
        // iterate the token list and keep track of the current token/string position
        var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
          if (rematch && pos >= rematch.reach) {
            break;
          }
          var str = currentNode.value;
          if (tokenList.length > text.length) {
            // Something went terribly wrong, ABORT, ABORT!
            return;
          }
          if (str instanceof Token) {
            continue;
          }
          var removeCount = 1; // this is the to parameter of removeBetween
          var match;
          if (greedy) {
            match = matchPattern(pattern, pos, text, lookbehind);
            if (!match || match.index >= text.length) {
              break;
            }
            var from = match.index;
            var to = match.index + match[0].length;
            var p = pos;

            // find the node that contains the match
            p += currentNode.value.length;
            while (from >= p) {
              currentNode = currentNode.next;
              p += currentNode.value.length;
            }
            // adjust pos (and p)
            p -= currentNode.value.length;
            pos = p;

            // the current node is a Token, then the match starts inside another Token, which is invalid
            if (currentNode.value instanceof Token) {
              continue;
            }

            // find the last node which is affected by this match
            for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === 'string'); k = k.next) {
              removeCount++;
              p += k.value.length;
            }
            removeCount--;

            // replace with the new match
            str = text.slice(pos, p);
            match.index -= pos;
          } else {
            match = matchPattern(pattern, 0, str, lookbehind);
            if (!match) {
              continue;
            }
          }

          // eslint-disable-next-line no-redeclare
          var from = match.index;
          var matchStr = match[0];
          var before = str.slice(0, from);
          var after = str.slice(from + matchStr.length);
          var reach = pos + str.length;
          if (rematch && reach > rematch.reach) {
            rematch.reach = reach;
          }
          var removeFrom = currentNode.prev;
          if (before) {
            removeFrom = addAfter(tokenList, removeFrom, before);
            pos += before.length;
          }
          removeRange(tokenList, removeFrom, removeCount);
          var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
          currentNode = addAfter(tokenList, removeFrom, wrapped);
          if (after) {
            addAfter(tokenList, currentNode, after);
          }
          if (removeCount > 1) {
            // at least one Token object was removed, so we have to do some rematching
            // this can only happen if the current pattern is greedy

            /** @type {RematchOptions} */
            var nestedRematch = {
              cause: token + ',' + j,
              reach: reach
            };
            matchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);

            // the reach might have been extended because of the rematching
            if (rematch && nestedRematch.reach > rematch.reach) {
              rematch.reach = nestedRematch.reach;
            }
          }
        }
      }
    }
  }

  /**
   * @typedef LinkedListNode
   * @property {T} value
   * @property {LinkedListNode<T> | null} prev The previous node.
   * @property {LinkedListNode<T> | null} next The next node.
   * @template T
   * @private
   */

  /**
   * @template T
   * @private
   */
  function LinkedList() {
    /** @type {LinkedListNode<T>} */
    var head = {
      value: null,
      prev: null,
      next: null
    };
    /** @type {LinkedListNode<T>} */
    var tail = {
      value: null,
      prev: head,
      next: null
    };
    head.next = tail;

    /** @type {LinkedListNode<T>} */
    this.head = head;
    /** @type {LinkedListNode<T>} */
    this.tail = tail;
    this.length = 0;
  }

  /**
   * Adds a new node with the given value to the list.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {T} value
   * @returns {LinkedListNode<T>} The added node.
   * @template T
   */
  function addAfter(list, node, value) {
    // assumes that node != list.tail && values.length >= 0
    var next = node.next;
    var newNode = {
      value: value,
      prev: node,
      next: next
    };
    node.next = newNode;
    next.prev = newNode;
    list.length++;
    return newNode;
  }
  /**
   * Removes `count` nodes after the given node. The given node will not be removed.
   *
   * @param {LinkedList<T>} list
   * @param {LinkedListNode<T>} node
   * @param {number} count
   * @template T
   */
  function removeRange(list, node, count) {
    var next = node.next;
    for (var i = 0; i < count && next !== list.tail; i++) {
      next = next.next;
    }
    node.next = next;
    next.prev = node;
    list.length -= i;
  }
  /**
   * @param {LinkedList<T>} list
   * @returns {T[]}
   * @template T
   */
  function toArray(list) {
    var array = [];
    var node = list.head.next;
    while (node !== list.tail) {
      array.push(node.value);
      node = node.next;
    }
    return array;
  }
  if (!_self.document) {
    if (!_self.addEventListener) {
      // in Node.js
      return _;
    }
    if (!_.disableWorkerMessageHandler) {
      // In worker
      _self.addEventListener('message', function (evt) {
        var message = JSON.parse(evt.data);
        var lang = message.language;
        var code = message.code;
        var immediateClose = message.immediateClose;
        _self.postMessage(_.highlight(code, _.languages[lang], lang));
        if (immediateClose) {
          _self.close();
        }
      }, false);
    }
    return _;
  }

  // Get current script and highlight
  var script = _.util.currentScript();
  if (script) {
    _.filename = script.src;
    if (script.hasAttribute('data-manual')) {
      _.manual = true;
    }
  }
  function highlightAutomaticallyCallback() {
    if (!_.manual) {
      _.highlightAll();
    }
  }
  if (!_.manual) {
    // If the document state is "loading", then we'll use DOMContentLoaded.
    // If the document state is "interactive" and the prism.js script is deferred, then we'll also use the
    // DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they
    // might take longer one animation frame to execute which can create a race condition where only some plugins have
    // been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.
    // See https://github.com/PrismJS/prism/issues/2102
    var readyState = document.readyState;
    if (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {
      document.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);
    } else {
      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(highlightAutomaticallyCallback);
      } else {
        window.setTimeout(highlightAutomaticallyCallback, 16);
      }
    }
  }
  return _;
}(_self);

// some additional documentation/types

/**
 * The expansion of a simple `RegExp` literal to support additional properties.
 *
 * @typedef GrammarToken
 * @property {RegExp} pattern The regular expression of the token.
 * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)
 * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.
 * @property {boolean} [greedy=false] Whether the token is greedy.
 * @property {string|string[]} [alias] An optional alias or list of aliases.
 * @property {Grammar} [inside] The nested grammar of this token.
 *
 * The `inside` grammar will be used to tokenize the text value of each token of this kind.
 *
 * This can be used to make nested and even recursive language definitions.
 *
 * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into
 * each another.
 * @global
 * @public
 */

/**
 * @typedef Grammar
 * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}
 * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.
 * @global
 * @public
 */

/**
 * A function which will invoked after an element was successfully highlighted.
 *
 * @callback HighlightCallback
 * @param {Element} element The element successfully highlighted.
 * @returns {void}
 * @global
 * @public
 */

/**
 * @callback HookCallback
 * @param {Object<string, any>} env The environment variables of the hook.
 * @returns {void}
 * @global
 * @public
 */

/* **********************************************
     Begin prism-markup.js
********************************************** */

Prism.languages.markup = {
  'comment': {
    pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
    greedy: true
  },
  'prolog': {
    pattern: /<\?[\s\S]+?\?>/,
    greedy: true
  },
  'doctype': {
    // https://www.w3.org/TR/xml/#NT-doctypedecl
    pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
    greedy: true,
    inside: {
      'internal-subset': {
        pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
        lookbehind: true,
        greedy: true,
        inside: null // see below
      },

      'string': {
        pattern: /"[^"]*"|'[^']*'/,
        greedy: true
      },
      'punctuation': /^<!|>$|[[\]]/,
      'doctype-tag': /^DOCTYPE/i,
      'name': /[^\s<>'"]+/
    }
  },
  'cdata': {
    pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    greedy: true
  },
  'tag': {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
    greedy: true,
    inside: {
      'tag': {
        pattern: /^<\/?[^\s>\/]+/,
        inside: {
          'punctuation': /^<\/?/,
          'namespace': /^[^\s>\/:]+:/
        }
      },
      'special-attr': [],
      'attr-value': {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
        inside: {
          'punctuation': [{
            pattern: /^=/,
            alias: 'attr-equals'
          }, {
            pattern: /^(\s*)["']|["']$/,
            lookbehind: true
          }]
        }
      },
      'punctuation': /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: {
          'namespace': /^[^\s>\/:]+:/
        }
      }
    }
  },
  'entity': [{
    pattern: /&[\da-z]{1,8};/i,
    alias: 'named-entity'
  }, /&#x?[\da-f]{1,8};/i]
};
Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {
  if (env.type === 'entity') {
    env.attributes['title'] = env.content.replace(/&amp;/, '&');
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  /**
   * Adds an inlined language to markup.
   *
   * An example of an inlined language is CSS with `<style>` tags.
   *
   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addInlined('style', 'css');
   */
  value: function addInlined(tagName, lang) {
    var includedCdataInside = {};
    includedCdataInside['language-' + lang] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: true,
      inside: Prism.languages[lang]
    };
    includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
    var inside = {
      'included-cdata': {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: includedCdataInside
      }
    };
    inside['language-' + lang] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[lang]
    };
    var def = {};
    def[tagName] = {
      pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
        return tagName;
      }), 'i'),
      lookbehind: true,
      greedy: true,
      inside: inside
    };
    Prism.languages.insertBefore('markup', 'cdata', def);
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  /**
   * Adds an pattern to highlight languages embedded in HTML attributes.
   *
   * An example of an inlined language is CSS with `style` attributes.
   *
   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addAttribute('style', 'css');
   */
  value: function (attrName, lang) {
    Prism.languages.markup.tag.inside['special-attr'].push({
      pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
      lookbehind: true,
      inside: {
        'attr-name': /^[^\s=]+/,
        'attr-value': {
          pattern: /=[\s\S]+/,
          inside: {
            'value': {
              pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
              lookbehind: true,
              alias: [lang, 'language-' + lang],
              inside: Prism.languages[lang]
            },
            'punctuation': [{
              pattern: /^=/,
              alias: 'attr-equals'
            }, /"|'/]
          }
        }
      }
    });
  }
});
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;

/* **********************************************
     Begin prism-css.js
********************************************** */

(function (Prism) {
  var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
  Prism.languages.css = {
    'comment': /\/\*[\s\S]*?\*\//,
    'atrule': {
      pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
      inside: {
        'rule': /^@[\w-]+/,
        'selector-function-argument': {
          pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
          lookbehind: true,
          alias: 'selector'
        },
        'keyword': {
          pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
          lookbehind: true
        }
        // See rest below
      }
    },

    'url': {
      // https://drafts.csswg.org/css-values-3/#urls
      pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
      greedy: true,
      inside: {
        'function': /^url/i,
        'punctuation': /^\(|\)$/,
        'string': {
          pattern: RegExp('^' + string.source + '$'),
          alias: 'url'
        }
      }
    },
    'selector': {
      pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
      lookbehind: true
    },
    'string': {
      pattern: string,
      greedy: true
    },
    'property': {
      pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
      lookbehind: true
    },
    'important': /!important\b/i,
    'function': {
      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
      lookbehind: true
    },
    'punctuation': /[(){};:,]/
  };
  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
  var markup = Prism.languages.markup;
  if (markup) {
    markup.tag.addInlined('style', 'css');
    markup.tag.addAttribute('style', 'css');
  }
})(Prism);

/* **********************************************
     Begin prism-clike.js
********************************************** */

Prism.languages.clike = {
  'comment': [{
    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    lookbehind: true,
    greedy: true
  }, {
    pattern: /(^|[^\\:])\/\/.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
    lookbehind: true,
    inside: {
      'punctuation': /[.\\]/
    }
  },
  'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
  'boolean': /\b(?:false|true)\b/,
  'function': /\b\w+(?=\()/,
  'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
  'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
  'punctuation': /[{}[\];(),.:]/
};

/* **********************************************
     Begin prism-javascript.js
********************************************** */

Prism.languages.javascript = Prism.languages.extend('clike', {
  'class-name': [Prism.languages.clike['class-name'], {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
    lookbehind: true
  }],
  'keyword': [{
    pattern: /((?:^|\})\s*)catch\b/,
    lookbehind: true
  }, {
    pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    lookbehind: true
  }],
  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
  'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  'number': {
    pattern: RegExp(/(^|[^\w$])/.source + '(?:' + (
    // constant
    /NaN|Infinity/.source + '|' +
    // binary integer
    /0[bB][01]+(?:_[01]+)*n?/.source + '|' +
    // octal integer
    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +
    // hexadecimal integer
    /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + '|' +
    // decimal bigint
    /\d+(?:_\d+)*n/.source + '|' +
    // decimal number (integer or float) but no bigint
    /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ')' + /(?![\w$])/.source),
    lookbehind: true
  },
  'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
Prism.languages.insertBefore('javascript', 'keyword', {
  'regex': {
    pattern: RegExp(
    // lookbehind
    // eslint-disable-next-line regexp/no-dupe-characters-character-class
    /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
    // Regex pattern:
    // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
    // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
    // with the only syntax, so we have to define 2 different regex patterns.
    /\//.source + '(?:' + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + '|' +
    // `v` flag syntax. This supports 3 levels of nested character classes.
    /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ')' +
    // lookahead
    /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'regex-source': {
        pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
        lookbehind: true,
        alias: 'language-regex',
        inside: Prism.languages.regex
      },
      'regex-delimiter': /^\/|\/$/,
      'regex-flags': /^[a-z]+$/
    }
  },
  // This must be declared before keyword because we use "function" inside the look-forward
  'function-variable': {
    pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
    alias: 'function'
  },
  'parameter': [{
    pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }],
  'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
Prism.languages.insertBefore('javascript', 'string', {
  'hashbang': {
    pattern: /^#!.*/,
    greedy: true,
    alias: 'comment'
  },
  'template-string': {
    pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
    greedy: true,
    inside: {
      'template-punctuation': {
        pattern: /^`|`$/,
        alias: 'string'
      },
      'interpolation': {
        pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
        lookbehind: true,
        inside: {
          'interpolation-punctuation': {
            pattern: /^\$\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.javascript
        }
      },
      'string': /[\s\S]+/
    }
  },
  'string-property': {
    pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
    lookbehind: true,
    greedy: true,
    alias: 'property'
  }
});
Prism.languages.insertBefore('javascript', 'operator', {
  'literal-property': {
    pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
    lookbehind: true,
    alias: 'property'
  }
});
if (Prism.languages.markup) {
  Prism.languages.markup.tag.addInlined('script', 'javascript');

  // add attribute support for all DOM events.
  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
}
Prism.languages.js = Prism.languages.javascript;

/* **********************************************
     Begin prism-file-highlight.js
********************************************** */

(function () {
  if (typeof Prism === 'undefined' || typeof document === 'undefined') {
    return;
  }

  // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }
  var LOADING_MESSAGE = 'Loading…';
  var FAILURE_MESSAGE = function (status, message) {
    return '✖ Error ' + status + ' while fetching file: ' + message;
  };
  var FAILURE_EMPTY_MESSAGE = '✖ Error: File does not exist or is empty';
  var EXTENSIONS = {
    'js': 'javascript',
    'py': 'python',
    'rb': 'ruby',
    'ps1': 'powershell',
    'psm1': 'powershell',
    'sh': 'bash',
    'bat': 'batch',
    'h': 'c',
    'tex': 'latex'
  };
  var STATUS_ATTR = 'data-src-status';
  var STATUS_LOADING = 'loading';
  var STATUS_LOADED = 'loaded';
  var STATUS_FAILED = 'failed';
  var SELECTOR = 'pre[data-src]:not([' + STATUS_ATTR + '="' + STATUS_LOADED + '"])' + ':not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';

  /**
   * Loads the given file.
   *
   * @param {string} src The URL or path of the source file to load.
   * @param {(result: string) => void} success
   * @param {(reason: string) => void} error
   */
  function loadFile(src, success, error) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', src, true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4) {
        if (xhr.status < 400 && xhr.responseText) {
          success(xhr.responseText);
        } else {
          if (xhr.status >= 400) {
            error(FAILURE_MESSAGE(xhr.status, xhr.statusText));
          } else {
            error(FAILURE_EMPTY_MESSAGE);
          }
        }
      }
    };
    xhr.send(null);
  }

  /**
   * Parses the given range.
   *
   * This returns a range with inclusive ends.
   *
   * @param {string | null | undefined} range
   * @returns {[number, number | undefined] | undefined}
   */
  function parseRange(range) {
    var m = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || '');
    if (m) {
      var start = Number(m[1]);
      var comma = m[2];
      var end = m[3];
      if (!comma) {
        return [start, start];
      }
      if (!end) {
        return [start, undefined];
      }
      return [start, Number(end)];
    }
    return undefined;
  }
  Prism.hooks.add('before-highlightall', function (env) {
    env.selector += ', ' + SELECTOR;
  });
  Prism.hooks.add('before-sanity-check', function (env) {
    var pre = /** @type {HTMLPreElement} */env.element;
    if (pre.matches(SELECTOR)) {
      env.code = ''; // fast-path the whole thing and go to complete

      pre.setAttribute(STATUS_ATTR, STATUS_LOADING); // mark as loading

      // add code element with loading message
      var code = pre.appendChild(document.createElement('CODE'));
      code.textContent = LOADING_MESSAGE;
      var src = pre.getAttribute('data-src');
      var language = env.language;
      if (language === 'none') {
        // the language might be 'none' because there is no language set;
        // in this case, we want to use the extension as the language
        var extension = (/\.(\w+)$/.exec(src) || [, 'none'])[1];
        language = EXTENSIONS[extension] || extension;
      }

      // set language classes
      Prism.util.setLanguage(code, language);
      Prism.util.setLanguage(pre, language);

      // preload the language
      var autoloader = Prism.plugins.autoloader;
      if (autoloader) {
        autoloader.loadLanguages(language);
      }

      // load file
      loadFile(src, function (text) {
        // mark as loaded
        pre.setAttribute(STATUS_ATTR, STATUS_LOADED);

        // handle data-range
        var range = parseRange(pre.getAttribute('data-range'));
        if (range) {
          var lines = text.split(/\r\n?|\n/g);

          // the range is one-based and inclusive on both ends
          var start = range[0];
          var end = range[1] == null ? lines.length : range[1];
          if (start < 0) {
            start += lines.length;
          }
          start = Math.max(0, Math.min(start - 1, lines.length));
          if (end < 0) {
            end += lines.length;
          }
          end = Math.max(0, Math.min(end, lines.length));
          text = lines.slice(start, end).join('\n');

          // add data-start for line numbers
          if (!pre.hasAttribute('data-start')) {
            pre.setAttribute('data-start', String(start + 1));
          }
        }

        // highlight code
        code.textContent = text;
        Prism.highlightElement(code);
      }, function (error) {
        // mark as failed
        pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
        code.textContent = error;
      });
    }
  });
  Prism.plugins.fileHighlight = {
    /**
     * Executes the File Highlight plugin for all matching `pre` elements under the given container.
     *
     * Note: Elements which are already loaded or currently loading will not be touched by this method.
     *
     * @param {ParentNode} [container=document]
     */
    highlight: function highlight(container) {
      var elements = (container || document).querySelectorAll(SELECTOR);
      for (var i = 0, element; element = elements[i++];) {
        Prism.highlightElement(element);
      }
    }
  };
  var logged = false;
  /** @deprecated Use `Prism.plugins.fileHighlight.highlight` instead. */
  Prism.fileHighlight = function () {
    if (!logged) {
      console.warn('Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.');
      logged = true;
    }
    Prism.plugins.fileHighlight.highlight.apply(this, arguments);
  };
})();
Prism.languages.clike = {
  'comment': [{
    pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
    lookbehind: true,
    greedy: true
  }, {
    pattern: /(^|[^\\:])\/\/.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
    lookbehind: true,
    inside: {
      'punctuation': /[.\\]/
    }
  },
  'keyword': /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
  'boolean': /\b(?:false|true)\b/,
  'function': /\b\w+(?=\()/,
  'number': /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
  'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
  'punctuation': /[{}[\];(),.:]/
};
Prism.languages.c = Prism.languages.extend('clike', {
  'comment': {
    pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
    greedy: true
  },
  'string': {
    // https://en.cppreference.com/w/c/language/string_literal
    pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
    greedy: true
  },
  'class-name': {
    pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
    lookbehind: true
  },
  'keyword': /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
  'function': /\b[a-z_]\w*(?=\s*\()/i,
  'number': /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
  'operator': />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
});
Prism.languages.insertBefore('c', 'string', {
  'char': {
    // https://en.cppreference.com/w/c/language/character_constant
    pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
    greedy: true
  }
});
Prism.languages.insertBefore('c', 'string', {
  'macro': {
    // allow for multiline macro definitions
    // spaces after the # character compile fine with gcc
    pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
    lookbehind: true,
    greedy: true,
    alias: 'property',
    inside: {
      'string': [{
        // highlight the path of the include statement as a string
        pattern: /^(#\s*include\s*)<[^>]+>/,
        lookbehind: true
      }, Prism.languages.c['string']],
      'char': Prism.languages.c['char'],
      'comment': Prism.languages.c['comment'],
      'macro-name': [{
        pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
        lookbehind: true
      }, {
        pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
        lookbehind: true,
        alias: 'function'
      }],
      // highlight macro directives as keywords
      'directive': {
        pattern: /^(#\s*)[a-z]+/,
        lookbehind: true,
        alias: 'keyword'
      },
      'directive-hash': /^#/,
      'punctuation': /##|\\(?=[\r\n])/,
      'expression': {
        pattern: /\S[\s\S]*/,
        inside: Prism.languages.c
      }
    }
  }
});
Prism.languages.insertBefore('c', 'function', {
  // highlight predefined macros as constants
  'constant': /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
});
delete Prism.languages.c['boolean'];
(function (Prism) {
  var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
  var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g, function () {
    return keyword.source;
  });
  Prism.languages.cpp = Prism.languages.extend('c', {
    'class-name': [{
      pattern: RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g, function () {
        return keyword.source;
      })),
      lookbehind: true
    },
    // This is intended to capture the class name of method implementations like:
    //   void foo::bar() const {}
    // However! The `foo` in the above example could also be a namespace, so we only capture the class name if
    // it starts with an uppercase letter. This approximation should give decent results.
    /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
    // This will capture the class name before destructors like:
    //   Foo::~Foo() {}
    /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
    // This also intends to capture the class name of method implementations but here the class has template
    // parameters, so it can't be a namespace (until C++ adds generic namespaces).
    /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],
    'keyword': keyword,
    'number': {
      pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
      greedy: true
    },
    'operator': />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
    'boolean': /\b(?:false|true)\b/
  });
  Prism.languages.insertBefore('cpp', 'string', {
    'module': {
      // https://en.cppreference.com/w/cpp/language/modules
      pattern: RegExp(/(\b(?:import|module)\s+)/.source + '(?:' +
      // header-name
      /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + '|' +
      // module name or partition or both
      /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g, function () {
        return modName;
      }) + ')'),
      lookbehind: true,
      greedy: true,
      inside: {
        'string': /^[<"][\s\S]+/,
        'operator': /:/,
        'punctuation': /\./
      }
    },
    'raw-string': {
      pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
      alias: 'string',
      greedy: true
    }
  });
  Prism.languages.insertBefore('cpp', 'keyword', {
    'generic-function': {
      pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
      inside: {
        'function': /^\w+/,
        'generic': {
          pattern: /<[\s\S]+/,
          alias: 'class-name',
          inside: Prism.languages.cpp
        }
      }
    }
  });
  Prism.languages.insertBefore('cpp', 'operator', {
    'double-colon': {
      pattern: /::/,
      alias: 'punctuation'
    }
  });
  Prism.languages.insertBefore('cpp', 'class-name', {
    // the base clause is an optional list of parent classes
    // https://en.cppreference.com/w/cpp/language/class
    'base-clause': {
      pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
      lookbehind: true,
      greedy: true,
      inside: Prism.languages.extend('cpp', {})
    }
  });
  Prism.languages.insertBefore('inside', 'double-colon', {
    // All untokenized words that are not namespaces should be class names
    'class-name': /\b[a-z_]\w*\b(?!\s*::)/i
  }, Prism.languages.cpp['base-clause']);
})(Prism);
Prism.languages.arduino = Prism.languages.extend('cpp', {
  'keyword': /\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\b/,
  'constant': /\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\b/,
  'builtin': /\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\b/
});
Prism.languages.ino = Prism.languages.arduino;
(function (Prism) {
  // $ set | grep '^[A-Z][^[:space:]]*=' | cut -d= -f1 | tr '\n' '|'
  // + LC_ALL, RANDOM, REPLY, SECONDS.
  // + make sure PS1..4 are here as they are not always set,
  // - some useless things.
  var envVars = '\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b';
  var commandAfterHeredoc = {
    pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
    lookbehind: true,
    alias: 'punctuation',
    // this looks reasonably well in all themes
    inside: null // see below
  };

  var insideString = {
    'bash': commandAfterHeredoc,
    'environment': {
      pattern: RegExp('\\$' + envVars),
      alias: 'constant'
    },
    'variable': [
    // [0]: Arithmetic Environment
    {
      pattern: /\$?\(\([\s\S]+?\)\)/,
      greedy: true,
      inside: {
        // If there is a $ sign at the beginning highlight $(( and )) as variable
        'variable': [{
          pattern: /(^\$\(\([\s\S]+)\)\)/,
          lookbehind: true
        }, /^\$\(\(/],
        'number': /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
        // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
        'operator': /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
        // If there is no $ sign at the beginning highlight (( and )) as punctuation
        'punctuation': /\(\(?|\)\)?|,|;/
      }
    },
    // [1]: Command Substitution
    {
      pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
      greedy: true,
      inside: {
        'variable': /^\$\(|^`|\)$|`$/
      }
    },
    // [2]: Brace expansion
    {
      pattern: /\$\{[^}]+\}/,
      greedy: true,
      inside: {
        'operator': /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
        'punctuation': /[\[\]]/,
        'environment': {
          pattern: RegExp('(\\{)' + envVars),
          lookbehind: true,
          alias: 'constant'
        }
      }
    }, /\$(?:\w+|[#?*!@$])/],
    // Escape sequences from echo and printf's manuals, and escaped quotes.
    'entity': /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
  };
  Prism.languages.bash = {
    'shebang': {
      pattern: /^#!\s*\/.*/,
      alias: 'important'
    },
    'comment': {
      pattern: /(^|[^"{\\$])#.*/,
      lookbehind: true
    },
    'function-name': [
    // a) function foo {
    // b) foo() {
    // c) function foo() {
    // but not “foo {”
    {
      // a) and c)
      pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
      lookbehind: true,
      alias: 'function'
    }, {
      // b)
      pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
      alias: 'function'
    }],
    // Highlight variable names as variables in for and select beginnings.
    'for-or-select': {
      pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
      alias: 'variable',
      lookbehind: true
    },
    // Highlight variable names as variables in the left-hand part
    // of assignments (“=” and “+=”).
    'assign-left': {
      pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
      inside: {
        'environment': {
          pattern: RegExp('(^|[\\s;|&]|[<>]\\()' + envVars),
          lookbehind: true,
          alias: 'constant'
        }
      },
      alias: 'variable',
      lookbehind: true
    },
    // Highlight parameter names as variables
    'parameter': {
      pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
      alias: 'variable',
      lookbehind: true
    },
    'string': [
    // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
    {
      pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
      lookbehind: true,
      greedy: true,
      inside: insideString
    },
    // Here-document with quotes around the tag
    // → No expansion (so no “inside”).
    {
      pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
      lookbehind: true,
      greedy: true,
      inside: {
        'bash': commandAfterHeredoc
      }
    },
    // “Normal” string
    {
      // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
      pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
      lookbehind: true,
      greedy: true,
      inside: insideString
    }, {
      // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
      pattern: /(^|[^$\\])'[^']*'/,
      lookbehind: true,
      greedy: true
    }, {
      // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
      pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
      greedy: true,
      inside: {
        'entity': insideString.entity
      }
    }],
    'environment': {
      pattern: RegExp('\\$?' + envVars),
      alias: 'constant'
    },
    'variable': insideString.variable,
    'function': {
      pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    'keyword': {
      pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
    'builtin': {
      pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
      lookbehind: true,
      // Alias added to make those easier to distinguish from strings.
      alias: 'class-name'
    },
    'boolean': {
      pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
      lookbehind: true
    },
    'file-descriptor': {
      pattern: /\B&\d\b/,
      alias: 'important'
    },
    'operator': {
      // Lots of redirections here, but not just that.
      pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
      inside: {
        'file-descriptor': {
          pattern: /^\d/,
          alias: 'important'
        }
      }
    },
    'punctuation': /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
    'number': {
      pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
      lookbehind: true
    }
  };
  commandAfterHeredoc.inside = Prism.languages.bash;

  /* Patterns in command substitution. */
  var toBeCopied = ['comment', 'function-name', 'for-or-select', 'assign-left', 'parameter', 'string', 'environment', 'function', 'keyword', 'builtin', 'boolean', 'file-descriptor', 'operator', 'punctuation', 'number'];
  var inside = insideString.variable[1].inside;
  for (var i = 0; i < toBeCopied.length; i++) {
    inside[toBeCopied[i]] = Prism.languages.bash[toBeCopied[i]];
  }
  Prism.languages.sh = Prism.languages.bash;
  Prism.languages.shell = Prism.languages.bash;
})(Prism);
(function (Prism) {
  /**
   * Replaces all placeholders "<<n>>" of given pattern with the n-th replacement (zero based).
   *
   * Note: This is a simple text based replacement. Be careful when using backreferences!
   *
   * @param {string} pattern the given pattern.
   * @param {string[]} replacements a list of replacement which can be inserted into the given pattern.
   * @returns {string} the pattern with all placeholders replaced with their corresponding replacements.
   * @example replace(/a<<0>>a/.source, [/b+/.source]) === /a(?:b+)a/.source
   */
  function replace(pattern, replacements) {
    return pattern.replace(/<<(\d+)>>/g, function (m, index) {
      return '(?:' + replacements[+index] + ')';
    });
  }
  /**
   * @param {string} pattern
   * @param {string[]} replacements
   * @param {string} [flags]
   * @returns {RegExp}
   */
  function re(pattern, replacements, flags) {
    return RegExp(replace(pattern, replacements), flags || '');
  }

  /**
   * Creates a nested pattern where all occurrences of the string `<<self>>` are replaced with the pattern itself.
   *
   * @param {string} pattern
   * @param {number} depthLog2
   * @returns {string}
   */
  function nested(pattern, depthLog2) {
    for (var i = 0; i < depthLog2; i++) {
      pattern = pattern.replace(/<<self>>/g, function () {
        return '(?:' + pattern + ')';
      });
    }
    return pattern.replace(/<<self>>/g, '[^\\s\\S]');
  }

  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
  var keywordKinds = {
    // keywords which represent a return or variable type
    type: 'bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void',
    // keywords which are used to declare a type
    typeDeclaration: 'class enum interface record struct',
    // contextual keywords
    // ("var" and "dynamic" are missing because they are used like types)
    contextual: 'add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)',
    // all other keywords
    other: 'abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield'
  };

  // keywords
  function keywordsToPattern(words) {
    return '\\b(?:' + words.trim().replace(/ /g, '|') + ')\\b';
  }
  var typeDeclarationKeywords = keywordsToPattern(keywordKinds.typeDeclaration);
  var keywords = RegExp(keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other));
  var nonTypeKeywords = keywordsToPattern(keywordKinds.typeDeclaration + ' ' + keywordKinds.contextual + ' ' + keywordKinds.other);
  var nonContextualKeywords = keywordsToPattern(keywordKinds.type + ' ' + keywordKinds.typeDeclaration + ' ' + keywordKinds.other);

  // types
  var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2); // the idea behind the other forbidden characters is to prevent false positives. Same for tupleElement.
  var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
  var name = /@?\b[A-Za-z_]\w*\b/.source;
  var genericName = replace(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
  var identifier = replace(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [nonTypeKeywords, genericName]);
  var array = /\[\s*(?:,\s*)*\]/.source;
  var typeExpressionWithoutTuple = replace(/<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source, [identifier, array]);
  var tupleElement = replace(/[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source, [generic, nestedRound, array]);
  var tuple = replace(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
  var typeExpression = replace(/(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source, [tuple, identifier, array]);
  var typeInside = {
    'keyword': keywords,
    'punctuation': /[<>()?,.:[\]]/
  };

  // strings & characters
  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#character-literals
  // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#string-literals
  var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source; // simplified pattern
  var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
  var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
  Prism.languages.csharp = Prism.languages.extend('clike', {
    'string': [{
      pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
      lookbehind: true,
      greedy: true
    }, {
      pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
      lookbehind: true,
      greedy: true
    }],
    'class-name': [{
      // Using static
      // using static System.Math;
      pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [identifier]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Using alias (type)
      // using Project = PC.MyCompany.Project;
      pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [name, typeExpression]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Using alias (alias)
      // using Project = PC.MyCompany.Project;
      pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
      lookbehind: true
    }, {
      // Type declarations
      // class Foo<A, B>
      // interface Foo<out A, B>
      pattern: re(/(\b<<0>>\s+)<<1>>/.source, [typeDeclarationKeywords, genericName]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Single catch exception declaration
      // catch(Foo)
      // (things like catch(Foo e) is covered by variable declaration)
      pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Name of the type parameter of generic constraints
      // where Foo : class
      pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
      lookbehind: true
    }, {
      // Casts and checks via as and is.
      // as Foo<A>, is Bar<B>
      // (things like if(a is Foo b) is covered by variable declaration)
      pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [typeExpressionWithoutTuple]),
      lookbehind: true,
      inside: typeInside
    }, {
      // Variable, field and parameter declaration
      // (Foo bar, Bar baz, Foo[,,] bay, Foo<Bar, FooBar<Bar>> bax)
      pattern: re(/\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source, [typeExpression, nonContextualKeywords, name]),
      inside: typeInside
    }],
    'keyword': keywords,
    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/lexical-structure#literals
    'number': /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
    'operator': />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
    'punctuation': /\?\.?|::|[{}[\];(),.:]/
  });
  Prism.languages.insertBefore('csharp', 'number', {
    'range': {
      pattern: /\.\./,
      alias: 'operator'
    }
  });
  Prism.languages.insertBefore('csharp', 'punctuation', {
    'named-parameter': {
      pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
      lookbehind: true,
      alias: 'punctuation'
    }
  });
  Prism.languages.insertBefore('csharp', 'class-name', {
    'namespace': {
      // namespace Foo.Bar {}
      // using Foo.Bar;
      pattern: re(/(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source, [name]),
      lookbehind: true,
      inside: {
        'punctuation': /\./
      }
    },
    'type-expression': {
      // default(Foo), typeof(Foo<Bar>), sizeof(int)
      pattern: re(/(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source, [nestedRound]),
      lookbehind: true,
      alias: 'class-name',
      inside: typeInside
    },
    'return-type': {
      // Foo<Bar> ForBar(); Foo IFoo.Bar() => 0
      // int this[int index] => 0; T IReadOnlyList<T>.this[int index] => this[index];
      // int Foo => 0; int Foo { get; set } = 0;
      pattern: re(/<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source, [typeExpression, identifier]),
      inside: typeInside,
      alias: 'class-name'
    },
    'constructor-invocation': {
      // new List<Foo<Bar[]>> { }
      pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
      lookbehind: true,
      inside: typeInside,
      alias: 'class-name'
    },
    /*'explicit-implementation': {
    	// int IFoo<Foo>.Bar => 0; void IFoo<Foo<Foo>>.Foo<T>();
    	pattern: replace(/\b<<0>>(?=\.<<1>>)/, className, methodOrPropertyDeclaration),
    	inside: classNameInside,
    	alias: 'class-name'
    },*/
    'generic-method': {
      // foo<Bar>()
      pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
      inside: {
        'function': re(/^<<0>>/.source, [name]),
        'generic': {
          pattern: RegExp(generic),
          alias: 'class-name',
          inside: typeInside
        }
      }
    },
    'type-list': {
      // The list of types inherited or of generic constraints
      // class Foo<F> : Bar, IList<FooBar>
      // where F : Bar, IList<int>
      pattern: re(/\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source, [typeDeclarationKeywords, genericName, name, typeExpression, keywords.source, nestedRound, /\bnew\s*\(\s*\)/.source]),
      lookbehind: true,
      inside: {
        'record-arguments': {
          pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [genericName, nestedRound]),
          lookbehind: true,
          greedy: true,
          inside: Prism.languages.csharp
        },
        'keyword': keywords,
        'class-name': {
          pattern: RegExp(typeExpression),
          greedy: true,
          inside: typeInside
        },
        'punctuation': /[,()]/
      }
    },
    'preprocessor': {
      pattern: /(^[\t ]*)#.*/m,
      lookbehind: true,
      alias: 'property',
      inside: {
        // highlight preprocessor directives as keywords
        'directive': {
          pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
          lookbehind: true,
          alias: 'keyword'
        }
      }
    }
  });

  // attributes
  var regularStringOrCharacter = regularString + '|' + character;
  var regularStringCharacterOrComment = replace(/\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source, [regularStringOrCharacter]);
  var roundExpression = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);

  // https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/#attribute-targets
  var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
  var attr = replace(/<<0>>(?:\s*\(<<1>>*\))?/.source, [identifier, roundExpression]);
  Prism.languages.insertBefore('csharp', 'class-name', {
    'attribute': {
      // Attributes
      // [Foo], [Foo(1), Bar(2, Prop = "foo")], [return: Foo(1), Bar(2)], [assembly: Foo(Bar)]
      pattern: re(/((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source, [attrTarget, attr]),
      lookbehind: true,
      greedy: true,
      inside: {
        'target': {
          pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
          alias: 'keyword'
        },
        'attribute-arguments': {
          pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
          inside: Prism.languages.csharp
        },
        'class-name': {
          pattern: RegExp(identifier),
          inside: {
            'punctuation': /\./
          }
        },
        'punctuation': /[:,]/
      }
    }
  });

  // string interpolation
  var formatString = /:[^}\r\n]+/.source;
  // multi line
  var mInterpolationRound = nested(replace(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [regularStringCharacterOrComment]), 2);
  var mInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [mInterpolationRound, formatString]);
  // single line
  var sInterpolationRound = nested(replace(/[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source, [regularStringOrCharacter]), 2);
  var sInterpolation = replace(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [sInterpolationRound, formatString]);
  function createInterpolationInside(interpolation, interpolationRound) {
    return {
      'interpolation': {
        pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
        lookbehind: true,
        inside: {
          'format-string': {
            pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [interpolationRound, formatString]),
            lookbehind: true,
            inside: {
              'punctuation': /^:/
            }
          },
          'punctuation': /^\{|\}$/,
          'expression': {
            pattern: /[\s\S]+/,
            alias: 'language-csharp',
            inside: Prism.languages.csharp
          }
        }
      },
      'string': /[\s\S]+/
    };
  }
  Prism.languages.insertBefore('csharp', 'string', {
    'interpolation-string': [{
      pattern: re(/(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source, [mInterpolation]),
      lookbehind: true,
      greedy: true,
      inside: createInterpolationInside(mInterpolation, mInterpolationRound)
    }, {
      pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [sInterpolation]),
      lookbehind: true,
      greedy: true,
      inside: createInterpolationInside(sInterpolation, sInterpolationRound)
    }],
    'char': {
      pattern: RegExp(character),
      greedy: true
    }
  });
  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;
})(Prism);
Prism.languages.markup = {
  'comment': {
    pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
    greedy: true
  },
  'prolog': {
    pattern: /<\?[\s\S]+?\?>/,
    greedy: true
  },
  'doctype': {
    // https://www.w3.org/TR/xml/#NT-doctypedecl
    pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
    greedy: true,
    inside: {
      'internal-subset': {
        pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
        lookbehind: true,
        greedy: true,
        inside: null // see below
      },

      'string': {
        pattern: /"[^"]*"|'[^']*'/,
        greedy: true
      },
      'punctuation': /^<!|>$|[[\]]/,
      'doctype-tag': /^DOCTYPE/i,
      'name': /[^\s<>'"]+/
    }
  },
  'cdata': {
    pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
    greedy: true
  },
  'tag': {
    pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
    greedy: true,
    inside: {
      'tag': {
        pattern: /^<\/?[^\s>\/]+/,
        inside: {
          'punctuation': /^<\/?/,
          'namespace': /^[^\s>\/:]+:/
        }
      },
      'special-attr': [],
      'attr-value': {
        pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
        inside: {
          'punctuation': [{
            pattern: /^=/,
            alias: 'attr-equals'
          }, {
            pattern: /^(\s*)["']|["']$/,
            lookbehind: true
          }]
        }
      },
      'punctuation': /\/?>/,
      'attr-name': {
        pattern: /[^\s>\/]+/,
        inside: {
          'namespace': /^[^\s>\/:]+:/
        }
      }
    }
  },
  'entity': [{
    pattern: /&[\da-z]{1,8};/i,
    alias: 'named-entity'
  }, /&#x?[\da-f]{1,8};/i]
};
Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity'];
Prism.languages.markup['doctype'].inside['internal-subset'].inside = Prism.languages.markup;

// Plugin to make entity title show the real entity, idea by Roman Komarov
Prism.hooks.add('wrap', function (env) {
  if (env.type === 'entity') {
    env.attributes['title'] = env.content.replace(/&amp;/, '&');
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {
  /**
   * Adds an inlined language to markup.
   *
   * An example of an inlined language is CSS with `<style>` tags.
   *
   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addInlined('style', 'css');
   */
  value: function addInlined(tagName, lang) {
    var includedCdataInside = {};
    includedCdataInside['language-' + lang] = {
      pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
      lookbehind: true,
      inside: Prism.languages[lang]
    };
    includedCdataInside['cdata'] = /^<!\[CDATA\[|\]\]>$/i;
    var inside = {
      'included-cdata': {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        inside: includedCdataInside
      }
    };
    inside['language-' + lang] = {
      pattern: /[\s\S]+/,
      inside: Prism.languages[lang]
    };
    var def = {};
    def[tagName] = {
      pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function () {
        return tagName;
      }), 'i'),
      lookbehind: true,
      greedy: true,
      inside: inside
    };
    Prism.languages.insertBefore('markup', 'cdata', def);
  }
});
Object.defineProperty(Prism.languages.markup.tag, 'addAttribute', {
  /**
   * Adds an pattern to highlight languages embedded in HTML attributes.
   *
   * An example of an inlined language is CSS with `style` attributes.
   *
   * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
   * case insensitive.
   * @param {string} lang The language key.
   * @example
   * addAttribute('style', 'css');
   */
  value: function (attrName, lang) {
    Prism.languages.markup.tag.inside['special-attr'].push({
      pattern: RegExp(/(^|["'\s])/.source + '(?:' + attrName + ')' + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source, 'i'),
      lookbehind: true,
      inside: {
        'attr-name': /^[^\s=]+/,
        'attr-value': {
          pattern: /=[\s\S]+/,
          inside: {
            'value': {
              pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
              lookbehind: true,
              alias: [lang, 'language-' + lang],
              inside: Prism.languages[lang]
            },
            'punctuation': [{
              pattern: /^=/,
              alias: 'attr-equals'
            }, /"|'/]
          }
        }
      }
    });
  }
});
Prism.languages.html = Prism.languages.markup;
Prism.languages.mathml = Prism.languages.markup;
Prism.languages.svg = Prism.languages.markup;
Prism.languages.xml = Prism.languages.extend('markup', {});
Prism.languages.ssml = Prism.languages.xml;
Prism.languages.atom = Prism.languages.xml;
Prism.languages.rss = Prism.languages.xml;
(function (Prism) {
  var string = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
  Prism.languages.css = {
    'comment': /\/\*[\s\S]*?\*\//,
    'atrule': {
      pattern: RegExp('@[\\w-](?:' + /[^;{\s"']|\s+(?!\s)/.source + '|' + string.source + ')*?' + /(?:;|(?=\s*\{))/.source),
      inside: {
        'rule': /^@[\w-]+/,
        'selector-function-argument': {
          pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
          lookbehind: true,
          alias: 'selector'
        },
        'keyword': {
          pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
          lookbehind: true
        }
        // See rest below
      }
    },

    'url': {
      // https://drafts.csswg.org/css-values-3/#urls
      pattern: RegExp('\\burl\\((?:' + string.source + '|' + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ')\\)', 'i'),
      greedy: true,
      inside: {
        'function': /^url/i,
        'punctuation': /^\(|\)$/,
        'string': {
          pattern: RegExp('^' + string.source + '$'),
          alias: 'url'
        }
      }
    },
    'selector': {
      pattern: RegExp('(^|[{}\\s])[^{}\\s](?:[^{};"\'\\s]|\\s+(?![\\s{])|' + string.source + ')*(?=\\s*\\{)'),
      lookbehind: true
    },
    'string': {
      pattern: string,
      greedy: true
    },
    'property': {
      pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
      lookbehind: true
    },
    'important': /!important\b/i,
    'function': {
      pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
      lookbehind: true
    },
    'punctuation': /[(){};:,]/
  };
  Prism.languages.css['atrule'].inside.rest = Prism.languages.css;
  var markup = Prism.languages.markup;
  if (markup) {
    markup.tag.addInlined('style', 'css');
    markup.tag.addAttribute('style', 'css');
  }
})(Prism);
(function (Prism) {
  Prism.languages.diff = {
    'coord': [
    // Match all kinds of coord lines (prefixed by "+++", "---" or "***").
    /^(?:\*{3}|-{3}|\+{3}).*$/m,
    // Match "@@ ... @@" coord lines in unified diff.
    /^@@.*@@$/m,
    // Match coord lines in normal diff (starts with a number).
    /^\d.*$/m]

    // deleted, inserted, unchanged, diff
  };

  /**
   * A map from the name of a block to its line prefix.
   *
   * @type {Object<string, string>}
   */
  var PREFIXES = {
    'deleted-sign': '-',
    'deleted-arrow': '<',
    'inserted-sign': '+',
    'inserted-arrow': '>',
    'unchanged': ' ',
    'diff': '!'
  };

  // add a token for each prefix
  Object.keys(PREFIXES).forEach(function (name) {
    var prefix = PREFIXES[name];
    var alias = [];
    if (!/^\w+$/.test(name)) {
      // "deleted-sign" -> "deleted"
      alias.push(/\w+/.exec(name)[0]);
    }
    if (name === 'diff') {
      alias.push('bold');
    }
    Prism.languages.diff[name] = {
      pattern: RegExp('^(?:[' + prefix + '].*(?:\r\n?|\n|(?![\\s\\S])))+', 'm'),
      alias: alias,
      inside: {
        'line': {
          pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
          lookbehind: true
        },
        'prefix': {
          pattern: /[\s\S]/,
          alias: /\w+/.exec(name)[0]
        }
      }
    };
  });

  // make prefixes available to Diff plugin
  Object.defineProperty(Prism.languages.diff, 'PREFIXES', {
    value: PREFIXES
  });
})(Prism);
Prism.languages.go = Prism.languages.extend('clike', {
  'string': {
    pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
    lookbehind: true,
    greedy: true
  },
  'keyword': /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
  'boolean': /\b(?:_|false|iota|nil|true)\b/,
  'number': [
  // binary and octal integers
  /\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
  // hexadecimal integers and floats
  /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
  // decimal integers and floats
  /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],
  'operator': /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
  'builtin': /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
});
Prism.languages.insertBefore('go', 'string', {
  'char': {
    pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
    greedy: true
  }
});
delete Prism.languages.go['class-name'];
Prism.languages.ini = {
  /**
   * The component mimics the behavior of the Win32 API parser.
   *
   * @see {@link https://github.com/PrismJS/prism/issues/2775#issuecomment-787477723}
   */

  'comment': {
    pattern: /(^[ \f\t\v]*)[#;][^\n\r]*/m,
    lookbehind: true
  },
  'section': {
    pattern: /(^[ \f\t\v]*)\[[^\n\r\]]*\]?/m,
    lookbehind: true,
    inside: {
      'section-name': {
        pattern: /(^\[[ \f\t\v]*)[^ \f\t\v\]]+(?:[ \f\t\v]+[^ \f\t\v\]]+)*/,
        lookbehind: true,
        alias: 'selector'
      },
      'punctuation': /\[|\]/
    }
  },
  'key': {
    pattern: /(^[ \f\t\v]*)[^ \f\n\r\t\v=]+(?:[ \f\t\v]+[^ \f\n\r\t\v=]+)*(?=[ \f\t\v]*=)/m,
    lookbehind: true,
    alias: 'attr-name'
  },
  'value': {
    pattern: /(=[ \f\t\v]*)[^ \f\n\r\t\v]+(?:[ \f\t\v]+[^ \f\n\r\t\v]+)*/,
    lookbehind: true,
    alias: 'attr-value',
    inside: {
      'inner-value': {
        pattern: /^("|').+(?=\1$)/,
        lookbehind: true
      }
    }
  },
  'punctuation': /=/
};
(function (Prism) {
  var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record(?!\s*[(){}[\]<>=%~.:,;?+\-*/&|^])|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;

  // full package (optional) + parent classes (optional)
  var classNamePrefix = /(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;

  // based on the java naming conventions
  var className = {
    pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
    lookbehind: true,
    inside: {
      'namespace': {
        pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
        inside: {
          'punctuation': /\./
        }
      },
      'punctuation': /\./
    }
  };
  Prism.languages.java = Prism.languages.extend('clike', {
    'string': {
      pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
      lookbehind: true,
      greedy: true
    },
    'class-name': [className, {
      // variables, parameters, and constructor references
      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
      pattern: RegExp(/(^|[^\w.])/.source + classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()]|\s*(?:\[[\s,]*\]\s*)?::\s*new\b)/.source),
      lookbehind: true,
      inside: className.inside
    }, {
      // class names based on keyword
      // this to support class names (or generic parameters) which do not contain a lower case letter (also works for methods)
      pattern: RegExp(/(\b(?:class|enum|extends|implements|instanceof|interface|new|record|throws)\s+)/.source + classNamePrefix + /[A-Z]\w*\b/.source),
      lookbehind: true,
      inside: className.inside
    }],
    'keyword': keywords,
    'function': [Prism.languages.clike.function, {
      pattern: /(::\s*)[a-z_]\w*/,
      lookbehind: true
    }],
    'number': /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
    'operator': {
      pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
      lookbehind: true
    },
    'constant': /\b[A-Z][A-Z_\d]+\b/
  });
  Prism.languages.insertBefore('java', 'string', {
    'triple-quoted-string': {
      // http://openjdk.java.net/jeps/355#Description
      pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
      greedy: true,
      alias: 'string'
    },
    'char': {
      pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
      greedy: true
    }
  });
  Prism.languages.insertBefore('java', 'class-name', {
    'annotation': {
      pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
      lookbehind: true,
      alias: 'punctuation'
    },
    'generics': {
      pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
      inside: {
        'class-name': className,
        'keyword': keywords,
        'punctuation': /[<>(),.:]/,
        'operator': /[?&|]/
      }
    },
    'import': [{
      pattern: RegExp(/(\bimport\s+)/.source + classNamePrefix + /(?:[A-Z]\w*|\*)(?=\s*;)/.source),
      lookbehind: true,
      inside: {
        'namespace': className.inside.namespace,
        'punctuation': /\./,
        'operator': /\*/,
        'class-name': /\w+/
      }
    }, {
      pattern: RegExp(/(\bimport\s+static\s+)/.source + classNamePrefix + /(?:\w+|\*)(?=\s*;)/.source),
      lookbehind: true,
      alias: 'static',
      inside: {
        'namespace': className.inside.namespace,
        'static': /\b\w+$/,
        'punctuation': /\./,
        'operator': /\*/,
        'class-name': /\w+/
      }
    }],
    'namespace': {
      pattern: RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g, function () {
        return keywords.source;
      })),
      lookbehind: true,
      inside: {
        'punctuation': /\./
      }
    }
  });
})(Prism);
(function (Prism) {
  var specialEscape = {
    pattern: /\\[\\(){}[\]^$+*?|.]/,
    alias: 'escape'
  };
  var escape = /\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;
  var charSet = {
    pattern: /\.|\\[wsd]|\\p\{[^{}]+\}/i,
    alias: 'class-name'
  };
  var charSetWithoutDot = {
    pattern: /\\[wsd]|\\p\{[^{}]+\}/i,
    alias: 'class-name'
  };
  var rangeChar = '(?:[^\\\\-]|' + escape.source + ')';
  var range = RegExp(rangeChar + '-' + rangeChar);

  // the name of a capturing group
  var groupName = {
    pattern: /(<|')[^<>']+(?=[>']$)/,
    lookbehind: true,
    alias: 'variable'
  };
  Prism.languages.regex = {
    'char-class': {
      pattern: /((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,
      lookbehind: true,
      inside: {
        'char-class-negation': {
          pattern: /(^\[)\^/,
          lookbehind: true,
          alias: 'operator'
        },
        'char-class-punctuation': {
          pattern: /^\[|\]$/,
          alias: 'punctuation'
        },
        'range': {
          pattern: range,
          inside: {
            'escape': escape,
            'range-punctuation': {
              pattern: /-/,
              alias: 'operator'
            }
          }
        },
        'special-escape': specialEscape,
        'char-set': charSetWithoutDot,
        'escape': escape
      }
    },
    'special-escape': specialEscape,
    'char-set': charSet,
    'backreference': [{
      // a backreference which is not an octal escape
      pattern: /\\(?![123][0-7]{2})[1-9]/,
      alias: 'keyword'
    }, {
      pattern: /\\k<[^<>']+>/,
      alias: 'keyword',
      inside: {
        'group-name': groupName
      }
    }],
    'anchor': {
      pattern: /[$^]|\\[ABbGZz]/,
      alias: 'function'
    },
    'escape': escape,
    'group': [{
      // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html
      // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs

      // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)
      pattern: /\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,
      alias: 'punctuation',
      inside: {
        'group-name': groupName
      }
    }, {
      pattern: /\)/,
      alias: 'punctuation'
    }],
    'quantifier': {
      pattern: /(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,
      alias: 'number'
    },
    'alternation': {
      pattern: /\|/,
      alias: 'keyword'
    }
  };
})(Prism);
Prism.languages.javascript = Prism.languages.extend('clike', {
  'class-name': [Prism.languages.clike['class-name'], {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
    lookbehind: true
  }],
  'keyword': [{
    pattern: /((?:^|\})\s*)catch\b/,
    lookbehind: true
  }, {
    pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
    lookbehind: true
  }],
  // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
  'function': /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
  'number': {
    pattern: RegExp(/(^|[^\w$])/.source + '(?:' + (
    // constant
    /NaN|Infinity/.source + '|' +
    // binary integer
    /0[bB][01]+(?:_[01]+)*n?/.source + '|' +
    // octal integer
    /0[oO][0-7]+(?:_[0-7]+)*n?/.source + '|' +
    // hexadecimal integer
    /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + '|' +
    // decimal bigint
    /\d+(?:_\d+)*n/.source + '|' +
    // decimal number (integer or float) but no bigint
    /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ')' + /(?![\w$])/.source),
    lookbehind: true
  },
  'operator': /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
});
Prism.languages.javascript['class-name'][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
Prism.languages.insertBefore('javascript', 'keyword', {
  'regex': {
    pattern: RegExp(
    // lookbehind
    // eslint-disable-next-line regexp/no-dupe-characters-character-class
    /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source +
    // Regex pattern:
    // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
    // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
    // with the only syntax, so we have to define 2 different regex patterns.
    /\//.source + '(?:' + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + '|' +
    // `v` flag syntax. This supports 3 levels of nested character classes.
    /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ')' +
    // lookahead
    /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'regex-source': {
        pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
        lookbehind: true,
        alias: 'language-regex',
        inside: Prism.languages.regex
      },
      'regex-delimiter': /^\/|\/$/,
      'regex-flags': /^[a-z]+$/
    }
  },
  // This must be declared before keyword because we use "function" inside the look-forward
  'function-variable': {
    pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
    alias: 'function'
  },
  'parameter': [{
    pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }, {
    pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
    lookbehind: true,
    inside: Prism.languages.javascript
  }],
  'constant': /\b[A-Z](?:[A-Z_]|\dx?)*\b/
});
Prism.languages.insertBefore('javascript', 'string', {
  'hashbang': {
    pattern: /^#!.*/,
    greedy: true,
    alias: 'comment'
  },
  'template-string': {
    pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
    greedy: true,
    inside: {
      'template-punctuation': {
        pattern: /^`|`$/,
        alias: 'string'
      },
      'interpolation': {
        pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
        lookbehind: true,
        inside: {
          'interpolation-punctuation': {
            pattern: /^\$\{|\}$/,
            alias: 'punctuation'
          },
          rest: Prism.languages.javascript
        }
      },
      'string': /[\s\S]+/
    }
  },
  'string-property': {
    pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
    lookbehind: true,
    greedy: true,
    alias: 'property'
  }
});
Prism.languages.insertBefore('javascript', 'operator', {
  'literal-property': {
    pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
    lookbehind: true,
    alias: 'property'
  }
});
if (Prism.languages.markup) {
  Prism.languages.markup.tag.addInlined('script', 'javascript');

  // add attribute support for all DOM events.
  // https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events
  Prism.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source, 'javascript');
}
Prism.languages.js = Prism.languages.javascript;
(function (Prism) {
  var javascript = Prism.util.clone(Prism.languages.javascript);
  var space = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
  var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
  var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;

  /**
   * @param {string} source
   * @param {string} [flags]
   */
  function re(source, flags) {
    source = source.replace(/<S>/g, function () {
      return space;
    }).replace(/<BRACES>/g, function () {
      return braces;
    }).replace(/<SPREAD>/g, function () {
      return spread;
    });
    return RegExp(source, flags);
  }
  spread = re(spread).source;
  Prism.languages.jsx = Prism.languages.extend('markup', javascript);
  Prism.languages.jsx.tag.pattern = re(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source);
  Prism.languages.jsx.tag.inside['tag'].pattern = /^<\/?[^\s>\/]*/;
  Prism.languages.jsx.tag.inside['attr-value'].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
  Prism.languages.jsx.tag.inside['tag'].inside['class-name'] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
  Prism.languages.jsx.tag.inside['comment'] = javascript['comment'];
  Prism.languages.insertBefore('inside', 'attr-name', {
    'spread': {
      pattern: re(/<SPREAD>/.source),
      inside: Prism.languages.jsx
    }
  }, Prism.languages.jsx.tag);
  Prism.languages.insertBefore('inside', 'special-attr', {
    'script': {
      // Allow for two levels of nesting
      pattern: re(/=<BRACES>/.source),
      alias: 'language-javascript',
      inside: {
        'script-punctuation': {
          pattern: /^=(?=\{)/,
          alias: 'punctuation'
        },
        rest: Prism.languages.jsx
      }
    }
  }, Prism.languages.jsx.tag);

  // The following will handle plain text inside tags
  var stringifyToken = function (token) {
    if (!token) {
      return '';
    }
    if (typeof token === 'string') {
      return token;
    }
    if (typeof token.content === 'string') {
      return token.content;
    }
    return token.content.map(stringifyToken).join('');
  };
  var walkTokens = function (tokens) {
    var openedTags = [];
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      var notTagNorBrace = false;
      if (typeof token !== 'string') {
        if (token.type === 'tag' && token.content[0] && token.content[0].type === 'tag') {
          // We found a tag, now find its kind

          if (token.content[0].content[0].content === '</') {
            // Closing tag
            if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
              // Pop matching opening tag
              openedTags.pop();
            }
          } else {
            if (token.content[token.content.length - 1].content === '/>') ; else {
              // Opening tag
              openedTags.push({
                tagName: stringifyToken(token.content[0].content[1]),
                openedBraces: 0
              });
            }
          }
        } else if (openedTags.length > 0 && token.type === 'punctuation' && token.content === '{') {
          // Here we might have entered a JSX context inside a tag
          openedTags[openedTags.length - 1].openedBraces++;
        } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === 'punctuation' && token.content === '}') {
          // Here we might have left a JSX context inside a tag
          openedTags[openedTags.length - 1].openedBraces--;
        } else {
          notTagNorBrace = true;
        }
      }
      if (notTagNorBrace || typeof token === 'string') {
        if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
          // Here we are inside a tag, and not inside a JSX context.
          // That's plain text: drop any tokens matched.
          var plainText = stringifyToken(token);

          // And merge text with adjacent text
          if (i < tokens.length - 1 && (typeof tokens[i + 1] === 'string' || tokens[i + 1].type === 'plain-text')) {
            plainText += stringifyToken(tokens[i + 1]);
            tokens.splice(i + 1, 1);
          }
          if (i > 0 && (typeof tokens[i - 1] === 'string' || tokens[i - 1].type === 'plain-text')) {
            plainText = stringifyToken(tokens[i - 1]) + plainText;
            tokens.splice(i - 1, 1);
            i--;
          }
          tokens[i] = new Prism.Token('plain-text', plainText, null, plainText);
        }
      }
      if (token.content && typeof token.content !== 'string') {
        walkTokens(token.content);
      }
    }
  };
  Prism.hooks.add('after-tokenize', function (env) {
    if (env.language !== 'jsx' && env.language !== 'tsx') {
      return;
    }
    walkTokens(env.tokens);
  });
})(Prism);

// https://www.json.org/json-en.html
Prism.languages.json = {
  'property': {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
    lookbehind: true,
    greedy: true
  },
  'string': {
    pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
    lookbehind: true,
    greedy: true
  },
  'comment': {
    pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
    greedy: true
  },
  'number': /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
  'punctuation': /[{}[\],]/,
  'operator': /:/,
  'boolean': /\b(?:false|true)\b/,
  'null': {
    pattern: /\bnull\b/,
    alias: 'keyword'
  }
};
Prism.languages.webmanifest = Prism.languages.json;
(function (Prism) {
  Prism.languages.kotlin = Prism.languages.extend('clike', {
    'keyword': {
      // The lookbehind prevents wrong highlighting of e.g. kotlin.properties.get
      pattern: /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
      lookbehind: true
    },
    'function': [{
      pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
      greedy: true
    }, {
      pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
      lookbehind: true,
      greedy: true
    }],
    'number': /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
    'operator': /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
  });
  delete Prism.languages.kotlin['class-name'];
  var interpolationInside = {
    'interpolation-punctuation': {
      pattern: /^\$\{?|\}$/,
      alias: 'punctuation'
    },
    'expression': {
      pattern: /[\s\S]+/,
      inside: Prism.languages.kotlin
    }
  };
  Prism.languages.insertBefore('kotlin', 'string', {
    // https://kotlinlang.org/spec/expressions.html#string-interpolation-expressions
    'string-literal': [{
      pattern: /"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,
      alias: 'multiline',
      inside: {
        'interpolation': {
          pattern: /\$(?:[a-z_]\w*|\{[^{}]*\})/i,
          inside: interpolationInside
        },
        'string': /[\s\S]+/
      }
    }, {
      pattern: /"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,
      alias: 'singleline',
      inside: {
        'interpolation': {
          pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,
          lookbehind: true,
          inside: interpolationInside
        },
        'string': /[\s\S]+/
      }
    }],
    'char': {
      // https://kotlinlang.org/spec/expressions.html#character-literals
      pattern: /'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,
      greedy: true
    }
  });
  delete Prism.languages.kotlin['string'];
  Prism.languages.insertBefore('kotlin', 'keyword', {
    'annotation': {
      pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
      alias: 'builtin'
    }
  });
  Prism.languages.insertBefore('kotlin', 'function', {
    'label': {
      pattern: /\b\w+@|@\w+\b/,
      alias: 'symbol'
    }
  });
  Prism.languages.kt = Prism.languages.kotlin;
  Prism.languages.kts = Prism.languages.kotlin;
})(Prism);

/* FIXME :
 :extend() is not handled specifically : its highlighting is buggy.
 Mixin usage must be inside a ruleset to be highlighted.
 At-rules (e.g. import) containing interpolations are buggy.
 Detached rulesets are highlighted as at-rules.
 A comment before a mixin usage prevents the latter to be properly highlighted.
 */

Prism.languages.less = Prism.languages.extend('css', {
  'comment': [/\/\*[\s\S]*?\*\//, {
    pattern: /(^|[^\\])\/\/.*/,
    lookbehind: true
  }],
  'atrule': {
    pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
    inside: {
      'punctuation': /[:()]/
    }
  },
  // selectors and mixins are considered the same
  'selector': {
    pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
    inside: {
      // mixin parameters
      'variable': /@+[\w-]+/
    }
  },
  'property': /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
  'operator': /[+\-*\/]/
});
Prism.languages.insertBefore('less', 'property', {
  'variable': [
  // Variable declaration (the colon must be consumed!)
  {
    pattern: /@[\w-]+\s*:/,
    inside: {
      'punctuation': /:/
    }
  },
  // Variable usage
  /@@?[\w-]+/],
  'mixin-usage': {
    pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
    lookbehind: true,
    alias: 'function'
  }
});
Prism.languages.lua = {
  'comment': /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
  // \z may be used to skip the following space
  'string': {
    pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
    greedy: true
  },
  'number': /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
  'keyword': /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
  'function': /(?!\d)\w+(?=\s*(?:[({]))/,
  'operator': [/[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/, {
    // Match ".." but don't break "..."
    pattern: /(^|[^.])\.\.(?!\.)/,
    lookbehind: true
  }],
  'punctuation': /[\[\](){},;]|\.+|:+/
};
Prism.languages.makefile = {
  'comment': {
    pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
    lookbehind: true
  },
  'string': {
    pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'builtin-target': {
    pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
    alias: 'builtin'
  },
  'target': {
    pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
    alias: 'symbol',
    inside: {
      'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
    }
  },
  'variable': /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
  // Directives
  'keyword': /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
  'function': {
    pattern: /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
    lookbehind: true
  },
  'operator': /(?:::|[?:+!])?=|[|@]/,
  'punctuation': /[:;(){}]/
};
(function (Prism) {
  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property
  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node
  var anchorOrAlias = /[*&][^\s[\]{},]+/;
  // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property
  var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/;
  // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)
  var properties = '(?:' + tag.source + '(?:[ \t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \t]+' + tag.source + ')?)';
  // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)
  // This is a simplified version that doesn't support "#" and multiline keys
  // All these long scarry character classes are simplified versions of YAML's characters
  var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {
    return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
  });
  var string = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;

  /**
   *
   * @param {string} value
   * @param {string} [flags]
   * @returns {RegExp}
   */
  function createValuePattern(value, flags) {
    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag
    var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function () {
      return properties;
    }).replace(/<<value>>/g, function () {
      return value;
    });
    return RegExp(pattern, flags);
  }
  Prism.languages.yaml = {
    'scalar': {
      pattern: RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g, function () {
        return properties;
      })),
      lookbehind: true,
      alias: 'string'
    },
    'comment': /#.*/,
    'key': {
      pattern: RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function () {
        return properties;
      }).replace(/<<key>>/g, function () {
        return '(?:' + plainKey + '|' + string + ')';
      })),
      lookbehind: true,
      greedy: true,
      alias: 'atrule'
    },
    'directive': {
      pattern: /(^[ \t]*)%.+/m,
      lookbehind: true,
      alias: 'important'
    },
    'datetime': {
      pattern: createValuePattern(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),
      lookbehind: true,
      alias: 'number'
    },
    'boolean': {
      pattern: createValuePattern(/false|true/.source, 'i'),
      lookbehind: true,
      alias: 'important'
    },
    'null': {
      pattern: createValuePattern(/null|~/.source, 'i'),
      lookbehind: true,
      alias: 'important'
    },
    'string': {
      pattern: createValuePattern(string),
      lookbehind: true,
      greedy: true
    },
    'number': {
      pattern: createValuePattern(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source, 'i'),
      lookbehind: true
    },
    'tag': tag,
    'important': anchorOrAlias,
    'punctuation': /---|[:[\]{}\-,|>?]|\.\.\./
  };
  Prism.languages.yml = Prism.languages.yaml;
})(Prism);
(function (Prism) {
  // Allow only one line break
  var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;

  /**
   * This function is intended for the creation of the bold or italic pattern.
   *
   * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.
   *
   * _Note:_ Keep in mind that this adds a capturing group.
   *
   * @param {string} pattern
   * @returns {RegExp}
   */
  function createInline(pattern) {
    pattern = pattern.replace(/<inner>/g, function () {
      return inner;
    });
    return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + '(?:' + pattern + ')');
  }
  var tableCell = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
  var tableRow = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g, function () {
    return tableCell;
  });
  var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
  Prism.languages.markdown = Prism.languages.extend('markup', {});
  Prism.languages.insertBefore('markdown', 'prolog', {
    'front-matter-block': {
      pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
      lookbehind: true,
      greedy: true,
      inside: {
        'punctuation': /^---|---$/,
        'front-matter': {
          pattern: /\S+(?:\s+\S+)*/,
          alias: ['yaml', 'language-yaml'],
          inside: Prism.languages.yaml
        }
      }
    },
    'blockquote': {
      // > ...
      pattern: /^>(?:[\t ]*>)*/m,
      alias: 'punctuation'
    },
    'table': {
      pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),
      inside: {
        'table-data-rows': {
          pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),
          lookbehind: true,
          inside: {
            'table-data': {
              pattern: RegExp(tableCell),
              inside: Prism.languages.markdown
            },
            'punctuation': /\|/
          }
        },
        'table-line': {
          pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),
          lookbehind: true,
          inside: {
            'punctuation': /\||:?-{3,}:?/
          }
        },
        'table-header-row': {
          pattern: RegExp('^' + tableRow + '$'),
          inside: {
            'table-header': {
              pattern: RegExp(tableCell),
              alias: 'important',
              inside: Prism.languages.markdown
            },
            'punctuation': /\|/
          }
        }
      }
    },
    'code': [{
      // Prefixed by 4 spaces or 1 tab and preceded by an empty line
      pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
      lookbehind: true,
      alias: 'keyword'
    }, {
      // ```optional language
      // code block
      // ```
      pattern: /^```[\s\S]*?^```$/m,
      greedy: true,
      inside: {
        'code-block': {
          pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
          lookbehind: true
        },
        'code-language': {
          pattern: /^(```).+/,
          lookbehind: true
        },
        'punctuation': /```/
      }
    }],
    'title': [{
      // title 1
      // =======

      // title 2
      // -------
      pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
      alias: 'important',
      inside: {
        punctuation: /==+$|--+$/
      }
    }, {
      // # title 1
      // ###### title 6
      pattern: /(^\s*)#.+/m,
      lookbehind: true,
      alias: 'important',
      inside: {
        punctuation: /^#+|#+$/
      }
    }],
    'hr': {
      // ***
      // ---
      // * * *
      // -----------
      pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
      lookbehind: true,
      alias: 'punctuation'
    },
    'list': {
      // * item
      // + item
      // - item
      // 1. item
      pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
      lookbehind: true,
      alias: 'punctuation'
    },
    'url-reference': {
      // [id]: http://example.com "Optional title"
      // [id]: http://example.com 'Optional title'
      // [id]: http://example.com (Optional title)
      // [id]: <http://example.com> "Optional title"
      pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
      inside: {
        'variable': {
          pattern: /^(!?\[)[^\]]+/,
          lookbehind: true
        },
        'string': /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
        'punctuation': /^[\[\]!:]|[<>]/
      },
      alias: 'url'
    },
    'bold': {
      // **strong**
      // __strong__

      // allow one nested instance of italic text using the same delimiter
      pattern: createInline(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^..)[\s\S]+(?=..$)/,
          lookbehind: true,
          inside: {} // see below
        },

        'punctuation': /\*\*|__/
      }
    },
    'italic': {
      // *em*
      // _em_

      // allow one nested instance of bold text using the same delimiter
      pattern: createInline(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^.)[\s\S]+(?=.$)/,
          lookbehind: true,
          inside: {} // see below
        },

        'punctuation': /[*_]/
      }
    },
    'strike': {
      // ~~strike through~~
      // ~strike~
      // eslint-disable-next-line regexp/strict
      pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'content': {
          pattern: /(^~~?)[\s\S]+(?=\1$)/,
          lookbehind: true,
          inside: {} // see below
        },

        'punctuation': /~~?/
      }
    },
    'code-snippet': {
      // `code`
      // ``code``
      pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
      lookbehind: true,
      greedy: true,
      alias: ['code', 'keyword']
    },
    'url': {
      // [example](http://example.com "Optional title")
      // [example][id]
      // [example] [id]
      pattern: createInline(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),
      lookbehind: true,
      greedy: true,
      inside: {
        'operator': /^!/,
        'content': {
          pattern: /(^\[)[^\]]+(?=\])/,
          lookbehind: true,
          inside: {} // see below
        },

        'variable': {
          pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
          lookbehind: true
        },
        'url': {
          pattern: /(^\]\()[^\s)]+/,
          lookbehind: true
        },
        'string': {
          pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
          lookbehind: true
        }
      }
    }
  });
  ['url', 'bold', 'italic', 'strike'].forEach(function (token) {
    ['url', 'bold', 'italic', 'strike', 'code-snippet'].forEach(function (inside) {
      if (token !== inside) {
        Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];
      }
    });
  });
  Prism.hooks.add('after-tokenize', function (env) {
    if (env.language !== 'markdown' && env.language !== 'md') {
      return;
    }
    function walkTokens(tokens) {
      if (!tokens || typeof tokens === 'string') {
        return;
      }
      for (var i = 0, l = tokens.length; i < l; i++) {
        var token = tokens[i];
        if (token.type !== 'code') {
          walkTokens(token.content);
          continue;
        }

        /*
         * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token
         * is optional. But the grammar is defined so that there is only one case we have to handle:
         *
         * token.content = [
         *     <span class="punctuation">```</span>,
         *     <span class="code-language">xxxx</span>,
         *     '\n', // exactly one new lines (\r or \n or \r\n)
         *     <span class="code-block">...</span>,
         *     '\n', // exactly one new lines again
         *     <span class="punctuation">```</span>
         * ];
         */

        var codeLang = token.content[1];
        var codeBlock = token.content[3];
        if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {
          // this might be a language that Prism does not support

          // do some replacements to support C++, C#, and F#
          var lang = codeLang.content.replace(/\b#/g, 'sharp').replace(/\b\+\+/g, 'pp');
          // only use the first word
          lang = (/[a-z][\w-]*/i.exec(lang) || [''])[0].toLowerCase();
          var alias = 'language-' + lang;

          // add alias
          if (!codeBlock.alias) {
            codeBlock.alias = [alias];
          } else if (typeof codeBlock.alias === 'string') {
            codeBlock.alias = [codeBlock.alias, alias];
          } else {
            codeBlock.alias.push(alias);
          }
        }
      }
    }
    walkTokens(env.tokens);
  });
  Prism.hooks.add('wrap', function (env) {
    if (env.type !== 'code-block') {
      return;
    }
    var codeLang = '';
    for (var i = 0, l = env.classes.length; i < l; i++) {
      var cls = env.classes[i];
      var match = /language-(.+)/.exec(cls);
      if (match) {
        codeLang = match[1];
        break;
      }
    }
    var grammar = Prism.languages[codeLang];
    if (!grammar) {
      if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {
        var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);
        env.attributes['id'] = id;
        Prism.plugins.autoloader.loadLanguages(codeLang, function () {
          var ele = document.getElementById(id);
          if (ele) {
            ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);
          }
        });
      }
    } else {
      env.content = Prism.highlight(textContent(env.content), grammar, codeLang);
    }
  });
  var tagPattern = RegExp(Prism.languages.markup.tag.pattern.source, 'gi');

  /**
   * A list of known entity names.
   *
   * This will always be incomplete to save space. The current list is the one used by lowdash's unescape function.
   *
   * @see {@link https://github.com/lodash/lodash/blob/2da024c3b4f9947a48517639de7560457cd4ec6c/unescape.js#L2}
   */
  var KNOWN_ENTITY_NAMES = {
    'amp': '&',
    'lt': '<',
    'gt': '>',
    'quot': '"'
  };

  // IE 11 doesn't support `String.fromCodePoint`
  var fromCodePoint = String.fromCodePoint || String.fromCharCode;

  /**
   * Returns the text content of a given HTML source code string.
   *
   * @param {string} html
   * @returns {string}
   */
  function textContent(html) {
    // remove all tags
    var text = html.replace(tagPattern, '');

    // decode known entities
    text = text.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function (m, code) {
      code = code.toLowerCase();
      if (code[0] === '#') {
        var value;
        if (code[1] === 'x') {
          value = parseInt(code.slice(2), 16);
        } else {
          value = Number(code.slice(1));
        }
        return fromCodePoint(value);
      } else {
        var known = KNOWN_ENTITY_NAMES[code];
        if (known) {
          return known;
        }

        // unable to decode
        return m;
      }
    });
    return text;
  }
  Prism.languages.md = Prism.languages.markdown;
})(Prism);
Prism.languages.objectivec = Prism.languages.extend('c', {
  'string': {
    pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
    greedy: true
  },
  'keyword': /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
  'operator': /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
});
delete Prism.languages.objectivec['class-name'];
Prism.languages.objc = Prism.languages.objectivec;
(function (Prism) {
  var brackets = /(?:\((?:[^()\\]|\\[\s\S])*\)|\{(?:[^{}\\]|\\[\s\S])*\}|\[(?:[^[\]\\]|\\[\s\S])*\]|<(?:[^<>\\]|\\[\s\S])*>)/.source;
  Prism.languages.perl = {
    'comment': [{
      // POD
      pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\$])#.*/,
      lookbehind: true,
      greedy: true
    }],
    // TODO Could be nice to handle Heredoc too.
    'string': [{
      pattern: RegExp(/\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // q/.../
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
      // q a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // q(...)
      // q{...}
      // q[...]
      // q<...>
      brackets].join('|') + ')'),
      greedy: true
    },
    // "...", `...`
    {
      pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
      greedy: true
    },
    // '...'
    // FIXME Multi-line single-quoted strings are not supported as they would break variables containing '
    {
      pattern: /'(?:[^'\\\r\n]|\\.)*'/,
      greedy: true
    }],
    'regex': [{
      pattern: RegExp(/\b(?:m|qr)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // m/.../
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
      // m a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // m(...)
      // m{...}
      // m[...]
      // m<...>
      brackets].join('|') + ')' + /[msixpodualngc]*/.source),
      greedy: true
    },
    // The lookbehinds prevent -s from breaking
    {
      pattern: RegExp(/(^|[^-])\b(?:s|tr|y)(?![a-zA-Z0-9])\s*/.source + '(?:' + [
      // s/.../.../
      // eslint-disable-next-line regexp/strict
      /([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
      // s a...a...a
      // eslint-disable-next-line regexp/strict
      /([a-zA-Z0-9])(?:(?!\3)[^\\]|\\[\s\S])*\3(?:(?!\3)[^\\]|\\[\s\S])*\3/.source,
      // s(...)(...)
      // s{...}{...}
      // s[...][...]
      // s<...><...>
      // s(...)[...]
      brackets + /\s*/.source + brackets].join('|') + ')' + /[msixpodualngcer]*/.source),
      lookbehind: true,
      greedy: true
    },
    // /.../
    // The look-ahead tries to prevent two divisions on
    // the same line from being highlighted as regex.
    // This does not support multi-line regex.
    {
      pattern: /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\b))/,
      greedy: true
    }],
    // FIXME Not sure about the handling of ::, ', and #
    'variable': [
    // ${^POSTMATCH}
    /[&*$@%]\{\^[A-Z]+\}/,
    // $^V
    /[&*$@%]\^[A-Z_]/,
    // ${...}
    /[&*$@%]#?(?=\{)/,
    // $foo
    /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/,
    // $1
    /[&*$@%]\d+/,
    // $_, @_, %!
    // The negative lookahead prevents from breaking the %= operator
    /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/],
    'filehandle': {
      // <>, <FOO>, _
      pattern: /<(?![<=])\S*?>|\b_\b/,
      alias: 'symbol'
    },
    'v-string': {
      // v1.2, 1.2.3
      pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
      alias: 'string'
    },
    'function': {
      pattern: /(\bsub[ \t]+)\w+/,
      lookbehind: true
    },
    'keyword': /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
    'number': /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
    'operator': /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\b/,
    'punctuation': /[{}[\];(),:]/
  };
})(Prism);
(function (Prism) {
  /**
   * Returns the placeholder for the given language id and index.
   *
   * @param {string} language
   * @param {string|number} index
   * @returns {string}
   */
  function getPlaceholder(language, index) {
    return '___' + language.toUpperCase() + index + '___';
  }
  Object.defineProperties(Prism.languages['markup-templating'] = {}, {
    buildPlaceholders: {
      /**
       * Tokenize all inline templating expressions matching `placeholderPattern`.
       *
       * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns
       * `true` will be replaced.
       *
       * @param {object} env The environment of the `before-tokenize` hook.
       * @param {string} language The language id.
       * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.
       * @param {(match: string) => boolean} [replaceFilter]
       */
      value: function (env, language, placeholderPattern, replaceFilter) {
        if (env.language !== language) {
          return;
        }
        var tokenStack = env.tokenStack = [];
        env.code = env.code.replace(placeholderPattern, function (match) {
          if (typeof replaceFilter === 'function' && !replaceFilter(match)) {
            return match;
          }
          var i = tokenStack.length;
          var placeholder;

          // Check for existing strings
          while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {
            ++i;
          }

          // Create a sparse array
          tokenStack[i] = match;
          return placeholder;
        });

        // Switch the grammar to markup
        env.grammar = Prism.languages.markup;
      }
    },
    tokenizePlaceholders: {
      /**
       * Replace placeholders with proper tokens after tokenizing.
       *
       * @param {object} env The environment of the `after-tokenize` hook.
       * @param {string} language The language id.
       */
      value: function (env, language) {
        if (env.language !== language || !env.tokenStack) {
          return;
        }

        // Switch the grammar back
        env.grammar = Prism.languages[language];
        var j = 0;
        var keys = Object.keys(env.tokenStack);
        function walkTokens(tokens) {
          for (var i = 0; i < tokens.length; i++) {
            // all placeholders are replaced already
            if (j >= keys.length) {
              break;
            }
            var token = tokens[i];
            if (typeof token === 'string' || token.content && typeof token.content === 'string') {
              var k = keys[j];
              var t = env.tokenStack[k];
              var s = typeof token === 'string' ? token : token.content;
              var placeholder = getPlaceholder(language, k);
              var index = s.indexOf(placeholder);
              if (index > -1) {
                ++j;
                var before = s.substring(0, index);
                var middle = new Prism.Token(language, Prism.tokenize(t, env.grammar), 'language-' + language, t);
                var after = s.substring(index + placeholder.length);
                var replacement = [];
                if (before) {
                  replacement.push.apply(replacement, walkTokens([before]));
                }
                replacement.push(middle);
                if (after) {
                  replacement.push.apply(replacement, walkTokens([after]));
                }
                if (typeof token === 'string') {
                  tokens.splice.apply(tokens, [i, 1].concat(replacement));
                } else {
                  token.content = replacement;
                }
              }
            } else if (token.content /* && typeof token.content !== 'string' */) {
              walkTokens(token.content);
            }
          }
          return tokens;
        }
        walkTokens(env.tokens);
      }
    }
  });
})(Prism);

/**
 * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/
 * Modified by Miles Johnson: http://milesj.me
 * Rewritten by Tom Pavelec
 *
 * Supports PHP 5.3 - 8.0
 */
(function (Prism) {
  var comment = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
  var constant = [{
    pattern: /\b(?:false|true)\b/i,
    alias: 'boolean'
  }, {
    pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
    greedy: true,
    lookbehind: true
  }, {
    pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
    greedy: true,
    lookbehind: true
  }, /\b(?:null)\b/i, /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/];
  var number = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
  var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
  var punctuation = /[{}\[\](),:;]/;
  Prism.languages.php = {
    'delimiter': {
      pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
      alias: 'important'
    },
    'comment': comment,
    'variable': /\$+(?:\w+\b|(?=\{))/,
    'package': {
      pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    },
    'class-name-definition': {
      pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
      lookbehind: true,
      alias: 'class-name'
    },
    'function-definition': {
      pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
      lookbehind: true,
      alias: 'function'
    },
    'keyword': [{
      pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
      alias: 'type-casting',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
      alias: 'type-hint',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|never|object|self|static|string|void)\b/i,
      alias: 'return-type',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
      alias: 'type-declaration',
      greedy: true
    }, {
      pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
      alias: 'type-declaration',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b(?:parent|self|static)(?=\s*::)/i,
      alias: 'static-context',
      greedy: true
    }, {
      // yield from
      pattern: /(\byield\s+)from\b/i,
      lookbehind: true
    },
    // `class` is always a keyword unlike other keywords
    /\bclass\b/i, {
      // https://www.php.net/manual/en/reserved.keywords.php
      //
      // keywords cannot be preceded by "->"
      // the complex lookbehind means `(?<!(?:->|::)\s*)`
      pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|never|new|or|parent|print|private|protected|public|readonly|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
      lookbehind: true
    }],
    'argument-name': {
      pattern: /([(,]\s*)\b[a-z_]\w*(?=\s*:(?!:))/i,
      lookbehind: true
    },
    'class-name': [{
      pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
      greedy: true,
      lookbehind: true
    }, {
      pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
      greedy: true
    }, {
      pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      alias: 'class-name-fully-qualified',
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /\b[a-z_]\w*(?=\s*\$)/i,
      alias: 'type-declaration',
      greedy: true
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
      alias: ['class-name-fully-qualified', 'type-declaration'],
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /\b[a-z_]\w*(?=\s*::)/i,
      alias: 'static-context',
      greedy: true
    }, {
      pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
      alias: ['class-name-fully-qualified', 'static-context'],
      greedy: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
      alias: 'type-hint',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
      alias: ['class-name-fully-qualified', 'type-hint'],
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
      alias: 'return-type',
      greedy: true,
      lookbehind: true
    }, {
      pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
      alias: ['class-name-fully-qualified', 'return-type'],
      greedy: true,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    }],
    'constant': constant,
    'function': {
      pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
      lookbehind: true,
      inside: {
        'punctuation': /\\/
      }
    },
    'property': {
      pattern: /(->\s*)\w+/,
      lookbehind: true
    },
    'number': number,
    'operator': operator,
    'punctuation': punctuation
  };
  var string_interpolation = {
    pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
    lookbehind: true,
    inside: Prism.languages.php
  };
  var string = [{
    pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
    alias: 'nowdoc-string',
    greedy: true,
    inside: {
      'delimiter': {
        pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
        alias: 'symbol',
        inside: {
          'punctuation': /^<<<'?|[';]$/
        }
      }
    }
  }, {
    pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
    alias: 'heredoc-string',
    greedy: true,
    inside: {
      'delimiter': {
        pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
        alias: 'symbol',
        inside: {
          'punctuation': /^<<<"?|[";]$/
        }
      },
      'interpolation': string_interpolation
    }
  }, {
    pattern: /`(?:\\[\s\S]|[^\\`])*`/,
    alias: 'backtick-quoted-string',
    greedy: true
  }, {
    pattern: /'(?:\\[\s\S]|[^\\'])*'/,
    alias: 'single-quoted-string',
    greedy: true
  }, {
    pattern: /"(?:\\[\s\S]|[^\\"])*"/,
    alias: 'double-quoted-string',
    greedy: true,
    inside: {
      'interpolation': string_interpolation
    }
  }];
  Prism.languages.insertBefore('php', 'variable', {
    'string': string,
    'attribute': {
      pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
      greedy: true,
      inside: {
        'attribute-content': {
          pattern: /^(#\[)[\s\S]+(?=\]$)/,
          lookbehind: true,
          // inside can appear subset of php
          inside: {
            'comment': comment,
            'string': string,
            'attribute-class-name': [{
              pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
              alias: 'class-name',
              greedy: true,
              lookbehind: true
            }, {
              pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
              alias: ['class-name', 'class-name-fully-qualified'],
              greedy: true,
              lookbehind: true,
              inside: {
                'punctuation': /\\/
              }
            }],
            'constant': constant,
            'number': number,
            'operator': operator,
            'punctuation': punctuation
          }
        },
        'delimiter': {
          pattern: /^#\[|\]$/,
          alias: 'punctuation'
        }
      }
    }
  });
  Prism.hooks.add('before-tokenize', function (env) {
    if (!/<\?/.test(env.code)) {
      return;
    }
    var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
    Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);
  });
  Prism.hooks.add('after-tokenize', function (env) {
    Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');
  });
})(Prism);
Prism.languages.python = {
  'comment': {
    pattern: /(^|[^\\])#.*/,
    lookbehind: true,
    greedy: true
  },
  'string-interpolation': {
    pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
    greedy: true,
    inside: {
      'interpolation': {
        // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
        pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
        lookbehind: true,
        inside: {
          'format-spec': {
            pattern: /(:)[^:(){}]+(?=\}$)/,
            lookbehind: true
          },
          'conversion-option': {
            pattern: /![sra](?=[:}]$)/,
            alias: 'punctuation'
          },
          rest: null
        }
      },
      'string': /[\s\S]+/
    }
  },
  'triple-quoted-string': {
    pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
    greedy: true,
    alias: 'string'
  },
  'string': {
    pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
    greedy: true
  },
  'function': {
    pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
    lookbehind: true
  },
  'class-name': {
    pattern: /(\bclass\s+)\w+/i,
    lookbehind: true
  },
  'decorator': {
    pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
    lookbehind: true,
    alias: ['annotation', 'punctuation'],
    inside: {
      'punctuation': /\./
    }
  },
  'keyword': /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
  'builtin': /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
  'boolean': /\b(?:False|None|True)\b/,
  'number': /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
  'operator': /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
  'punctuation': /[{}[\];(),.:]/
};
Prism.languages.python['string-interpolation'].inside['interpolation'].inside.rest = Prism.languages.python;
Prism.languages.py = Prism.languages.python;
Prism.languages.r = {
  'comment': /#.*/,
  'string': {
    pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
    greedy: true
  },
  'percent-operator': {
    // Includes user-defined operators
    // and %%, %*%, %/%, %in%, %o%, %x%
    pattern: /%[^%\s]*%/,
    alias: 'operator'
  },
  'boolean': /\b(?:FALSE|TRUE)\b/,
  'ellipsis': /\.\.(?:\.|\d+)/,
  'number': [/\b(?:Inf|NaN)\b/, /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/],
  'keyword': /\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\b/,
  'operator': /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
  'punctuation': /[(){}\[\],;]/
};

/**
 * Original by Samuel Flores
 *
 * Adds the following new token classes:
 *     constant, builtin, variable, symbol, regex
 */
(function (Prism) {
  Prism.languages.ruby = Prism.languages.extend('clike', {
    'comment': {
      pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
      greedy: true
    },
    'class-name': {
      pattern: /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
      lookbehind: true,
      inside: {
        'punctuation': /[.\\]/
      }
    },
    'keyword': /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
    'operator': /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
    'punctuation': /[(){}[\].,;]/
  });
  Prism.languages.insertBefore('ruby', 'operator', {
    'double-colon': {
      pattern: /::/,
      alias: 'punctuation'
    }
  });
  var interpolation = {
    pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
    lookbehind: true,
    inside: {
      'content': {
        pattern: /^(#\{)[\s\S]+(?=\}$)/,
        lookbehind: true,
        inside: Prism.languages.ruby
      },
      'delimiter': {
        pattern: /^#\{|\}$/,
        alias: 'punctuation'
      }
    }
  };
  delete Prism.languages.ruby.function;
  var percentExpression = '(?:' + [/([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source, /\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source, /\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source, /\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source, /<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source].join('|') + ')';
  var symbolName = /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/.source;
  Prism.languages.insertBefore('ruby', 'keyword', {
    'regex-literal': [{
      pattern: RegExp(/%r/.source + percentExpression + /[egimnosux]{0,6}/.source),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'regex': /[\s\S]+/
      }
    }, {
      pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
      lookbehind: true,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'regex': /[\s\S]+/
      }
    }],
    'variable': /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
    'symbol': [{
      pattern: RegExp(/(^|[^:]):/.source + symbolName),
      lookbehind: true,
      greedy: true
    }, {
      pattern: RegExp(/([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source),
      lookbehind: true,
      greedy: true
    }],
    'method-definition': {
      pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
      lookbehind: true,
      inside: {
        'function': /\b\w+$/,
        'keyword': /^self\b/,
        'class-name': /^\w+/,
        'punctuation': /\./
      }
    }
  });
  Prism.languages.insertBefore('ruby', 'string', {
    'string-literal': [{
      pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        'delimiter': {
          pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
          inside: {
            'symbol': /\b\w+/,
            'punctuation': /^<<[-~]?/
          }
        },
        'interpolation': interpolation,
        'string': /[\s\S]+/
      }
    }, {
      pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
      alias: 'heredoc-string',
      greedy: true,
      inside: {
        'delimiter': {
          pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
          inside: {
            'symbol': /\b\w+/,
            'punctuation': /^<<[-~]?'|'$/
          }
        },
        'string': /[\s\S]+/
      }
    }],
    'command-literal': [{
      pattern: RegExp(/%x/.source + percentExpression),
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'command': {
          pattern: /[\s\S]+/,
          alias: 'string'
        }
      }
    }, {
      pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
      greedy: true,
      inside: {
        'interpolation': interpolation,
        'command': {
          pattern: /[\s\S]+/,
          alias: 'string'
        }
      }
    }]
  });
  delete Prism.languages.ruby.string;
  Prism.languages.insertBefore('ruby', 'number', {
    'builtin': /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
    'constant': /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
  });
  Prism.languages.rb = Prism.languages.ruby;
})(Prism);
(function (Prism) {
  var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;
  for (var i = 0; i < 2; i++) {
    // support 4 levels of nested comments
    multilineComment = multilineComment.replace(/<self>/g, function () {
      return multilineComment;
    });
  }
  multilineComment = multilineComment.replace(/<self>/g, function () {
    return /[^\s\S]/.source;
  });
  Prism.languages.rust = {
    'comment': [{
      pattern: RegExp(/(^|[^\\])/.source + multilineComment),
      lookbehind: true,
      greedy: true
    }, {
      pattern: /(^|[^\\:])\/\/.*/,
      lookbehind: true,
      greedy: true
    }],
    'string': {
      pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
      greedy: true
    },
    'char': {
      pattern: /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
      greedy: true
    },
    'attribute': {
      pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
      greedy: true,
      alias: 'attr-name',
      inside: {
        'string': null // see below
      }
    },

    // Closure params should not be confused with bitwise OR |
    'closure-params': {
      pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
      lookbehind: true,
      greedy: true,
      inside: {
        'closure-punctuation': {
          pattern: /^\||\|$/,
          alias: 'punctuation'
        },
        rest: null // see below
      }
    },

    'lifetime-annotation': {
      pattern: /'\w+/,
      alias: 'symbol'
    },
    'fragment-specifier': {
      pattern: /(\$\w+:)[a-z]+/,
      lookbehind: true,
      alias: 'punctuation'
    },
    'variable': /\$\w+/,
    'function-definition': {
      pattern: /(\bfn\s+)\w+/,
      lookbehind: true,
      alias: 'function'
    },
    'type-definition': {
      pattern: /(\b(?:enum|struct|trait|type|union)\s+)\w+/,
      lookbehind: true,
      alias: 'class-name'
    },
    'module-declaration': [{
      pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
      lookbehind: true,
      alias: 'namespace'
    }, {
      pattern: /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
      lookbehind: true,
      alias: 'namespace',
      inside: {
        'punctuation': /::/
      }
    }],
    'keyword': [
    // https://github.com/rust-lang/reference/blob/master/src/keywords.md
    /\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
    // primitives and str
    // https://doc.rust-lang.org/stable/rust-by-example/primitives.html
    /\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/],
    // functions can technically start with an upper-case letter, but this will introduce a lot of false positives
    // and Rust's naming conventions recommend snake_case anyway.
    // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html
    'function': /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
    'macro': {
      pattern: /\b\w+!/,
      alias: 'property'
    },
    'constant': /\b[A-Z_][A-Z_\d]+\b/,
    'class-name': /\b[A-Z]\w*\b/,
    'namespace': {
      pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
      inside: {
        'punctuation': /::/
      }
    },
    // Hex, oct, bin, dec numbers with visual separators and type suffix
    'number': /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,
    'boolean': /\b(?:false|true)\b/,
    'punctuation': /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
    'operator': /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
  };
  Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;
  Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];
})(Prism);
(function (Prism) {
  Prism.languages.sass = Prism.languages.extend('css', {
    // Sass comments don't need to be closed, only indented
    'comment': {
      pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
      lookbehind: true,
      greedy: true
    }
  });
  Prism.languages.insertBefore('sass', 'atrule', {
    // We want to consume the whole line
    'atrule-line': {
      // Includes support for = and + shortcuts
      pattern: /^(?:[ \t]*)[@+=].+/m,
      greedy: true,
      inside: {
        'atrule': /(?:@[\w-]+|[+=])/
      }
    }
  });
  delete Prism.languages.sass.atrule;
  var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
  var operator = [/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/, {
    pattern: /(\s)-(?=\s)/,
    lookbehind: true
  }];
  Prism.languages.insertBefore('sass', 'property', {
    // We want to consume the whole line
    'variable-line': {
      pattern: /^[ \t]*\$.+/m,
      greedy: true,
      inside: {
        'punctuation': /:/,
        'variable': variable,
        'operator': operator
      }
    },
    // We want to consume the whole line
    'property-line': {
      pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
      greedy: true,
      inside: {
        'property': [/[^:\s]+(?=\s*:)/, {
          pattern: /(:)[^:\s]+/,
          lookbehind: true
        }],
        'punctuation': /:/,
        'variable': variable,
        'operator': operator,
        'important': Prism.languages.sass.important
      }
    }
  });
  delete Prism.languages.sass.property;
  delete Prism.languages.sass.important;

  // Now that whole lines for other patterns are consumed,
  // what's left should be selectors
  Prism.languages.insertBefore('sass', 'punctuation', {
    'selector': {
      pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
      lookbehind: true,
      greedy: true
    }
  });
})(Prism);
Prism.languages.scss = Prism.languages.extend('css', {
  'comment': {
    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
    lookbehind: true
  },
  'atrule': {
    pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
    inside: {
      'rule': /@[\w-]+/
      // See rest below
    }
  },

  // url, compassified
  'url': /(?:[-a-z]+-)?url(?=\()/i,
  // CSS selector regex is not appropriate for Sass
  // since there can be lot more things (var, @ directive, nesting..)
  // a selector must start at the end of a property or after a brace (end of other rules or nesting)
  // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable
  // the end of a selector is found when there is no rules in it ( {} or {\s}) or if there is a property (because an interpolated var
  // can "pass" as a selector- e.g: proper#{$erty})
  // this one was hard to do, so please be careful if you edit this one :)
  'selector': {
    // Initial look-ahead is used to prevent matching of blank selectors
    pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
    inside: {
      'parent': {
        pattern: /&/,
        alias: 'important'
      },
      'placeholder': /%[-\w]+/,
      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
    }
  },
  'property': {
    pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
    inside: {
      'variable': /\$[-\w]+|#\{\$[-\w]+\}/
    }
  }
});
Prism.languages.insertBefore('scss', 'atrule', {
  'keyword': [/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i, {
    pattern: /( )(?:from|through)(?= )/,
    lookbehind: true
  }]
});
Prism.languages.insertBefore('scss', 'important', {
  // var and interpolated vars
  'variable': /\$[-\w]+|#\{\$[-\w]+\}/
});
Prism.languages.insertBefore('scss', 'function', {
  'module-modifier': {
    pattern: /\b(?:as|hide|show|with)\b/i,
    alias: 'keyword'
  },
  'placeholder': {
    pattern: /%[-\w]+/,
    alias: 'selector'
  },
  'statement': {
    pattern: /\B!(?:default|optional)\b/i,
    alias: 'keyword'
  },
  'boolean': /\b(?:false|true)\b/,
  'null': {
    pattern: /\bnull\b/,
    alias: 'keyword'
  },
  'operator': {
    pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
    lookbehind: true
  }
});
Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss;
Prism.languages.sql = {
  'comment': {
    pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
    lookbehind: true
  },
  'variable': [{
    pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
    greedy: true
  }, /@[\w.$]+/],
  'string': {
    pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
    greedy: true,
    lookbehind: true
  },
  'identifier': {
    pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
    greedy: true,
    lookbehind: true,
    inside: {
      'punctuation': /^`|`$/
    }
  },
  'function': /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
  // Should we highlight user defined functions too?
  'keyword': /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
  'boolean': /\b(?:FALSE|NULL|TRUE)\b/i,
  'number': /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
  'operator': /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
  'punctuation': /[;[\]()`,.]/
};
Prism.languages.swift = {
  'comment': {
    // Nested comments are supported up to 2 levels
    pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
    lookbehind: true,
    greedy: true
  },
  'string-literal': [
  // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html
  {
    pattern: RegExp(/(^|[^"#])/.source + '(?:'
    // single-line string
    + /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source + '|'
    // multi-line string
    + /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source + ')' + /(?!["#])/.source),
    lookbehind: true,
    greedy: true,
    inside: {
      'interpolation': {
        pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
        lookbehind: true,
        inside: null // see below
      },

      'interpolation-punctuation': {
        pattern: /^\)|\\\($/,
        alias: 'punctuation'
      },
      'punctuation': /\\(?=[\r\n])/,
      'string': /[\s\S]+/
    }
  }, {
    pattern: RegExp(/(^|[^"#])(#+)/.source + '(?:'
    // single-line string
    + /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source + '|'
    // multi-line string
    + /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source + ')' + '\\2'),
    lookbehind: true,
    greedy: true,
    inside: {
      'interpolation': {
        pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
        lookbehind: true,
        inside: null // see below
      },

      'interpolation-punctuation': {
        pattern: /^\)|\\#+\($/,
        alias: 'punctuation'
      },
      'string': /[\s\S]+/
    }
  }],
  'directive': {
    // directives with conditions
    pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\b/.source + '(?:[ \t]*'
    // This regex is a little complex. It's equivalent to this:
    //   (?:![ \t]*)?(?:\b\w+\b(?:[ \t]*<round>)?|<round>)(?:[ \t]*(?:&&|\|\|))?
    // where <round> is a general parentheses expression.
    + /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source + ')+') + '|' + /(?:else|endif)\b/.source + ')'),
    alias: 'property',
    inside: {
      'directive-name': /^#\w+/,
      'boolean': /\b(?:false|true)\b/,
      'number': /\b\d+(?:\.\d+)*\b/,
      'operator': /!|&&|\|\||[<>]=?/,
      'punctuation': /[(),]/
    }
  },
  'literal': {
    pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
    alias: 'constant'
  },
  'other-directive': {
    pattern: /#\w+\b/,
    alias: 'property'
  },
  'attribute': {
    pattern: /@\w+/,
    alias: 'atrule'
  },
  'function-definition': {
    pattern: /(\bfunc\s+)\w+/,
    lookbehind: true,
    alias: 'function'
  },
  'label': {
    // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141
    pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
    lookbehind: true,
    alias: 'important'
  },
  'keyword': /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
  'boolean': /\b(?:false|true)\b/,
  'nil': {
    pattern: /\bnil\b/,
    alias: 'constant'
  },
  'short-argument': /\$\d+\b/,
  'omit': {
    pattern: /\b_\b/,
    alias: 'keyword'
  },
  'number': /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
  // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.
  'class-name': /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
  'function': /\b[a-z_]\w*(?=\s*\()/i,
  'constant': /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
  // Operators are generic in Swift. Developers can even create new operators (e.g. +++).
  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481
  // This regex only supports ASCII operators.
  'operator': /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
  'punctuation': /[{}[\]();,.:\\]/
};
Prism.languages.swift['string-literal'].forEach(function (rule) {
  rule.inside['interpolation'].inside = Prism.languages.swift;
});
(function (Prism) {
  Prism.languages.typescript = Prism.languages.extend('javascript', {
    'class-name': {
      pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
      lookbehind: true,
      greedy: true,
      inside: null // see below
    },

    'builtin': /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
  });

  // The keywords TypeScript adds to JavaScript
  Prism.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,
  // keywords that have to be followed by an identifier
  /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
  // This is for `import type *, {}`
  /\btype\b(?=\s*(?:[\{*]|$))/);

  // doesn't work with TS because TS is too complex
  delete Prism.languages.typescript['parameter'];
  delete Prism.languages.typescript['literal-property'];

  // a version of typescript specifically for highlighting types
  var typeInside = Prism.languages.extend('typescript', {});
  delete typeInside['class-name'];
  Prism.languages.typescript['class-name'].inside = typeInside;
  Prism.languages.insertBefore('typescript', 'function', {
    'decorator': {
      pattern: /@[$\w\xA0-\uFFFF]+/,
      inside: {
        'at': {
          pattern: /^@/,
          alias: 'operator'
        },
        'function': /^[\s\S]+/
      }
    },
    'generic-function': {
      // e.g. foo<T extends "bar" | "baz">( ...
      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
      greedy: true,
      inside: {
        'function': /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
        'generic': {
          pattern: /<[\s\S]+/,
          // everything after the first <
          alias: 'class-name',
          inside: typeInside
        }
      }
    }
  });
  Prism.languages.ts = Prism.languages.typescript;
})(Prism);
(function (Prism) {
  var typescript = Prism.util.clone(Prism.languages.typescript);
  Prism.languages.tsx = Prism.languages.extend('jsx', typescript);

  // doesn't work with TS because TS is too complex
  delete Prism.languages.tsx['parameter'];
  delete Prism.languages.tsx['literal-property'];

  // This will prevent collisions between TSX tags and TS generic types.
  // Idea by https://github.com/karlhorky
  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928
  var tag = Prism.languages.tsx.tag;
  tag.pattern = RegExp(/(^|[^\w$]|(?=<\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);
  tag.lookbehind = true;
})(Prism);
Prism.languages.basic = {
  'comment': {
    pattern: /(?:!|REM\b).+/i,
    inside: {
      'keyword': /^REM/i
    }
  },
  'string': {
    pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
    greedy: true
  },
  'number': /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
  'keyword': /\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,
  'function': /\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,
  'operator': /<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,
  'punctuation': /[,;:()]/
};
Prism.languages.vbnet = Prism.languages.extend('basic', {
  'comment': [{
    pattern: /(?:!|REM\b).+/i,
    inside: {
      'keyword': /^REM/i
    }
  }, {
    pattern: /(^|[^\\:])'.*/,
    lookbehind: true,
    greedy: true
  }],
  'string': {
    pattern: /(^|[^"])"(?:""|[^"])*"(?!")/,
    lookbehind: true,
    greedy: true
  },
  'keyword': /(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,
  'punctuation': /[,;:(){}]/
});




/***/ }),

/***/ 10772:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ MultiselectFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85501);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9772);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79798);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__);
'use client';







function MultiselectFieldInput(props) {
  const labelId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useId)();
  const descriptionId = (0,react__WEBPACK_IMPORTED_MODULE_3__.useId)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__/* .Flex */ .kC, {
    role: "group",
    "aria-labelledby": labelId,
    "aria-describedby": props.description ? descriptionId : undefined,
    direction: "column",
    gap: "medium",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__/* .FieldLabel */ .Qy, {
      elementType: "span",
      id: labelId,
      children: props.label
    }), props.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_4__.Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.description
    }), props.options.map(option => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(_keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_0__.Checkbox, {
      isSelected: props.value.includes(option.value),
      onChange: () => {
        if (props.value.includes(option.value)) {
          props.onChange(props.value.filter(x => x !== option.value));
        } else {
          props.onChange([...props.value, option.value]);
        }
      },
      children: option.label
    }, option.value))]
  });
}




/***/ }),

/***/ 3112:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ RelationshipInput)
/* harmony export */ });
/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4315);
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16817);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _useSlugsInCollection_5c98cbe0_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90567);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _data_27b10ed2_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(39106);
/* harmony import */ var _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(76772);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(45533);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85916);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(496);
'use client';
















function RelationshipInput(props) {
  var _props$validation;
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(() => true, false);
  const slugs = (0,_useSlugsInCollection_5c98cbe0_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.a)(props.collection);
  const options = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(() => {
    return slugs.map(slug => ({
      slug
    }));
  }, [slugs]);
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : undefined;
  // this state & effect shouldn't really exist
  // it's here because react-aria/stately calls onSelectionChange with null
  // after selecting an item if we immediately remove the error message
  // so we delay it with an effect
  const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_errorMessage);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    setErrorMessage(_errorMessage);
  }, [_errorMessage]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_0__/* .Combobox */ .hQ, {
    label: props.label,
    description: props.description,
    selectedKey: props.value,
    onSelectionChange: key => {
      if (typeof key === 'string' || key === null) {
        props.onChange(key);
      }
    },
    onBlur: onBlur,
    autoFocus: props.autoFocus,
    defaultItems: options,
    errorMessage: errorMessage,
    width: "auto",
    children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_react_stately_collections__WEBPACK_IMPORTED_MODULE_10__/* .Item */ .ck, {
      children: item.slug
    }, item.slug)
  });
}




/***/ }),

/***/ 63815:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FM: () => (/* binding */ PathContext),
/* harmony export */   Nl: () => (/* binding */ TextFieldInput),
/* harmony export */   Ut: () => (/* binding */ SlugFieldProvider),
/* harmony export */   fl: () => (/* binding */ SlugFieldContext),
/* harmony export */   i1: () => (/* binding */ AddToPathProvider),
/* harmony export */   o: () => (/* binding */ PathContextProvider)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(71209);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(30422);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(63815);
'use client';







const SlugFieldContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);
const SlugFieldProvider = SlugFieldContext.Provider;
const PathContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)([]);
const PathContextProvider = PathContext.Provider;
function AddToPathProvider(props) {
  const path = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PathContext);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(PathContext.Provider, {
    value: (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => path.concat(props.part), [path, props.part]),
    children: props.children
  });
}
function TextFieldInput(props) {
  const TextFieldComponent = props.multiline ? _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_1__/* .TextArea */ .Kx : _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_1__/* .TextField */ .nv;
  const [blurred, setBlurred] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);
  const slugContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(SlugFieldContext);
  const path = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(PathContext);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(TextFieldComponent, {
    label: props.label,
    description: props.description,
    autoFocus: props.autoFocus,
    value: props.value,
    onChange: props.onChange,
    onBlur: () => setBlurred(true),
    errorMessage: props.forceValidation || blurred ? (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(props.value, props.min, props.max, props.label, path.length === 1 && (slugContext === null || slugContext === void 0 ? void 0 : slugContext.field) === path[0] ? slugContext : undefined) : undefined
  });
}




/***/ }),

/***/ 11592:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ DateFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71209);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index_361cf096_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(31168);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11592);
'use client';








function DateFieldInput(props) {
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(() => true, false);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_0__/* .TextField */ .nv, {
    label: props.label,
    description: props.description,
    type: "date",
    onChange: val => {
      props.onChange(val === '' ? null : val);
    },
    autoFocus: props.autoFocus,
    value: props.value === null ? '' : props.value,
    onBlur: onBlur,
    errorMessage: blurred || props.forceValidation ? (0,_index_361cf096_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(props.validation, props.value, props.label) : undefined
  });
}




/***/ }),

/***/ 96949:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ BlocksFieldInput)
/* harmony export */ });
/* harmony import */ var _react_aria_i18n__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(93009);
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79798);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85578);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(62880);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(32236);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(97712);
/* harmony import */ var _react_stately_collections__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(4315);
/* harmony import */ var _keystar_ui_menu__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(42188);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(45533);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(85916);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(63815);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(51227);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(6027);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(74404);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(46792);
'use client';
































function BlocksFieldInput(props) {
  const labelId = (0,react__WEBPACK_IMPORTED_MODULE_6__.useId)();
  const descriptionId = (0,react__WEBPACK_IMPORTED_MODULE_6__.useId)();
  const stringFormatter = (0,_react_aria_i18n__WEBPACK_IMPORTED_MODULE_25__/* .useLocalizedStringFormatter */ .qb)(_index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_10__.l);
  const [modalState, setModalState] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)({
    kind: 'closed'
  });
  const dismiss = () => {
    setModalState({
      kind: 'closed'
    });
  };
  const formId = (0,react__WEBPACK_IMPORTED_MODULE_6__.useId)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    elementType: "section",
    gap: "medium",
    role: "group",
    "aria-labelledby": labelId,
    "aria-describedby": props.schema.description ? descriptionId : undefined,
    direction: "column",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_2__/* .FieldLabel */ .Qy, {
      elementType: "h3",
      id: labelId,
      children: props.schema.label
    }), props.schema.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__.Text, {
      id: descriptionId,
      size: "small",
      color: "neutralSecondary",
      children: props.schema.description
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxs)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_11__/* .MenuTrigger */ .bF, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
        alignSelf: "start",
        children: "Add"
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_menu__WEBPACK_IMPORTED_MODULE_11__/* .Menu */ .v2, {
        items: props.schema.element.discriminant.options,
        onAction: key => {
          if (typeof key !== 'string') return;
          const discriminant = key;
          setModalState({
            kind: 'new',
            initial: {
              discriminant,
              value: (0,_initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_9__.g)(props.schema.element.values[`${discriminant}`])
            }
          });
        },
        children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_react_stately_collections__WEBPACK_IMPORTED_MODULE_26__/* .Item */ .ck, {
          children: item.label
        }, item.value)
      })]
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.A, {
      ...props,
      labelId: labelId,
      onOpenItem: idx => {
        setModalState({
          kind: 'edit',
          idx,
          initial: (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.p)(props.elements[idx])
        });
      }
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.a, {
      ...props
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_1__/* .DialogContainer */ .TW, {
      onDismiss: dismiss,
      children: (() => {
        var _props$schema$element;
        if (modalState.kind === 'closed') {
          return null;
        }
        const discriminant = modalState.initial.discriminant;
        return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxs)(_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_1__/* .Dialog */ .Vq, {
          children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxs)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__.Heading, {
            children: [modalState.kind === 'edit' ? 'Edit' : 'Add', ' ', (_props$schema$element = props.schema.element.discriminant.options.find(x => x.value === discriminant)) === null || _props$schema$element === void 0 ? void 0 : _props$schema$element.label]
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_slots__WEBPACK_IMPORTED_MODULE_4__/* .Content */ .VY, {
            children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(ItemForm, {
              id: formId,
              schema: props.schema.element.values[discriminant],
              initialValue: modalState.initial.value,
              onSubmit: val => {
                dismiss();
                if (modalState.kind === 'new') {
                  props.onChange([...props.elements.map(x => ({
                    key: x.key
                  })), {
                    key: undefined,
                    value: (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.v)({
                      value: val,
                      discriminant
                    }, props.schema.element)
                  }]);
                  return;
                }
                (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.s)(val, props.elements[modalState.idx].value);
              }
            })
          }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ButtonGroup */ .hE, {
            children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .Button */ .zx, {
              onPress: dismiss,
              children: stringFormatter.format('cancel')
            }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .Button */ .zx, {
              form: formId,
              prominence: "high",
              type: "submit",
              children: "Done"
            })]
          })]
        });
      })()
    })]
  });
}
function ItemForm(props) {
  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(props.initialValue);
  const [forceValidation, setForceValidation] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useState)(false);
  const previewProps = (0,react__WEBPACK_IMPORTED_MODULE_6__.useMemo)(() => (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.c)(props.schema, setValue, () => undefined), [props.schema, setValue])(value);
  const {
    dismiss
  } = (0,_keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_1__/* .useDialogContainer */ .SN)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_3__/* .Flex */ .kC, {
    id: props.id,
    elementType: "form",
    onSubmit: event => {
      if (event.target !== event.currentTarget) return;
      event.preventDefault();
      if (!(0,_errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_7__.c)(props.schema, value, undefined)) {
        setForceValidation(true);
        return;
      }
      props.onSubmit(value);
      dismiss();
    },
    direction: "column",
    gap: "xxlarge",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_12__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_8__.F, {
      forceValidation: forceValidation,
      autoFocus: true,
      ...previewProps
    })
  });
}




/***/ }),

/***/ 16293:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ SlugFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71209);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(63815);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30422);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__);
'use client';









const emptySet = new Set();
function SlugFieldInput(props) {
  var _props$args$slug$vali, _props$args$slug, _props$args$slug$vali2, _props$args$slug$vali3, _props$args$slug$vali4, _props$args$slug2, _props$args$slug2$val, _props$args$slug2$val2, _props$args$slug$labe, _props$args$slug3, _props$args$name$vali, _props$args$name$vali2, _props$args$name$vali3, _props$args$name$vali4, _props$args$name$vali5, _props$args$name$vali6, _props$args$slug$labe2, _props$args$slug4, _props$args$slug5;
  const slugContext = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_4__/* .SlugFieldContext */ .fl);
  const path = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_4__/* .PathContext */ .FM);
  const slugInfo = path.length === 1 && path[0] === (slugContext === null || slugContext === void 0 ? void 0 : slugContext.field) ? slugContext : {
    slugs: emptySet,
    glob: '*'
  };
  const [blurredName, setBlurredName] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [blurredSlug, setBlurredSlug] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);
  const [shouldGenerateSlug, setShouldGenerateSlug] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(props.value === props.defaultValue);
  const generateSlug = name => {
    const generated = props.naiveGenerateSlug(name);
    if (slugInfo.slugs.has(generated)) {
      let i = 1;
      while (slugInfo.slugs.has(`${generated}-${i}`)) {
        i++;
      }
      return `${generated}-${i}`;
    }
    return generated;
  };
  const slugErrorMessage = props.forceValidation || blurredSlug ? (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_5__.v)(props.value.slug, (_props$args$slug$vali = (_props$args$slug = props.args.slug) === null || _props$args$slug === void 0 ? void 0 : (_props$args$slug$vali2 = _props$args$slug.validation) === null || _props$args$slug$vali2 === void 0 ? void 0 : (_props$args$slug$vali3 = _props$args$slug$vali2.length) === null || _props$args$slug$vali3 === void 0 ? void 0 : _props$args$slug$vali3.min) !== null && _props$args$slug$vali !== void 0 ? _props$args$slug$vali : 1, (_props$args$slug$vali4 = (_props$args$slug2 = props.args.slug) === null || _props$args$slug2 === void 0 ? void 0 : (_props$args$slug2$val = _props$args$slug2.validation) === null || _props$args$slug2$val === void 0 ? void 0 : (_props$args$slug2$val2 = _props$args$slug2$val.length) === null || _props$args$slug2$val2 === void 0 ? void 0 : _props$args$slug2$val2.max) !== null && _props$args$slug$vali4 !== void 0 ? _props$args$slug$vali4 : Infinity, (_props$args$slug$labe = (_props$args$slug3 = props.args.slug) === null || _props$args$slug3 === void 0 ? void 0 : _props$args$slug3.label) !== null && _props$args$slug$labe !== void 0 ? _props$args$slug$labe : 'Slug', slugInfo) : undefined;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_1__/* .Flex */ .kC, {
    gap: "xlarge",
    direction: "column",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_2__/* .TextField */ .nv, {
      label: props.args.name.label,
      description: props.args.name.description,
      autoFocus: props.autoFocus,
      value: props.value.name,
      onChange: name => {
        props.onChange({
          name,
          slug: shouldGenerateSlug ? generateSlug(name) : props.value.slug
        });
      },
      onBlur: () => setBlurredName(true),
      errorMessage: props.forceValidation || blurredName ? (0,_index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_5__.v)(props.value.name, (_props$args$name$vali = (_props$args$name$vali2 = props.args.name.validation) === null || _props$args$name$vali2 === void 0 ? void 0 : (_props$args$name$vali3 = _props$args$name$vali2.length) === null || _props$args$name$vali3 === void 0 ? void 0 : _props$args$name$vali3.min) !== null && _props$args$name$vali !== void 0 ? _props$args$name$vali : 0, (_props$args$name$vali4 = (_props$args$name$vali5 = props.args.name.validation) === null || _props$args$name$vali5 === void 0 ? void 0 : (_props$args$name$vali6 = _props$args$name$vali5.length) === null || _props$args$name$vali6 === void 0 ? void 0 : _props$args$name$vali6.max) !== null && _props$args$name$vali4 !== void 0 ? _props$args$name$vali4 : Infinity, props.args.name.label, undefined) : undefined
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_1__/* .Flex */ .kC, {
      gap: "regular",
      alignItems: "end",
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_2__/* .TextField */ .nv, {
        flex: 1,
        label: (_props$args$slug$labe2 = (_props$args$slug4 = props.args.slug) === null || _props$args$slug4 === void 0 ? void 0 : _props$args$slug4.label) !== null && _props$args$slug$labe2 !== void 0 ? _props$args$slug$labe2 : 'Slug',
        description: (_props$args$slug5 = props.args.slug) === null || _props$args$slug5 === void 0 ? void 0 : _props$args$slug5.description,
        value: props.value.slug,
        onChange: slug => {
          setShouldGenerateSlug(false);
          props.onChange({
            name: props.value.name,
            slug
          });
        },
        onBlur: () => setBlurredSlug(true),
        errorMessage: slugErrorMessage
      }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_1__/* .Flex */ .kC, {
        gap: "regular",
        direction: "column",
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
          onPress: () => {
            props.onChange({
              name: props.value.name,
              slug: generateSlug(props.value.name)
            });
          },
          children: "Regenerate"
        }), slugErrorMessage !== undefined && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_1__/* .Box */ .xu, {
          height: "element.xsmall"
        })]
      })]
    })]
  });
}




/***/ }),

/***/ 21040:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   i: () => (/* binding */ UrlFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(71209);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index_b64ae589_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(96560);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(33531);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(19047);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(21040);
'use client';










function UrlFieldInput(props) {
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(() => true, false);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_0__/* .TextField */ .nv, {
    width: "auto",
    maxWidth: "scale.6000",
    label: props.label,
    description: props.description,
    autoFocus: props.autoFocus,
    value: props.value === null ? '' : props.value,
    onChange: val => {
      props.onChange(val === '' ? null : val);
    },
    onBlur: onBlur,
    errorMessage: props.forceValidation || blurred ? (0,_index_b64ae589_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(props.validation, props.value, props.label) : undefined
  });
}




/***/ }),

/***/ 67956:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   d: () => (/* binding */ DocumentFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(60137);
/* harmony import */ var _index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92603);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(46105);
/* harmony import */ var is_hotkey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(42950);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(46792);
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(26544);
/* harmony import */ var _keystar_ui_icon_icons_externalLinkIcon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(69804);
/* harmony import */ var _keystar_ui_icon_icons_linkIcon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(38758);
/* harmony import */ var _keystar_ui_icon_icons_unlinkIcon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(66333);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(71209);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(74404);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(79798);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(97712);
/* harmony import */ var _index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(46824);
/* harmony import */ var _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(62598);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(86522);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(32236);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(85916);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(45533);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(92900);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(30422);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(63815);
/* harmony import */ var _ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(67956);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(48727);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(99634);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(33531);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(19047);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(69034);
/* harmony import */ var _keystar_ui_icon_icons_boldIcon__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(60485);
/* harmony import */ var _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(47467);
/* harmony import */ var _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(75434);
/* harmony import */ var _keystar_ui_icon_icons_italicIcon__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(41653);
/* harmony import */ var _keystar_ui_icon_icons_maximizeIcon__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(99071);
/* harmony import */ var _keystar_ui_icon_icons_minimizeIcon__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(76361);
/* harmony import */ var _keystar_ui_icon_icons_plusIcon__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(28273);
/* harmony import */ var _keystar_ui_icon_icons_removeFormattingIcon__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(95778);
/* harmony import */ var _keystar_ui_icon_icons_strikethroughIcon__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(51193);
/* harmony import */ var _keystar_ui_icon_icons_subscriptIcon__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(4030);
/* harmony import */ var _keystar_ui_icon_icons_superscriptIcon__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(63833);
/* harmony import */ var _keystar_ui_icon_icons_typeIcon__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(50839);
/* harmony import */ var _keystar_ui_icon_icons_underlineIcon__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(28315);
/* harmony import */ var _keystar_ui_menu__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(42188);
/* harmony import */ var _keystar_ui_picker__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(21991);
/* harmony import */ var _keystar_ui_icon_icons_alignLeftIcon__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(29031);
/* harmony import */ var _keystar_ui_icon_icons_alignRightIcon__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(23708);
/* harmony import */ var _keystar_ui_icon_icons_alignCenterIcon__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(43453);
/* harmony import */ var _keystar_ui_icon_icons_quoteIcon__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(83157);
/* harmony import */ var match_sorter__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(11868);
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(16817);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(51227);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(62880);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(6027);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(85578);
/* harmony import */ var _keystar_ui_icon_icons_trashIcon__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(29980);
/* harmony import */ var _keystar_ui_icon_icons_minusIcon__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(77153);
/* harmony import */ var _keystar_ui_icon_icons_columnsIcon__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(63620);
/* harmony import */ var _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(93934);
/* harmony import */ var _keystar_ui_icon_icons_listOrderedIcon__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(19463);
/* harmony import */ var _keystar_ui_icon_icons_fileUpIcon__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(22992);
/* harmony import */ var _keystar_ui_icon_icons_imageIcon__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(56573);
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(85501);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(11592);
/* harmony import */ var _ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(83002);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(99034);
/* harmony import */ var _ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(10772);
/* harmony import */ var _ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(74659);
/* harmony import */ var _ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(3112);
/* harmony import */ var _ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(66855);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(34903);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79___default = /*#__PURE__*/__webpack_require__.n(_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__);
/* harmony import */ var _ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(16293);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(21040);
/* harmony import */ var _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(96949);
/* harmony import */ var _keystar_ui_icon_icons_sheetIcon__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(55219);
/* harmony import */ var _keystar_ui_icon_icons_tableIcon__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(80479);
/* harmony import */ var _keystar_ui_utils__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(47187);
/* harmony import */ var _keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(66805);
/* harmony import */ var _keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(52743);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(27733);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88___default = /*#__PURE__*/__webpack_require__.n(mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__);
/* harmony import */ var mdast_util_gfm_autolink_literal_from_markdown__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(81411);
/* harmony import */ var micromark_extension_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(45518);
/* harmony import */ var mdast_util_gfm_strikethrough_from_markdown__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(71504);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(26567);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92___default = /*#__PURE__*/__webpack_require__.n(micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__);
'use client';












































































































let i = 0;
function newKey() {
  return i++;
}
function DocumentFieldInput(props) {
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(() => ({
    key: newKey(),
    value: props.value
  }));
  if (state.value !== props.value) {
    setState({
      key: newKey(),
      value: props.value
    });
  }
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_0__/* .FieldPrimitive */ .rt, {
    label: props.label,
    description: props.description,
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.D, {
      componentBlocks: props.componentBlocks,
      documentFeatures: props.documentFeatures,
      onChange: val => {
        setState(state => ({
          key: state.key,
          value: val
        }));
        props.onChange(val);
      },
      value: state.value
    }, state.key)
  });
}




/***/ }),

/***/ 74659:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   V: () => (/* binding */ PathReferenceInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16817);
/* harmony import */ var minimatch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(29736);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _data_27b10ed2_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(39106);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ts_gql_tag_no_transform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(76772);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(45533);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(85916);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var cookie__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(496);
'use client';















function PathReferenceInput(props) {
  var _props$validation;
  const match = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => props.pattern ? (0,minimatch__WEBPACK_IMPORTED_MODULE_1__/* .filter */ .hX)(props.pattern) : () => true, [props.pattern]);
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useReducer)(() => true, false);
  const tree = (0,_data_27b10ed2_node_esm_js__WEBPACK_IMPORTED_MODULE_3__.e)().current;
  const options = (0,react__WEBPACK_IMPORTED_MODULE_2__.useMemo)(() => {
    const files = tree.kind === 'loaded' ? [...tree.data.entries.values()] : [];
    return files.filter(val => match(val.path));
  }, [tree, match]);
  const _errorMessage = (props.forceValidation || blurred) && (_props$validation = props.validation) !== null && _props$validation !== void 0 && _props$validation.isRequired && props.value === null ? `${props.label} is required` : undefined;
  // this state & effect shouldn't really exist
  // it's here because react-aria/stately calls onSelectionChange with null
  // after selecting an item if we immediately remove the error message
  // so we delay it with an effect
  const [errorMessage, setErrorMessage] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(_errorMessage);
  (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(() => {
    setErrorMessage(_errorMessage);
  }, [_errorMessage]);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_0__/* .Combobox */ .hQ, {
    label: props.label,
    description: props.description,
    selectedKey: props.value,
    onSelectionChange: key => {
      if (typeof key === 'string' || key === null) {
        props.onChange(key);
      }
    },
    onBlur: onBlur,
    errorMessage: errorMessage,
    autoFocus: props.autoFocus,
    defaultItems: options,
    width: "auto",
    children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_0__/* .Item */ .ck, {
      children: item.path
    }, item.path)
  });
}




/***/ }),

/***/ 92900:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Sd: () => (/* binding */ ImageFieldInput),
/* harmony export */   qA: () => (/* binding */ useObjectURL),
/* harmony export */   tH: () => (/* binding */ getUploadedImage),
/* harmony export */   wR: () => (/* binding */ getUploadedFile)
/* harmony export */ });
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(46792);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(71209);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79798);
/* harmony import */ var _index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(92603);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(46105);
/* harmony import */ var is_hotkey__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(42950);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(26544);
/* harmony import */ var _keystar_ui_icon_icons_externalLinkIcon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(69804);
/* harmony import */ var _keystar_ui_icon_icons_linkIcon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(38758);
/* harmony import */ var _keystar_ui_icon_icons_unlinkIcon__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(66333);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(74404);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(97712);
/* harmony import */ var _index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(46824);
/* harmony import */ var _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(62598);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(86522);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(32236);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(85916);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(45533);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(92900);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(30422);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(63815);
/* harmony import */ var _ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(67956);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(48727);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(99634);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(33531);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(19047);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(69034);
/* harmony import */ var _keystar_ui_icon_icons_boldIcon__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(60485);
/* harmony import */ var _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(47467);
/* harmony import */ var _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(75434);
/* harmony import */ var _keystar_ui_icon_icons_italicIcon__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(41653);
/* harmony import */ var _keystar_ui_icon_icons_maximizeIcon__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(99071);
/* harmony import */ var _keystar_ui_icon_icons_minimizeIcon__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(76361);
/* harmony import */ var _keystar_ui_icon_icons_plusIcon__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(28273);
/* harmony import */ var _keystar_ui_icon_icons_removeFormattingIcon__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(95778);
/* harmony import */ var _keystar_ui_icon_icons_strikethroughIcon__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(51193);
/* harmony import */ var _keystar_ui_icon_icons_subscriptIcon__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(4030);
/* harmony import */ var _keystar_ui_icon_icons_superscriptIcon__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(63833);
/* harmony import */ var _keystar_ui_icon_icons_typeIcon__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(50839);
/* harmony import */ var _keystar_ui_icon_icons_underlineIcon__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(28315);
/* harmony import */ var _keystar_ui_menu__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(42188);
/* harmony import */ var _keystar_ui_picker__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(21991);
/* harmony import */ var _keystar_ui_icon_icons_alignLeftIcon__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(29031);
/* harmony import */ var _keystar_ui_icon_icons_alignRightIcon__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(23708);
/* harmony import */ var _keystar_ui_icon_icons_alignCenterIcon__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(43453);
/* harmony import */ var _keystar_ui_icon_icons_quoteIcon__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(83157);
/* harmony import */ var match_sorter__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(11868);
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(16817);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(51227);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(62880);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(6027);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(85578);
/* harmony import */ var _keystar_ui_icon_icons_trashIcon__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(29980);
/* harmony import */ var _keystar_ui_icon_icons_minusIcon__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(77153);
/* harmony import */ var _keystar_ui_icon_icons_columnsIcon__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(63620);
/* harmony import */ var _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(93934);
/* harmony import */ var _keystar_ui_icon_icons_listOrderedIcon__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(19463);
/* harmony import */ var _keystar_ui_icon_icons_fileUpIcon__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(22992);
/* harmony import */ var _keystar_ui_icon_icons_imageIcon__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(56573);
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(85501);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(11592);
/* harmony import */ var _ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(83002);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(99034);
/* harmony import */ var _ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(10772);
/* harmony import */ var _ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(74659);
/* harmony import */ var _ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(3112);
/* harmony import */ var _ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(66855);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(34903);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79___default = /*#__PURE__*/__webpack_require__.n(_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__);
/* harmony import */ var _ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(16293);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(21040);
/* harmony import */ var _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(96949);
/* harmony import */ var _keystar_ui_icon_icons_sheetIcon__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(55219);
/* harmony import */ var _keystar_ui_icon_icons_tableIcon__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(80479);
/* harmony import */ var _keystar_ui_utils__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(47187);
/* harmony import */ var _keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(66805);
/* harmony import */ var _keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(52743);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(27733);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88___default = /*#__PURE__*/__webpack_require__.n(mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__);
/* harmony import */ var mdast_util_gfm_autolink_literal_from_markdown__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(81411);
/* harmony import */ var micromark_extension_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(45518);
/* harmony import */ var mdast_util_gfm_strikethrough_from_markdown__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(71504);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(26567);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92___default = /*#__PURE__*/__webpack_require__.n(micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__);
'use client';












































































































function getUploadedFile(accept) {
  return new Promise(resolve => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = accept;
    let didChange = false;
    input.onchange = () => {
      var _input$files;
      didChange = true;
      const file = (_input$files = input.files) === null || _input$files === void 0 ? void 0 : _input$files[0];
      if (file) {
        file.arrayBuffer().then(buffer => {
          resolve({
            content: new Uint8Array(buffer),
            filename: file.name
          });
        });
      }
    };
    const cancelDetector = () => {
      window.removeEventListener('focus', cancelDetector);
      setTimeout(() => {
        var _input$files2;
        if (((_input$files2 = input.files) === null || _input$files2 === void 0 ? void 0 : _input$files2.length) === 0 && !didChange) {
          resolve(undefined);
        }
      }, 500);
      if ([...document.body.childNodes].includes(input)) {
        document.body.removeChild(input);
      }
    };
    input.addEventListener('click', () => {
      window.addEventListener('focus', cancelDetector, true);
    });
    document.body.appendChild(input);
    input.click();
  });
}
function getUploadedImage() {
  return getUploadedFile('image/*');
}
function useObjectURL(data) {
  const [url, setUrl] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useState)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_7__.useEffect)(() => {
    if (data) {
      const url = URL.createObjectURL(new Blob([data]));
      setUrl(url);
      return () => URL.revokeObjectURL(url);
    } else {
      setUrl(null);
    }
  }, [data]);
  return url;
}

// TODO: button labels ("Choose file", "Remove") need i18n support
function ImageFieldInput(props) {
  var _props$validation;
  const {
    value
  } = props;
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_7__.useReducer)(() => true, false);
  const isInEditor = (0,_index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_6__.u)();
  const objectUrl = useObjectURL(value === null ? null : value.data);
  const labelId = (0,react__WEBPACK_IMPORTED_MODULE_7__.useId)();
  const descriptionId = (0,react__WEBPACK_IMPORTED_MODULE_7__.useId)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__/* .Flex */ .kC, {
    "aria-describedby": props.description ? descriptionId : undefined,
    "aria-labelledby": labelId,
    direction: "column",
    gap: "medium",
    role: "group",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__/* .FieldLabel */ .Qy, {
      id: labelId,
      elementType: "span",
      children: props.label
    }), props.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__.Text, {
      size: "small",
      color: "neutralSecondary",
      id: descriptionId,
      children: props.description
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ButtonGroup */ .hE, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
        onPress: async () => {
          const image = await getUploadedImage();
          if (image) {
            var _image$filename$match;
            const extension = (_image$filename$match = image.filename.match(/\.([^.]+$)/)) === null || _image$filename$match === void 0 ? void 0 : _image$filename$match[1];
            if (extension) {
              props.onChange({
                data: image.content,
                extension,
                filename: image.filename
              });
            }
          }
        },
        children: "Choose file"
      }), value !== null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
        prominence: "low",
        onPress: () => {
          props.onChange(null);
          onBlur();
        },
        children: "Remove"
      })]
    }), objectUrl && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__/* .Box */ .xu, {
      alignSelf: "start",
      backgroundColor: "canvas",
      borderRadius: "regular",
      border: "neutral",
      padding: "regular",
      children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)("img", {
        src: objectUrl,
        alt: "",
        style: {
          display: 'block',
          maxHeight: _keystar_ui_style__WEBPACK_IMPORTED_MODULE_3__/* .tokenSchema */ .iK.size.alias.singleLineWidth,
          maxWidth: '100%'
        }
      })
    }), isInEditor && value !== null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_4__/* .TextField */ .nv, {
      label: "Filename",
      onChange: filename => {
        props.onChange({
          ...value,
          filename
        });
      },
      value: value.filename
    }), (props.forceValidation || blurred) && ((_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired) && value === null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__/* .FieldMessage */ .nd, {
      children: [props.label, " is required"]
    })]
  });
}




/***/ }),

/***/ 66855:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   W: () => (/* binding */ SelectFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_picker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21991);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);
'use client';



function SelectFieldInput(props) {
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_keystar_ui_picker__WEBPACK_IMPORTED_MODULE_0__/* .Picker */ .cW, {
    label: props.label,
    description: props.description,
    items: props.options,
    selectedKey: props.value,
    onSelectionChange: key => {
      props.onChange(key);
    },
    autoFocus: props.autoFocus,
    children: item => /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_keystar_ui_picker__WEBPACK_IMPORTED_MODULE_0__/* .Item */ .ck, {
      children: item.label
    }, item.value)
  });
}




/***/ }),

/***/ 18061:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   v: () => (/* binding */ ObjectFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9772);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(85916);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62880);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(63815);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(79798);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(51227);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(6027);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(74404);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(32236);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(97712);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(45533);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(85578);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(46792);
'use client';






























function ObjectFieldInput(_ref) {
  let {
    schema,
    autoFocus,
    fields,
    forceValidation
  } = _ref;
  const firstFocusable = autoFocus ? findFocusableObjectFieldKey(schema) : undefined;
  const inner = /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_0__/* .Flex */ .kC, {
    gap: "xlarge",
    direction: "column",
    children: Object.entries(fields).map(_ref2 => {
      let [key, propVal] = _ref2;
      return (0,_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.i)(propVal) && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_3__/* .AddToPathProvider */ .i1, {
        part: key,
        children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.I, {
          forceValidation: forceValidation,
          autoFocus: key === firstFocusable,
          ...propVal
        })
      }, key);
    })
  });
  const id = (0,react__WEBPACK_IMPORTED_MODULE_4__.useId)();
  if (!schema.label) {
    return inner;
  }
  const labelId = `${id}-label`;
  const descriptionId = `${id}-description`;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_0__/* .Flex */ .kC, {
    role: "group",
    gap: "medium",
    marginY: "large",
    "aria-labelledby": labelId,
    "aria-describedby": schema.description ? descriptionId : undefined,
    direction: "column",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__.Text, {
      color: "neutral",
      size: "medium",
      weight: "medium",
      id: labelId,
      children: schema.label
    }), !!schema.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_5__.Text, {
      id: descriptionId,
      size: "regular",
      color: "neutralSecondary",
      children: schema.description
    }), inner]
  });
}
function findFocusableObjectFieldKey(schema) {
  for (const [key, innerProp] of Object.entries(schema.fields)) {
    const childFocusable = canFieldBeFocused(innerProp);
    if (childFocusable) {
      return key;
    }
  }
  return undefined;
}
function canFieldBeFocused(schema) {
  if (schema.kind === 'array' || schema.kind === 'conditional' || schema.kind === 'form') {
    return true;
  }
  if (schema.kind === 'child') {
    return false;
  }
  if (schema.kind === 'object') {
    for (const innerProp of Object.values(schema.fields)) {
      if (canFieldBeFocused(innerProp)) {
        return true;
      }
    }
    return false;
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_1__.assertNever)(schema);
}




/***/ }),

/***/ 99034:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ IntegerFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_number_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(34966);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _index_118cbd18_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(836);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99034);
'use client';








function IntegerFieldInput(props) {
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(() => true, false);
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_keystar_ui_number_field__WEBPACK_IMPORTED_MODULE_0__/* .NumberField */ .K, {
    label: props.label,
    description: props.description,
    errorMessage: props.forceValidation || blurred ? (0,_index_118cbd18_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.v)(props.validation, props.value, props.label) : undefined,
    onBlur: onBlur,
    autoFocus: props.autoFocus,
    value: props.value === null ? undefined : props.value,
    onChange: val => {
      props.onChange(val === undefined ? null : val);
    }
  });
}




/***/ }),

/***/ 83002:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   n: () => (/* binding */ FileFieldInput)
/* harmony export */ });
/* harmony import */ var _keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(84371);
/* harmony import */ var _keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(60137);
/* harmony import */ var _keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9772);
/* harmony import */ var _keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71209);
/* harmony import */ var _keystar_ui_typography__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(79798);
/* harmony import */ var _index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(92603);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(92900);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(56786);
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _prism_3a8814e8_node_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(46105);
/* harmony import */ var is_hotkey__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(42950);
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(46792);
/* harmony import */ var _keystar_ui_dialog__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(70156);
/* harmony import */ var _keystar_ui_icon__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(828);
/* harmony import */ var _keystar_ui_icon_icons_editIcon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(26544);
/* harmony import */ var _keystar_ui_icon_icons_externalLinkIcon__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(69804);
/* harmony import */ var _keystar_ui_icon_icons_linkIcon__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(38758);
/* harmony import */ var _keystar_ui_icon_icons_unlinkIcon__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(66333);
/* harmony import */ var _keystar_ui_slots__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(71819);
/* harmony import */ var _keystar_ui_tooltip__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(74404);
/* harmony import */ var _index_2098f6c1_node_esm_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(97712);
/* harmony import */ var _index_5b109eb9_node_esm_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(46824);
/* harmony import */ var _index_a1f86d7d_node_esm_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(62598);
/* harmony import */ var emery_assertions__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(86522);
/* harmony import */ var _initial_values_7069614f_node_esm_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(32236);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(85916);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(45533);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var _index_9164e4cf_node_esm_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(30422);
/* harmony import */ var _ui_37be050c_node_esm_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(63815);
/* harmony import */ var _ui_a02dcde7_node_esm_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(67956);
/* harmony import */ var _utils_6a6b1fd6_node_esm_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(48727);
/* harmony import */ var _languages_7e3ec82d_node_esm_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(99634);
/* harmony import */ var _isValidURL_33b3b8f1_node_esm_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(33531);
/* harmony import */ var _braintree_sanitize_url__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(19047);
/* harmony import */ var _ui_utils_11a4fc47_node_esm_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(13005);
/* harmony import */ var _keystar_ui_action_group__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(69034);
/* harmony import */ var _keystar_ui_icon_icons_boldIcon__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(60485);
/* harmony import */ var _keystar_ui_icon_icons_chevronDownIcon__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(47467);
/* harmony import */ var _keystar_ui_icon_icons_codeIcon__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(75434);
/* harmony import */ var _keystar_ui_icon_icons_italicIcon__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(41653);
/* harmony import */ var _keystar_ui_icon_icons_maximizeIcon__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(99071);
/* harmony import */ var _keystar_ui_icon_icons_minimizeIcon__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(76361);
/* harmony import */ var _keystar_ui_icon_icons_plusIcon__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(28273);
/* harmony import */ var _keystar_ui_icon_icons_removeFormattingIcon__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(95778);
/* harmony import */ var _keystar_ui_icon_icons_strikethroughIcon__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(51193);
/* harmony import */ var _keystar_ui_icon_icons_subscriptIcon__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(4030);
/* harmony import */ var _keystar_ui_icon_icons_superscriptIcon__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(63833);
/* harmony import */ var _keystar_ui_icon_icons_typeIcon__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(50839);
/* harmony import */ var _keystar_ui_icon_icons_underlineIcon__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(28315);
/* harmony import */ var _keystar_ui_menu__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(42188);
/* harmony import */ var _keystar_ui_picker__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(21991);
/* harmony import */ var _keystar_ui_icon_icons_alignLeftIcon__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(29031);
/* harmony import */ var _keystar_ui_icon_icons_alignRightIcon__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(23708);
/* harmony import */ var _keystar_ui_icon_icons_alignCenterIcon__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(43453);
/* harmony import */ var _keystar_ui_icon_icons_quoteIcon__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(83157);
/* harmony import */ var match_sorter__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(11868);
/* harmony import */ var _keystar_ui_combobox__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(16817);
/* harmony import */ var _keystar_ui_icon_icons_trash2Icon__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(51227);
/* harmony import */ var _form_from_preview_c6d22994_node_esm_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(62880);
/* harmony import */ var _ui_e5ca793d_node_esm_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(18061);
/* harmony import */ var _keystar_ui_drag_and_drop__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(63138);
/* harmony import */ var _keystar_ui_list_view__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(6027);
/* harmony import */ var _errors_e500af35_node_esm_js__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(85578);
/* harmony import */ var _keystar_ui_icon_icons_trashIcon__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(29980);
/* harmony import */ var _keystar_ui_icon_icons_minusIcon__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(77153);
/* harmony import */ var _keystar_ui_icon_icons_columnsIcon__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(63620);
/* harmony import */ var _keystar_ui_icon_icons_listIcon__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(93934);
/* harmony import */ var _keystar_ui_icon_icons_listOrderedIcon__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(19463);
/* harmony import */ var _keystar_ui_icon_icons_fileUpIcon__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(22992);
/* harmony import */ var _keystar_ui_icon_icons_imageIcon__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(56573);
/* harmony import */ var _keystar_ui_checkbox__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(85501);
/* harmony import */ var _ui_505d5440_node_esm_js__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(11592);
/* harmony import */ var _ui_fabdbcda_node_esm_js__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(83002);
/* harmony import */ var _ui_ef5f825b_node_esm_js__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(99034);
/* harmony import */ var _ui_045cfd63_node_esm_js__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(10772);
/* harmony import */ var _ui_b238173f_node_esm_js__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(74659);
/* harmony import */ var _ui_2518a09d_node_esm_js__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(3112);
/* harmony import */ var _ui_de41af65_node_esm_js__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(66855);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(34903);
/* harmony import */ var _sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79___default = /*#__PURE__*/__webpack_require__.n(_sindresorhus_slugify__WEBPACK_IMPORTED_MODULE_79__);
/* harmony import */ var _ui_5bded06a_node_esm_js__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(16293);
/* harmony import */ var _ui_8015395f_node_esm_js__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(21040);
/* harmony import */ var _ui_56fd1352_node_esm_js__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(96949);
/* harmony import */ var _keystar_ui_icon_icons_sheetIcon__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(55219);
/* harmony import */ var _keystar_ui_icon_icons_tableIcon__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(80479);
/* harmony import */ var _keystar_ui_utils__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(47187);
/* harmony import */ var _keystar_ui_listbox__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(66805);
/* harmony import */ var _keystar_ui_overlays__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(52743);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(27733);
/* harmony import */ var mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88___default = /*#__PURE__*/__webpack_require__.n(mdast_util_from_markdown__WEBPACK_IMPORTED_MODULE_88__);
/* harmony import */ var mdast_util_gfm_autolink_literal_from_markdown__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(81411);
/* harmony import */ var micromark_extension_gfm_autolink_literal__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(45518);
/* harmony import */ var mdast_util_gfm_strikethrough_from_markdown__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(71504);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(26567);
/* harmony import */ var micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92___default = /*#__PURE__*/__webpack_require__.n(micromark_extension_gfm_strikethrough__WEBPACK_IMPORTED_MODULE_92__);
'use client';












































































































function FileFieldInput(props) {
  var _props$validation;
  const {
    value
  } = props;
  const [blurred, onBlur] = (0,react__WEBPACK_IMPORTED_MODULE_6__.useReducer)(() => true, false);
  const isInEditor = (0,_index_90416c2b_node_esm_js__WEBPACK_IMPORTED_MODULE_5__.u)();
  const objectUrl = (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_7__/* .useObjectURL */ .qA)(value === null ? null : value.data);
  const labelId = (0,react__WEBPACK_IMPORTED_MODULE_6__.useId)();
  const descriptionId = (0,react__WEBPACK_IMPORTED_MODULE_6__.useId)();
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_layout__WEBPACK_IMPORTED_MODULE_2__/* .Flex */ .kC, {
    "aria-describedby": props.description ? descriptionId : undefined,
    "aria-labelledby": labelId,
    direction: "column",
    gap: "medium",
    role: "group",
    children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__/* .FieldLabel */ .Qy, {
      id: labelId,
      elementType: "span",
      children: props.label
    }), props.description && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_typography__WEBPACK_IMPORTED_MODULE_4__.Text, {
      size: "small",
      color: "neutralSecondary",
      id: descriptionId,
      children: props.description
    }), /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ButtonGroup */ .hE, {
      children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
        onPress: async () => {
          const file = await (0,_ui_d53317b9_node_esm_js__WEBPACK_IMPORTED_MODULE_7__/* .getUploadedFile */ .wR)('');
          if (file) {
            var _file$filename$match$, _file$filename$match;
            props.onChange({
              data: file.content,
              filename: file.filename,
              extension: (_file$filename$match$ = (_file$filename$match = file.filename.match(/\.([^.]+$)/)) === null || _file$filename$match === void 0 ? void 0 : _file$filename$match[1]) !== null && _file$filename$match$ !== void 0 ? _file$filename$match$ : ''
            });
          }
        },
        children: "Choose file"
      }), value !== null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.Fragment, {
        children: [/*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .ActionButton */ .Kk, {
          prominence: "low",
          onPress: () => {
            props.onChange(null);
            onBlur();
          },
          children: "Remove"
        }), objectUrl && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_button__WEBPACK_IMPORTED_MODULE_0__/* .Button */ .zx, {
          href: objectUrl,
          download: value.filename,
          prominence: "low",
          children: "Download"
        })]
      })]
    }), isInEditor && value !== null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_keystar_ui_text_field__WEBPACK_IMPORTED_MODULE_3__/* .TextField */ .nv, {
      label: "Filename",
      onChange: filename => {
        props.onChange({
          ...value,
          filename
        });
      },
      value: value.filename
    }), (props.forceValidation || blurred) && ((_props$validation = props.validation) === null || _props$validation === void 0 ? void 0 : _props$validation.isRequired) && value === null && /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_keystar_ui_field__WEBPACK_IMPORTED_MODULE_1__/* .FieldMessage */ .nd, {
      children: [props.label, " is required"]
    })]
  });
}




/***/ }),

/***/ 13005:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ useElementWithSetNodes),
/* harmony export */   b: () => (/* binding */ blockElementSpacing),
/* harmony export */   f: () => (/* binding */ focusWithPreviousSelection),
/* harmony export */   i: () => (/* binding */ insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading),
/* harmony export */   u: () => (/* binding */ useEventCallback)
/* harmony export */ });
/* harmony import */ var _keystar_ui_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46792);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(91526);
/* harmony import */ var slate_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68051);





function focusWithPreviousSelection(editor) {
  const selection = window.getSelection();
  if (selection) {
    selection.removeAllRanges();
    selection.addRange(slate_react__WEBPACK_IMPORTED_MODULE_2__/* .ReactEditor */ .F3.toDOMRange(editor, editor.selection));
  }
  slate_react__WEBPACK_IMPORTED_MODULE_2__/* .ReactEditor */ .F3.focus(editor);
}
const blockElementSpacing = (0,_keystar_ui_style__WEBPACK_IMPORTED_MODULE_0__/* .css */ .iv)({
  marginBlock: '1em',
  '&:first-child': {
    marginBlockStart: 0
  },
  '&:last-child': {
    marginBlockEnd: 0
  }
});
const ForceValidationContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_1___default().createContext(false);
ForceValidationContext.Provider;

// this ensures that when changes happen, they are immediately shown
// this stops the problem of a cursor resetting to the end when a change is made
// because the changes are applied asynchronously
function useElementWithSetNodes(editor, element) {
  const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({
    element,
    elementWithChanges: element
  });
  if (state.element !== element) {
    setState({
      element,
      elementWithChanges: element
    });
  }
  const elementRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(element);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    elementRef.current = element;
  });
  const setNodes = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(changesOrCallback => {
    const currentElement = elementRef.current;
    const changes = typeof changesOrCallback === 'function' ? changesOrCallback(currentElement) : changesOrCallback;
    slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.setNodes(editor, changes, {
      at: slate_react__WEBPACK_IMPORTED_MODULE_2__/* .ReactEditor */ .F3.findPath(editor, currentElement)
    });
    setState({
      element: currentElement,
      elementWithChanges: {
        ...currentElement,
        ...changes
      }
    });
  }, [editor]);
  return [state.elementWithChanges, setNodes];
}
function useEventCallback(callback) {
  const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(callback);
  const cb = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(function () {
    return callbackRef.current(...arguments);
  }, []);
  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(() => {
    callbackRef.current = callback;
  });
  return cb;
}
function insertNodesButReplaceIfSelectionIsAtEmptyParagraphOrHeading(editor, nodes) {
  var _pathRefForEmptyNodeA;
  let pathRefForEmptyNodeAtCursor;
  const entry = slate__WEBPACK_IMPORTED_MODULE_3__.Editor.above(editor, {
    match: node => node.type === 'heading' || node.type === 'paragraph'
  });
  if (entry && slate__WEBPACK_IMPORTED_MODULE_3__.Node.string(entry[0]) === '') {
    pathRefForEmptyNodeAtCursor = slate__WEBPACK_IMPORTED_MODULE_3__.Editor.pathRef(editor, entry[1]);
  }
  slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.insertNodes(editor, nodes);
  let path = (_pathRefForEmptyNodeA = pathRefForEmptyNodeAtCursor) === null || _pathRefForEmptyNodeA === void 0 ? void 0 : _pathRefForEmptyNodeA.unref();
  if (path) {
    slate__WEBPACK_IMPORTED_MODULE_3__.Transforms.removeNodes(editor, {
      at: path
    });
    // even though the selection is in the right place after the removeNodes
    // for some reason the editor blurs so we need to focus it again
    slate_react__WEBPACK_IMPORTED_MODULE_2__/* .ReactEditor */ .F3.focus(editor);
  }
}




/***/ }),

/***/ 90567:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   C: () => (/* binding */ ConfigContext),
/* harmony export */   a: () => (/* binding */ useSlugsInCollection),
/* harmony export */   u: () => (/* binding */ useConfig)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18038);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _data_27b10ed2_node_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39106);
/* harmony import */ var _utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(45533);




const ConfigContext = /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);
function useConfig() {
  const config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConfigContext);
  if (!config) {
    throw new Error('ConfigContext.Provider not found');
  }
  return config;
}

function useSlugsInCollection(collection) {
  const config = useConfig();
  const tree = (0,_data_27b10ed2_node_esm_js__WEBPACK_IMPORTED_MODULE_1__.e)().current;
  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {
    const loadedTree = tree.kind === 'loaded' ? tree.data.tree : new Map();
    return (0,_utils_542a6faa_node_esm_js__WEBPACK_IMPORTED_MODULE_2__.d)(config, collection, loadedTree).map(x => x.slug);
  }, [config, tree, collection]);
}




/***/ }),

/***/ 5804:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ assertRequired),
/* harmony export */   b: () => (/* binding */ basicFormFieldWithSimpleReaderParse)
/* harmony export */ });
/* harmony import */ var _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63998);


function assertRequired(value, validation, label) {
  if (value === null && validation !== null && validation !== void 0 && validation.isRequired) {
    throw new _error_3501f6ae_node_esm_js__WEBPACK_IMPORTED_MODULE_0__.F(`${label} is required`);
  }
}
function basicFormFieldWithSimpleReaderParse(config) {
  return {
    kind: 'form',
    Input: config.Input,
    defaultValue: config.defaultValue,
    parse: config.parse,
    serialize: config.serialize,
    validate: config.validate,
    reader: {
      parse(value) {
        return config.validate(config.parse(value));
      }
    }
  };
}




/***/ }),

/***/ 45533:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ fixPath),
/* harmony export */   B: () => (/* binding */ collectDirectoriesUsedInSchema),
/* harmony export */   K: () => (/* binding */ KEYSTATIC_CLOUD_API_URL),
/* harmony export */   a: () => (/* binding */ isGitHubConfig),
/* harmony export */   b: () => (/* binding */ isLocalConfig),
/* harmony export */   c: () => (/* binding */ getCollectionPath),
/* harmony export */   d: () => (/* binding */ getEntriesInCollectionWithTreeKey),
/* harmony export */   e: () => (/* binding */ getDirectoriesForTreeKey),
/* harmony export */   f: () => (/* binding */ getTreeKey),
/* harmony export */   g: () => (/* binding */ getRepoUrl),
/* harmony export */   h: () => (/* binding */ getTreeNodeAtPath),
/* harmony export */   i: () => (/* binding */ isCloudConfig),
/* harmony export */   j: () => (/* binding */ getEntryDataFilepath),
/* harmony export */   k: () => (/* binding */ blobSha),
/* harmony export */   l: () => (/* binding */ KEYSTATIC_CLOUD_HEADERS),
/* harmony export */   m: () => (/* binding */ getSlugFromState),
/* harmony export */   n: () => (/* binding */ getCollectionFormat),
/* harmony export */   o: () => (/* binding */ object),
/* harmony export */   p: () => (/* binding */ pluralize),
/* harmony export */   q: () => (/* binding */ getSlugGlobForCollection),
/* harmony export */   r: () => (/* binding */ redirectToCloudAuth),
/* harmony export */   s: () => (/* binding */ getCollectionItemPath),
/* harmony export */   t: () => (/* binding */ treeSha),
/* harmony export */   u: () => (/* binding */ updateTreeWithChanges),
/* harmony export */   v: () => (/* binding */ getDataFileExtension),
/* harmony export */   w: () => (/* binding */ keyedEntries),
/* harmony export */   x: () => (/* binding */ getSingletonFormat),
/* harmony export */   y: () => (/* binding */ getSingletonPath),
/* harmony export */   z: () => (/* binding */ treeEntriesToTreeNodes)
/* harmony export */ });
/* unused harmony export C */
/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(222);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85916);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6113);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);




function fixPath(path) {
  return path.replace(/^\.?\/+/, '').replace(/\/*$/, '');
}
const collectionPath = /\/\*\*?(?:$|\/)/;
function getConfiguredCollectionPath(config, collection) {
  var _collectionConfig$pat;
  const collectionConfig = config.collections[collection];
  const path = (_collectionConfig$pat = collectionConfig.path) !== null && _collectionConfig$pat !== void 0 ? _collectionConfig$pat : `${collection}/*/`;
  if (!collectionPath.test(path)) {
    throw new Error(`Collection path must end with /* or /** or include /*/ or /**/ but ${collection} has ${path}`);
  }
  return path;
}
function getCollectionPath(config, collection) {
  const configuredPath = getConfiguredCollectionPath(config, collection);
  const path = fixPath(configuredPath.replace(/\*\*?.*$/, ''));
  return path;
}
function getCollectionFormat(config, collection) {
  var _collectionConfig$for;
  const collectionConfig = config.collections[collection];
  return getFormatInfo((_collectionConfig$for = collectionConfig.format) !== null && _collectionConfig$for !== void 0 ? _collectionConfig$for : 'yaml', collectionConfig.schema, getConfiguredCollectionPath(config, collection));
}
function getSingletonFormat(config, singleton) {
  var _singletonConfig$form, _singletonConfig$path;
  const singletonConfig = config.singletons[singleton];
  return getFormatInfo((_singletonConfig$form = singletonConfig.format) !== null && _singletonConfig$form !== void 0 ? _singletonConfig$form : 'yaml', singletonConfig.schema, (_singletonConfig$path = singletonConfig.path) !== null && _singletonConfig$path !== void 0 ? _singletonConfig$path : `${singleton}/`);
}
function getCollectionItemPath(config, collection, slug) {
  const basePath = getCollectionPath(config, collection);
  const suffix = getCollectionItemSlugSuffix(config, collection);
  return `${basePath}/${slug}${suffix}`;
}
function getEntryDataFilepath(dir, formatInfo) {
  return `${dir}${formatInfo.dataLocation === 'index' ? '/index' : ''}${getDataFileExtension(formatInfo)}`;
}
function getSlugGlobForCollection(config, collection) {
  const collectionPath = getConfiguredCollectionPath(config, collection);
  return collectionPath.includes('**') ? '**' : '*';
}
function getCollectionItemSlugSuffix(config, collection) {
  const configuredPath = getConfiguredCollectionPath(config, collection);
  const path = fixPath(configuredPath.replace(/^[^*]+\*\*?/, ''));
  return path ? `/${path}` : '';
}
function getSingletonPath(config, singleton) {
  var _singleton$path, _singleton$path2;
  if ((_singleton$path = config.singletons[singleton].path) !== null && _singleton$path !== void 0 && _singleton$path.includes('*')) {
    throw new Error(`Singleton paths cannot include * but ${singleton} has ${config.singletons[singleton].path}`);
  }
  return fixPath((_singleton$path2 = config.singletons[singleton].path) !== null && _singleton$path2 !== void 0 ? _singleton$path2 : singleton);
}
function getDataFileExtension(formatInfo) {
  return formatInfo.contentField ? formatInfo.contentField.config.contentExtension : '.' + formatInfo.data;
}
function getFormatInfo(format, schema, path) {
  var _format$data;
  const dataLocation = path.endsWith('/') ? 'index' : 'outer';
  if (typeof format === 'string') {
    return {
      dataLocation,
      contentField: undefined,
      data: format
    };
  }
  let contentField;
  if (format.contentField) {
    const field = schema[format.contentField];
    (0,emery__WEBPACK_IMPORTED_MODULE_0__.assert)((field === null || field === void 0 ? void 0 : field.kind) === 'form', `${format.contentField} is not a form field`);
    (0,emery__WEBPACK_IMPORTED_MODULE_0__.assert)(field.formKind === 'content', `${format.contentField} is not a content field`);
    contentField = {
      key: format.contentField,
      config: field
    };
  }
  return {
    data: (_format$data = format.data) !== null && _format$data !== void 0 ? _format$data : 'yaml',
    contentField,
    dataLocation
  };
}

async function sha1(content) {
  return (0,crypto__WEBPACK_IMPORTED_MODULE_1__.createHash)('sha1').update(content).digest('hex');
}

const textEncoder$1 = new TextEncoder();
function blobSha(contents) {
  const blobPrefix = textEncoder$1.encode('blob ' + contents.length + '\0');
  const array = new Uint8Array(blobPrefix.byteLength + contents.byteLength);
  array.set(blobPrefix, 0);
  array.set(contents, blobPrefix.byteLength);
  return sha1(array);
}
function getTreeNodeAtPath(root, path) {
  const parts = path.split('/');
  let node = root.get(parts[0]);
  for (const part of parts.slice(1)) {
    if (!node) return undefined;
    if (!node.children) return undefined;
    node = node.children.get(part);
  }
  return node;
}
function getNodeAtPath(tree, path) {
  let node = tree;
  for (const part of path.split('/')) {
    if (!node.has(part)) {
      node.set(part, new Map());
    }
    const innerNode = node.get(part);
    (0,emery__WEBPACK_IMPORTED_MODULE_0__.assert)(innerNode instanceof Map, 'expected tree');
    node = innerNode;
  }
  return node;
}
function getFilename(path) {
  return path.replace(/.*\//, '');
}
function getDirname(path) {
  return path.replace(/\/[^/]+$/, '');
}
function toTreeChanges(changes) {
  const changesRoot = new Map();
  for (const deletion of changes.deletions) {
    const parentTree = getNodeAtPath(changesRoot, getDirname(deletion));
    parentTree.set(getFilename(deletion), 'delete');
  }
  for (const addition of changes.additions) {
    const parentTree = getNodeAtPath(changesRoot, getDirname(addition.path));
    parentTree.set(getFilename(addition.path), addition.contents);
  }
  return changesRoot;
}
const SPACE_CHAR_CODE = 32;
const space = new Uint8Array([SPACE_CHAR_CODE]);
const nullchar = new Uint8Array([0]);
const tree = textEncoder$1.encode('tree ');

// based on https://github.com/isomorphic-git/isomorphic-git/blob/c09dfa20ffe0ab9e6602e0fa172d72ba8994e443/src/models/GitTree.js#L108-L122
function treeSha(children) {
  const entries = [...children].map(_ref => {
    let [name, node] = _ref;
    return {
      name,
      sha: node.entry.sha,
      mode: node.entry.mode
    };
  });
  entries.sort((a, b) => {
    const aName = a.mode === '040000' ? a.name + '/' : a.name;
    const bName = b.mode === '040000' ? b.name + '/' : b.name;
    return aName === bName ? 0 : aName < bName ? -1 : 1;
  });
  const treeObject = entries.flatMap(entry => {
    const mode = textEncoder$1.encode(entry.mode.replace(/^0/, ''));
    const name = textEncoder$1.encode(entry.name);
    const sha = hexToBytes(entry.sha);
    return [mode, space, name, nullchar, sha];
  });
  return sha1(concatBytes([tree, textEncoder$1.encode(treeObject.reduce((sum, val) => sum + val.byteLength, 0).toString()), nullchar, ...treeObject]));
}
function concatBytes(byteArrays) {
  const totalLength = byteArrays.reduce((sum, arr) => sum + arr.byteLength, 0);
  const result = new Uint8Array(totalLength);
  let offset = 0;
  for (const arr of byteArrays) {
    result.set(arr, offset);
    offset += arr.byteLength;
  }
  return result;
}
function hexToBytes(str) {
  const bytes = new Uint8Array(str.length / 2);
  for (var i = 0; i < bytes.byteLength; i += 1) {
    const start = i * 2;
    bytes[i] = parseInt(str.slice(start, start + 2), 16);
  }
  return bytes;
}
async function createTreeNodeEntry(path, children) {
  const sha = await treeSha(children);
  return {
    path,
    mode: '040000',
    type: 'tree',
    sha
  };
}
async function createBlobNodeEntry(path, contents) {
  const sha = 'sha' in contents ? contents.sha : await blobSha(contents);
  return {
    path,
    mode: '100644',
    type: 'blob',
    sha,
    size: contents.byteLength
  };
}
async function updateTreeWithChanges(tree, changes) {
  var _await$updateTree;
  const newTree = (_await$updateTree = await updateTree(tree, toTreeChanges(changes), [])) !== null && _await$updateTree !== void 0 ? _await$updateTree : new Map();
  return {
    entries: treeToEntries(newTree),
    sha: await treeSha(newTree !== null && newTree !== void 0 ? newTree : new Map())
  };
}
function treeToEntries(tree) {
  return [...tree.values()].flatMap(x => x.children ? [x.entry, ...treeToEntries(x.children)] : [x.entry]);
}
async function updateTree(tree, changedTree, path) {
  const newTree = new Map(tree);
  for (const [key, value] of changedTree) {
    if (value === 'delete') {
      newTree.delete(key);
    }
    if (value instanceof Map) {
      var _newTree$get$children, _newTree$get;
      const existingChildren = (_newTree$get$children = (_newTree$get = newTree.get(key)) === null || _newTree$get === void 0 ? void 0 : _newTree$get.children) !== null && _newTree$get$children !== void 0 ? _newTree$get$children : new Map();
      const children = await updateTree(existingChildren, value, path.concat(key));
      if (children === undefined) {
        newTree.delete(key);
        continue;
      }
      const entry = await createTreeNodeEntry(path.concat(key).join('/'), children);
      newTree.set(key, {
        entry,
        children
      });
    }
    if (value instanceof Uint8Array || typeof value === 'object' && 'sha' in value) {
      const entry = await createBlobNodeEntry(path.concat(key).join('/'), value);
      newTree.set(key, {
        entry
      });
    }
  }
  if (newTree.size === 0) {
    return undefined;
  }
  return newTree;
}
function treeEntriesToTreeNodes(entries) {
  const root = new Map();
  const getChildrenAtPath = parts => {
    var _node;
    if (parts.length === 0) {
      return root;
    }
    let node = root.get(parts[0]);
    for (const part of parts.slice(1)) {
      if (!node) return undefined;
      if (!node.children) return undefined;
      node = node.children.get(part);
    }
    return (_node = node) === null || _node === void 0 ? void 0 : _node.children;
  };
  for (const entry of entries) {
    const split = entry.path.split('/');
    const children = getChildrenAtPath(split.slice(0, -1));
    if (children) {
      children.set(split[split.length - 1], {
        entry,
        children: entry.type === 'tree' ? new Map() : undefined
      });
    }
  }
  return root;
}

function collectDirectoriesUsedInSchemaInner(schema, directories, seenSchemas) {
  if (seenSchemas.has(schema)) {
    return;
  }
  seenSchemas.add(schema);
  if (schema.kind === 'array') {
    return collectDirectoriesUsedInSchemaInner(schema.element, directories, seenSchemas);
  }
  if (schema.kind === 'child') {
    return;
  }
  if (schema.kind === 'form') {
    if (schema.formKind === 'asset' && schema.directory !== undefined) {
      directories.add(fixPath(schema.directory));
    }
    if (schema.formKind === 'content' && schema.directories !== undefined) {
      for (const directory of schema.directories) {
        directories.add(fixPath(directory));
      }
    }
    return;
  }
  if (schema.kind === 'object') {
    for (const field of Object.values(schema.fields)) {
      collectDirectoriesUsedInSchemaInner(field, directories, seenSchemas);
    }
    return;
  }
  if (schema.kind === 'conditional') {
    for (const innerSchema of Object.values(schema.values)) {
      collectDirectoriesUsedInSchemaInner(innerSchema, directories, seenSchemas);
    }
    return;
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function collectDirectoriesUsedInSchema(schema) {
  const directories = new Set();
  collectDirectoriesUsedInSchemaInner(schema, directories, new Set());
  return directories;
}
function getDirectoriesForTreeKey(schema, directory, slug, format) {
  const directories = [fixPath(directory)];
  if (format.dataLocation === 'outer') {
    directories.push(fixPath(directory) + getDataFileExtension(format));
  }
  const toAdd = slug === undefined ? '' : `/${slug}`;
  for (const directory of collectDirectoriesUsedInSchema(schema)) {
    directories.push(directory + toAdd);
  }
  return directories;
}
function getTreeKey(directories, tree) {
  return directories.map(d => {
    var _getTreeNodeAtPath;
    return (_getTreeNodeAtPath = getTreeNodeAtPath(tree, d)) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.entry.sha;
  }).join('-');
}

var pkgJson = {
	name: "@keystatic/core",
	version: "0.0.111",
	license: "MIT",
	repository: {
		type: "git",
		url: "https://github.com/Thinkmill/keystatic/",
		directory: "packages/keystatic"
	},
	exports: {
		"./ui": {
			types: "./ui/dist/keystatic-core-ui.cjs.js",
			node: {
				"react-server": {
					module: "./ui/dist/keystatic-core-ui.node.react-server.esm.js",
					"default": "./ui/dist/keystatic-core-ui.node.react-server.cjs.js"
				},
				module: "./ui/dist/keystatic-core-ui.node.esm.js",
				"default": "./ui/dist/keystatic-core-ui.node.cjs.js"
			},
			"react-server": {
				module: "./ui/dist/keystatic-core-ui.react-server.esm.js",
				"default": "./ui/dist/keystatic-core-ui.react-server.cjs.js"
			},
			module: "./ui/dist/keystatic-core-ui.esm.js",
			"default": "./ui/dist/keystatic-core-ui.cjs.js"
		},
		".": {
			types: "./dist/keystatic-core.cjs.js",
			node: {
				"react-server": {
					module: "./dist/keystatic-core.node.react-server.esm.js",
					"default": "./dist/keystatic-core.node.react-server.cjs.js"
				},
				module: "./dist/keystatic-core.node.esm.js",
				"default": "./dist/keystatic-core.node.cjs.js"
			},
			"react-server": {
				module: "./dist/keystatic-core.react-server.esm.js",
				"default": "./dist/keystatic-core.react-server.cjs.js"
			},
			module: "./dist/keystatic-core.esm.js",
			"default": "./dist/keystatic-core.cjs.js"
		},
		"./api/utils": {
			types: "./api/utils/dist/keystatic-core-api-utils.cjs.js",
			node: {
				"react-server": {
					module: "./api/utils/dist/keystatic-core-api-utils.node.react-server.esm.js",
					"default": "./api/utils/dist/keystatic-core-api-utils.node.react-server.cjs.js"
				},
				module: "./api/utils/dist/keystatic-core-api-utils.node.esm.js",
				"default": "./api/utils/dist/keystatic-core-api-utils.node.cjs.js"
			},
			"react-server": {
				module: "./api/utils/dist/keystatic-core-api-utils.react-server.esm.js",
				"default": "./api/utils/dist/keystatic-core-api-utils.react-server.cjs.js"
			},
			module: "./api/utils/dist/keystatic-core-api-utils.esm.js",
			"default": "./api/utils/dist/keystatic-core-api-utils.cjs.js"
		},
		"./renderer": {
			types: "./renderer/dist/keystatic-core-renderer.cjs.js",
			node: {
				"react-server": {
					module: "./renderer/dist/keystatic-core-renderer.node.react-server.esm.js",
					"default": "./renderer/dist/keystatic-core-renderer.node.react-server.cjs.js"
				},
				module: "./renderer/dist/keystatic-core-renderer.node.esm.js",
				"default": "./renderer/dist/keystatic-core-renderer.node.cjs.js"
			},
			"react-server": {
				module: "./renderer/dist/keystatic-core-renderer.react-server.esm.js",
				"default": "./renderer/dist/keystatic-core-renderer.react-server.cjs.js"
			},
			module: "./renderer/dist/keystatic-core-renderer.esm.js",
			"default": "./renderer/dist/keystatic-core-renderer.cjs.js"
		},
		"./api/generic": {
			types: "./api/generic/dist/keystatic-core-api-generic.cjs.js",
			node: {
				"react-server": {
					module: "./api/generic/dist/keystatic-core-api-generic.node.react-server.esm.js",
					"default": "./api/generic/dist/keystatic-core-api-generic.node.react-server.cjs.js"
				},
				module: "./api/generic/dist/keystatic-core-api-generic.node.esm.js",
				"default": "./api/generic/dist/keystatic-core-api-generic.node.cjs.js"
			},
			"react-server": {
				module: "./api/generic/dist/keystatic-core-api-generic.react-server.esm.js",
				"default": "./api/generic/dist/keystatic-core-api-generic.react-server.cjs.js"
			},
			module: "./api/generic/dist/keystatic-core-api-generic.esm.js",
			"default": "./api/generic/dist/keystatic-core-api-generic.cjs.js"
		},
		"./reader": {
			types: "./reader/dist/keystatic-core-reader.cjs.js",
			node: {
				"react-server": {
					module: "./reader/dist/keystatic-core-reader.node.react-server.esm.js",
					"default": "./reader/dist/keystatic-core-reader.node.react-server.cjs.js"
				},
				module: "./reader/dist/keystatic-core-reader.node.esm.js",
				"default": "./reader/dist/keystatic-core-reader.node.cjs.js"
			},
			"react-server": {
				module: "./reader/dist/keystatic-core-reader.react-server.esm.js",
				"default": "./reader/dist/keystatic-core-reader.react-server.cjs.js"
			},
			module: "./reader/dist/keystatic-core-reader.esm.js",
			"default": "./reader/dist/keystatic-core-reader.cjs.js"
		},
		"./form/fields/markdoc": {
			types: "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.cjs.js",
			node: {
				"react-server": {
					module: "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.node.react-server.esm.js",
					"default": "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.node.react-server.cjs.js"
				},
				module: "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.node.esm.js",
				"default": "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.node.cjs.js"
			},
			"react-server": {
				module: "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.react-server.esm.js",
				"default": "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.react-server.cjs.js"
			},
			module: "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.esm.js",
			"default": "./form/fields/markdoc/dist/keystatic-core-form-fields-markdoc.cjs.js"
		},
		"./package.json": "./package.json"
	},
	main: "dist/keystatic-core.cjs.js",
	module: "dist/keystatic-core.esm.js",
	files: [
		"dist",
		"api",
		"reader",
		"renderer",
		"ui",
		"form"
	],
	scripts: {
		setup: "ts-gql build && tsx scripts/l10n.ts && tsx scripts/build-prism.ts",
		build: "pnpm run setup && next build",
		dev: "next dev",
		start: "next start"
	},
	dependencies: {
		"@babel/runtime": "^7.18.3",
		"@braintree/sanitize-url": "^6.0.2",
		"@emotion/css": "^11.9.0",
		"@emotion/weak-memoize": "^0.3.0",
		"@floating-ui/react": "^0.24.0",
		"@hapi/iron": "^7.0.0",
		"@internationalized/string": "^3.1.1",
		"@keystar/ui": "^0.1.4",
		"@markdoc/markdoc": "^0.3.0",
		"@react-aria/focus": "^3.13.0",
		"@react-aria/i18n": "^3.8.0",
		"@react-aria/interactions": "^3.16.0",
		"@react-aria/overlays": "^3.15.0",
		"@react-aria/selection": "^3.16.0",
		"@react-aria/utils": "^3.18.0",
		"@react-aria/visually-hidden": "^3.8.2",
		"@react-stately/collections": "^3.9.0",
		"@react-stately/list": "^3.9.0",
		"@react-stately/overlays": "^3.6.0",
		"@react-stately/utils": "^3.7.0",
		"@react-types/shared": "^3.18.0",
		"@sindresorhus/slugify": "^1.1.2",
		"@ts-gql/tag": "^0.7.0",
		"@types/node": "16.11.13",
		"@types/react": "^18.2.8",
		"@types/react-dom": "^18.0.11",
		"@urql/core": "^4.0.4",
		"@urql/exchange-auth": "^2.1.0",
		"@urql/exchange-graphcache": "^6.0.1",
		"@urql/exchange-persisted": "^3.0.0",
		"apply-ref": "^1.0.0",
		cookie: "^0.5.0",
		emery: "^1.4.1",
		"escape-string-regexp": "^4.0.0",
		"fast-deep-equal": "^3.1.3",
		graphql: "^16.6.0",
		ignore: "^5.2.4",
		"is-hotkey": "^0.2.0",
		"js-base64": "^3.7.5",
		"js-yaml": "^4.1.0",
		"lru-cache": "^7.14.1",
		"match-sorter": "^6.3.1",
		"mdast-util-from-markdown": "^0.8.5",
		"mdast-util-gfm-autolink-literal": "^0.1.3",
		"mdast-util-gfm-strikethrough": "^0.2.3",
		"micromark-extension-gfm-autolink-literal": "0.5.7",
		"micromark-extension-gfm-strikethrough": "0.6.5",
		mime: "^3.0.0",
		minimatch: "^7.1.0",
		"pretty-format": "^29.0.1",
		prismjs: "^1.29.0",
		"prosemirror-commands": "^1.5.1",
		"prosemirror-history": "^1.3.0",
		"prosemirror-keymap": "^1.2.1",
		"prosemirror-model": "^1.19.0",
		"prosemirror-state": "^1.4.2",
		"prosemirror-transform": "^1.7.1",
		"prosemirror-view": "^1.30.2",
		"react-resizable-panels": "^0.0.53",
		"scroll-into-view-if-needed": "^3.0.3",
		slate: "^0.91.4",
		"slate-history": "^0.86.0",
		"slate-hyperscript": "^0.77.0",
		"slate-react": "^0.91.9",
		urql: "^4.0.0",
		zod: "^3.20.2"
	},
	devDependencies: {
		"@testing-library/user-event": "^14.4.3",
		"@ts-gql/compiler": "^0.16.1",
		"@ts-gql/eslint-plugin": "^0.8.5",
		"@ts-gql/next": "^17.0.0",
		"@types/cookie": "^0.5.1",
		"@types/is-hotkey": "^0.1.7",
		"@types/js-yaml": "^4.0.5",
		"@types/prismjs": "^1.26.0",
		"@types/signal-exit": "^3.0.1",
		eslint: "^8.18.0",
		"fast-glob": "^3.2.12",
		"jest-diff": "^29.0.1",
		outdent: "^0.8.0",
		react: "^18.2.0",
		"react-dom": "^18.2.0",
		"react-element-to-jsx-string": "^15.0.0",
		"resize-observer-polyfill": "^1.5.1",
		"signal-exit": "^3.0.7",
		tsx: "^3.8.0",
		typescript: "^5.1.3"
	},
	peerDependencies: {
		react: "^18.2.0",
		"react-dom": "^18.2.0"
	},
	preconstruct: {
		entrypoints: [
			"index.ts",
			"api/generic.ts",
			"api/utils.ts",
			"reader/index.ts",
			"renderer.tsx",
			"ui.tsx",
			"form/fields/markdoc/index.tsx"
		]
	},
	"ts-gql": {
		schema: "./github.graphql",
		mode: "no-transform",
		addTypename: false,
		scalars: {
			GitObjectID: "string"
		}
	},
	imports: {
		"#react-cache-in-react-server": {
			"react-server": "./src/reader/react-server-cache.ts",
			"default": "./src/reader/noop-cache.ts"
		},
		"#sha1": {
			node: "./src/sha1/node.ts",
			"default": "./src/sha1/webcrypto.ts"
		}
	}
};

function object(fields, opts) {
  return {
    ...opts,
    kind: 'object',
    fields
  };
}

function pluralize(count, options) {
  const {
    singular,
    plural = singular + 's',
    inclusive = true
  } = options;
  const variant = count === 1 ? singular : plural;
  return inclusive ? `${count} ${variant}` : variant;
}
function keyedEntries(obj) {
  return Object.entries(obj).map(_ref => {
    let [key, value] = _ref;
    return {
      key,
      ...value
    };
  });
}
function isGitHubConfig(config) {
  return config.storage.kind === 'github';
}
function isLocalConfig(config) {
  return config.storage.kind === 'local';
}
function isCloudConfig(config) {
  return config.storage.kind === 'cloud';
}
function getRepoPath(config) {
  return `${config.mainOwner}/${config.mainRepo}`;
}
function getRepoUrl(config) {
  return `https://github.com/${getRepoPath(config)}`;
}
function getSlugFromState(collectionConfig, state) {
  const value = state[collectionConfig.slugField];
  const field = collectionConfig.schema[collectionConfig.slugField];
  if (field.kind !== 'form' || field.formKind !== 'slug') {
    throw new Error(`slugField is not a slug field`);
  }
  return field.serializeWithSlug(value).slug;
}
function getEntriesInCollectionWithTreeKey(config, collection, rootTree) {
  var _getTreeNodeAtPath$ch, _getTreeNodeAtPath;
  const collectionConfig = config.collections[collection];
  const schema = object(collectionConfig.schema);
  const formatInfo = getCollectionFormat(config, collection);
  const extension = getDataFileExtension(formatInfo);
  const glob = getSlugGlobForCollection(config, collection);
  const collectionPath = getCollectionPath(config, collection);
  const directory = (_getTreeNodeAtPath$ch = (_getTreeNodeAtPath = getTreeNodeAtPath(rootTree, collectionPath)) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.children) !== null && _getTreeNodeAtPath$ch !== void 0 ? _getTreeNodeAtPath$ch : new Map();
  const entries = [];
  const directoriesUsedInSchema = [...collectDirectoriesUsedInSchema(schema)];
  const suffix = getCollectionItemSlugSuffix(config, collection);
  const possibleEntries = new Map(directory);
  if (glob === '**') {
    const handleDirectory = (dir, prefix) => {
      for (const [key, entry] of dir) {
        if (entry.children) {
          possibleEntries.set(`${prefix}${key}`, entry);
          handleDirectory(entry.children, `${prefix}${key}/`);
        } else {
          possibleEntries.set(`${prefix}${key}`, entry);
        }
      }
    };
    handleDirectory(directory, '');
  }
  for (const [key, entry] of possibleEntries) {
    if (formatInfo.dataLocation === 'index') {
      var _actualEntry$children;
      const actualEntry = getTreeNodeAtPath(rootTree, getCollectionItemPath(config, collection, key));
      if (!(actualEntry !== null && actualEntry !== void 0 && (_actualEntry$children = actualEntry.children) !== null && _actualEntry$children !== void 0 && _actualEntry$children.has('index' + extension))) continue;
      entries.push({
        key: getTreeKey([actualEntry.entry.path, ...directoriesUsedInSchema.map(x => `${x}/${key}`)], rootTree),
        slug: key
      });
    } else {
      if (suffix) {
        const newEntry = getTreeNodeAtPath(rootTree, getCollectionItemPath(config, collection, key) + extension);
        if (!newEntry || newEntry.children) continue;
        entries.push({
          key: getTreeKey([entry.entry.path, getCollectionItemPath(config, collection, key), ...directoriesUsedInSchema.map(x => `${x}/${key}`)], rootTree),
          slug: key
        });
      }
      if (entry.children || !key.endsWith(extension)) continue;
      const slug = key.slice(0, -extension.length);
      entries.push({
        key: getTreeKey([entry.entry.path, getCollectionItemPath(config, collection, slug), ...directoriesUsedInSchema.map(x => `${x}/${slug}`)], rootTree),
        slug
      });
    }
  }
  return entries;
}
const KEYSTATIC_CLOUD_API_URL = 'https://api.keystatic.cloud';
const KEYSTATIC_CLOUD_HEADERS = {
  'x-keystatic-version': pkgJson.version
};
const textEncoder = new TextEncoder();
async function redirectToCloudAuth(from, config) {
  if (config.storage.kind !== 'cloud') {
    throw new Error('Not a cloud config');
  }
  const code_verifier = (0,js_base64__WEBPACK_IMPORTED_MODULE_2__/* .fromUint8Array */ .kZ)(crypto.getRandomValues(new Uint8Array(32)), true);
  const code_challenge = (0,js_base64__WEBPACK_IMPORTED_MODULE_2__/* .fromUint8Array */ .kZ)(new Uint8Array(await crypto.subtle.digest('SHA-256', textEncoder.encode(code_verifier))), true);
  const state = (0,js_base64__WEBPACK_IMPORTED_MODULE_2__/* .fromUint8Array */ .kZ)(crypto.getRandomValues(new Uint8Array(32)), true);
  localStorage.setItem('keystatic-cloud-state', JSON.stringify({
    state,
    from,
    code_verifier
  }));
  const url = new URL(`${KEYSTATIC_CLOUD_API_URL}/oauth/authorize`);
  url.searchParams.set('state', state);
  url.searchParams.set('client_id', config.storage.project);
  url.searchParams.set('redirect_uri', `${window.location.origin}/keystatic/cloud/oauth/callback`);
  url.searchParams.set('response_type', 'code');
  url.searchParams.set('code_challenge_method', 'S256');
  url.searchParams.set('code_challenge', code_challenge);
  url.searchParams.set('keystatic_version', pkgJson.version);
  window.location.href = url.toString();
}




/***/ }),

/***/ 48727:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ EditorAfterButIgnoringingPointsWithNoContent),
/* harmony export */   a: () => (/* binding */ getDocumentFeaturesForChildField),
/* harmony export */   b: () => (/* binding */ getAncestorSchemas),
/* harmony export */   c: () => (/* binding */ isInlineContainer),
/* harmony export */   d: () => (/* binding */ allMarks),
/* harmony export */   e: () => (/* binding */ editorSchema),
/* harmony export */   f: () => (/* binding */ isElementActive),
/* harmony export */   g: () => (/* binding */ getAncestorComponentChildFieldDocumentFeatures),
/* harmony export */   h: () => (/* binding */ clearFormatting),
/* harmony export */   i: () => (/* binding */ isBlock),
/* harmony export */   j: () => (/* binding */ getPlaceholderTextForPropPath),
/* harmony export */   m: () => (/* binding */ moveChildren),
/* harmony export */   n: () => (/* binding */ nodeTypeMatcher)
/* harmony export */ });
/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91526);
/* harmony import */ var emery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85916);



const tableCellChildren = ['paragraph', 'code', 'heading', 'ordered-list', 'unordered-list', 'divider', 'image'];
const blockquoteChildren = [...tableCellChildren, 'table'];
const paragraphLike = [...blockquoteChildren, 'blockquote'];
const insideOfLayouts = [...paragraphLike, 'component-block'];
function blockContainer(args) {
  return {
    kind: 'blocks',
    allowedChildren: new Set(args.allowedChildren),
    blockToWrapInlinesIn: args.allowedChildren[0],
    invalidPositionHandleMode: args.invalidPositionHandleMode
  };
}
function inlineContainer(args) {
  return {
    kind: 'inlines',
    invalidPositionHandleMode: args.invalidPositionHandleMode
  };
}

// a user land version of https://github.com/microsoft/TypeScript/issues/47920
function satisfies() {
  return function (value) {
    return value;
  };
}
const editorSchema = satisfies()({
  editor: blockContainer({
    allowedChildren: [...insideOfLayouts, 'layout'],
    invalidPositionHandleMode: 'move'
  }),
  layout: blockContainer({
    allowedChildren: ['layout-area'],
    invalidPositionHandleMode: 'move'
  }),
  'layout-area': blockContainer({
    allowedChildren: insideOfLayouts,
    invalidPositionHandleMode: 'unwrap'
  }),
  blockquote: blockContainer({
    allowedChildren: blockquoteChildren,
    invalidPositionHandleMode: 'move'
  }),
  paragraph: inlineContainer({
    invalidPositionHandleMode: 'unwrap'
  }),
  code: inlineContainer({
    invalidPositionHandleMode: 'move'
  }),
  divider: inlineContainer({
    invalidPositionHandleMode: 'move'
  }),
  heading: inlineContainer({
    invalidPositionHandleMode: 'unwrap'
  }),
  'component-block': blockContainer({
    allowedChildren: ['component-block-prop', 'component-inline-prop'],
    invalidPositionHandleMode: 'move'
  }),
  'component-inline-prop': inlineContainer({
    invalidPositionHandleMode: 'unwrap'
  }),
  'component-block-prop': blockContainer({
    allowedChildren: [...paragraphLike, 'component-block'],
    invalidPositionHandleMode: 'unwrap'
  }),
  'ordered-list': blockContainer({
    allowedChildren: ['list-item'],
    invalidPositionHandleMode: 'move'
  }),
  'unordered-list': blockContainer({
    allowedChildren: ['list-item'],
    invalidPositionHandleMode: 'move'
  }),
  'list-item': blockContainer({
    allowedChildren: ['list-item-content', 'ordered-list', 'unordered-list'],
    invalidPositionHandleMode: 'unwrap'
  }),
  'list-item-content': inlineContainer({
    invalidPositionHandleMode: 'unwrap'
  }),
  image: inlineContainer({
    invalidPositionHandleMode: 'move'
  }),
  table: blockContainer({
    invalidPositionHandleMode: 'move',
    allowedChildren: ['table-head', 'table-body']
  }),
  'table-body': blockContainer({
    invalidPositionHandleMode: 'move',
    allowedChildren: ['table-row']
  }),
  'table-row': blockContainer({
    invalidPositionHandleMode: 'move',
    allowedChildren: ['table-cell']
  }),
  'table-cell': blockContainer({
    invalidPositionHandleMode: 'move',
    allowedChildren: tableCellChildren
  }),
  'table-head': blockContainer({
    invalidPositionHandleMode: 'move',
    allowedChildren: ['table-row']
  })
});
const inlineContainerTypes = new Set(Object.entries(editorSchema).filter(_ref => {
  let [, value] = _ref;
  return value.kind === 'inlines';
}).map(_ref2 => {
  let [type] = _ref2;
  return type;
}));
function isInlineContainer(node) {
  return node.type !== undefined && inlineContainerTypes.has(node.type);
}
const blockTypes = new Set(Object.keys(editorSchema).filter(x => x !== 'editor'));
function isBlock(node) {
  return blockTypes.has(node.type);
}

// to print the editor schema in Graphviz if you want to visualize it
// function printEditorSchema(editorSchema: EditorSchema) {
//   return `digraph G {
//   concentrate=true;
//   ${Object.keys(editorSchema)
//     .map(key => {
//       let val = editorSchema[key];
//       if (val.kind === 'inlines') {
//         return `"${key}" -> inlines`;
//       }
//       if (val.kind === 'blocks') {
//         return `"${key}" -> {${[...val.allowedChildren].map(x => JSON.stringify(x)).join(' ')}}`;
//       }
//     })
//     .join('\n  ')}
// }`;
// }

function getDocumentFeaturesForChildField(editorDocumentFeatures, options) {
  var _options$formatting, _options$formatting3, _options$formatting4, _options$formatting5, _options$formatting6, _options$formatting7;
  // an important note for this: normalization based on document features
  // is done based on the document features returned here
  // and the editor document features
  // so the result for any given child prop will be the things that are
  // allowed by both these document features
  // AND the editor document features
  const inlineMarksFromOptions = (_options$formatting = options.formatting) === null || _options$formatting === void 0 ? void 0 : _options$formatting.inlineMarks;
  const inlineMarks = inlineMarksFromOptions === 'inherit' ? 'inherit' : Object.fromEntries(Object.keys(editorDocumentFeatures.formatting.inlineMarks).map(mark => {
    return [mark, !!(inlineMarksFromOptions || {})[mark]];
  }));
  if (options.kind === 'inline') {
    var _options$formatting2;
    return {
      kind: 'inline',
      inlineMarks,
      documentFeatures: {
        links: options.links === 'inherit'
      },
      softBreaks: ((_options$formatting2 = options.formatting) === null || _options$formatting2 === void 0 ? void 0 : _options$formatting2.softBreaks) === 'inherit'
    };
  }
  const headingLevels = (_options$formatting3 = options.formatting) === null || _options$formatting3 === void 0 ? void 0 : _options$formatting3.headingLevels;
  return {
    kind: 'block',
    inlineMarks,
    softBreaks: ((_options$formatting4 = options.formatting) === null || _options$formatting4 === void 0 ? void 0 : _options$formatting4.softBreaks) === 'inherit',
    documentFeatures: {
      layouts: [],
      dividers: options.dividers === 'inherit' ? editorDocumentFeatures.dividers : false,
      formatting: {
        alignment: ((_options$formatting5 = options.formatting) === null || _options$formatting5 === void 0 ? void 0 : _options$formatting5.alignment) === 'inherit' ? editorDocumentFeatures.formatting.alignment : {
          center: false,
          end: false
        },
        blockTypes: ((_options$formatting6 = options.formatting) === null || _options$formatting6 === void 0 ? void 0 : _options$formatting6.blockTypes) === 'inherit' ? editorDocumentFeatures.formatting.blockTypes : {
          blockquote: false,
          code: false
        },
        headings: headingLevels === 'inherit' ? editorDocumentFeatures.formatting.headings : {
          levels: headingLevels ? editorDocumentFeatures.formatting.headings.levels.filter(level => headingLevels.includes(level)) : [],
          schema: editorDocumentFeatures.formatting.headings.schema
        },
        listTypes: ((_options$formatting7 = options.formatting) === null || _options$formatting7 === void 0 ? void 0 : _options$formatting7.listTypes) === 'inherit' ? editorDocumentFeatures.formatting.listTypes : {
          ordered: false,
          unordered: false
        }
      },
      links: options.links === 'inherit',
      images: options.images === 'inherit' ? editorDocumentFeatures.images : false,
      tables: options.tables === 'inherit'
    },
    componentBlocks: options.componentBlocks === 'inherit'
  };
}
function getSchemaAtPropPathInner(path, value, schema) {
  // because we're checking the length here
  // the non-null asserts on shift below are fine
  if (path.length === 0) {
    return schema;
  }
  if (schema.kind === 'child' || schema.kind === 'form') {
    return;
  }
  if (schema.kind === 'conditional') {
    const key = path.shift();
    if (key === 'discriminant') {
      return getSchemaAtPropPathInner(path, value.discriminant, schema.discriminant);
    }
    if (key === 'value') {
      const propVal = schema.values[value.discriminant];
      return getSchemaAtPropPathInner(path, value.value, propVal);
    }
    return;
  }
  if (schema.kind === 'object') {
    const key = path.shift();
    return getSchemaAtPropPathInner(path, value[key], schema.fields[key]);
  }
  if (schema.kind === 'array') {
    const index = path.shift();
    return getSchemaAtPropPathInner(path, value[index], schema.element);
  }
  (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(schema);
}
function getSchemaAtPropPath(path, value, props) {
  return getSchemaAtPropPathInner([...path], value, {
    kind: 'object',
    fields: props
  });
}
function getAncestorSchemas(rootSchema, path, value) {
  const ancestors = [];
  const currentPath = [...path];
  let currentProp = rootSchema;
  let currentValue = value;
  while (currentPath.length) {
    ancestors.push(currentProp);
    const key = currentPath.shift(); // this code only runs when path.length is truthy so this non-null assertion is fine
    if (currentProp.kind === 'array') {
      currentProp = currentProp.element;
      currentValue = currentValue[key];
    } else if (currentProp.kind === 'conditional') {
      currentProp = currentProp.values[value.discriminant];
      currentValue = currentValue.value;
    } else if (currentProp.kind === 'object') {
      currentValue = currentValue[key];
      currentProp = currentProp.fields[key];
    } else if (currentProp.kind === 'child' || currentProp.kind === 'form') {
      throw new Error(`unexpected prop "${key}"`);
    } else {
      (0,emery__WEBPACK_IMPORTED_MODULE_0__.assertNever)(currentProp);
    }
  }
  return ancestors;
}
function getPlaceholderTextForPropPath(propPath, fields, formProps) {
  const field = getSchemaAtPropPath(propPath, formProps, fields);
  if ((field === null || field === void 0 ? void 0 : field.kind) === 'child') {
    return field.options.placeholder;
  }
  return '';
}

const allMarks = ['bold', 'italic', 'underline', 'strikethrough', 'code', 'superscript', 'subscript', 'keyboard'];
const isElementActive = (editor, format) => {
  const [match] = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.nodes(editor, {
    match: n => n.type === format
  });
  return !!match;
};
function clearFormatting(editor) {
  slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.unwrapNodes(editor, {
    match: node => node.type === 'heading' || node.type === 'blockquote' || node.type === 'code'
  });
  slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.unsetNodes(editor, allMarks, {
    match: slate__WEBPACK_IMPORTED_MODULE_1__.Text.isText
  });
}
function moveChildren(editor, parent, to) {
  let shouldMoveNode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;
  const parentPath = slate__WEBPACK_IMPORTED_MODULE_1__.Path.isPath(parent) ? parent : parent[1];
  const parentNode = slate__WEBPACK_IMPORTED_MODULE_1__.Path.isPath(parent) ? slate__WEBPACK_IMPORTED_MODULE_1__.Node.get(editor, parentPath) : parent[0];
  if (!isBlock(parentNode)) return;
  for (let i = parentNode.children.length - 1; i >= 0; i--) {
    if (shouldMoveNode(parentNode.children[i], i)) {
      const childPath = [...parentPath, i];
      slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.moveNodes(editor, {
        at: childPath,
        to
      });
    }
  }
}

/**
 * This is equivalent to Editor.after except that it ignores points that have no content
 * like the point in a void text node, an empty text node and the last point in a text node
 */
// TODO: this would probably break if you were trying to get the last point in the editor?
function EditorAfterButIgnoringingPointsWithNoContent(editor, at) {
  let {
    distance = 1
  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const anchor = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.point(editor, at, {
    edge: 'end'
  });
  const focus = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.end(editor, []);
  const range = {
    anchor,
    focus
  };
  let d = 0;
  let target;
  for (const p of slate__WEBPACK_IMPORTED_MODULE_1__.Editor.positions(editor, {
    at: range
  })) {
    if (d > distance) {
      break;
    }

    // this is the important change
    const node = slate__WEBPACK_IMPORTED_MODULE_1__.Node.get(editor, p.path);
    if (node.text.length === p.offset) {
      continue;
    }
    if (d !== 0) {
      target = p;
    }
    d++;
  }
  return target;
}
function nodeTypeMatcher() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  if (args.length === 1) {
    const type = args[0];
    return node => node.type === type;
  }
  const set = new Set(args);
  return node => typeof node.type === 'string' && set.has(node.type);
}
function getAncestorComponentChildFieldDocumentFeatures(editor, editorDocumentFeatures, componentBlocks) {
  const ancestorComponentProp = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.above(editor, {
    match: nodeTypeMatcher('component-block-prop', 'component-inline-prop')
  });
  if (ancestorComponentProp) {
    const propPath = ancestorComponentProp[0].propPath;
    const ancestorComponent = slate__WEBPACK_IMPORTED_MODULE_1__.Editor.parent(editor, ancestorComponentProp[1]);
    if (ancestorComponent[0].type === 'component-block') {
      const component = ancestorComponent[0].component;
      const componentBlock = componentBlocks[component];
      if (componentBlock && propPath) {
        const childField = getSchemaAtPropPath(propPath, ancestorComponent[0].props, componentBlock.schema);
        if ((childField === null || childField === void 0 ? void 0 : childField.kind) === 'child') {
          return getDocumentFeaturesForChildField(editorDocumentFeatures, childField.options);
        }
      }
    }
  }
}




/***/ }),

/***/ 51426:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  o: () => (/* binding */ makePage)
});

// EXTERNAL MODULE: ../node_modules/next/navigation.js
var navigation = __webpack_require__(52865);
// EXTERNAL MODULE: ../node_modules/next/link.js
var next_link = __webpack_require__(33533);
var link_default = /*#__PURE__*/__webpack_require__.n(next_link);
// EXTERNAL MODULE: external "next/dist/compiled/react"
var react_ = __webpack_require__(18038);
var react_default = /*#__PURE__*/__webpack_require__.n(react_);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/button/dist/keystar-ui-button.esm.js
var keystar_ui_button_esm = __webpack_require__(84371);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/dist/keystar-ui-icon.esm.js
var keystar_ui_icon_esm = __webpack_require__(828);
// EXTERNAL MODULE: external "next/dist/compiled/react/jsx-runtime"
var jsx_runtime_ = __webpack_require__(56786);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/fileX2Icon/dist/keystar-ui-icon-icons-fileX2Icon.esm.js


const fileX2Icon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M14 2v6h6M3 12.5l5 5M8 12.5l-5 5"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/githubIcon/dist/keystar-ui-icon-icons-githubIcon.esm.js


const githubIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M9 18c-4.51 2-5-2-7-2"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/layout/dist/keystar-ui-layout.esm.js
var keystar_ui_layout_esm = __webpack_require__(9772);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/typography/dist/keystar-ui-typography.esm.js
var keystar_ui_typography_esm = __webpack_require__(79798);
// EXTERNAL MODULE: ../node_modules/@react-aria/i18n/dist/real-module.mjs + 1 modules
var real_module = __webpack_require__(93009);
// EXTERNAL MODULE: ../node_modules/@react-aria/utils/dist/import.mjs
var dist_import = __webpack_require__(41933);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/slots/dist/keystar-ui-slots.esm.js
var keystar_ui_slots_esm = __webpack_require__(71819);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/style/dist/keystar-ui-style.esm.js + 15 modules
var keystar_ui_style_esm = __webpack_require__(46792);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/utils/dist/keystar-ui-utils.esm.js
var keystar_ui_utils_esm = __webpack_require__(47187);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/badge/dist/keystar-ui-badge.esm.js
'use client';









/**
 * A badge is a decorative indicator used to either call attention to an item or
 * for communicating non-actionable, supplemental information.
 *
 * Use badges to highlight an item's status for quick recognition. Badges should
 * contain short easy-to-scan text.
 */
const Badge = /*#__PURE__*/(0,react_.forwardRef)(function Badge(props, forwardedRef) {
  const {
    children,
    tone = 'neutral',
    ...otherProps
  } = props;
  const styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  const bg = tone === 'neutral' ? 'surfaceSecondary' : tone;
  const fg = tone === 'neutral' ? undefined : tone;
  const slots = (0,react_.useMemo)(() => ({
    icon: {
      color: fg
    },
    text: {
      trim: false,
      color: fg,
      weight: 'medium'
    }
  }), [fg]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    UNSAFE_className: styleProps.className,
    UNSAFE_style: styleProps.style,
    ref: forwardedRef,
    ...(0,dist_import/* filterDOMProps */.zL)(otherProps, {
      labelable: true
    }),
    // appearance
    backgroundColor: bg,
    borderRadius: "full",
    height: "element.small",
    minWidth: 0,
    paddingX: "regular"
    // layout
    ,
    alignItems: "center",
    flexShrink: 0,
    gap: "small",
    inline: true,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
      slots: slots,
      children: (0,keystar_ui_utils_esm/* isReactText */.UY)(children) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: children
      }) : children
    })
  });
});



// EXTERNAL MODULE: ../node_modules/@react-stately/collections/dist/import.mjs
var collections_dist_import = __webpack_require__(4315);
// EXTERNAL MODULE: ../node_modules/@react-aria/link/dist/import.mjs
var link_dist_import = __webpack_require__(79686);
;// CONCATENATED MODULE: ../node_modules/@react-aria/breadcrumbs/dist/import.mjs




function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $dafd15390222438a$export$452b38fce62c9384(props, ref) {
    let { isCurrent: isCurrent , isDisabled: isDisabled , "aria-current": ariaCurrent , elementType: elementType = "a" , ...otherProps } = props;
    let { linkProps: linkProps  } = (0, link_dist_import/* useLink */.n)({
        isDisabled: isDisabled || isCurrent,
        elementType: elementType,
        ...otherProps
    }, ref);
    let isHeading = /^h[1-6]$/.test(elementType);
    let itemProps = {};
    if (!isHeading) itemProps = linkProps;
    if (isCurrent) {
        itemProps["aria-current"] = ariaCurrent || "page";
        // isCurrent sets isDisabled === true for the current item,
        // so we have to restore the tabIndex in order to support autoFocus.
        itemProps.tabIndex = props.autoFocus ? -1 : undefined;
    }
    return {
        itemProps: {
            "aria-disabled": isDisabled,
            ...itemProps
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
var $8229b34715874f89$exports = {};
var $b91590b2dc47de39$exports = {};
$b91590b2dc47de39$exports = {
    "breadcrumbs": `عناصر الواجهة`
};


var $55b0693b2cf3fe91$exports = {};
$55b0693b2cf3fe91$exports = {
    "breadcrumbs": `Трохи хляб`
};


var $6ec1ed7729e948cc$exports = {};
$6ec1ed7729e948cc$exports = {
    "breadcrumbs": `Popis cesty`
};


var $5a41bb2baa6861e4$exports = {};
$5a41bb2baa6861e4$exports = {
    "breadcrumbs": `Brødkrummer`
};


var $f28bbea439e87eca$exports = {};
$f28bbea439e87eca$exports = {
    "breadcrumbs": `Breadcrumbs`
};


var $b3eca51cb720961a$exports = {};
$b3eca51cb720961a$exports = {
    "breadcrumbs": `Πλοηγήσεις breadcrumb`
};


var $0b39b205118db415$exports = {};
$0b39b205118db415$exports = {
    "breadcrumbs": `Breadcrumbs`
};


var $f467c0ee7bfb0950$exports = {};
$f467c0ee7bfb0950$exports = {
    "breadcrumbs": `Migas de pan`
};


var $ab711d2ffb4cdf3d$exports = {};
$ab711d2ffb4cdf3d$exports = {
    "breadcrumbs": `Lingiread`
};


var $b63105d663e6f9d5$exports = {};
$b63105d663e6f9d5$exports = {
    "breadcrumbs": `Navigointilinkit`
};


var $9d2ed7be7fcdc2a1$exports = {};
$9d2ed7be7fcdc2a1$exports = {
    "breadcrumbs": `Chemin de navigation`
};


var $c5704294d85c7b5d$exports = {};
$c5704294d85c7b5d$exports = {
    "breadcrumbs": `שבילי ניווט`
};


var $20c975671d6bbc63$exports = {};
$20c975671d6bbc63$exports = {
    "breadcrumbs": `Navigacijski putovi`
};


var $2569ca3917233115$exports = {};
$2569ca3917233115$exports = {
    "breadcrumbs": `Morzsamenü`
};


var $caa152f7f8e96c85$exports = {};
$caa152f7f8e96c85$exports = {
    "breadcrumbs": `Breadcrumb`
};


var $cbc6af0cc98fad10$exports = {};
$cbc6af0cc98fad10$exports = {
    "breadcrumbs": `パンくずリスト`
};


var $ad9be5d332b4d607$exports = {};
$ad9be5d332b4d607$exports = {
    "breadcrumbs": `탐색 표시`
};


var $659de19a00ff9617$exports = {};
$659de19a00ff9617$exports = {
    "breadcrumbs": `Naršymo kelias`
};


var $173e9fb4d14fe309$exports = {};
$173e9fb4d14fe309$exports = {
    "breadcrumbs": `Atpakaļceļi`
};


var $d8e2640a066567a9$exports = {};
$d8e2640a066567a9$exports = {
    "breadcrumbs": `Navigasjonsstier`
};


var $d71fd764236c0d12$exports = {};
$d71fd764236c0d12$exports = {
    "breadcrumbs": `Broodkruimels`
};


var $f4ad3faf9f4aaec6$exports = {};
$f4ad3faf9f4aaec6$exports = {
    "breadcrumbs": `Struktura nawigacyjna`
};


var $9703be9d55d8e9c2$exports = {};
$9703be9d55d8e9c2$exports = {
    "breadcrumbs": `Caminho detalhado`
};


var $7e23baec8a14f309$exports = {};
$7e23baec8a14f309$exports = {
    "breadcrumbs": `Categorias`
};


var $568f95594049d56e$exports = {};
$568f95594049d56e$exports = {
    "breadcrumbs": `Miez de pâine`
};


var $625df06cecc70764$exports = {};
$625df06cecc70764$exports = {
    "breadcrumbs": `Навигация`
};


var $b5a67525f3a2f594$exports = {};
$b5a67525f3a2f594$exports = {
    "breadcrumbs": `Navigačné prvky Breadcrumbs`
};


var $16125922964febca$exports = {};
$16125922964febca$exports = {
    "breadcrumbs": `Drobtine`
};


var $de104bf355206bcf$exports = {};
$de104bf355206bcf$exports = {
    "breadcrumbs": `Putanje navigacije`
};


var $d5ab76bcbadc9c07$exports = {};
$d5ab76bcbadc9c07$exports = {
    "breadcrumbs": `Sökvägar`
};


var $a6a1af5968159b55$exports = {};
$a6a1af5968159b55$exports = {
    "breadcrumbs": `İçerik haritaları`
};


var $5204a30f0d17ffec$exports = {};
$5204a30f0d17ffec$exports = {
    "breadcrumbs": `Навігаційна стежка`
};


var $8d15e736e12d3dfd$exports = {};
$8d15e736e12d3dfd$exports = {
    "breadcrumbs": `导航栏`
};


var $f8c49dd804b75140$exports = {};
$f8c49dd804b75140$exports = {
    "breadcrumbs": `導覽列`
};


$8229b34715874f89$exports = {
    "ar-AE": $b91590b2dc47de39$exports,
    "bg-BG": $55b0693b2cf3fe91$exports,
    "cs-CZ": $6ec1ed7729e948cc$exports,
    "da-DK": $5a41bb2baa6861e4$exports,
    "de-DE": $f28bbea439e87eca$exports,
    "el-GR": $b3eca51cb720961a$exports,
    "en-US": $0b39b205118db415$exports,
    "es-ES": $f467c0ee7bfb0950$exports,
    "et-EE": $ab711d2ffb4cdf3d$exports,
    "fi-FI": $b63105d663e6f9d5$exports,
    "fr-FR": $9d2ed7be7fcdc2a1$exports,
    "he-IL": $c5704294d85c7b5d$exports,
    "hr-HR": $20c975671d6bbc63$exports,
    "hu-HU": $2569ca3917233115$exports,
    "it-IT": $caa152f7f8e96c85$exports,
    "ja-JP": $cbc6af0cc98fad10$exports,
    "ko-KR": $ad9be5d332b4d607$exports,
    "lt-LT": $659de19a00ff9617$exports,
    "lv-LV": $173e9fb4d14fe309$exports,
    "nb-NO": $d8e2640a066567a9$exports,
    "nl-NL": $d71fd764236c0d12$exports,
    "pl-PL": $f4ad3faf9f4aaec6$exports,
    "pt-BR": $9703be9d55d8e9c2$exports,
    "pt-PT": $7e23baec8a14f309$exports,
    "ro-RO": $568f95594049d56e$exports,
    "ru-RU": $625df06cecc70764$exports,
    "sk-SK": $b5a67525f3a2f594$exports,
    "sl-SI": $16125922964febca$exports,
    "sr-SP": $de104bf355206bcf$exports,
    "sv-SE": $d5ab76bcbadc9c07$exports,
    "tr-TR": $a6a1af5968159b55$exports,
    "uk-UA": $5204a30f0d17ffec$exports,
    "zh-CN": $8d15e736e12d3dfd$exports,
    "zh-TW": $f8c49dd804b75140$exports
};



function $848231d7a2b3998e$export$8cefe241bd876ca0(props) {
    let { "aria-label": ariaLabel , ...otherProps } = props;
    let strings = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/$parcel$interopDefault($8229b34715874f89$exports))));
    return {
        navProps: {
            ...(0, dist_import/* filterDOMProps */.zL)(otherProps, {
                labelable: true
            }),
            "aria-label": ariaLabel || strings.format("breadcrumbs")
        }
    };
}





//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: ../node_modules/emery/dist/emery.cjs.js
var emery_cjs = __webpack_require__(85916);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/core/dist/keystar-ui-core.esm.js
var keystar_ui_core_esm = __webpack_require__(90637);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/folderClosedIcon/dist/keystar-ui-icon-icons-folderClosedIcon.esm.js


const folderClosedIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2ZM2 10h20"
  })
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/folderOpenIcon/dist/keystar-ui-icon-icons-folderOpenIcon.esm.js


const folderOpenIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2"
  })
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/menu/dist/keystar-ui-menu.esm.js + 1 modules
var keystar_ui_menu_esm = __webpack_require__(42188);
// EXTERNAL MODULE: ../node_modules/@react-aria/interactions/dist/import.mjs
var interactions_dist_import = __webpack_require__(88474);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/chevronRightIcon/dist/keystar-ui-icon-icons-chevronRightIcon.esm.js
var keystar_ui_icon_icons_chevronRightIcon_esm = __webpack_require__(71108);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/chevronLeftIcon/dist/keystar-ui-icon-icons-chevronLeftIcon.esm.js
var keystar_ui_icon_icons_chevronLeftIcon_esm = __webpack_require__(75013);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/breadcrumbs/dist/keystar-ui-breadcrumbs.esm.js




















const breadcrumbsClassList = new keystar_ui_style_esm/* ClassList */.LJ('Breadcrumbs');
function BreadcrumbItem(props) {
  let {
    children,
    isCurrent,
    isDisabled,
    size = 'regular'
  } = props;
  let {
    direction
  } = (0,real_module/* useLocale */.bU)();
  let ref = (0,react_.useRef)(null);
  let {
    itemProps
  } = $dafd15390222438a$export$452b38fce62c9384({
    ...props,
    elementType: 'span'
  }, ref);
  let {
    hoverProps,
    isHovered
  } = (0,interactions_dist_import/* useHover */.XI)(props);
  let icon = (0,react_.useMemo)(() => {
    return direction === 'rtl' ? keystar_ui_icon_icons_chevronLeftIcon_esm/* chevronLeftIcon */.f : keystar_ui_icon_icons_chevronRightIcon_esm/* chevronRightIcon */.o;
  }, [direction]);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(react_.Fragment, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_style_esm/* FocusRing */.tE, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)("span", {
        ...(0,dist_import/* mergeProps */.dG)(itemProps, hoverProps),
        ...(0,keystar_ui_utils_esm/* toDataAttributes */.a9)({
          size: size !== 'regular' ? size : undefined,
          interaction: isHovered ? 'hover' : undefined
        }),
        ref: ref,
        className: (0,keystar_ui_style_esm/* classNames */.AK)(breadcrumbsClassList.declare('link'), (0,keystar_ui_style_esm/* css */.iv)({
          color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutral,
          cursor: 'default',
          fontSize: keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.regular.size,
          fontFamily: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontFamily.base,
          fontWeight: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontWeight.medium,
          WebkitFontSmoothing: 'antialiased',
          MozOsxFontSmoothing: 'grayscale',
          '&[data-size=small]': {
            fontSize: keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.small.size
          },
          '&[data-size=medium]': {
            fontSize: keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.medium.size
          },
          '&[data-size=large]': {
            fontSize: keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.large.size
          },
          '&:not([aria-current=page])': {
            '&:not([aria-disabled=true])': {
              cursor: 'pointer'
            },
            '&[data-interaction=hover]': {
              color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis,
              textDecoration: 'underline'
            },
            '&[aria-disabled=true]': {
              color: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.foregroundDisabled
            }
          },
          '&[aria-current=page]': {
            color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis,
            fontWeight: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontWeight.semibold,
            overflow: 'hidden',
            textOverflow: 'ellipsis'
          }
        }), {
          'is-hovered': isHovered
        }),
        children: children
      })
    }), !isCurrent && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
      src: icon,
      color: isDisabled ? 'color.alias.foregroundDisabled' : 'neutralSecondary',
      marginX: "small",
      UNSAFE_className: breadcrumbsClassList.declare('separator')
    })]
  });
}

const MIN_VISIBLE_ITEMS = 1;
const MAX_VISIBLE_ITEMS = 4;
function Breadcrumbs(props, ref) {
  props = (0,keystar_ui_core_esm/* useProviderProps */.Zd)(props);
  let {
    children,
    showRoot,
    size = 'regular',
    isDisabled,
    onAction,
    ...otherProps
  } = props;

  // Not using React.Children.toArray because it mutates the key prop.
  let childArray = [];
  react_.Children.forEach(children, child => {
    if ( /*#__PURE__*/(0,react_.isValidElement)(child)) {
      childArray.push(child);
    }
  });
  let domRef = (0,dist_import/* useObjectRef */.B3)(ref);
  let listRef = (0,react_.useRef)(null);
  let [menuIsOpen, setMenuOpen] = (0,react_.useState)(false);
  let [visibleItems, setVisibleItems] = (0,dist_import/* useValueEffect */.pl)(childArray.length);
  let {
    navProps
  } = $848231d7a2b3998e$export$8cefe241bd876ca0(props);
  let styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  let updateOverflow = (0,react_.useCallback)(() => {
    let computeVisibleItems = visibleItems => {
      let currListRef = listRef.current;
      if (!currListRef) {
        return;
      }
      let listItems = Array.from(currListRef.children);
      let containerWidth = currListRef.offsetWidth;
      let isShowingMenu = childArray.length > visibleItems;
      let calculatedWidth = 0;
      let newVisibleItems = 0;
      let maxVisibleItems = MAX_VISIBLE_ITEMS;
      if (showRoot) {
        let el = listItems.shift();
        if (el) {
          calculatedWidth += el.offsetWidth;
          newVisibleItems++;
        }
      }
      if (isShowingMenu) {
        let el = listItems.shift();
        if (el) {
          calculatedWidth += el.offsetWidth;
          maxVisibleItems--;
        }
      }
      if (showRoot && calculatedWidth >= containerWidth) {
        newVisibleItems--;
      }
      if (listItems.length > 0) {
        // Ensure the last breadcrumb isn't truncated when we measure it.
        let last = listItems.pop();
        if (last) {
          last.style.overflow = 'visible';
          calculatedWidth += last.offsetWidth;
          if (calculatedWidth < containerWidth) {
            newVisibleItems++;
          }
          last.style.overflow = '';
        }
      }
      for (let breadcrumb of listItems.reverse()) {
        calculatedWidth += breadcrumb.offsetWidth;
        if (calculatedWidth < containerWidth) {
          newVisibleItems++;
        }
      }
      return Math.max(MIN_VISIBLE_ITEMS, Math.min(maxVisibleItems, newVisibleItems));
    };
    setVisibleItems(function* () {
      // Update to show all items.
      yield childArray.length;

      // Measure, and update to show the items that fit.
      let newVisibleItems = computeVisibleItems(childArray.length);
      yield newVisibleItems;

      // If the number of items is less than the number of children,
      // then update again to ensure that the menu fits.
      if ((0,emery_cjs.isNumber)(newVisibleItems) && newVisibleItems < childArray.length && newVisibleItems > 1) {
        yield computeVisibleItems(newVisibleItems);
      }
    });
  }, [childArray.length, setVisibleItems, showRoot]);
  (0,dist_import/* useResizeObserver */.yU)({
    ref: domRef,
    onResize: updateOverflow
  });

  // eslint-disable-next-line react-hooks/exhaustive-deps
  (0,dist_import/* useLayoutEffect */.bt)(updateOverflow, [children]);
  let contents = childArray;
  if (childArray.length > visibleItems) {
    var _selectedItem$key;
    let selectedItem = childArray[childArray.length - 1];
    let selectedKey = (_selectedItem$key = selectedItem.key) !== null && _selectedItem$key !== void 0 ? _selectedItem$key : childArray.length - 1;
    let onMenuAction = key => {
      // Don't fire onAction when clicking on the last item
      if (key !== selectedKey && onAction) {
        onAction(key);
      }
    };
    let menuItem = /*#__PURE__*/(0,jsx_runtime_.jsx)(BreadcrumbItem, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_menu_esm/* MenuTrigger */.bF, {
        onOpenChange: setMenuOpen,
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
          "aria-label": "\u2026",
          prominence: "low",
          isDisabled: isDisabled,
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: menuIsOpen ? folderOpenIcon : folderClosedIcon
          })
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_menu_esm/* Menu */.v2, {
          selectionMode: "single",
          selectedKeys: [selectedKey],
          onAction: onMenuAction,
          children: childArray
        })]
      })
    }, "menu");
    contents = [menuItem];
    let breadcrumbs = [...childArray];
    let endItems = visibleItems;
    if (showRoot && visibleItems > 1) {
      let el = breadcrumbs.shift();
      if (el) {
        contents.unshift(el);
        endItems--;
      }
    }
    contents.push(...breadcrumbs.slice(-endItems));
  }
  let lastIndex = contents.length - 1;
  let breadcrumbItems = contents.map((child, index) => {
    var _child$key;
    let isCurrent = index === lastIndex;
    let key = (_child$key = child.key) !== null && _child$key !== void 0 ? _child$key : index;
    let onPress = () => {
      if (onAction) {
        onAction(key);
      }
    };
    return /*#__PURE__*/(0,jsx_runtime_.jsx)("li", {
      className: (0,keystar_ui_style_esm/* classNames */.AK)(breadcrumbsClassList.declare('item'), (0,keystar_ui_style_esm/* css */.iv)({
        alignItems: 'center',
        display: 'inline-flex',
        whiteSpace: 'nowrap',
        '&:last-child': {
          overflow: 'hidden'
        }
      })),
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(BreadcrumbItem, {
        isCurrent: isCurrent,
        isDisabled: isDisabled,
        onPress: onPress,
        size: size,
        children: child.props.children
      }, key)
    }, index);
  });
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("nav", {
    ...navProps,
    ...styleProps,
    ref: domRef,
    className: (0,keystar_ui_style_esm/* classNames */.AK)(breadcrumbsClassList.root(), styleProps.className),
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)("ul", {
      ref: listRef,
      className: (0,keystar_ui_style_esm/* classNames */.AK)(breadcrumbsClassList.declare('list'), (0,keystar_ui_style_esm/* css */.iv)({
        display: 'flex',
        height: keystar_ui_style_esm/* tokenSchema */.iK.size.element.regular,
        justifyContent: 'flex-start'
      })),
      children: breadcrumbItems
    })
  });
}

// forwardRef doesn't support generic parameters, so cast the result to the correct type
// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref

/**
 * Breadcrumbs show hierarchy and navigational context for a user's location
 * within an application.
 */
const _Breadcrumbs = /*#__PURE__*/(0,react_.forwardRef)(Breadcrumbs);



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/alertCircleIcon/dist/keystar-ui-icon-icons-alertCircleIcon.esm.js


const alertCircleIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 12,
    cy: 12,
    r: 10
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M12 8v4M12 16h.01"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/listXIcon/dist/keystar-ui-icon-icons-listXIcon.esm.js


const listXIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M11 12H3M16 6H3M16 18H3M19 10l-4 4M15 10l4 4"
  })
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/searchXIcon/dist/keystar-ui-icon-icons-searchXIcon.esm.js


const searchXIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m13.5 8.5-5 5M8.5 8.5l5 5"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 11,
    cy: 11,
    r: 8
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m21 21-4.3-4.3"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/link/dist/keystar-ui-link.esm.js
var keystar_ui_link_esm = __webpack_require__(96890);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/progress/dist/keystar-ui-progress.esm.js + 1 modules
var keystar_ui_progress_esm = __webpack_require__(1677);
// EXTERNAL MODULE: ../node_modules/@react-aria/textfield/dist/import.mjs
var textfield_dist_import = __webpack_require__(53121);
;// CONCATENATED MODULE: ../node_modules/@react-aria/searchfield/dist/import.mjs




function import_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
var $8112f8b883c0272d$exports = {};
var $03c9a1a10de12f06$exports = {};
$03c9a1a10de12f06$exports = {
    "Clear search": `مسح البحث`
};


var $4da0c2ffa4ba4159$exports = {};
$4da0c2ffa4ba4159$exports = {
    "Clear search": `Изчистване на търсене`
};


var $8c59fd0c2c96821b$exports = {};
$8c59fd0c2c96821b$exports = {
    "Clear search": `Vymazat hledání`
};


var $0a371f9c1df8120f$exports = {};
$0a371f9c1df8120f$exports = {
    "Clear search": `Ryd søgning`
};


var $67f4d0b0de9f8a52$exports = {};
$67f4d0b0de9f8a52$exports = {
    "Clear search": `Suche zurücksetzen`
};


var $72a312d948f0214b$exports = {};
$72a312d948f0214b$exports = {
    "Clear search": `Απαλοιφή αναζήτησης`
};


var $5012d21d933388c1$exports = {};
$5012d21d933388c1$exports = {
    "Clear search": `Clear search`
};


var $0159854399308e2e$exports = {};
$0159854399308e2e$exports = {
    "Clear search": `Borrar búsqueda`
};


var $390613981d970276$exports = {};
$390613981d970276$exports = {
    "Clear search": `Tühjenda otsing`
};


var $961ae0833f811705$exports = {};
$961ae0833f811705$exports = {
    "Clear search": `Tyhjennä haku`
};


var $26d76742decfd829$exports = {};
$26d76742decfd829$exports = {
    "Clear search": `Effacer la recherche`
};


var $92ef254c82a5c769$exports = {};
$92ef254c82a5c769$exports = {
    "Clear search": `נקה חיפוש`
};


var $e0321b43bdefb8b3$exports = {};
$e0321b43bdefb8b3$exports = {
    "Clear search": `Obriši pretragu`
};


var $0c1ee0b8d50940d9$exports = {};
$0c1ee0b8d50940d9$exports = {
    "Clear search": `Keresés törlése`
};


var $b09198915a38946f$exports = {};
$b09198915a38946f$exports = {
    "Clear search": `Cancella ricerca`
};


var $3a9a3d180c3145c0$exports = {};
$3a9a3d180c3145c0$exports = {
    "Clear search": `検索をクリア`
};


var $b7a611726449f4a3$exports = {};
$b7a611726449f4a3$exports = {
    "Clear search": `검색 지우기`
};


var $d9a3d49db610dd5c$exports = {};
$d9a3d49db610dd5c$exports = {
    "Clear search": `Išvalyti iešką`
};


var $3ab64b73ea27c23a$exports = {};
$3ab64b73ea27c23a$exports = {
    "Clear search": `Notīrīt meklēšanu`
};


var $bf5cce1b47d23baf$exports = {};
$bf5cce1b47d23baf$exports = {
    "Clear search": `Tøm søk`
};


var $4e0c9a9a010e4598$exports = {};
$4e0c9a9a010e4598$exports = {
    "Clear search": `Zoekactie wissen`
};


var $63cf4a75ec270508$exports = {};
$63cf4a75ec270508$exports = {
    "Clear search": `Wyczyść zawartość wyszukiwania`
};


var $083b0cad27fdbd06$exports = {};
$083b0cad27fdbd06$exports = {
    "Clear search": `Limpar pesquisa`
};


var $1b7f0864d830ba6d$exports = {};
$1b7f0864d830ba6d$exports = {
    "Clear search": `Limpar pesquisa`
};


var $d6d2588377fc9718$exports = {};
$d6d2588377fc9718$exports = {
    "Clear search": `Ştergeţi căutarea`
};


var $701c918a4653e946$exports = {};
$701c918a4653e946$exports = {
    "Clear search": `Очистить поиск`
};


var $7cacc29a1e5f4fbe$exports = {};
$7cacc29a1e5f4fbe$exports = {
    "Clear search": `Vymazať vyhľadávanie`
};


var $c63231bcc300d0df$exports = {};
$c63231bcc300d0df$exports = {
    "Clear search": `Počisti iskanje`
};


var $b61510478bc0e6f6$exports = {};
$b61510478bc0e6f6$exports = {
    "Clear search": `Obriši pretragu`
};


var $ce325e6dd3f9c37a$exports = {};
$ce325e6dd3f9c37a$exports = {
    "Clear search": `Rensa sökning`
};


var $1f7e1cf2285af2b2$exports = {};
$1f7e1cf2285af2b2$exports = {
    "Clear search": `Aramayı temizle`
};


var $2d999353ca652e34$exports = {};
$2d999353ca652e34$exports = {
    "Clear search": `Очистити пошук`
};


var $117b536bfb1ae554$exports = {};
$117b536bfb1ae554$exports = {
    "Clear search": `清除搜索`
};


var $525f6fa4ac26e278$exports = {};
$525f6fa4ac26e278$exports = {
    "Clear search": `清除搜尋條件`
};


$8112f8b883c0272d$exports = {
    "ar-AE": $03c9a1a10de12f06$exports,
    "bg-BG": $4da0c2ffa4ba4159$exports,
    "cs-CZ": $8c59fd0c2c96821b$exports,
    "da-DK": $0a371f9c1df8120f$exports,
    "de-DE": $67f4d0b0de9f8a52$exports,
    "el-GR": $72a312d948f0214b$exports,
    "en-US": $5012d21d933388c1$exports,
    "es-ES": $0159854399308e2e$exports,
    "et-EE": $390613981d970276$exports,
    "fi-FI": $961ae0833f811705$exports,
    "fr-FR": $26d76742decfd829$exports,
    "he-IL": $92ef254c82a5c769$exports,
    "hr-HR": $e0321b43bdefb8b3$exports,
    "hu-HU": $0c1ee0b8d50940d9$exports,
    "it-IT": $b09198915a38946f$exports,
    "ja-JP": $3a9a3d180c3145c0$exports,
    "ko-KR": $b7a611726449f4a3$exports,
    "lt-LT": $d9a3d49db610dd5c$exports,
    "lv-LV": $3ab64b73ea27c23a$exports,
    "nb-NO": $bf5cce1b47d23baf$exports,
    "nl-NL": $4e0c9a9a010e4598$exports,
    "pl-PL": $63cf4a75ec270508$exports,
    "pt-BR": $083b0cad27fdbd06$exports,
    "pt-PT": $1b7f0864d830ba6d$exports,
    "ro-RO": $d6d2588377fc9718$exports,
    "ru-RU": $701c918a4653e946$exports,
    "sk-SK": $7cacc29a1e5f4fbe$exports,
    "sl-SI": $c63231bcc300d0df$exports,
    "sr-SP": $b61510478bc0e6f6$exports,
    "sv-SE": $ce325e6dd3f9c37a$exports,
    "tr-TR": $1f7e1cf2285af2b2$exports,
    "uk-UA": $2d999353ca652e34$exports,
    "zh-CN": $117b536bfb1ae554$exports,
    "zh-TW": $525f6fa4ac26e278$exports
};




function $4d52238874b24f86$export$9bb30bbe003b82e0(props, state, inputRef) {
    let stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/import_$parcel$interopDefault($8112f8b883c0272d$exports))));
    let { isDisabled: isDisabled , isReadOnly: isReadOnly , onSubmit: onSubmit = ()=>{} , onClear: onClear , type: type = "search"  } = props;
    let onKeyDown = (e)=>{
        const key = e.key;
        if (key === "Enter" || key === "Escape") e.preventDefault();
        if (isDisabled || isReadOnly) return;
        if (key === "Enter") onSubmit(state.value);
        if (key === "Escape") {
            state.setValue("");
            if (onClear) onClear();
        }
    };
    let onClearButtonClick = ()=>{
        state.setValue("");
        if (onClear) onClear();
    };
    let onPressStart = ()=>{
        // this is in PressStart for mobile so that touching the clear button doesn't remove focus from
        // the input and close the keyboard
        inputRef.current.focus();
    };
    let { labelProps: labelProps , inputProps: inputProps , descriptionProps: descriptionProps , errorMessageProps: errorMessageProps  } = (0, textfield_dist_import/* useTextField */.E)({
        ...props,
        value: state.value,
        onChange: state.setValue,
        onKeyDown: (0, dist_import/* chain */.tS)(onKeyDown, props.onKeyDown),
        type: type
    }, inputRef);
    return {
        labelProps: labelProps,
        inputProps: {
            ...inputProps,
            // already handled by useSearchFieldState
            defaultValue: undefined
        },
        clearButtonProps: {
            "aria-label": stringFormatter.format("Clear search"),
            excludeFromTabOrder: true,
            // @ts-ignore
            preventFocusOnPress: true,
            isDisabled: isDisabled || isReadOnly,
            onPress: onClearButtonClick,
            onPressStart: onPressStart
        },
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps
    };
}





//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: ../node_modules/@react-stately/utils/dist/import.mjs
var utils_dist_import = __webpack_require__(11960);
;// CONCATENATED MODULE: ../node_modules/@react-stately/searchfield/dist/import.mjs


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2(props) {
    let [value, setValue] = (0, utils_dist_import/* useControlledState */.zk)($0b2218c4e3fe7d7e$var$toString(props.value), $0b2218c4e3fe7d7e$var$toString(props.defaultValue) || "", props.onChange);
    return {
        value: value,
        setValue: setValue
    };
}
function $0b2218c4e3fe7d7e$var$toString(val) {
    if (val == null) return;
    return val.toString();
}





//# sourceMappingURL=module.js.map

;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/searchIcon/dist/keystar-ui-icon-icons-searchIcon.esm.js


const searchIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 11,
    cy: 11,
    r: 8
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m21 21-4.3-4.3"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/text-field/dist/keystar-ui-text-field.esm.js
var keystar_ui_text_field_esm = __webpack_require__(71209);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/search-field/dist/keystar-ui-search-field.esm.js
'use client';












/** Search fields are text fields, specifically designed for search behaviour. */
const SearchField = /*#__PURE__*/(0,react_.forwardRef)(function SearchField(props, forwardedRef) {
  const {
    autoFocus,
    description,
    errorMessage,
    id,
    isDisabled,
    isReadOnly,
    isRequired,
    label,
    showIcon = true,
    ...styleProps
  } = props;
  let domRef = (0,dist_import/* useObjectRef */.B3)(forwardedRef);
  let state = $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2(props);
  let {
    labelProps,
    inputProps,
    clearButtonProps,
    descriptionProps,
    errorMessageProps
  } = $4d52238874b24f86$export$9bb30bbe003b82e0(props, state, domRef);
  let clearButtonVisible = state.value !== '' && !props.isReadOnly;
  let clearButton = /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ClearButton */.Cd, {
    ...clearButtonProps,
    preventFocus: true,
    isDisabled: isDisabled
  });
  let startElement = /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    flexShrink: 0,
    justifyContent: "center",
    pointerEvents: "none",
    width: "element.regular",
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
      src: searchIcon,
      color: props.isDisabled ? 'color.alias.foregroundDisabled' : 'neutralSecondary'
    })
  });
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextFieldPrimitive */.Mt, {
    ref: domRef,
    ...styleProps,
    isDisabled: isDisabled,
    isReadOnly: isReadOnly,
    isRequired: isRequired,
    label: label,
    labelProps: labelProps,
    inputProps: inputProps,
    inputWrapperProps: {
      className: (0,keystar_ui_style_esm/* css */.iv)({
        input: {
          '&[data-adornment="start"]': {
            paddingInlineStart: 0
          },
          '&[data-adornment="end"]': {
            paddingInlineEnd: 0
          },
          '&[data-adornment="both"]': {
            paddingInline: 0
          }
        }
      })
    },
    description: description,
    descriptionProps: descriptionProps,
    errorMessage: errorMessage,
    errorMessageProps: errorMessageProps,
    startElement: showIcon && startElement,
    endElement: clearButtonVisible && clearButton
  });
});



// EXTERNAL MODULE: ../node_modules/@react-stately/selection/dist/import.mjs
var selection_dist_import = __webpack_require__(6216);
;// CONCATENATED MODULE: ../node_modules/@react-stately/grid/dist/import.mjs




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
    let { collection: collection , focusMode: focusMode  } = props;
    let selectionState = (0, selection_dist_import/* useMultipleSelectionState */.q)(props);
    let disabledKeys = (0, react_.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
        props.disabledKeys
    ]);
    let setFocusedKey = selectionState.setFocusedKey;
    selectionState.setFocusedKey = (key, child)=>{
        // If focusMode is cell and an item is focused, focus a child cell instead.
        if (focusMode === "cell" && key != null) {
            let item = collection.getItem(key);
            if ((item === null || item === void 0 ? void 0 : item.type) === "item") {
                var _getLastItem, _getFirstItem;
                let children = (0, collections_dist_import/* getChildNodes */._P)(item, collection);
                if (child === "last") key = (_getLastItem = (0, collections_dist_import/* getLastItem */.s)(children)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
                else key = (_getFirstItem = (0, collections_dist_import/* getFirstItem */.l8)(children)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
            }
        }
        setFocusedKey(key, child);
    };
    let selectionManager = (0, react_.useMemo)(()=>new (0, selection_dist_import/* SelectionManager */.Z)(collection, selectionState), [
        collection,
        selectionState
    ]);
    // Reset focused key if that item is deleted from the collection.
    const cachedCollection = (0, react_.useRef)(null);
    (0, react_.useEffect)(()=>{
        if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
            const node = cachedCollection.current.getItem(selectionState.focusedKey);
            const parentNode = node.parentKey != null && (node.type === "cell" || node.type === "rowheader" || node.type === "column") ? cachedCollection.current.getItem(node.parentKey) : node;
            const cachedRows = cachedCollection.current.rows;
            const rows = collection.rows;
            const diff = cachedRows.length - rows.length;
            let index = Math.min(diff > 1 ? Math.max(parentNode.index - diff + 1, 0) : parentNode.index, rows.length - 1);
            let newRow;
            while(index >= 0){
                if (!selectionManager.isDisabled(rows[index].key) && rows[index].type !== "headerrow") {
                    newRow = rows[index];
                    break;
                }
                // Find next, not disabled row.
                if (index < rows.length - 1) index++;
                else {
                    if (index > parentNode.index) index = parentNode.index;
                    index--;
                }
            }
            if (newRow) {
                const childNodes = newRow.hasChildNodes ? [
                    ...(0, collections_dist_import/* getChildNodes */._P)(newRow, collection)
                ] : [];
                const keyToFocus = newRow.hasChildNodes && parentNode !== node && node.index < childNodes.length ? childNodes[node.index].key : newRow.key;
                selectionState.setFocusedKey(keyToFocus);
            } else selectionState.setFocusedKey(null);
        }
        cachedCollection.current = collection;
    }, [
        collection,
        selectionManager,
        selectionState,
        selectionState.focusedKey
    ]);
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        isKeyboardNavigationDisabled: false,
        selectionManager: selectionManager
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $16805b1b18093c5f$export$de3fdf6493c353d {
    *[Symbol.iterator]() {
        yield* [
            ...this.rows
        ];
    }
    get size() {
        return [
            ...this.rows
        ].length;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        var _;
        return (_ = [
            ...this.rows
        ][0]) === null || _ === void 0 ? void 0 : _.key;
    }
    getLastKey() {
        var _rows_;
        let rows = [
            ...this.rows
        ];
        return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    getChildren(key) {
        let node = this.keyMap.get(key);
        return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
    }
    constructor(opts){
        this.keyMap = new Map();
        this.keyMap = new Map();
        this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
        this.rows = [];
        let visit = (node)=>{
            // If the node is the same object as the previous node for the same key,
            // we can skip this node and its children. We always visit columns though,
            // because we depend on order to build the columns array.
            let prevNode = this.keyMap.get(node.key);
            if (opts.visitNode) node = opts.visitNode(node);
            this.keyMap.set(node.key, node);
            let childKeys = new Set();
            let last;
            for (let child of node.childNodes){
                if (child.type === "cell" && child.parentKey == null) // if child is a cell parent key isn't already established by the collection, match child node to parent row
                child.parentKey = node.key;
                childKeys.add(child.key);
                if (last) {
                    last.nextKey = child.key;
                    child.prevKey = last.key;
                } else child.prevKey = null;
                visit(child);
                last = child;
            }
            if (last) last.nextKey = null;
            // Remove deleted nodes and their children from the key map
            if (prevNode) {
                for (let child of prevNode.childNodes)if (!childKeys.has(child.key)) remove(child);
            }
        };
        let remove = (node)=>{
            this.keyMap.delete(node.key);
            for (let child of node.childNodes)if (this.keyMap.get(child.key) === child) remove(child);
        };
        let last;
        opts.items.forEach((node, i)=>{
            let rowNode = {
                level: 0,
                key: "row-" + i,
                type: "row",
                value: undefined,
                hasChildNodes: true,
                childNodes: [
                    ...node.childNodes
                ],
                rendered: undefined,
                textValue: undefined,
                ...node,
                index: i
            };
            if (last) {
                last.nextKey = rowNode.key;
                rowNode.prevKey = last.key;
            } else rowNode.prevKey = null;
            this.rows.push(rowNode);
            visit(rowNode);
            last = rowNode;
        });
        if (last) last.nextKey = null;
    }
}





//# sourceMappingURL=module.js.map

;// CONCATENATED MODULE: ../node_modules/@react-stately/table/dist/import.mjs




/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {
    return width != null && (!isNaN(width) || String(width).match(/^(\d+)(?=%$)/) !== null);
}
function $6818b1c4fc67028d$export$9078bad4c3934604(width) {
    if (!width) return 1;
    let match = width.match(/^(.+)(?=fr$)/);
    // if width is the incorrect format, just default it to a 1fr
    if (!match) {
        console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, "defaulting to '1fr'");
        return 1;
    }
    return parseFloat(match[0]);
}
function $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {
    if (typeof width === "string") {
        let match = width.match(/^(\d+)(?=%$)/);
        if (!match) throw new Error("Only percentages or numbers are supported for static column widths");
        return tableWidth * (parseFloat(match[0]) / 100);
    }
    return width;
}
function $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {
    return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;
}
function $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {
    return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;
}
function $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {
    let hasNonFrozenItems = false;
    let flexItems = columns.map((column, index)=>{
        var _column_width, _ref, _ref1;
        let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : "1fr";
        let frozen = false;
        let baseSize = 0;
        let flex = 0;
        let targetMainSize = null;
        if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {
            baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);
            frozen = true;
        } else {
            flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);
            if (flex <= 0) frozen = true;
        }
        var _column_minWidth, _ref2;
        let min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);
        let max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);
        let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));
        // 9.7.1
        // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.
        // 9.7.2
        if (frozen) targetMainSize = hypotheticalMainSize;
        else if (baseSize > hypotheticalMainSize) {
            frozen = true;
            targetMainSize = hypotheticalMainSize;
        }
        // 9.7.3
        if (!frozen) hasNonFrozenItems = true;
        return {
            frozen: frozen,
            baseSize: baseSize,
            hypotheticalMainSize: hypotheticalMainSize,
            min: min,
            max: max,
            flex: flex,
            targetMainSize: targetMainSize,
            violation: 0
        };
    });
    // 9.7.4
    // 9.7.4.a
    while(hasNonFrozenItems){
        // 9.7.4.b
        /**
     * Calculate the remaining free space as for initial free space,
     * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is
     * less than one, multiply the initial free space by this sum (of flex factors).
     * If the magnitude of this value is less than the magnitude of
     * the remaining free space, use this as the remaining free space.
     */ let usedWidth = 0;
        let flexFactors = 0;
        flexItems.forEach((item)=>{
            if (item.frozen) usedWidth += item.targetMainSize;
            else {
                usedWidth += item.baseSize;
                flexFactors += item.flex;
            }
        });
        let remainingFreeSpace = availableWidth - usedWidth;
        // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0
        // so no need to check for flexFactors < 1
        // 9.7.4.c
        /**
     * If the remaining free space is zero
     * - Do nothing.
     * Else // remember, we're always in grow mode
     * - Find the ratio of the item’s flex grow factor to the
     * sum of the flex grow factors of all unfrozen items on
     * the line. Set the item’s target main size to its flex
     * base size plus a fraction of the remaining free space
     * proportional to the ratio.
     */ if (remainingFreeSpace > 0) flexItems.forEach((item)=>{
            if (!item.frozen) {
                let ratio = item.flex / flexFactors;
                item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;
            }
        });
        // 9.7.4.d
        /**
     * Fix min/max violations. Clamp each non-frozen item’s
     * target main size by its used min and max main sizes
     * and floor its content-box size at zero. If the item’s
     * target main size was made smaller by this, it’s a max
     * violation. If the item’s target main size was made
     * larger by this, it’s a min violation.
     */ let totalViolation = 0;
        flexItems.forEach((item)=>{
            item.violation = 0;
            if (!item.frozen) {
                let { min: min , max: max , targetMainSize: targetMainSize  } = item;
                item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));
                item.violation = item.targetMainSize - targetMainSize;
                totalViolation += item.violation;
            }
        });
        // 9.7.4.e
        /**
     * Freeze over-flexed items. The total violation is the
     * sum of the adjustments from the previous step
     * ∑(clamped size - unclamped size). If the total violation is:
     * Zero
     * - Freeze all items.
     *
     * Positive
     * - Freeze all the items with min violations.
     *
     * Negative
     * - Freeze all the items with max violations.
     */ hasNonFrozenItems = false;
        flexItems.forEach((item)=>{
            if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;
            else if (!item.frozen) hasNonFrozenItems = true;
        });
    }
    return $6818b1c4fc67028d$var$cascadeRounding(flexItems);
}
function $6818b1c4fc67028d$var$cascadeRounding(flexItems) {
    /*
  Given an array of floats that sum to an integer, this rounds the floats
  and returns an array of integers with the same sum.
  */ let fpTotal = 0;
    let intTotal = 0;
    let roundedArray = [];
    flexItems.forEach(function(item) {
        let float = item.targetMainSize;
        let integer = Math.round(float + fpTotal) - intTotal;
        fpTotal += float;
        intTotal += integer;
        roundedArray.push(integer);
    });
    return roundedArray;
}


class $a9e7ae544a4e41dd$export$7ff77a162970b30e {
    /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */ splitColumnsIntoControlledAndUncontrolled(columns) {
        return columns.reduce((acc, col)=>{
            if (col.props.width != null) acc[0].set(col.key, col);
            else acc[1].set(col.key, col);
            return acc;
        }, [
            new Map(),
            new Map()
        ]);
    }
    /** Takes uncontrolled and controlled widths and joins them into a single Map. */ recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {
        return new Map(columns.map((col)=>{
            if (uncontrolledColumns.has(col.key)) return [
                col.key,
                uncontrolledWidths.get(col.key)
            ];
            else return [
                col.key,
                controlledColumns.get(col.key).props.width
            ];
        }));
    }
    /** Used to make an initial Map of the uncontrolled widths based on default widths. */ getInitialUncontrolledWidths(uncontrolledColumns) {
        var _col_props_defaultWidth, _ref;
        return new Map(Array.from(uncontrolledColumns).map(([key, col])=>{
            var _this, _this_getDefaultWidth;
            return [
                key,
                (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = this).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : "1fr"
            ];
        }));
    }
    getColumnWidth(key) {
        var _this_columnWidths_get;
        return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;
    }
    getColumnMinWidth(key) {
        return this.columnMinWidths.get(key);
    }
    getColumnMaxWidth(key) {
        return this.columnMaxWidths.get(key);
    }
    resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths, col = null, width) {
        let prevColumnWidths = this.columnWidths;
        // resizing a column
        let resizeIndex = Infinity;
        let resizingChanged = new Map([
            ...controlledWidths,
            ...uncontrolledWidths
        ]);
        let percentKeys = new Map();
        let frKeysToTheRight = new Map();
        let minWidths = new Map();
        // freeze columns to the left to their previous pixel value
        collection.columns.forEach((column, i)=>{
            var _column_column_props_width, _column_column_props_width_endsWith;
            let frKey;
            let frValue;
            minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));
            if (col !== column.key && !column.column.props.width && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {
                // uncontrolled don't have props.width for us, so instead get from our state
                frKey = column.key;
                frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));
            } else if (col !== column.key && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(column.column.props.width) && !uncontrolledWidths.get(column.key)) {
                // controlledWidths will be the same in the collection
                frKey = column.key;
                frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(column.column.props.width);
            } else if (col !== column.key && ((_column_column_props_width = column.column.props.width) === null || _column_column_props_width === void 0 ? void 0 : (_column_column_props_width_endsWith = _column_column_props_width.endsWith) === null || _column_column_props_width_endsWith === void 0 ? void 0 : _column_column_props_width_endsWith.call(_column_column_props_width, "%"))) percentKeys.set(column.key, column.column.props.width);
            // don't freeze columns to the right of the resizing one
            if (resizeIndex < i) {
                if (frKey) frKeysToTheRight.set(frKey, frValue);
                return;
            }
            // we already know the new size of the resizing column
            if (column.key === col) {
                resizeIndex = i;
                resizingChanged.set(column.key, Math.floor(width));
                return;
            }
            // freeze column to previous value
            resizingChanged.set(column.key, prevColumnWidths.get(column.key));
        });
        // predict pixels sizes for all columns based on resize
        let columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map((col)=>({
                ...col.column.props,
                key: col.key
            })), resizingChanged, (i)=>this.getDefaultWidth(collection.columns[i]), (i)=>this.getDefaultMinWidth(collection.columns[i]));
        // set all new column widths for onResize event
        // columns going in will be the same order as the columns coming out
        let newWidths = new Map();
        // set all column widths based on calculateColumnSize
        columnWidths.forEach((width, index)=>{
            let key = collection.columns[index].key;
            newWidths.set(key, width);
        });
        // add FR's back as they were to columns to the right
        Array.from(frKeysToTheRight).forEach(([key])=>{
            newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);
        });
        // put back in percents
        Array.from(percentKeys).forEach(([key, width])=>{
            // resizing locks a column to a px width
            if (key === col) return;
            newWidths.set(key, width);
        });
        return newWidths;
    }
    buildColumnWidths(tableWidth, collection, widths) {
        this.columnWidths = new Map();
        this.columnMinWidths = new Map();
        this.columnMaxWidths = new Map();
        // initial layout or table/window resizing
        let columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map((col)=>({
                ...col.column.props,
                key: col.key
            })), widths, (i)=>this.getDefaultWidth(collection.columns[i]), (i)=>this.getDefaultMinWidth(collection.columns[i]));
        // columns going in will be the same order as the columns coming out
        columnWidths.forEach((width, index)=>{
            let key = collection.columns[index].key;
            let column = collection.columns[index];
            this.columnWidths.set(key, width);
            var _column_column_props_minWidth;
            this.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_column_props_minWidth = column.column.props.minWidth) !== null && _column_column_props_minWidth !== void 0 ? _column_column_props_minWidth : this.getDefaultMinWidth(column), tableWidth));
            this.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.column.props.maxWidth, tableWidth));
        });
        return this.columnWidths;
    }
    constructor(options){
        this.columnWidths = new Map();
        this.columnMinWidths = new Map();
        this.columnMaxWidths = new Map();
        var _options_getDefaultWidth;
        this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : ()=>"1fr";
        var _options_getDefaultMinWidth;
        this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : ()=>0;
    }
}


function $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {
    let { getDefaultWidth: getDefaultWidth , getDefaultMinWidth: getDefaultMinWidth , tableWidth: tableWidth = 0  } = props;
    let [resizingColumn, setResizingColumn] = (0, $1BfjW$useState)(null);
    let columnLayout = (0, $1BfjW$useMemo)(()=>new (0, $a9e7ae544a4e41dd$export$7ff77a162970b30e)({
            getDefaultWidth: getDefaultWidth,
            getDefaultMinWidth: getDefaultMinWidth
        }), [
        getDefaultWidth,
        getDefaultMinWidth
    ]);
    let [controlledColumns, uncontrolledColumns] = (0, $1BfjW$useMemo)(()=>columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns), [
        state.collection.columns,
        columnLayout
    ]);
    // uncontrolled column widths
    let [uncontrolledWidths, setUncontrolledWidths] = (0, $1BfjW$useState)(()=>columnLayout.getInitialUncontrolledWidths(uncontrolledColumns));
    // combine columns back into one map that maintains same order as the columns
    let colWidths = (0, $1BfjW$useMemo)(()=>columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns), [
        state.collection.columns,
        uncontrolledWidths,
        uncontrolledColumns,
        controlledColumns,
        columnLayout
    ]);
    let startResize = (0, $1BfjW$useCallback)((key)=>{
        setResizingColumn(key);
    }, [
        setResizingColumn
    ]);
    let updateResizedColumns = (0, $1BfjW$useCallback)((key, width)=>{
        let newControlled = new Map(Array.from(controlledColumns).map(([key, entry])=>[
                key,
                entry.props.width
            ]));
        let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);
        let map = new Map(Array.from(uncontrolledColumns).map(([key])=>[
                key,
                newSizes.get(key)
            ]));
        map.set(key, width);
        setUncontrolledWidths(map);
        return newSizes;
    }, [
        controlledColumns,
        uncontrolledColumns,
        setUncontrolledWidths,
        tableWidth,
        columnLayout,
        state.collection,
        uncontrolledWidths
    ]);
    let endResize = (0, $1BfjW$useCallback)(()=>{
        setResizingColumn(null);
    }, [
        setResizingColumn
    ]);
    (0, $1BfjW$useMemo)(()=>columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths), [
        tableWidth,
        state.collection,
        colWidths,
        columnLayout
    ]);
    return (0, $1BfjW$useMemo)(()=>({
            resizingColumn: resizingColumn,
            updateResizedColumns: updateResizedColumns,
            startResize: startResize,
            endResize: endResize,
            getColumnWidth: (key)=>columnLayout.getColumnWidth(key),
            getColumnMinWidth: (key)=>columnLayout.getColumnMinWidth(key),
            getColumnMaxWidth: (key)=>columnLayout.getColumnMaxWidth(key),
            tableState: state
        }), [
        columnLayout,
        resizingColumn,
        updateResizedColumns,
        startResize,
        endResize,
        state
    ]);
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = "row-header-column-" + Math.random().toString(36).slice(2);
let $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
while($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG)$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = "row-header-column-" + Math.random().toString(36).slice(2);
function $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {
    if (columnNodes.length === 0) return [];
    let columns = [];
    let seen = new Map();
    for (let column of columnNodes){
        let parentKey = column.parentKey;
        let col = [
            column
        ];
        while(parentKey){
            let parent = keyMap.get(parentKey);
            if (!parent) break;
            // If we've already seen this parent, than it is shared
            // with a previous column. If the current column is taller
            // than the previous column, than we need to shift the parent
            // in the previous column so it's level with the current column.
            if (seen.has(parent)) {
                parent.colspan++;
                let { column: column , index: index  } = seen.get(parent);
                if (index > col.length) break;
                for(let i = index; i < col.length; i++)column.splice(i, 0, null);
                // Adjust shifted indices
                for(let i = col.length; i < column.length; i++)// eslint-disable-next-line max-depth
                if (column[i] && seen.has(column[i])) seen.get(column[i]).index = i;
            } else {
                parent.colspan = 1;
                col.push(parent);
                seen.set(parent, {
                    column: col,
                    index: col.length - 1
                });
            }
            parentKey = parent.parentKey;
        }
        columns.push(col);
        column.index = columns.length - 1;
    }
    let maxLength = Math.max(...columns.map((c)=>c.length));
    let headerRows = Array(maxLength).fill(0).map(()=>[]);
    // Convert columns into rows.
    let colIndex = 0;
    for (let column of columns){
        let i = maxLength - 1;
        for (let item of column){
            if (item) {
                // Fill the space up until the current column with a placeholder
                let row = headerRows[i];
                let rowLength = row.reduce((p, c)=>p + c.colspan, 0);
                if (rowLength < colIndex) {
                    let placeholder = {
                        type: "placeholder",
                        key: "placeholder-" + item.key,
                        colspan: colIndex - rowLength,
                        index: rowLength,
                        value: null,
                        rendered: null,
                        level: i,
                        hasChildNodes: false,
                        childNodes: [],
                        textValue: null
                    };
                    // eslint-disable-next-line max-depth
                    if (row.length > 0) {
                        row[row.length - 1].nextKey = placeholder.key;
                        placeholder.prevKey = row[row.length - 1].key;
                    }
                    row.push(placeholder);
                }
                if (row.length > 0) {
                    row[row.length - 1].nextKey = item.key;
                    item.prevKey = row[row.length - 1].key;
                }
                item.level = i;
                item.colIndex = colIndex;
                row.push(item);
            }
            i--;
        }
        colIndex++;
    }
    // Add placeholders at the end of each row that is shorter than the maximum
    let i = 0;
    for (let row of headerRows){
        let rowLength = row.reduce((p, c)=>p + c.colspan, 0);
        if (rowLength < columnNodes.length) {
            let placeholder = {
                type: "placeholder",
                key: "placeholder-" + row[row.length - 1].key,
                colspan: columnNodes.length - rowLength,
                index: rowLength,
                value: null,
                rendered: null,
                level: i,
                hasChildNodes: false,
                childNodes: [],
                textValue: null,
                prevKey: row[row.length - 1].key
            };
            row.push(placeholder);
        }
        i++;
    }
    return headerRows.map((childNodes, index)=>{
        let row = {
            type: "headerrow",
            key: "headerrow-" + index,
            index: index,
            value: null,
            rendered: null,
            level: 0,
            hasChildNodes: true,
            childNodes: childNodes,
            textValue: null
        };
        return row;
    });
}
class $788781baa30117fa$export$596e1b2e2cf93690 extends (0, $16805b1b18093c5f$export$de3fdf6493c353d) {
    *[Symbol.iterator]() {
        yield* this.body.childNodes;
    }
    get size() {
        return this._size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        var _getFirstItem;
        return (_getFirstItem = (0, collections_dist_import/* getFirstItem */.l8)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
    }
    getLastKey() {
        var _getLastItem;
        return (_getLastItem = (0, collections_dist_import/* getLastItem */.s)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    getTextValue(key) {
        let row = this.getItem(key);
        if (!row) return "";
        // If the row has a textValue, use that.
        if (row.textValue) return row.textValue;
        // Otherwise combine the text of each of the row header columns.
        let rowHeaderColumnKeys = this.rowHeaderColumnKeys;
        if (rowHeaderColumnKeys) {
            let text = [];
            for (let cell of row.childNodes){
                let column = this.columns[cell.index];
                if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);
                if (text.length === rowHeaderColumnKeys.size) break;
            }
            return text.join(" ");
        }
        return "";
    }
    constructor(nodes, prev, opts){
        let rowHeaderColumnKeys = new Set();
        let body;
        let columns = [];
        // Add cell for selection checkboxes if needed.
        if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
            let rowHeaderColumn = {
                type: "column",
                key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,
                value: null,
                textValue: "",
                level: 0,
                index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,
                hasChildNodes: false,
                rendered: null,
                childNodes: [],
                props: {
                    isSelectionCell: true
                }
            };
            columns.unshift(rowHeaderColumn);
        }
        // Add cell for drag buttons if needed.
        if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {
            let rowHeaderColumn = {
                type: "column",
                key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,
                value: null,
                textValue: "",
                level: 0,
                index: 0,
                hasChildNodes: false,
                rendered: null,
                childNodes: [],
                props: {
                    isDragButtonCell: true
                }
            };
            columns.unshift(rowHeaderColumn);
        }
        let rows = [];
        let columnKeyMap = new Map();
        let visit = (node)=>{
            switch(node.type){
                case "body":
                    body = node;
                    break;
                case "column":
                    columnKeyMap.set(node.key, node);
                    if (!node.hasChildNodes) {
                        columns.push(node);
                        if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);
                    }
                    break;
                case "item":
                    rows.push(node);
                    return; // do not go into childNodes
            }
            for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);
        headerRows.forEach((row, i)=>rows.splice(i, 0, row));
        super({
            columnCount: columns.length,
            items: rows,
            visitNode: (node)=>{
                node.column = columns[node.index];
                return node;
            }
        });
        this._size = 0;
        this.columns = columns;
        this.rowHeaderColumnKeys = rowHeaderColumnKeys;
        this.body = body;
        this.headerRows = headerRows;
        this._size = [
            ...body.childNodes
        ].length;
        // Default row header column to the first one.
        if (this.rowHeaderColumnKeys.size === 0) {
            if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
                if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) this.rowHeaderColumnKeys.add(this.columns[2].key);
                else this.rowHeaderColumnKeys.add(this.columns[1].key);
            } else this.rowHeaderColumnKeys.add(this.columns[0].key);
        }
    }
}



const $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {
    ascending: "descending",
    descending: "ascending"
};
function $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {
    let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (0, react_.useState)(false);
    let { selectionMode: selectionMode = "none" , showSelectionCheckboxes: showSelectionCheckboxes , showDragButtons: showDragButtons  } = props;
    let context = (0, react_.useMemo)(()=>({
            showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== "none",
            showDragButtons: showDragButtons,
            selectionMode: selectionMode,
            columns: []
        }), [
        props.children,
        showSelectionCheckboxes,
        selectionMode,
        showDragButtons
    ]);
    let collection = (0, collections_dist_import/* useCollection */.Kx)(props, (0, react_.useCallback)((nodes)=>new (0, $788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context), [
        context
    ]), context);
    let { disabledKeys: disabledKeys , selectionManager: selectionManager  } = (0, $62967d126f3aa823$export$4007ac09ff9c68ed)({
        ...props,
        collection: collection,
        disabledBehavior: props.disabledBehavior || "selection"
    });
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        selectionManager: selectionManager,
        showSelectionCheckboxes: props.showSelectionCheckboxes || false,
        sortDescriptor: props.sortDescriptor,
        isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
        setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,
        sort (columnKey, direction) {
            var _props_sortDescriptor;
            props.onSortChange({
                column: columnKey,
                direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : "ascending"
            });
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $312ae3b56a94a86e$var$TableHeader(props) {
    return null;
}
$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props, context) {
    let { children: children , columns: columns  } = props;
    // Clear columns so they aren't double added in strict mode.
    context.columns = [];
    if (typeof children === "function") {
        if (!columns) throw new Error("props.children was a function but props.columns is missing");
        for (let column of columns)yield {
            type: "column",
            value: column,
            renderer: children
        };
    } else {
        let columns = [];
        (0, react_).Children.forEach(children, (column)=>{
            columns.push({
                type: "column",
                element: column
            });
        });
        yield* columns;
    }
};
/**
 * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `columns` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $4ae5314bf50db1a3$var$TableBody(props) {
    return null;
}
$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {
    let { children: children , items: items  } = props;
    yield {
        type: "body",
        hasChildNodes: true,
        props: props,
        *childNodes () {
            if (typeof children === "function") {
                if (!items) throw new Error("props.children was a function but props.items is missing");
                for (let item of items)yield {
                    type: "item",
                    value: item,
                    renderer: children
                };
            } else {
                let items = [];
                (0, react_).Children.forEach(children, (item)=>{
                    items.push({
                        type: "item",
                        element: item
                    });
                });
                yield* items;
            }
        }
    };
};
/**
 * A TableBody is a container for the Row elements of a Table. Rows can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `items` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $1cd244557c2f97d5$var$Column(props) {
    return null;
}
$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context) {
    let { title: title , children: children , childColumns: childColumns  } = props;
    let rendered = title || children;
    let textValue = props.textValue || (typeof rendered === "string" ? rendered : "") || props["aria-label"];
    let fullNodes = yield {
        type: "column",
        hasChildNodes: !!childColumns || title && (0, react_).Children.count(children) > 0,
        rendered: rendered,
        textValue: textValue,
        props: props,
        *childNodes () {
            if (childColumns) for (let child of childColumns)yield {
                type: "column",
                value: child
            };
            else if (title) {
                let childColumns = [];
                (0, react_).Children.forEach(children, (child)=>{
                    childColumns.push({
                        type: "column",
                        element: child
                    });
                });
                yield* childColumns;
            }
        },
        shouldInvalidate (newContext) {
            // This is a bit of a hack, but it works.
            // If this method is called, then there's a cached version of this node available.
            // But, we need to keep the list of columns in the new context up to date.
            updateContext(newContext);
            return false;
        }
    };
    let updateContext = (context)=>{
        // register leaf columns on the context so that <Row> can access them
        for (let node of fullNodes)if (!node.hasChildNodes) context.columns.push(node);
    };
    updateContext(context);
};
/**
 * A Column represents a field of each item within a Table. Columns may also contain nested
 * Column elements to represent column groups. Nested columns can be statically defined as
 * children, or dynamically generated using a function based on the `childColumns` prop.
 */ // We don't want getCollectionNode to show up in the type definition
let $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $70d70eb16ea48428$var$Row(props) {
    return null;
}
$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {
    let { children: children , textValue: textValue  } = props;
    yield {
        type: "item",
        props: props,
        textValue: textValue,
        "aria-label": props["aria-label"],
        hasChildNodes: true,
        *childNodes () {
            // Process cells first
            if (context.showDragButtons) yield {
                type: "cell",
                key: "header-drag",
                props: {
                    isDragButtonCell: true
                }
            };
            if (context.showSelectionCheckboxes && context.selectionMode !== "none") yield {
                type: "cell",
                key: "header",
                props: {
                    isSelectionCell: true
                }
            };
            if (typeof children === "function") for (let column of context.columns)yield {
                type: "cell",
                element: children(column.key),
                key: column.key // this is combined with the row key by CollectionBuilder
            };
            else {
                let cells = [];
                (0, react_).Children.forEach(children, (cell)=>{
                    cells.push({
                        type: "cell",
                        element: cell
                    });
                });
                if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
                yield* cells;
            }
        },
        shouldInvalidate (newContext) {
            // Invalidate all rows if the columns changed.
            return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i)=>c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;
        }
    };
};
/**
 * A Row represents a single item in a Table and contains Cell elements for each column.
 * Cells can be statically defined as children, or generated dynamically using a function
 * based on the columns defined in the TableHeader.
 */ // We don't want getCollectionNode to show up in the type definition
let $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $941d1d9a6a28982a$var$Cell(props) {
    return null;
}
$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {
    let { children: children  } = props;
    let textValue = props.textValue || (typeof children === "string" ? children : "") || props["aria-label"] || "";
    yield {
        type: "cell",
        props: props,
        rendered: children,
        textValue: textValue,
        "aria-label": props["aria-label"],
        hasChildNodes: false
    };
};
/**
 * A Cell represents the value of a single Column within a Table Row.
 */ // We don't want getCollectionNode to show up in the type definition
let $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;








//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: ../node_modules/@react-aria/focus/dist/import.mjs
var focus_dist_import = __webpack_require__(46848);
// EXTERNAL MODULE: ../node_modules/@react-aria/grid/dist/import.mjs
var grid_dist_import = __webpack_require__(54081);
// EXTERNAL MODULE: ../node_modules/@react-aria/live-announcer/dist/import.mjs
var live_announcer_dist_import = __webpack_require__(91886);
;// CONCATENATED MODULE: ../node_modules/@react-aria/table/dist/import.mjs










function dist_import_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $2140fb2337097f2d$export$552312adfd451dab = new WeakMap();
function $2140fb2337097f2d$var$normalizeKey(key) {
    if (typeof key === "string") return key.replace(/\s*/g, "");
    return "" + key;
}
function $2140fb2337097f2d$export$37cd4213f2ad742e(state, columnKey) {
    let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
    if (!gridId) throw new Error("Unknown grid");
    return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey) {
    let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
    if (!gridId) throw new Error("Unknown grid");
    return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(rowKey)}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$85069b70317f543(state, rowKey) {
    // A row is labelled by it's row headers.
    return [
        ...state.collection.rowHeaderColumnKeys
    ].map((columnKey)=>$2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey)).join(" ");
}


var $7476b46781682bf5$exports = {};
var $ce3de3ff2fd66848$exports = {};
$ce3de3ff2fd66848$exports = {
    "ascending": `تصاعدي`,
    "ascendingSort": (args)=>`ترتيب حسب العمود ${args.columnName} بترتيب تصاعدي`,
    "columnSize": (args)=>`${args.value} بالبكسل`,
    "descending": `تنازلي`,
    "descendingSort": (args)=>`ترتيب حسب العمود ${args.columnName} بترتيب تنازلي`,
    "resizerDescription": `اضغط على مفتاح Enter لبدء تغيير الحجم`,
    "select": `تحديد`,
    "selectAll": `تحديد الكل`,
    "sortable": `عمود قابل للترتيب`
};


var $cb80dcce530985b9$exports = {};
$cb80dcce530985b9$exports = {
    "ascending": `възходящ`,
    "ascendingSort": (args)=>`сортирано по колона ${args.columnName} във възходящ ред`,
    "columnSize": (args)=>`${args.value} пиксела`,
    "descending": `низходящ`,
    "descendingSort": (args)=>`сортирано по колона ${args.columnName} в низходящ ред`,
    "resizerDescription": `Натиснете „Enter“, за да започнете да преоразмерявате`,
    "select": `Изберете`,
    "selectAll": `Изберете всичко`,
    "sortable": `сортираща колона`
};


var $68ac86749db4c0fb$exports = {};
$68ac86749db4c0fb$exports = {
    "ascending": `vzestupně`,
    "ascendingSort": (args)=>`řazeno vzestupně podle sloupce ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixelů`,
    "descending": `sestupně`,
    "descendingSort": (args)=>`řazeno sestupně podle sloupce ${args.columnName}`,
    "resizerDescription": `Stisknutím klávesy Enter začnete měnit velikost`,
    "select": `Vybrat`,
    "selectAll": `Vybrat vše`,
    "sortable": `sloupec s možností řazení`
};


var $9a6cbac08487e661$exports = {};
$9a6cbac08487e661$exports = {
    "ascending": `stigende`,
    "ascendingSort": (args)=>`sorteret efter kolonne ${args.columnName} i stigende rækkefølge`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `faldende`,
    "descendingSort": (args)=>`sorteret efter kolonne ${args.columnName} i faldende rækkefølge`,
    "resizerDescription": `Tryk på Enter for at ændre størrelse`,
    "select": `Vælg`,
    "selectAll": `Vælg alle`,
    "sortable": `sorterbar kolonne`
};


var $c963661d89486e72$exports = {};
$c963661d89486e72$exports = {
    "ascending": `aufsteigend`,
    "ascendingSort": (args)=>`sortiert nach Spalte ${args.columnName} in aufsteigender Reihenfolge`,
    "columnSize": (args)=>`${args.value} Pixel`,
    "descending": `absteigend`,
    "descendingSort": (args)=>`sortiert nach Spalte ${args.columnName} in absteigender Reihenfolge`,
    "resizerDescription": `Eingabetaste zum Starten der Größenänderung drücken`,
    "select": `Auswählen`,
    "selectAll": `Alles auswählen`,
    "sortable": `sortierbare Spalte`
};


var $ac03861c6e8605f4$exports = {};
$ac03861c6e8605f4$exports = {
    "ascending": `αύξουσα`,
    "ascendingSort": (args)=>`διαλογή ανά στήλη ${args.columnName} σε αύξουσα σειρά`,
    "columnSize": (args)=>`${args.value} pixel`,
    "descending": `φθίνουσα`,
    "descendingSort": (args)=>`διαλογή ανά στήλη ${args.columnName} σε φθίνουσα σειρά`,
    "resizerDescription": `Πατήστε Enter για έναρξη της αλλαγής μεγέθους`,
    "select": `Επιλογή`,
    "selectAll": `Επιλογή όλων`,
    "sortable": `Στήλη διαλογής`
};


var $09e6b82e0d6e466a$exports = {};
$09e6b82e0d6e466a$exports = {
    "select": `Select`,
    "selectAll": `Select All`,
    "sortable": `sortable column`,
    "ascending": `ascending`,
    "descending": `descending`,
    "ascendingSort": (args)=>`sorted by column ${args.columnName} in ascending order`,
    "descendingSort": (args)=>`sorted by column ${args.columnName} in descending order`,
    "columnSize": (args)=>`${args.value} pixels`,
    "resizerDescription": `Press Enter to start resizing`
};


var $8cc39eb66c2bf220$exports = {};
$8cc39eb66c2bf220$exports = {
    "ascending": `de subida`,
    "ascendingSort": (args)=>`ordenado por columna ${args.columnName} en orden de subida`,
    "columnSize": (args)=>`${args.value} píxeles`,
    "descending": `de bajada`,
    "descendingSort": (args)=>`ordenado por columna ${args.columnName} en orden de bajada`,
    "resizerDescription": `Pulse Intro para empezar a redimensionar`,
    "select": `Seleccionar`,
    "selectAll": `Seleccionar todos`,
    "sortable": `columna ordenable`
};


var $4e11db3c25a38112$exports = {};
$4e11db3c25a38112$exports = {
    "ascending": `tõusev järjestus`,
    "ascendingSort": (args)=>`sorditud veeru järgi ${args.columnName} tõusvas järjestuses`,
    "columnSize": (args)=>`${args.value} pikslit`,
    "descending": `laskuv järjestus`,
    "descendingSort": (args)=>`sorditud veeru järgi ${args.columnName} laskuvas järjestuses`,
    "resizerDescription": `Suuruse muutmise alustamiseks vajutage klahvi Enter`,
    "select": `Vali`,
    "selectAll": `Vali kõik`,
    "sortable": `sorditav veerg`
};


var $da1e751a92575e02$exports = {};
$da1e751a92575e02$exports = {
    "ascending": `nouseva`,
    "ascendingSort": (args)=>`lajiteltu sarakkeen ${args.columnName} mukaan nousevassa järjestyksessä`,
    "columnSize": (args)=>`${args.value} pikseliä`,
    "descending": `laskeva`,
    "descendingSort": (args)=>`lajiteltu sarakkeen ${args.columnName} mukaan laskevassa järjestyksessä`,
    "resizerDescription": `Aloita koon muutos painamalla Enter-näppäintä`,
    "select": `Valitse`,
    "selectAll": `Valitse kaikki`,
    "sortable": `lajiteltava sarake`
};


var $1b5d6c6c47d55106$exports = {};
$1b5d6c6c47d55106$exports = {
    "ascending": `croissant`,
    "ascendingSort": (args)=>`trié en fonction de la colonne ${args.columnName} par ordre croissant`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `décroissant`,
    "descendingSort": (args)=>`trié en fonction de la colonne ${args.columnName} par ordre décroissant`,
    "resizerDescription": `Appuyez sur Entrée pour commencer le redimensionnement.`,
    "select": `Sélectionner`,
    "selectAll": `Sélectionner tout`,
    "sortable": `colonne triable`
};


var $7c18ba27b86d3308$exports = {};
$7c18ba27b86d3308$exports = {
    "ascending": `עולה`,
    "ascendingSort": (args)=>`מוין לפי עמודה ${args.columnName} בסדר עולה`,
    "columnSize": (args)=>`${args.value} פיקסלים`,
    "descending": `יורד`,
    "descendingSort": (args)=>`מוין לפי עמודה ${args.columnName} בסדר יורד`,
    "resizerDescription": `הקש Enter כדי לשנות את הגודל`,
    "select": `בחר`,
    "selectAll": `בחר הכול`,
    "sortable": `עמודה שניתן למיין`
};


var $2cb40998e20e8a46$exports = {};
$2cb40998e20e8a46$exports = {
    "ascending": `rastući`,
    "ascendingSort": (args)=>`razvrstano po stupcima ${args.columnName} rastućem redoslijedom`,
    "columnSize": (args)=>`${args.value} piksela`,
    "descending": `padajući`,
    "descendingSort": (args)=>`razvrstano po stupcima ${args.columnName} padajućim redoslijedom`,
    "resizerDescription": `Pritisnite Enter da biste započeli promenu veličine`,
    "select": `Odaberite`,
    "selectAll": `Odaberite sve`,
    "sortable": `stupac koji se može razvrstati`
};


var $189e23eec1d6aa3a$exports = {};
$189e23eec1d6aa3a$exports = {
    "ascending": `növekvő`,
    "ascendingSort": (args)=>`rendezve a(z) ${args.columnName} oszlop szerint, növekvő sorrendben`,
    "columnSize": (args)=>`${args.value} képpont`,
    "descending": `csökkenő`,
    "descendingSort": (args)=>`rendezve a(z) ${args.columnName} oszlop szerint, csökkenő sorrendben`,
    "resizerDescription": `Nyomja le az Enter billentyűt az átméretezés megkezdéséhez`,
    "select": `Kijelölés`,
    "selectAll": `Összes kijelölése`,
    "sortable": `rendezendő oszlop`
};


var $3c5ec8e4f015dfd0$exports = {};
$3c5ec8e4f015dfd0$exports = {
    "ascending": `crescente`,
    "ascendingSort": (args)=>`in ordine crescente in base alla colonna ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixel`,
    "descending": `decrescente`,
    "descendingSort": (args)=>`in ordine decrescente in base alla colonna ${args.columnName}`,
    "resizerDescription": `Premi Invio per iniziare a ridimensionare`,
    "select": `Seleziona`,
    "selectAll": `Seleziona tutto`,
    "sortable": `colonna ordinabile`
};


var $d021d50e6b315ebb$exports = {};
$d021d50e6b315ebb$exports = {
    "ascending": `昇順`,
    "ascendingSort": (args)=>`列 ${args.columnName} を昇順で並べ替え`,
    "columnSize": (args)=>`${args.value} ピクセル`,
    "descending": `降順`,
    "descendingSort": (args)=>`列 ${args.columnName} を降順で並べ替え`,
    "resizerDescription": `Enter キーを押してサイズ変更を開始`,
    "select": `選択`,
    "selectAll": `すべて選択`,
    "sortable": `並べ替え可能な列`
};


var $52535c35c24ec937$exports = {};
$52535c35c24ec937$exports = {
    "ascending": `오름차순`,
    "ascendingSort": (args)=>`${args.columnName} 열을 기준으로 오름차순으로 정렬됨`,
    "columnSize": (args)=>`${args.value} 픽셀`,
    "descending": `내림차순`,
    "descendingSort": (args)=>`${args.columnName} 열을 기준으로 내림차순으로 정렬됨`,
    "resizerDescription": `크기 조정을 시작하려면 Enter를 누르세요.`,
    "select": `선택`,
    "selectAll": `모두 선택`,
    "sortable": `정렬 가능한 열`
};


var $b37ee03672edfd1d$exports = {};
$b37ee03672edfd1d$exports = {
    "ascending": `didėjančia tvarka`,
    "ascendingSort": (args)=>`surikiuota pagal stulpelį ${args.columnName} didėjančia tvarka`,
    "columnSize": (args)=>`${args.value} piks.`,
    "descending": `mažėjančia tvarka`,
    "descendingSort": (args)=>`surikiuota pagal stulpelį ${args.columnName} mažėjančia tvarka`,
    "resizerDescription": `Paspauskite „Enter“, kad pradėtumėte keisti dydį`,
    "select": `Pasirinkti`,
    "selectAll": `Pasirinkti viską`,
    "sortable": `rikiuojamas stulpelis`
};


var $c7df6686b4189d56$exports = {};
$c7df6686b4189d56$exports = {
    "ascending": `augošā secībā`,
    "ascendingSort": (args)=>`kārtots pēc kolonnas ${args.columnName} augošā secībā`,
    "columnSize": (args)=>`${args.value} pikseļi`,
    "descending": `dilstošā secībā`,
    "descendingSort": (args)=>`kārtots pēc kolonnas ${args.columnName} dilstošā secībā`,
    "resizerDescription": `Nospiediet Enter, lai sāktu izmēru mainīšanu`,
    "select": `Atlasīt`,
    "selectAll": `Atlasīt visu`,
    "sortable": `kārtojamā kolonna`
};


var $da07fe8ec87e6b68$exports = {};
$da07fe8ec87e6b68$exports = {
    "ascending": `stigende`,
    "ascendingSort": (args)=>`sortert etter kolonne ${args.columnName} i stigende rekkefølge`,
    "columnSize": (args)=>`${args.value} piksler`,
    "descending": `synkende`,
    "descendingSort": (args)=>`sortert etter kolonne ${args.columnName} i synkende rekkefølge`,
    "resizerDescription": `Trykk på Enter for å starte størrelsesendring`,
    "select": `Velg`,
    "selectAll": `Velg alle`,
    "sortable": `kolonne som kan sorteres`
};


var $64b7e390f5791490$exports = {};
$64b7e390f5791490$exports = {
    "ascending": `oplopend`,
    "ascendingSort": (args)=>`gesorteerd in oplopende volgorde in kolom ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `aflopend`,
    "descendingSort": (args)=>`gesorteerd in aflopende volgorde in kolom ${args.columnName}`,
    "resizerDescription": `Druk op Enter om het formaat te wijzigen`,
    "select": `Selecteren`,
    "selectAll": `Alles selecteren`,
    "sortable": `sorteerbare kolom`
};


var $2a03621e773f1678$exports = {};
$2a03621e773f1678$exports = {
    "ascending": `rosnąco`,
    "ascendingSort": (args)=>`posortowano według kolumny ${args.columnName} w porządku rosnącym`,
    "columnSize": (args)=>`Liczba pikseli: ${args.value}`,
    "descending": `malejąco`,
    "descendingSort": (args)=>`posortowano według kolumny ${args.columnName} w porządku malejącym`,
    "resizerDescription": `Naciśnij Enter, aby rozpocząć zmienianie rozmiaru`,
    "select": `Zaznacz`,
    "selectAll": `Zaznacz wszystko`,
    "sortable": `kolumna z możliwością sortowania`
};


var $0a79c0aba9e5ecc6$exports = {};
$0a79c0aba9e5ecc6$exports = {
    "ascending": `crescente`,
    "ascendingSort": (args)=>`classificado pela coluna ${args.columnName} em ordem crescente`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `decrescente`,
    "descendingSort": (args)=>`classificado pela coluna ${args.columnName} em ordem decrescente`,
    "resizerDescription": `Pressione Enter para começar a redimensionar`,
    "select": `Selecionar`,
    "selectAll": `Selecionar tudo`,
    "sortable": `coluna classificável`
};


var $de7b4d0f7dc86fc8$exports = {};
$de7b4d0f7dc86fc8$exports = {
    "ascending": `ascendente`,
    "ascendingSort": (args)=>`Ordenar por coluna ${args.columnName} em ordem ascendente`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `descendente`,
    "descendingSort": (args)=>`Ordenar por coluna ${args.columnName} em ordem descendente`,
    "resizerDescription": `Prima Enter para iniciar o redimensionamento`,
    "select": `Selecionar`,
    "selectAll": `Selecionar tudo`,
    "sortable": `Coluna ordenável`
};


var $28ea7e849d77bd1c$exports = {};
$28ea7e849d77bd1c$exports = {
    "ascending": `crescătoare`,
    "ascendingSort": (args)=>`sortate după coloana ${args.columnName} în ordine crescătoare`,
    "columnSize": (args)=>`${args.value} pixeli`,
    "descending": `descrescătoare`,
    "descendingSort": (args)=>`sortate după coloana ${args.columnName} în ordine descrescătoare`,
    "resizerDescription": `Apăsați pe Enter pentru a începe redimensionarea`,
    "select": `Selectare`,
    "selectAll": `Selectare totală`,
    "sortable": `coloană sortabilă`
};


var $9a09321cf046b187$exports = {};
$9a09321cf046b187$exports = {
    "ascending": `возрастание`,
    "ascendingSort": (args)=>`сортировать столбец ${args.columnName} в порядке возрастания`,
    "columnSize": (args)=>`${args.value} пикс.`,
    "descending": `убывание`,
    "descendingSort": (args)=>`сортировать столбец ${args.columnName} в порядке убывания`,
    "resizerDescription": `Нажмите клавишу Enter для начала изменения размеров`,
    "select": `Выбрать`,
    "selectAll": `Выбрать все`,
    "sortable": `сортируемый столбец`
};


var $5afe469a63fcac7b$exports = {};
$5afe469a63fcac7b$exports = {
    "ascending": `vzostupne`,
    "ascendingSort": (args)=>`zoradené zostupne podľa stĺpca ${args.columnName}`,
    "columnSize": (args)=>`Počet pixelov: ${args.value}`,
    "descending": `zostupne`,
    "descendingSort": (args)=>`zoradené zostupne podľa stĺpca ${args.columnName}`,
    "resizerDescription": `Stlačením klávesu Enter začnete zmenu veľkosti`,
    "select": `Vybrať`,
    "selectAll": `Vybrať všetko`,
    "sortable": `zoraditeľný stĺpec`
};


var $2956757ac31a7ce2$exports = {};
$2956757ac31a7ce2$exports = {
    "ascending": `naraščajoče`,
    "ascendingSort": (args)=>`razvrščeno po stolpcu ${args.columnName} v naraščajočem vrstnem redu`,
    "columnSize": (args)=>`${args.value} slikovnih pik`,
    "descending": `padajoče`,
    "descendingSort": (args)=>`razvrščeno po stolpcu ${args.columnName} v padajočem vrstnem redu`,
    "resizerDescription": `Pritisnite tipko Enter da začnete spreminjati velikost`,
    "select": `Izberite`,
    "selectAll": `Izberite vse`,
    "sortable": `razvrstljivi stolpec`
};


var $cedee0e66b175529$exports = {};
$cedee0e66b175529$exports = {
    "ascending": `rastući`,
    "ascendingSort": (args)=>`sortirano po kolonama ${args.columnName} padajućim redosledom`,
    "columnSize": (args)=>`${args.value} piksela`,
    "descending": `padajući`,
    "descendingSort": (args)=>`sortirano po kolonama ${args.columnName} padajućim redosledom`,
    "resizerDescription": `Pritisnite Enter da biste započeli promenu veličine`,
    "select": `Izaberite`,
    "selectAll": `Izaberite sve`,
    "sortable": `kolona koja se može sortirati`
};


var $6db19998ba4427da$exports = {};
$6db19998ba4427da$exports = {
    "ascending": `stigande`,
    "ascendingSort": (args)=>`sorterat på kolumn ${args.columnName} i stigande ordning`,
    "columnSize": (args)=>`${args.value} pixlar`,
    "descending": `fallande`,
    "descendingSort": (args)=>`sorterat på kolumn ${args.columnName} i fallande ordning`,
    "resizerDescription": `Tryck på Retur för att börja ändra storlek`,
    "select": `Markera`,
    "selectAll": `Markera allt`,
    "sortable": `sorterbar kolumn`
};


var $166b7c9cc1adb1a1$exports = {};
$166b7c9cc1adb1a1$exports = {
    "ascending": `artan sırada`,
    "ascendingSort": (args)=>`${args.columnName} sütuna göre artan düzende sırala`,
    "columnSize": (args)=>`${args.value} piksel`,
    "descending": `azalan sırada`,
    "descendingSort": (args)=>`${args.columnName} sütuna göre azalan düzende sırala`,
    "resizerDescription": `Yeniden boyutlandırmak için Enter'a basın`,
    "select": `Seç`,
    "selectAll": `Tümünü Seç`,
    "sortable": `Sıralanabilir sütun`
};


var $c7ab180b401e49ff$exports = {};
$c7ab180b401e49ff$exports = {
    "ascending": `висхідний`,
    "ascendingSort": (args)=>`відсортовано за стовпцем ${args.columnName} у висхідному порядку`,
    "columnSize": (args)=>`${args.value} пікс.`,
    "descending": `низхідний`,
    "descendingSort": (args)=>`відсортовано за стовпцем ${args.columnName} у низхідному порядку`,
    "resizerDescription": `Натисніть Enter, щоб почати зміну розміру`,
    "select": `Вибрати`,
    "selectAll": `Вибрати все`,
    "sortable": `сортувальний стовпець`
};


var $1648ec00941567f3$exports = {};
$1648ec00941567f3$exports = {
    "ascending": `升序`,
    "ascendingSort": (args)=>`按列 ${args.columnName} 升序排序`,
    "columnSize": (args)=>`${args.value} 像素`,
    "descending": `降序`,
    "descendingSort": (args)=>`按列 ${args.columnName} 降序排序`,
    "resizerDescription": `按“输入”键开始调整大小。`,
    "select": `选择`,
    "selectAll": `全选`,
    "sortable": `可排序的列`
};


var $b26f22384b3c1526$exports = {};
$b26f22384b3c1526$exports = {
    "ascending": `遞增`,
    "ascendingSort": (args)=>`已依據「${args.columnName}」欄遞增排序`,
    "columnSize": (args)=>`${args.value} 像素`,
    "descending": `遞減`,
    "descendingSort": (args)=>`已依據「${args.columnName}」欄遞減排序`,
    "resizerDescription": `按 Enter 鍵以開始調整大小`,
    "select": `選取`,
    "selectAll": `全選`,
    "sortable": `可排序的欄`
};


$7476b46781682bf5$exports = {
    "ar-AE": $ce3de3ff2fd66848$exports,
    "bg-BG": $cb80dcce530985b9$exports,
    "cs-CZ": $68ac86749db4c0fb$exports,
    "da-DK": $9a6cbac08487e661$exports,
    "de-DE": $c963661d89486e72$exports,
    "el-GR": $ac03861c6e8605f4$exports,
    "en-US": $09e6b82e0d6e466a$exports,
    "es-ES": $8cc39eb66c2bf220$exports,
    "et-EE": $4e11db3c25a38112$exports,
    "fi-FI": $da1e751a92575e02$exports,
    "fr-FR": $1b5d6c6c47d55106$exports,
    "he-IL": $7c18ba27b86d3308$exports,
    "hr-HR": $2cb40998e20e8a46$exports,
    "hu-HU": $189e23eec1d6aa3a$exports,
    "it-IT": $3c5ec8e4f015dfd0$exports,
    "ja-JP": $d021d50e6b315ebb$exports,
    "ko-KR": $52535c35c24ec937$exports,
    "lt-LT": $b37ee03672edfd1d$exports,
    "lv-LV": $c7df6686b4189d56$exports,
    "nb-NO": $da07fe8ec87e6b68$exports,
    "nl-NL": $64b7e390f5791490$exports,
    "pl-PL": $2a03621e773f1678$exports,
    "pt-BR": $0a79c0aba9e5ecc6$exports,
    "pt-PT": $de7b4d0f7dc86fc8$exports,
    "ro-RO": $28ea7e849d77bd1c$exports,
    "ru-RU": $9a09321cf046b187$exports,
    "sk-SK": $5afe469a63fcac7b$exports,
    "sl-SI": $2956757ac31a7ce2$exports,
    "sr-SP": $cedee0e66b175529$exports,
    "sv-SE": $6db19998ba4427da$exports,
    "tr-TR": $166b7c9cc1adb1a1$exports,
    "uk-UA": $c7ab180b401e49ff$exports,
    "zh-CN": $1648ec00941567f3$exports,
    "zh-TW": $b26f22384b3c1526$exports
};




/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $0ba3c81c7f1caedd$export$da43f8f5cb04028d extends (0, grid_dist_import/* GridKeyboardDelegate */.ip) {
    isCell(node) {
        return node.type === "cell" || node.type === "rowheader" || node.type === "column";
    }
    getKeyBelow(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus was on a column, then focus the first child column if any,
        // or find the corresponding cell in the first row.
        if (startItem.type === "column") {
            let child = (0, collections_dist_import/* getFirstItem */.l8)((0, collections_dist_import/* getChildNodes */._P)(startItem, this.collection));
            if (child) return child.key;
            let firstKey = this.getFirstKey();
            if (firstKey == null) return;
            let firstItem = this.collection.getItem(firstKey);
            return (0, collections_dist_import/* getNthItem */.Em)((0, collections_dist_import/* getChildNodes */._P)(firstItem, this.collection), startItem.index).key;
        }
        return super.getKeyBelow(key);
    }
    getKeyAbove(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus was on a column, focus the parent column if any
        if (startItem.type === "column") {
            let parent = this.collection.getItem(startItem.parentKey);
            if (parent && parent.type === "column") return parent.key;
            return;
        }
        // only return above row key if not header row
        let superKey = super.getKeyAbove(key);
        if (superKey != null && this.collection.getItem(superKey).type !== "headerrow") return superKey;
        // If no item was found, and focus was on a cell, then focus the
        // corresponding column header.
        if (this.isCell(startItem)) return this.collection.columns[startItem.index].key;
        // If focus was on a row, then focus the first column header.
        return this.collection.columns[0].key;
    }
    findNextColumnKey(column) {
        // Search following columns
        let key = this.findNextKey(column.key, (item)=>item.type === "column");
        if (key != null) return key;
        // Wrap around to the first column
        let row = this.collection.headerRows[column.level];
        for (let item of (0, collections_dist_import/* getChildNodes */._P)(row, this.collection)){
            if (item.type === "column") return item.key;
        }
    }
    findPreviousColumnKey(column) {
        // Search previous columns
        let key = this.findPreviousKey(column.key, (item)=>item.type === "column");
        if (key != null) return key;
        // Wrap around to the last column
        let row = this.collection.headerRows[column.level];
        let childNodes = [
            ...(0, collections_dist_import/* getChildNodes */._P)(row, this.collection)
        ];
        for(let i = childNodes.length - 1; i >= 0; i--){
            let item = childNodes[i];
            if (item.type === "column") return item.key;
        }
    }
    getKeyRightOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus was on a column, then focus the next column
        if (item.type === "column") return this.direction === "rtl" ? this.findPreviousColumnKey(item) : this.findNextColumnKey(item);
        return super.getKeyRightOf(key);
    }
    getKeyLeftOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus was on a column, then focus the previous column
        if (item.type === "column") return this.direction === "rtl" ? this.findNextColumnKey(item) : this.findPreviousColumnKey(item);
        return super.getKeyLeftOf(key);
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection = this.collection;
        let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
        if (key == null) return null;
        // If the starting key is a cell, search from its parent row.
        let startItem = collection.getItem(key);
        if (startItem.type === "cell") key = startItem.parentKey;
        let hasWrapped = false;
        while(key != null){
            let item = collection.getItem(key);
            // Check each of the row header cells in this row for a match
            for (let cell of (0, collections_dist_import/* getChildNodes */._P)(item, this.collection)){
                let column = collection.columns[cell.index];
                if (collection.rowHeaderColumnKeys.has(column.key) && cell.textValue) {
                    let substring = cell.textValue.slice(0, search.length);
                    if (this.collator.compare(substring, search) === 0) {
                        // If we started on a cell, end on the matching cell. Otherwise, end on the row.
                        let fromItem = fromKey != null ? collection.getItem(fromKey) : startItem;
                        return fromItem.type === "cell" ? cell.key : item.key;
                    }
                }
            }
            key = this.getKeyBelow(key);
            // Wrap around when reaching the end of the collection
            if (key == null && !hasWrapped) {
                key = this.getFirstKey();
                hasWrapped = true;
            }
        }
        return null;
    }
}



function $6e31608fbba75bab$export$25bceaac3c7e4dc7(props, state, ref) {
    let { keyboardDelegate: keyboardDelegate , isVirtualized: isVirtualized , layout: layout  } = props;
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = (0, real_module/* useCollator */.Xe)({
        usage: "search",
        sensitivity: "base"
    });
    let { direction: direction  } = (0, real_module/* useLocale */.bU)();
    let disabledBehavior = state.selectionManager.disabledBehavior;
    let delegate = (0, react_.useMemo)(()=>keyboardDelegate || new (0, $0ba3c81c7f1caedd$export$da43f8f5cb04028d)({
            collection: state.collection,
            disabledKeys: disabledBehavior === "selection" ? new Set() : state.disabledKeys,
            ref: ref,
            direction: direction,
            collator: collator,
            layout: layout
        }), [
        keyboardDelegate,
        state.collection,
        state.disabledKeys,
        disabledBehavior,
        ref,
        direction,
        collator,
        layout
    ]);
    let id = (0, dist_import/* useId */.Me)(props.id);
    (0, $2140fb2337097f2d$export$552312adfd451dab).set(state, id);
    let { gridProps: gridProps  } = (0, grid_dist_import/* useGrid */.Nm)({
        ...props,
        id: id,
        keyboardDelegate: delegate
    }, state, ref);
    // Override to include header rows
    if (isVirtualized) gridProps["aria-rowcount"] = state.collection.size + state.collection.headerRows.length;
    let { column: column , direction: sortDirection  } = state.sortDescriptor || {};
    let stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/dist_import_$parcel$interopDefault($7476b46781682bf5$exports))));
    let sortDescription = (0, react_.useMemo)(()=>{
        var _state_collection_columns_find;
        let columnName = (_state_collection_columns_find = state.collection.columns.find((c)=>c.key === column)) === null || _state_collection_columns_find === void 0 ? void 0 : _state_collection_columns_find.textValue;
        return sortDirection && column ? stringFormatter.format(`${sortDirection}Sort`, {
            columnName: columnName
        }) : undefined;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        sortDirection,
        column,
        state.collection.columns
    ]);
    let descriptionProps = (0, dist_import/* useDescription */.PK)(sortDescription);
    // Only announce after initial render, tabbing to the table will tell you the initial sort info already
    (0, dist_import/* useUpdateEffect */.rf)(()=>{
        (0, live_announcer_dist_import/* announce */.xQ)(sortDescription, "assertive", 500);
    }, [
        sortDescription
    ]);
    return {
        gridProps: (0, dist_import/* mergeProps */.dG)(gridProps, descriptionProps, {
            // merge sort description with long press information
            "aria-describedby": [
                descriptionProps["aria-describedby"],
                gridProps["aria-describedby"]
            ].filter(Boolean).join(" ")
        })
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






function $f329116d8ad0aba0$export$9514819a8c81e960(props, state, ref) {
    var _state_sortDescriptor, _state_sortDescriptor1;
    let { node: node  } = props;
    let allowsSorting = node.props.allowsSorting;
    // if there are no focusable children, the column header will focus the cell
    let { gridCellProps: gridCellProps  } = (0, grid_dist_import/* useGridCell */.n_)({
        ...props,
        focusMode: "child"
    }, state, ref);
    let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === "single";
    let { pressProps: pressProps  } = (0, interactions_dist_import/* usePress */.r7)({
        isDisabled: !allowsSorting || isSelectionCellDisabled,
        onPress () {
            state.sort(node.key);
        },
        ref: ref
    });
    // Needed to pick up the focusable context, enabling things like Tooltips for example
    let { focusableProps: focusableProps  } = (0, focus_dist_import/* useFocusable */.kc)({}, ref);
    let ariaSort = null;
    let isSortedColumn = ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === node.key;
    let sortDirection = (_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction;
    // aria-sort not supported in Android Talkback
    if (node.props.allowsSorting && !(0, dist_import/* isAndroid */.Dt)()) ariaSort = isSortedColumn ? sortDirection : "none";
    let stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/dist_import_$parcel$interopDefault($7476b46781682bf5$exports))));
    let sortDescription;
    if (allowsSorting) {
        sortDescription = `${stringFormatter.format("sortable")}`;
        // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here
        if (isSortedColumn && sortDirection && (0, dist_import/* isAndroid */.Dt)()) sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;
    }
    let descriptionProps = (0, dist_import/* useDescription */.PK)(sortDescription);
    return {
        columnHeaderProps: {
            ...(0, dist_import/* mergeProps */.dG)(gridCellProps, pressProps, focusableProps, descriptionProps, // If the table is empty, make all column headers untabbable or programatically focusable
            state.collection.size === 0 && {
                tabIndex: null
            }),
            role: "columnheader",
            id: (0, $2140fb2337097f2d$export$37cd4213f2ad742e)(state, node.key),
            "aria-colspan": node.colspan && node.colspan > 1 ? node.colspan : null,
            "aria-sort": ariaSort
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $b2db214c022798eb$export$7f2f6ae19e707aa5(props, state, ref) {
    let { node: node  } = props;
    let { rowProps: rowProps , ...states } = (0, grid_dist_import/* useGridRow */.Ks)(props, state, ref);
    return {
        rowProps: {
            ...rowProps,
            "aria-labelledby": (0, $2140fb2337097f2d$export$85069b70317f543)(state, node.key)
        },
        ...states
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $f917ee10f4c32dab$export$1b95a7d2d517b841(props, state, ref) {
    let { node: node , isVirtualized: isVirtualized  } = props;
    let rowProps = {
        role: "row"
    };
    if (isVirtualized) rowProps["aria-rowindex"] = node.index + 1; // aria-rowindex is 1 based
    return {
        rowProps: rowProps
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $7713593715703b24$export$49571c903d73624c(props, state, ref) {
    let { gridCellProps: gridCellProps , isPressed: isPressed  } = (0, grid_dist_import/* useGridCell */.n_)(props, state, ref);
    let columnKey = props.node.column.key;
    if (state.collection.rowHeaderColumnKeys.has(columnKey)) {
        gridCellProps.role = "rowheader";
        gridCellProps.id = (0, $2140fb2337097f2d$export$19baff3266315d44)(state, props.node.parentKey, columnKey);
    }
    return {
        gridCellProps: gridCellProps,
        isPressed: isPressed
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $2a795c53a101c542$export$16ea7f650bd7c1bb(props, state) {
    let { key: key  } = props;
    const { checkboxProps: checkboxProps  } = (0, grid_dist_import/* useGridSelectionCheckbox */.Ug)(props, state);
    return {
        checkboxProps: {
            ...checkboxProps,
            "aria-labelledby": `${checkboxProps.id} ${(0, $2140fb2337097f2d$export$85069b70317f543)(state, key)}`
        }
    };
}
function $2a795c53a101c542$export$1003db6a7e384b99(state) {
    let { isEmpty: isEmpty , isSelectAll: isSelectAll , selectionMode: selectionMode  } = state.selectionManager;
    const stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/dist_import_$parcel$interopDefault($7476b46781682bf5$exports))));
    return {
        checkboxProps: {
            "aria-label": stringFormatter.format(selectionMode === "single" ? "select" : "selectAll"),
            isSelected: isSelectAll,
            isDisabled: selectionMode !== "multiple" || state.collection.size === 0,
            isIndeterminate: !isEmpty && !isSelectAll,
            onChange: ()=>state.selectionManager.toggleSelectAll()
        }
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $e91ef4e5004e3774$export$52994e973806c219(props, state, ref) {
    let { column: item , triggerRef: triggerRef , isDisabled: isDisabled , onResizeStart: onResizeStart , onResize: onResize , onResizeEnd: onResizeEnd , "aria-label": ariaLabel  } = props;
    const stringFormatter = (0, $lJcFS$useLocalizedStringFormatter)((0, (/*@__PURE__*/dist_import_$parcel$interopDefault($7476b46781682bf5$exports))));
    let id = (0, $lJcFS$useId)();
    let isResizing = state.resizingColumn === item.key;
    let isResizingRef = (0, $lJcFS$useRef)(isResizing);
    let lastSize = (0, $lJcFS$useRef)(null);
    let editModeEnabled = state.tableState.isKeyboardNavigationDisabled;
    let { direction: direction  } = (0, $lJcFS$useLocale)();
    let { keyboardProps: keyboardProps  } = (0, $lJcFS$useKeyboard)({
        onKeyDown: (e)=>{
            let resizeOnFocus = !!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current);
            if (editModeEnabled) {
                if (e.key === "Escape" || e.key === "Enter" || e.key === " " || e.key === "Tab") {
                    e.preventDefault();
                    if (resizeOnFocus) // switch focus back to the column header on anything that ends edit mode
                    (0, $lJcFS$focusSafely)(triggerRef.current);
                    else {
                        endResize(item);
                        state.tableState.setKeyboardNavigationDisabled(false);
                    }
                }
            } else if (!resizeOnFocus) {
                // Continue propagation on keydown events so they still bubbles to useSelectableCollection and are handled there
                e.continuePropagation();
                if (e.key === "Enter") {
                    startResize(item);
                    state.tableState.setKeyboardNavigationDisabled(true);
                }
            }
        }
    });
    let startResize = (0, $lJcFS$useCallback)((item)=>{
        if (!isResizingRef.current) {
            lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));
            state.startResize(item.key);
            onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(lastSize.current);
        }
        isResizingRef.current = true;
    }, [
        isResizingRef,
        onResizeStart,
        state
    ]);
    let resize = (0, $lJcFS$useCallback)((item, newWidth)=>{
        let sizes = state.updateResizedColumns(item.key, newWidth);
        onResize === null || onResize === void 0 ? void 0 : onResize(sizes);
        lastSize.current = sizes;
    }, [
        onResize,
        state
    ]);
    let endResize = (0, $lJcFS$useCallback)((item)=>{
        if (isResizingRef.current) {
            if (lastSize.current == null) lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));
            state.endResize();
            onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(lastSize.current);
        }
        isResizingRef.current = false;
        lastSize.current = null;
    }, [
        isResizingRef,
        onResizeEnd,
        state
    ]);
    const columnResizeWidthRef = (0, $lJcFS$useRef)(0);
    const { moveProps: moveProps  } = (0, $lJcFS$useMove)({
        onMoveStart () {
            columnResizeWidthRef.current = state.getColumnWidth(item.key);
            startResize(item);
        },
        onMove (e) {
            let { deltaX: deltaX , deltaY: deltaY , pointerType: pointerType  } = e;
            if (direction === "rtl") deltaX *= -1;
            if (pointerType === "keyboard") {
                if (deltaY !== 0 && deltaX === 0) deltaX = deltaY * -1;
                deltaX *= 10;
            }
            // if moving up/down only, no need to resize
            if (deltaX !== 0) {
                columnResizeWidthRef.current += deltaX;
                resize(item, columnResizeWidthRef.current);
            }
        },
        onMoveEnd (e) {
            let resizeOnFocus = !!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current);
            let { pointerType: pointerType  } = e;
            columnResizeWidthRef.current = 0;
            if (pointerType === "mouse" || pointerType === "touch" && !resizeOnFocus) endResize(item);
        }
    });
    let onKeyDown = (0, $lJcFS$useCallback)((e)=>{
        if (editModeEnabled) moveProps.onKeyDown(e);
    }, [
        editModeEnabled,
        moveProps
    ]);
    let min = Math.floor(state.getColumnMinWidth(item.key));
    let max = Math.floor(state.getColumnMaxWidth(item.key));
    if (max === Infinity) max = Number.MAX_SAFE_INTEGER;
    let value = Math.floor(state.getColumnWidth(item.key));
    let modality = (0, $lJcFS$useInteractionModality)();
    if (modality === "virtual" && typeof window !== "undefined" && "ontouchstart" in window) modality = "touch";
    let description = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) == null && (modality === "keyboard" || modality === "virtual") && !isResizing ? stringFormatter.format("resizerDescription") : undefined;
    let descriptionProps = (0, $lJcFS$useDescription)(description);
    let ariaProps = {
        "aria-label": ariaLabel,
        "aria-orientation": "horizontal",
        "aria-labelledby": `${id} ${(0, $2140fb2337097f2d$export$37cd4213f2ad742e)(state.tableState, item.key)}`,
        "aria-valuetext": stringFormatter.format("columnSize", {
            value: value
        }),
        "type": "range",
        min: min,
        max: max,
        value: value,
        ...descriptionProps
    };
    const focusInput = (0, $lJcFS$useCallback)(()=>{
        if (ref.current) (0, $lJcFS$focusWithoutScrolling)(ref.current);
    }, [
        ref
    ]);
    let onChange = (e)=>{
        let currentWidth = state.getColumnWidth(item.key);
        let nextValue = parseFloat(e.target.value);
        if (nextValue > currentWidth) nextValue = currentWidth + 10;
        else nextValue = currentWidth - 10;
        resize(item, nextValue);
    };
    let { pressProps: pressProps  } = (0, $lJcFS$usePress)({
        onPressStart: (e)=>{
            if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey || e.pointerType === "keyboard") return;
            if (e.pointerType === "virtual" && state.resizingColumn != null) {
                let resizeOnFocus = !!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current);
                endResize(item);
                if (resizeOnFocus) (0, $lJcFS$focusSafely)(triggerRef.current);
                return;
            }
            // Sometimes onPress won't trigger for quick taps on mobile so we want to focus the input so blurring away
            // can cancel resize mode for us.
            focusInput();
            // If resizer is always visible, mobile screenreader user can access the visually hidden resizer directly and thus we don't need
            // to handle a virtual click to start the resizer.
            if (e.pointerType !== "virtual") startResize(item);
        },
        onPress: (e)=>{
            let resizeOnFocus = !!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current);
            if ((e.pointerType === "touch" && !resizeOnFocus || e.pointerType === "mouse") && state.resizingColumn != null) endResize(item);
        }
    });
    let { visuallyHiddenProps: visuallyHiddenProps  } = (0, $lJcFS$useVisuallyHidden)();
    return {
        resizerProps: (0, $lJcFS$mergeProps)(keyboardProps, {
            ...moveProps,
            onKeyDown: onKeyDown
        }, pressProps),
        inputProps: (0, $lJcFS$mergeProps)(visuallyHiddenProps, {
            id: id,
            onFocus: ()=>{
                let resizeOnFocus = !!(triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current);
                if (resizeOnFocus) {
                    // useMove calls onMoveStart for every keypress, but we want resize start to only be called when we start resize mode
                    // call instead during focus and blur
                    startResize(item);
                    state.tableState.setKeyboardNavigationDisabled(true);
                }
            },
            onBlur: ()=>{
                endResize(item);
                state.tableState.setKeyboardNavigationDisabled(false);
            },
            onChange: onChange,
            disabled: isDisabled
        }, ariaProps),
        isResizing: isResizing
    };
}



function $0047e6c294ea075f$export$6fb1613bd7b28198() {
    return (0, grid_dist_import/* useGridRowGroup */.Y5)();
}



//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: ../node_modules/@keystar/ui/checkbox/dist/keystar-ui-checkbox.esm.js + 4 modules
var keystar_ui_checkbox_esm = __webpack_require__(85501);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/arrowUpIcon/dist/keystar-ui-icon-icons-arrowUpIcon.esm.js


const arrowUpIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m5 12 7-7 7 7M12 19V5"
  })
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/table/dist/keystar-ui-table.esm.js
'use client';















// ============================================================================
// UTILS
// ============================================================================

function getStyleFromColumn(props) {
  const {
    maxWidth,
    minWidth,
    width
  } = props;
  if (width) {
    return {
      flex: '0 0 auto',
      width,
      maxWidth,
      minWidth
    };
  }
  return {
    maxWidth,
    minWidth
  };
}

// ============================================================================
// COMPONENTS
// ============================================================================

const SortIndicator = () => {
  // fix alignment: reduce the space the icon takes up, w/o affecting the icon layout itself
  let labelHeight = keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.regular.capheight;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("span", {
    "aria-hidden": "true",
    className: (0,keystar_ui_style_esm/* css */.iv)({
      alignItems: 'center',
      display: 'flex',
      flexShrink: 0,
      height: labelHeight,
      justifyContent: 'center',
      marginInline: keystar_ui_style_esm/* tokenSchema */.iK.size.space.small,
      opacity: 0,
      position: 'relative',
      transition: (0,keystar_ui_style_esm/* transition */.eR)(['opacity', 'transform'], {
        easing: 'easeOut'
      }),
      width: labelHeight,
      svg: {
        position: 'absolute'
      },
      ['[aria-sort="ascending"] &, [aria-sort="descending"] &']: {
        opacity: 1
      },
      ['[aria-sort="descending"] &']: {
        transform: 'rotate(180deg)'
      }
    }),
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
      src: arrowUpIcon
    })
  });
};

// ============================================================================
// HOOKS
// ============================================================================

// Table root
// ----------------------------------------------------------------------------

function useTableStyleProps(props) {
  let styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(props);
  return {
    ...(0,keystar_ui_utils_esm/* toDataAttributes */.a9)(props, new Set(['density', 'overflowMode', 'prominence'])),
    className: (0,keystar_ui_style_esm/* classNames */.AK)(styleProps.className, 'ksv-table-view', (0,keystar_ui_style_esm/* css */.iv)({
      display: 'flex',
      flexDirection: 'column',
      minHeight: 0,
      minWidth: 0
    })),
    style: styleProps.style
  };
}

// Row group (head/body/foot)
// ----------------------------------------------------------------------------

function useHeadStyleProps() {
  return {
    className: (0,keystar_ui_style_esm/* css */.iv)({
      display: 'flex',
      flexDirection: 'column',
      '.ksv-table-view[data-prominence="low"] &': {
        borderBottom: `${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular} solid ${keystar_ui_style_esm/* tokenSchema */.iK.color.border.muted}`
      }
    })
  };
}
function useBodyStyleProps() {
  return {
    className: (0,keystar_ui_style_esm/* css */.iv)({
      display: 'flex',
      flexDirection: 'column',
      overflow: 'auto',
      '.ksv-table-view:not([data-prominence="low"]) &': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.canvas,
        border: `${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular} solid ${keystar_ui_style_esm/* tokenSchema */.iK.color.border.muted}`,
        borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.medium
      }
    })
  };
}

// Cell common
// ----------------------------------------------------------------------------

const commonCellStyles = {
  // borderBottom: `${tokenSchema.size.border.regular} solid ${tokenSchema.color.border.neutral}`,
  boxSizing: 'border-box',
  cursor: 'default',
  display: 'flex',
  flex: 1,
  justifyContent: 'flex-start',
  minWidth: 0,
  outline: 0,
  paddingInline: keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium,
  position: 'relative'
};
function useCellStyleProps(props, state) {
  const className = (0,keystar_ui_style_esm/* css */.iv)([commonCellStyles, {
    // Alignment
    '&[data-align="end"]': {
      justifyContent: 'flex-end'
    },
    '&[data-align="center"]': {
      justifyContent: 'center'
    },
    // wrapping text shouldn't be centered
    alignItems: 'center',
    '.ksv-table-view[data-overflow-mode="wrap"] &': {
      alignItems: 'initial'
    },
    // Density
    paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium,
    '.ksv-table-view[data-density="compact"] &': {
      paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular
    },
    '.ksv-table-view[data-density="spacious"] &': {
      paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large
    },
    // focus ring
    '&[data-focus="visible"]::after': {
      borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.small,
      boxShadow: `inset 0 0 0 ${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRing} ${keystar_ui_style_esm/* tokenSchema */.iK.color.alias.focusRing}`,
      content: '""',
      inset: 0,
      position: 'absolute',
      transition: (0,keystar_ui_style_esm/* transition */.eR)(['box-shadow', 'margin'], {
        easing: 'easeOut'
      })
    },
    // HEADERS
    '&[role="columnheader"]': {
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralSecondary,
      ['&[aria-sort]']: {
        cursor: 'pointer',
        '&:hover, &[data-focus="visible"]': {
          color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis
        }
      }
    }
  }]);
  return {
    ...(0,keystar_ui_utils_esm/* toDataAttributes */.a9)({
      focus: state !== null && state !== void 0 && state.isFocusVisible ? 'visible' : undefined,
      align: props === null || props === void 0 ? void 0 : props.align
    }),
    className,
    style: getStyleFromColumn(props)
  };
}
function useSelectionCellStyleProps() {
  return {
    className: (0,keystar_ui_style_esm/* css */.iv)(commonCellStyles, {
      alignItems: 'center',
      flex: '0 0 auto',
      paddingInlineStart: keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium,
      width: 'auto'
    })
  };
}

// Row body
// ----------------------------------------------------------------------------

function useRowStyleProps(state) {
  let calculatedRadius = `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.radius.medium} - ${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular})`;
  const className = (0,keystar_ui_style_esm/* css */.iv)({
    boxSizing: 'border-box',
    display: 'flex',
    position: 'relative',
    outline: 0,
    '&:not(:last-child)': {
      borderBottom: `${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular} solid ${keystar_ui_style_esm/* tokenSchema */.iK.color.border.muted}`
    },
    // prominence
    '.ksv-table-view:not([data-prominence="low"]) &': {
      '&:first-child': {
        borderStartStartRadius: calculatedRadius,
        borderStartEndRadius: calculatedRadius
      },
      '&:last-child': {
        borderEndStartRadius: calculatedRadius,
        borderEndEndRadius: calculatedRadius
      }
    },
    // interactions
    '&[data-focus], &[data-interaction="hover"]': {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundHovered
    },
    '&[data-interaction="press"]': {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundPressed
    },
    // focus indicator
    '&[data-focus="visible"]': {
      '&::before': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.accentEmphasis,
        borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.space.small,
        content: '""',
        insetInlineStart: keystar_ui_style_esm/* tokenSchema */.iK.size.space.xsmall,
        marginBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.xsmall,
        marginInlineEnd: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.small} * -1)`,
        position: 'sticky',
        width: keystar_ui_style_esm/* tokenSchema */.iK.size.space.small
      }
    },
    // selected
    '&[aria-selected="true"]': {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundSelected,
      // boxShadow: `0 0 0 ${tokenSchema.size.border.regular} ${tokenSchema.color.alias.focusRing}`,

      '&[data-interaction="hover"], &[data-focus="visible"]': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundSelectedHovered
      }
    }
  });
  return {
    ...(0,keystar_ui_utils_esm/* toDataAttributes */.a9)({
      focus: state.isFocusVisible ? 'visible' : state.isFocusWithin ? 'within' : undefined,
      interaction: state.isPressed ? 'press' : state.isHovered ? 'hover' : undefined
    }),
    className
  };
}

// Row header
// ----------------------------------------------------------------------------

function useRowHeaderStyleProps() {
  const className = (0,keystar_ui_style_esm/* css */.iv)({
    display: 'flex'
  });
  return {
    className
  };
}

function TableView(props) {
  let ref = (0,react_.useRef)(null);
  // @ts-ignore FIXME: Resolve the disparity between the types of TableView and useTableState.
  let state = $4a0dd036d492cee4$export$907bcc6c48325fd6({
    ...props,
    showSelectionCheckboxes: props.selectionMode === 'multiple'
  });
  let {
    collection
  } = state;
  let {
    gridProps
  } = $6e31608fbba75bab$export$25bceaac3c7e4dc7(props, state, ref);
  let styleProps = useTableStyleProps(props);
  let rows = [...collection.body.childNodes];
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)("div", {
    ...gridProps,
    ...styleProps,
    ref: ref,
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(TableHead, {
      children: collection.headerRows.map(headerRow => /*#__PURE__*/(0,jsx_runtime_.jsx)(TableHeaderRow, {
        item: headerRow,
        state: state,
        children: [...headerRow.childNodes].map(column => column.props.isSelectionCell ? /*#__PURE__*/(0,jsx_runtime_.jsx)(TableSelectAllCell, {
          column: column,
          state: state
        }, column.key) : /*#__PURE__*/(0,jsx_runtime_.jsx)(TableColumnHeader, {
          column: column,
          state: state
        }, column.key))
      }, headerRow.key))
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(TableBody, {
      children: !rows.length && props.renderEmptyState ? /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
        role: "row",
        "aria-rowindex": 2,
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
          role: "rowheader",
          "aria-colspan": collection.columnCount,
          children: props.renderEmptyState()
        })
      }) : rows.map(row => /*#__PURE__*/(0,jsx_runtime_.jsx)(TableRow, {
        item: row,
        state: state,
        hasAction: !!props.onRowAction,
        children: [...row.childNodes].map(cell => cell.props.isSelectionCell ? /*#__PURE__*/(0,jsx_runtime_.jsx)(TableCheckboxCell, {
          cell: cell,
          state: state
        }, cell.key) : /*#__PURE__*/(0,jsx_runtime_.jsx)(TableCell, {
          cell: cell,
          state: state,
          overflowMode: props.overflowMode
        }, cell.key))
      }, row.key))
    })]
  });
}

// Styled components
// ------------------------------

function TableHead(_ref) {
  let {
    children
  } = _ref;
  let {
    rowGroupProps
  } = $0047e6c294ea075f$export$6fb1613bd7b28198();
  let styleProps = useHeadStyleProps();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...rowGroupProps,
    ...styleProps,
    children: children
  });
}
function TableBody(_ref2) {
  let {
    children
  } = _ref2;
  let {
    rowGroupProps
  } = $0047e6c294ea075f$export$6fb1613bd7b28198();
  let styleProps = useBodyStyleProps();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...rowGroupProps,
    ...styleProps,
    children: children
  });
}
function TableHeaderRow(_ref3) {
  let {
    item,
    state,
    children
  } = _ref3;
  let ref = (0,react_.useRef)(null);
  let {
    rowProps
  } = $f917ee10f4c32dab$export$1b95a7d2d517b841({
    node: item
  }, state, ref);
  let styleProps = useRowHeaderStyleProps();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...rowProps,
    ...styleProps,
    ref: ref,
    children: children
  });
}
function TableColumnHeader(_ref4) {
  let {
    column,
    state
  } = _ref4;
  let ref = (0,react_.useRef)(null);
  let {
    columnHeaderProps
  } = $f329116d8ad0aba0$export$9514819a8c81e960({
    node: column
  }, state, ref);
  let {
    isFocusVisible,
    focusProps
  } = (0,focus_dist_import/* useFocusRing */.Fx)();
  let columnProps = column.props;
  let cellStyleProps = useCellStyleProps(columnProps, {
    isFocusVisible
  });
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)("div", {
    ...(0,dist_import/* mergeProps */.dG)(columnHeaderProps, focusProps),
    ...cellStyleProps,
    ref: ref,
    children: [columnProps.allowsSorting && columnProps.align === 'end' && /*#__PURE__*/(0,jsx_runtime_.jsx)(SortIndicator, {}), (0,keystar_ui_utils_esm/* isReactText */.UY)(column.rendered) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      color: "inherit",
      weight: "semibold",
      truncate: true,
      children: column.rendered
    }) : column.rendered, columnProps.allowsSorting && columnProps.align !== 'end' && /*#__PURE__*/(0,jsx_runtime_.jsx)(SortIndicator, {})]
  });
}
function TableRow(_ref5) {
  let {
    item,
    children,
    state,
    hasAction
  } = _ref5;
  let ref = (0,react_.useRef)(null);
  let allowsInteraction = state.selectionManager.selectionMode !== 'none' || hasAction;
  let isDisabled = !allowsInteraction || state.disabledKeys.has(item.key);
  let {
    rowProps,
    isPressed
  } = $b2db214c022798eb$export$7f2f6ae19e707aa5({
    node: item
  }, state, ref);
  // The row should show the focus background style when any cell inside it is focused.
  // If the row itself is focused, then it should have a blue focus indicator on the left.
  let {
    isFocusVisible: isFocusWithin,
    focusProps: focusWithinProps
  } = (0,focus_dist_import/* useFocusRing */.Fx)({
    within: true
  });
  let {
    isFocusVisible,
    focusProps
  } = (0,focus_dist_import/* useFocusRing */.Fx)();
  let {
    hoverProps,
    isHovered
  } = (0,interactions_dist_import/* useHover */.XI)({
    isDisabled
  });
  let styleProps = useRowStyleProps({
    isFocusVisible,
    isFocusWithin,
    isHovered,
    isPressed
  });
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...(0,dist_import/* mergeProps */.dG)(rowProps, focusWithinProps, focusProps, hoverProps),
    ...styleProps,
    ref: ref,
    children: children
  });
}
function TableCell(_ref6) {
  let {
    cell,
    overflowMode,
    state
  } = _ref6;
  let ref = (0,react_.useRef)(null);
  let {
    gridCellProps
  } = $7713593715703b24$export$49571c903d73624c({
    node: cell
  }, state, ref);
  let {
    isFocusVisible,
    focusProps
  } = (0,focus_dist_import/* useFocusRing */.Fx)();
  let styleProps = useCellStyleProps(cell.column.props, {
    isFocusVisible
  });
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...(0,dist_import/* mergeProps */.dG)(gridCellProps, focusProps),
    ...styleProps,
    ref: ref,
    children: (0,keystar_ui_utils_esm/* isReactText */.UY)(cell.rendered) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      truncate: overflowMode === 'truncate',
      children: cell.rendered
    }) : cell.rendered
  });
}
function TableCheckboxCell(_ref7) {
  let {
    cell,
    state
  } = _ref7;
  let ref = (0,react_.useRef)(null);
  let {
    gridCellProps
  } = $7713593715703b24$export$49571c903d73624c({
    node: cell
  }, state, ref);
  let {
    checkboxProps
  } = $2a795c53a101c542$export$16ea7f650bd7c1bb({
    key: cell.parentKey
  }, state);
  let styleProps = useSelectionCellStyleProps();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...styleProps,
    ...gridCellProps,
    ref: ref,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_checkbox_esm.Checkbox, {
      ...checkboxProps
    })
  });
}
function TableSelectAllCell(_ref8) {
  let {
    column,
    state
  } = _ref8;
  let ref = (0,react_.useRef)(null);
  let {
    columnHeaderProps
  } = $f329116d8ad0aba0$export$9514819a8c81e960({
    node: column
  }, state, ref);
  let {
    checkboxProps
  } = $2a795c53a101c542$export$1003db6a7e384b99(state);
  let styleProps = useSelectionCellStyleProps();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...styleProps,
    ...columnHeaderProps,
    ref: ref,
    children: state.selectionManager.selectionMode === 'single' ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      visuallyHidden: true,
      children: checkboxProps['aria-label']
    }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_checkbox_esm.Checkbox, {
      ...checkboxProps
    })
  });
}

// Override TS for Column to support Keystar UI specific props.
const VoussoirColumn = $1cd244557c2f97d5$export$816b5d811295e6bc;



// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/index-2098f6c1.node.esm.js
var index_2098f6c1_node_esm = __webpack_require__(97712);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/data-27b10ed2.node.esm.js
var data_27b10ed2_node_esm = __webpack_require__(39106);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/utils-542a6faa.node.esm.js
var utils_542a6faa_node_esm = __webpack_require__(45533);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/useSlugsInCollection-5c98cbe0.node.esm.js
var useSlugsInCollection_5c98cbe0_node_esm = __webpack_require__(90567);
// EXTERNAL MODULE: ../node_modules/@react-aria/overlays/dist/import.mjs
var overlays_dist_import = __webpack_require__(43622);
// EXTERNAL MODULE: ../node_modules/@react-stately/overlays/dist/import.mjs
var _react_stately_overlays_dist_import = __webpack_require__(57817);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/overlays/dist/keystar-ui-overlays.esm.js
var keystar_ui_overlays_esm = __webpack_require__(52743);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/nav-list/dist/keystar-ui-nav-list.esm.js










const listBlockGutter = keystar_ui_style_esm/* tokenSchema */.iK.size.space.large;
const itemIndicatorGutter = keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular;
const itemIndicatorWidth = keystar_ui_style_esm/* tokenSchema */.iK.size.space.small;
const itemContentGutter = keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium;
const textInsetStart = `calc(${itemIndicatorWidth} + ${itemIndicatorGutter} + ${itemContentGutter})`;

/** Navigation lists let users navigate the application. */
const NavList = /*#__PURE__*/(0,react_.forwardRef)(function NavList(props, forwardedRef) {
  const {
    children,
    ...otherProps
  } = props;
  const domRef = (0,dist_import/* useObjectRef */.B3)(forwardedRef);
  const styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  const dividerStyles = useDividerStyles();
  const currentItem = useCurrentItem(domRef);

  // FIXME: called by the docs' example snippets. over eager; probably a good
  // indicator that it should be configurable.
  (0,react_.useEffect)(() => {
    if (currentItem) {
      currentItem.scrollIntoView({
        block: 'center'
      });
    }
  }, [currentItem]);
  const slots = (0,react_.useMemo)(() => ({
    divider: {
      'aria-hidden': true,
      elementType: 'li',
      size: 'medium',
      UNSAFE_className: dividerStyles
    }
  }), [dividerStyles]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    elementType: "nav",
    ref: domRef,
    direction: "column",
    UNSAFE_className: styleProps.className,
    UNSAFE_style: styleProps.style,
    ...(0,dist_import/* filterDOMProps */.zL)(otherProps, {
      labelable: true
    }),
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
      direction: "column",
      elementType: "ul",
      flex: "1 0 0",
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
        slots: slots,
        children: children
      })
    })
  });
});

// Styles
// -----------------------------------------------------------------------------

function useDividerStyles() {
  return (0,keystar_ui_style_esm/* css */.iv)({
    marginBlock: listBlockGutter,
    marginInlineStart: textInsetStart,
    width: `calc(40% - ${textInsetStart} - ${itemContentGutter})`,
    // FIXME: magic numbers
    minWidth: 80,
    maxWidth: 240
  });
}

// Utils
// -----------------------------------------------------------------------------

function useCurrentItem(ref) {
  let [currentItem, setCurrentItem] = (0,react_.useState)(null);
  (0,dist_import/* useLayoutEffect */.bt)(() => {
    let el = ref.current && ref.current.querySelector('[aria-current]');
    if (el) {
      setCurrentItem(el);
    }
  }, [ref]);
  return currentItem;
}

// TODO:
// - generic `Item` slot component
// - collection/virtualized?

/** An item within a `NavList`. */
const NavItem = /*#__PURE__*/(0,react_.forwardRef)(function NavItem(props, forwardedRef) {
  const {
    'aria-current': ariaCurrent,
    children,
    href,
    ...otherProps
  } = props;
  const LinkComponent = (0,keystar_ui_link_esm/* useLinkComponent */.yF)(forwardedRef);
  const styles = useStyles();
  const slots = (0,react_.useMemo)(() => ({
    text: {
      color: 'inherit',
      UNSAFE_className: styles.text
    }
  }), [styles.text]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("li", {
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_style_esm/* FocusRing */.tE, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(LinkComponent, {
        "aria-current": ariaCurrent,
        href: href,
        className: (0,keystar_ui_style_esm/* classNames */.AK)(styles.anchor),
        ...(0,dist_import/* filterDOMProps */.zL)(otherProps),
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
          className: (0,keystar_ui_style_esm/* classNames */.AK)(styles.content),
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
            slots: slots,
            children: (0,keystar_ui_utils_esm/* isReactText */.UY)(children) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
              children: children
            }) : children
          })
        })
      })
    })
  });
});

// Styles
// ------------------------------

function useStyles() {
  const ringColor = keystar_ui_style_esm/* tokenSchema */.iK.color.alias.focusRing;
  const ringWidth = keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRing;
  const anchor = (0,keystar_ui_style_esm/* css */.iv)({
    color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutral,
    display: 'flex',
    gap: itemIndicatorGutter,
    paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.xsmall,
    outline: 0,
    // selected indicator
    '&::before': {
      borderRadius: itemIndicatorWidth,
      content: '""',
      insetInlineStart: keystar_ui_style_esm/* tokenSchema */.iK.size.space.xsmall,
      marginBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.xsmall,
      position: 'relative',
      width: itemIndicatorWidth
    },
    // interaction
    '&:hover': {
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis
    },
    // selection
    '&[aria-current]': {
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis,
      '&::before': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.accentEmphasis
      }
    }
  });
  const content = (0,keystar_ui_style_esm/* css */.iv)({
    alignItems: 'center',
    borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.regular,
    display: 'flex',
    flex: 1,
    flexShrink: 0,
    gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular,
    minHeight: keystar_ui_style_esm/* tokenSchema */.iK.size.element.regular,
    minWidth: 0,
    paddingInline: keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium,
    paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.small,
    position: 'relative',
    // focus ring
    [`&::after`]: {
      borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.regular,
      content: '""',
      insetBlock: 1,
      insetInline: -1,
      margin: 1,
      position: 'absolute',
      transition: (0,keystar_ui_style_esm/* transition */.eR)(['box-shadow', 'margin'], {
        easing: 'easeOut'
      })
    },
    [`.${anchor}[data-focus=visible] &::after`]: {
      boxShadow: `0 0 0 ${ringWidth} ${ringColor}`,
      margin: 0
    },
    [`.${anchor}[aria-current] &`]: {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundHovered
    },
    [`.${anchor}:hover &`]: {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundHovered
    },
    [`.${anchor}:active &`]: {
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundPressed
    }
  });
  const text = (0,keystar_ui_style_esm/* css */.iv)({
    fontWeight: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontWeight.medium,
    [`.${anchor}[aria-current] &`]: {
      fontWeight: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontWeight.semibold
    }
  });
  return {
    anchor,
    content,
    text
  };
}

// TODO:
// - generic `Group` or `Section` slot component
// - collapsible?

/** Render a group of navigation links. */
function NavGroup(props) {
  const {
    children,
    id,
    title,
    ...otherProps
  } = props;
  const headingId = (0,dist_import/* useId */.Me)(id);
  const groupStyles = useGroupStyles();
  const headingStyles = useHeadingStyles();
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)("li", {
    className: (0,keystar_ui_style_esm/* classNames */.AK)(groupStyles),
    ...(0,dist_import/* filterDOMProps */.zL)(otherProps),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      elementType: "h3",
      id: headingId,
      UNSAFE_className: headingStyles,
      children: title
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
      elementType: "ul",
      flexShrink: 0,
      "aria-labelledby": headingId,
      children: children
    })]
  });
}

// Styles
// ------------------------------

function useGroupStyles() {
  return (0,keystar_ui_style_esm/* css */.iv)({
    '&:not(:first-child)': {
      marginBlockStart: listBlockGutter
    },
    '&:not(:last-child)': {
      marginBlockEnd: listBlockGutter
    }
  });
}
function useHeadingStyles() {
  return (0,keystar_ui_style_esm/* css */.iv)({
    color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralSecondary,
    fontSize: keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.small.size,
    fontWeight: keystar_ui_style_esm/* tokenSchema */.iK.typography.fontWeight.medium,
    paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular,
    paddingInlineEnd: itemContentGutter,
    paddingInlineStart: textInsetStart,
    textTransform: 'uppercase'
  });
}



// EXTERNAL MODULE: ../node_modules/@ts-gql/tag/no-transform/dist/tag.cjs.js
var tag_cjs = __webpack_require__(76772);
// EXTERNAL MODULE: ../node_modules/urql/dist/urql.js
var urql = __webpack_require__(40450);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/avatar/dist/keystar-ui-avatar.esm.js
'use client';






/**
 * An avatar is a thumbnail representation of an entity, such as a user or an
 * organization.
 */
const Avatar = /*#__PURE__*/(0,react_.forwardRef)(function Avatar(props, forwardedRef) {
  const {
    alt,
    size = 'regular',
    ...otherProps
  } = props;
  const styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ref: forwardedRef,
    role: "img",
    "aria-label": alt,
    "data-size": size === 'regular' ? undefined : size,
    ...styleProps,
    ...(0,dist_import/* filterDOMProps */.zL)(otherProps),
    className: (0,keystar_ui_style_esm/* classNames */.AK)(styleProps.className, (0,keystar_ui_style_esm/* css */.iv)({
      alignItems: 'center',
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.surfaceTertiary,
      borderRadius: '50%',
      display: 'inline-flex',
      flexShrink: 0,
      fontSize: 'var(--avatar-text-size)',
      height: 'var(--avatar-size)',
      justifyContent: 'center',
      overflow: 'hidden',
      width: 'var(--avatar-size)',
      userSelect: 'none',
      // sizes
      '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.regular,
      '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.regular.size,
      '&[data-size=xsmall]': {
        '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.xsmall,
        '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.small.size
      },
      '&[data-size=small]': {
        '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.small,
        '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.small.size
      },
      '&[data-size=medium]': {
        '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.medium,
        '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.medium.size
      },
      '&[data-size=large]': {
        '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.large,
        '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.large.size
      },
      '&[data-size=xlarge]': {
        '--avatar-size': keystar_ui_style_esm/* tokenSchema */.iK.size.element.xlarge,
        '--avatar-text-size': keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.large.size
      }
    })),
    children: 'src' in props ? /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
      className: (0,keystar_ui_style_esm/* css */.iv)({
        height: '100%',
        width: '100%'
      }),
      style: {
        backgroundImage: `url(${props.src})`,
        backgroundPosition: 'center',
        backgroundRepeat: 'no-repeat',
        backgroundSize: 'cover'
      }
    }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      "aria-hidden": true,
      color: "neutralSecondary",
      weight: "medium",
      UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
        fontSize: 'inherit'
      }),
      children: getInitials(props.name, size)
    })
  });
});
function getInitials(name, size) {
  const words = name.split(' ');
  const first = words[0].charAt(0);
  const last = words[words.length - 1].charAt(0);
  if (size === 'xsmall') {
    return `${first}`.toUpperCase();
  }
  return `${first}${last}`.toUpperCase();
}



// EXTERNAL MODULE: ../node_modules/@keystar/ui/dialog/dist/keystar-ui-dialog.esm.js
var keystar_ui_dialog_esm = __webpack_require__(70156);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/listTodoIcon/dist/keystar-ui-icon-icons-listTodoIcon.esm.js


const listTodoIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    x: 3,
    y: 5,
    width: 6,
    height: 6,
    rx: 1
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m3 17 2 2 4-4M13 6h8M13 12h8M13 18h8"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/logOutIcon/dist/keystar-ui-icon-icons-logOutIcon.esm.js


const logOutIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4M16 17l5-5-5-5M21 12H9"
  })
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/gitPullRequestIcon/dist/keystar-ui-icon-icons-gitPullRequestIcon.esm.js


const gitPullRequestIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 18,
    cy: 18,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 6,
    cy: 6,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M13 6h3a2 2 0 0 1 2 2v7M6 9v12"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/gitBranchPlusIcon/dist/keystar-ui-icon-icons-gitBranchPlusIcon.esm.js


const gitBranchPlusIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M6 3v12M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6zM6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M15 6a9 9 0 0 0-9 9M18 15v6M21 18h-6"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/gitForkIcon/dist/keystar-ui-icon-icons-gitForkIcon.esm.js


const gitForkIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 12,
    cy: 18,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 6,
    cy: 6,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 18,
    cy: 6,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M18 9v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V9M12 12v3"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/monitorIcon/dist/keystar-ui-icon-icons-monitorIcon.esm.js


const monitorIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    width: 20,
    height: 14,
    x: 2,
    y: 3,
    rx: 2
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M8 21h8M12 17v4"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/moonIcon/dist/keystar-ui-icon-icons-moonIcon.esm.js


const moonIcon = /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"
  })
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/sunIcon/dist/keystar-ui-icon-icons-sunIcon.esm.js


const sunIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 12,
    cy: 12,
    r: 4
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M12 2v2M12 20v2M4.93 4.93l1.41 1.41M17.66 17.66l1.41 1.41M2 12h2M20 12h2M6.34 17.66l-1.41 1.41M19.07 4.93l-1.41 1.41"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/trash2Icon/dist/keystar-ui-icon-icons-trash2Icon.esm.js
var keystar_ui_icon_icons_trash2Icon_esm = __webpack_require__(51227);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/userIcon/dist/keystar-ui-icon-icons-userIcon.esm.js


const userIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 12,
    cy: 7,
    r: 4
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/gitBranchIcon/dist/keystar-ui-icon-icons-gitBranchIcon.esm.js


const gitBranchIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M6 3v12"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 18,
    cy: 6,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 6,
    cy: 18,
    r: 3
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M18 9a9 9 0 0 1-9 9"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/picker/dist/keystar-ui-picker.esm.js + 3 modules
var keystar_ui_picker_esm = __webpack_require__(21991);
// EXTERNAL MODULE: ../node_modules/@react-aria/label/dist/import.mjs
var label_dist_import = __webpack_require__(29919);
;// CONCATENATED MODULE: ../node_modules/@react-aria/radio/dist/import.mjs






/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $884aeceb3d67f00f$export$3b7b268d09480394 = new WeakMap();
const $884aeceb3d67f00f$export$8e8b214e06dd397d = new WeakMap();
const $884aeceb3d67f00f$export$61c8d3f0151e21b2 = new WeakMap();




function $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {
    let { value: value , children: children , "aria-label": ariaLabel , "aria-labelledby": ariaLabelledby  } = props;
    const isDisabled = props.isDisabled || state.isDisabled;
    let hasChildren = children != null;
    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
    if (!hasChildren && !hasAriaLabel) console.warn("If you do not provide children, you must specify an aria-label for accessibility");
    let checked = state.selectedValue === value;
    let onChange = (e)=>{
        e.stopPropagation();
        state.setSelectedValue(value);
    };
    let { pressProps: pressProps , isPressed: isPressed  } = (0, interactions_dist_import/* usePress */.r7)({
        isDisabled: isDisabled
    });
    let { focusableProps: focusableProps  } = (0, focus_dist_import/* useFocusable */.kc)((0, dist_import/* mergeProps */.dG)(props, {
        onFocus: ()=>state.setLastFocusedValue(value)
    }), ref);
    let interactions = (0, dist_import/* mergeProps */.dG)(pressProps, focusableProps);
    let domProps = (0, dist_import/* filterDOMProps */.zL)(props, {
        labelable: true
    });
    let tabIndex = state.lastFocusedValue === value || state.lastFocusedValue == null ? 0 : -1;
    if (isDisabled) tabIndex = undefined;
    return {
        inputProps: (0, dist_import/* mergeProps */.dG)(domProps, {
            ...interactions,
            type: "radio",
            name: (0, $884aeceb3d67f00f$export$3b7b268d09480394).get(state),
            tabIndex: tabIndex,
            disabled: isDisabled,
            checked: checked,
            value: value,
            onChange: onChange,
            "aria-describedby": [
                state.validationState === "invalid" ? (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).get(state) : null,
                (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).get(state)
            ].filter(Boolean).join(" ") || undefined
        }),
        isDisabled: isDisabled,
        isSelected: checked,
        isPressed: isPressed
    };
}


/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {
    let { name: name , validationState: validationState , isReadOnly: isReadOnly , isRequired: isRequired , isDisabled: isDisabled , orientation: orientation = "vertical"  } = props;
    let { direction: direction  } = (0, real_module/* useLocale */.bU)();
    let { labelProps: labelProps , fieldProps: fieldProps , descriptionProps: descriptionProps , errorMessageProps: errorMessageProps  } = (0, label_dist_import/* useField */.U)({
        ...props,
        // Radio group is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: "span"
    });
    (0, $884aeceb3d67f00f$export$8e8b214e06dd397d).set(state, descriptionProps.id);
    (0, $884aeceb3d67f00f$export$61c8d3f0151e21b2).set(state, errorMessageProps.id);
    let domProps = (0, dist_import/* filterDOMProps */.zL)(props, {
        labelable: true
    });
    // When the radio group loses focus, reset the focusable radio to null if
    // there is no selection. This allows tabbing into the group from either
    // direction to go to the first or last radio.
    let { focusWithinProps: focusWithinProps  } = (0, interactions_dist_import/* useFocusWithin */.L_)({
        onBlurWithin () {
            if (!state.selectedValue) state.setLastFocusedValue(null);
        }
    });
    let onKeyDown = (e)=>{
        let nextDir;
        switch(e.key){
            case "ArrowRight":
                if (direction === "rtl" && orientation !== "vertical") nextDir = "prev";
                else nextDir = "next";
                break;
            case "ArrowLeft":
                if (direction === "rtl" && orientation !== "vertical") nextDir = "next";
                else nextDir = "prev";
                break;
            case "ArrowDown":
                nextDir = "next";
                break;
            case "ArrowUp":
                nextDir = "prev";
                break;
            default:
                return;
        }
        e.preventDefault();
        let walker = (0, focus_dist_import/* getFocusableTreeWalker */.QL)(e.currentTarget, {
            from: e.target
        });
        let nextElem;
        if (nextDir === "next") {
            nextElem = walker.nextNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.firstChild();
            }
        } else {
            nextElem = walker.previousNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.lastChild();
            }
        }
        if (nextElem) {
            // Call focus on nextElem so that keyboard navigation scrolls the radio into view
            nextElem.focus();
            state.setSelectedValue(nextElem.value);
        }
    };
    let groupName = (0, dist_import/* useId */.Me)(name);
    (0, $884aeceb3d67f00f$export$3b7b268d09480394).set(state, groupName);
    return {
        radioGroupProps: (0, dist_import/* mergeProps */.dG)(domProps, {
            // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
            role: "radiogroup",
            onKeyDown: onKeyDown,
            "aria-invalid": validationState === "invalid" || undefined,
            "aria-errormessage": props["aria-errormessage"],
            "aria-readonly": isReadOnly || undefined,
            "aria-required": isRequired || undefined,
            "aria-disabled": isDisabled || undefined,
            "aria-orientation": orientation,
            ...fieldProps,
            ...focusWithinProps
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps
    };
}





//# sourceMappingURL=module.js.map

;// CONCATENATED MODULE: ../node_modules/@react-stately/radio/dist/import.mjs



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

let $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);
let $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
    // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
    let name = (0, react_.useMemo)(()=>props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [
        props.name
    ]);
    let [selectedValue, setSelected] = (0, utils_dist_import/* useControlledState */.zk)(props.value, props.defaultValue, props.onChange);
    let [lastFocusedValue, setLastFocusedValue] = (0, react_.useState)(null);
    let setSelectedValue = (value)=>{
        if (!props.isReadOnly && !props.isDisabled) setSelected(value);
    };
    return {
        name: name,
        selectedValue: selectedValue,
        setSelectedValue: setSelectedValue,
        lastFocusedValue: lastFocusedValue,
        setLastFocusedValue: setLastFocusedValue,
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false,
        isRequired: props.isRequired || false,
        validationState: props.validationState || null
    };
}





//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: ../node_modules/@keystar/ui/field/dist/keystar-ui-field.esm.js
var keystar_ui_field_esm = __webpack_require__(60137);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/radio/dist/keystar-ui-radio.esm.js
'use client';











const RadioContext = /*#__PURE__*/react_default().createContext(null);
function useRadioProvider() {
  const context = react_default().useContext(RadioContext);
  if (!context) {
    throw new Error('useRadioProvider must be used within a RadioGroupProvider');
  }
  return context;
}

function Radio(props) {
  let {
    children,
    autoFocus,
    ...otherProps
  } = props;
  let styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  let inputRef = (0,react_.useRef)(null);
  let radioGroupProps = useRadioProvider();
  let {
    state
  } = radioGroupProps;
  let {
    inputProps
  } = $0d5c49892c1215da$export$37b0961d2f4751e2({
    ...props,
    ...radioGroupProps
  }, state, inputRef);
  const inputClassName = (0,keystar_ui_style_esm/* css */.iv)({
    position: 'absolute',
    zIndex: 1,
    inset: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular} * -1)`,
    // expand hit area
    opacity: 0.0001
  });
  const labelClassName = (0,keystar_ui_style_esm/* css */.iv)({
    alignItems: 'flex-start',
    display: 'inline-flex',
    gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular,
    position: 'relative',
    userSelect: 'none'
  });
  const slots = (0,react_.useMemo)(() => ({
    text: {
      color: 'inherit'
    },
    description: {
      color: 'neutralTertiary'
    }
  }), []);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)("label", {
    className: (0,keystar_ui_style_esm/* classNames */.AK)(styleProps.className, labelClassName),
    style: styleProps.style,
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_style_esm/* FocusRing */.tE, {
      autoFocus: autoFocus,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)("input", {
        ...inputProps,
        ref: inputRef,
        className: (0,keystar_ui_style_esm/* classNames */.AK)(inputClassName)
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(Indicator, {
      inputClassName: inputClassName
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
      slots: slots,
      children: children && /*#__PURE__*/(0,jsx_runtime_.jsx)(Content, {
        children: (0,keystar_ui_utils_esm/* isReactText */.UY)(children) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          children: children
        }) : children
      })
    })]
  });
}

// Styled components
// -----------------------------------------------------------------------------

let sizeToken = keystar_ui_style_esm/* tokenSchema */.iK.size.element.xsmall;
const Indicator = props => {
  let {
    inputClassName
  } = props;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("span", {
    className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.canvas,
      borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.full,
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.onEmphasis,
      display: 'flex',
      flexShrink: 0,
      justifyContent: 'center',
      alignItems: 'center',
      position: 'relative',
      height: sizeToken,
      width: sizeToken,
      // indicator icons
      '.ksv-radio-indicator': {
        opacity: 0,
        transform: `scale(0) translate3d(0, 0, 0)`,
        transition: (0,keystar_ui_style_esm/* transition */.eR)(['opacity', 'transform']),
        willChange: 'opacity, transform'
      },
      // focus ring
      '::after': {
        borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.full,
        content: '""',
        inset: 0,
        margin: 0,
        position: 'absolute',
        transition: (0,keystar_ui_style_esm/* transition */.eR)(['box-shadow', 'margin'], {
          easing: 'easeOut'
        })
      },
      [`.${inputClassName}[data-focus=visible] + &::after`]: {
        boxShadow: `0 0 0 ${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRing} ${keystar_ui_style_esm/* tokenSchema */.iK.color.alias.focusRing}`,
        margin: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRingGap} * -1)`
      },
      // border / background
      '&::before': {
        border: `${keystar_ui_style_esm/* tokenSchema */.iK.size.border.medium} solid ${keystar_ui_style_esm/* tokenSchema */.iK.color.alias.borderIdle}`,
        borderRadius: `inherit`,
        content: '""',
        inset: 0,
        margin: 0,
        position: 'absolute',
        transition: (0,keystar_ui_style_esm/* transition */.eR)(['border-color', 'border-width'], {
          duration: 'regular'
        })
      },
      [`.${inputClassName}:disabled + &`]: {
        color: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.foregroundDisabled,
        '&::before': {
          borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.borderDisabled
        }
      },
      [`.${inputClassName}:enabled:hover + &::before`]: {
        borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.borderHovered
      },
      [`.${inputClassName}:enabled:active + &::before`]: {
        borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.borderPressed
      },
      // checked states
      [`.${inputClassName}:checked + &`]: {
        '&::before': {
          borderWidth: `calc(${sizeToken} / 2)`
        },
        '.ksv-radio-indicator': {
          opacity: 1,
          transform: `scale(1)`
        }
      },
      [`.${inputClassName}:enabled:checked + &::before`]: {
        borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.scale.indigo9
      },
      [`.${inputClassName}:enabled:checked:hover + &::before`]: {
        borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.scale.indigo10
      },
      [`.${inputClassName}:enabled:checked:active + &::before`]: {
        borderColor: keystar_ui_style_esm/* tokenSchema */.iK.color.scale.indigo11
      }
    })),
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)("span", {
      className: "ksv-radio-indicator",
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
        className: "ksv:reset",
        fill: "currentColor",
        height: 12,
        viewBox: "0 0 24 24",
        width: 12,
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
          cx: "12",
          cy: "12",
          r: "6"
        })
      })
    })
  });
};
const Content = props => {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.foregroundIdle,
      display: 'grid',
      paddingTop: `calc((${sizeToken} - ${keystar_ui_style_esm/* tokenSchema */.iK.fontsize.text.regular.capheight}) / 2)`,
      gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      'input[type="radio"]:hover ~ &': {
        color: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.foregroundHovered
      },
      'input[type="radio"]:disabled ~ &': {
        color: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.foregroundDisabled
      }
    })),
    ...props
  });
};

/**
 * Radio groups allow users to select a single option from a list of mutually
 * exclusive options.
 */
const RadioGroup = /*#__PURE__*/(0,react_.forwardRef)(function RadioGroup(props, forwardedRef) {
  props = (0,keystar_ui_core_esm/* useProviderProps */.Zd)(props);
  props = (0,keystar_ui_field_esm/* validateFieldProps */.bd)(props);
  let {
    validationState,
    children,
    orientation = 'vertical'
  } = props;
  let state = $a54cdc5c1942b639$export$bca9d026f8e704eb(props);
  let {
    radioGroupProps,
    labelProps,
    descriptionProps,
    errorMessageProps
  } = $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_field_esm/* FieldPrimitive */.rt, {
    ...props,
    ref: forwardedRef,
    labelProps: labelProps,
    descriptionProps: descriptionProps,
    errorMessageProps: errorMessageProps,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
      ...radioGroupProps,
      ...(0,keystar_ui_utils_esm/* toDataAttributes */.a9)({
        orientation
      }),
      className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
        display: 'flex',
        gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
        '&[data-orientation="vertical"]': {
          flexDirection: 'column'
        }
      })),
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(RadioContext.Provider, {
        value: {
          validationState,
          state
        },
        children: children
      })
    })
  });
});



;// CONCATENATED MODULE: ../node_modules/react-resizable-panels/dist/react-resizable-panels.esm.js


// This module exists to work around Webpack issue https://github.com/webpack/webpack/issues/14814

// eslint-disable-next-line no-restricted-imports

const {
  createElement,
  createContext,
  forwardRef,
  useCallback,
  useContext,
  useEffect,
  useImperativeHandle,
  useLayoutEffect,
  useMemo,
  useRef,
  useState
} = react_;

// `toString()` prevents bundlers from trying to `import { useId } from 'react'`
const useId = react_["useId".toString()];

const canUseEffectHooks = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
const useIsomorphicLayoutEffect = canUseEffectHooks ? useLayoutEffect : () => {};

const wrappedUseId = typeof useId === "function" ? useId : () => null;
let counter = 0;
function useUniqueId(idFromParams = null) {
  const idFromUseId = wrappedUseId();
  const idRef = useRef(idFromParams || idFromUseId || null);
  if (idRef.current === null) {
    idRef.current = "" + counter++;
  }
  return idRef.current;
}

const PanelGroupContext = createContext(null);

// Workaround for Parcel scope hoisting (which renames objects/functions).
// Casting to :any is required to avoid corrupting the generated TypeScript types.
// See github.com/parcel-bundler/parcel/issues/8724
PanelGroupContext.displayName = "PanelGroupContext";

function PanelWithForwardedRef({
  children = null,
  className: classNameFromProps = "",
  collapsedSize = 0,
  collapsible = false,
  defaultSize = null,
  forwardedRef,
  id: idFromProps = null,
  maxSize = 100,
  minSize = 10,
  onCollapse = null,
  onResize = null,
  order = null,
  style: styleFromProps = {},
  tagName: Type = "div"
}) {
  const context = useContext(PanelGroupContext);
  if (context === null) {
    throw Error(`Panel components must be rendered within a PanelGroup container`);
  }
  const panelId = useUniqueId(idFromProps);
  const {
    collapsePanel,
    expandPanel,
    getPanelStyle,
    registerPanel,
    resizePanel,
    unregisterPanel
  } = context;

  // Use a ref to guard against users passing inline props
  const callbacksRef = useRef({
    onCollapse,
    onResize
  });
  useEffect(() => {
    callbacksRef.current.onCollapse = onCollapse;
    callbacksRef.current.onResize = onResize;
  });

  // Basic props validation
  if (minSize < 0 || minSize > 100) {
    throw Error(`Panel minSize must be between 0 and 100, but was ${minSize}`);
  } else if (maxSize < 0 || maxSize > 100) {
    throw Error(`Panel maxSize must be between 0 and 100, but was ${maxSize}`);
  } else {
    if (defaultSize !== null) {
      if (defaultSize < 0 || defaultSize > 100) {
        throw Error(`Panel defaultSize must be between 0 and 100, but was ${defaultSize}`);
      } else if (minSize > defaultSize && !collapsible) {
        console.error(`Panel minSize ${minSize} cannot be greater than defaultSize ${defaultSize}`);
        defaultSize = minSize;
      }
    }
  }
  const style = getPanelStyle(panelId, defaultSize);
  const committedValuesRef = useRef({
    size: parseSizeFromStyle(style)
  });
  const panelDataRef = useRef({
    callbacksRef,
    collapsedSize,
    collapsible,
    defaultSize,
    id: panelId,
    maxSize,
    minSize,
    order
  });
  useIsomorphicLayoutEffect(() => {
    committedValuesRef.current.size = parseSizeFromStyle(style);
    panelDataRef.current.callbacksRef = callbacksRef;
    panelDataRef.current.collapsedSize = collapsedSize;
    panelDataRef.current.collapsible = collapsible;
    panelDataRef.current.defaultSize = defaultSize;
    panelDataRef.current.id = panelId;
    panelDataRef.current.maxSize = maxSize;
    panelDataRef.current.minSize = minSize;
    panelDataRef.current.order = order;
  });
  useIsomorphicLayoutEffect(() => {
    registerPanel(panelId, panelDataRef);
    return () => {
      unregisterPanel(panelId);
    };
  }, [order, panelId, registerPanel, unregisterPanel]);
  useImperativeHandle(forwardedRef, () => ({
    collapse: () => collapsePanel(panelId),
    expand: () => expandPanel(panelId),
    getCollapsed() {
      return committedValuesRef.current.size === 0;
    },
    getSize() {
      return committedValuesRef.current.size;
    },
    resize: percentage => resizePanel(panelId, percentage)
  }), [collapsePanel, expandPanel, panelId, resizePanel]);
  return createElement(Type, {
    children,
    className: classNameFromProps,
    "data-panel": "",
    "data-panel-collapsible": collapsible || undefined,
    "data-panel-id": panelId,
    "data-panel-size": parseFloat("" + style.flexGrow).toFixed(1),
    id: `data-panel-id-${panelId}`,
    style: {
      ...style,
      ...styleFromProps
    }
  });
}
const Panel = forwardRef((props, ref) => createElement(PanelWithForwardedRef, {
  ...props,
  forwardedRef: ref
}));

// Workaround for Parcel scope hoisting (which renames objects/functions).
// Casting to :any is required to avoid corrupting the generated TypeScript types.
// See github.com/parcel-bundler/parcel/issues/8724
PanelWithForwardedRef.displayName = "Panel";
Panel.displayName = "forwardRef(Panel)";

// HACK
function parseSizeFromStyle(style) {
  const {
    flexGrow
  } = style;
  if (typeof flexGrow === "string") {
    return parseFloat(flexGrow);
  } else {
    return flexGrow;
  }
}

const PRECISION = 10;

function adjustByDelta(event, panels, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse, initialDragState) {
  const {
    sizes: initialSizes
  } = initialDragState || {};

  // If we're resizing by mouse or touch, use the initial sizes as a base.
  // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.
  const baseSizes = initialSizes || prevSizes;
  if (delta === 0) {
    return baseSizes;
  }
  const panelsArray = panelsMapToSortedArray(panels);
  const nextSizes = baseSizes.concat();
  let deltaApplied = 0;

  // A resizing panel affects the panels before or after it.
  //
  // A negative delta means the panel immediately after the resizer should grow/expand by decreasing its offset.
  // Other panels may also need to shrink/contract (and shift) to make room, depending on the min weights.
  //
  // A positive delta means the panel immediately before the resizer should "expand".
  // This is accomplished by shrinking/contracting (and shifting) one or more of the panels after the resizer.

  // Max-bounds check the panel being expanded first.
  {
    const pivotId = delta < 0 ? idAfter : idBefore;
    const index = panelsArray.findIndex(panel => panel.current.id === pivotId);
    const panel = panelsArray[index];
    const baseSize = baseSizes[index];
    const nextSize = safeResizePanel(panel, Math.abs(delta), baseSize, event);
    if (baseSize === nextSize) {
      // If there's no room for the pivot panel to grow, we can ignore this drag update.
      return baseSizes;
    } else {
      if (nextSize === 0 && baseSize > 0) {
        panelSizeBeforeCollapse.set(pivotId, baseSize);
      }
      delta = delta < 0 ? baseSize - nextSize : nextSize - baseSize;
    }
  }
  let pivotId = delta < 0 ? idBefore : idAfter;
  let index = panelsArray.findIndex(panel => panel.current.id === pivotId);
  while (true) {
    const panel = panelsArray[index];
    const baseSize = baseSizes[index];
    const deltaRemaining = Math.abs(delta) - Math.abs(deltaApplied);
    const nextSize = safeResizePanel(panel, 0 - deltaRemaining, baseSize, event);
    if (baseSize !== nextSize) {
      if (nextSize === 0 && baseSize > 0) {
        panelSizeBeforeCollapse.set(panel.current.id, baseSize);
      }
      deltaApplied += baseSize - nextSize;
      nextSizes[index] = nextSize;
      if (deltaApplied.toPrecision(PRECISION).localeCompare(Math.abs(delta).toPrecision(PRECISION), undefined, {
        numeric: true
      }) >= 0) {
        break;
      }
    }
    if (delta < 0) {
      if (--index < 0) {
        break;
      }
    } else {
      if (++index >= panelsArray.length) {
        break;
      }
    }
  }

  // If we were unable to resize any of the panels panels, return the previous state.
  // This will essentially bailout and ignore the "mousemove" event.
  if (deltaApplied === 0) {
    return baseSizes;
  }

  // Adjust the pivot panel before, but only by the amount that surrounding panels were able to shrink/contract.
  pivotId = delta < 0 ? idAfter : idBefore;
  index = panelsArray.findIndex(panel => panel.current.id === pivotId);
  nextSizes[index] = baseSizes[index] + deltaApplied;
  return nextSizes;
}
function callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap) {
  sizes.forEach((size, index) => {
    const panelRef = panelsArray[index];
    if (!panelRef) {
      // Handle initial mount (when panels are registered too late to be in the panels array)
      // The subsequent render+effects will handle the resize notification
      return;
    }
    const {
      callbacksRef,
      collapsedSize,
      collapsible,
      id
    } = panelRef.current;
    const lastNotifiedSize = panelIdToLastNotifiedSizeMap[id];
    if (lastNotifiedSize !== size) {
      panelIdToLastNotifiedSizeMap[id] = size;
      const {
        onCollapse,
        onResize
      } = callbacksRef.current;
      if (onResize) {
        onResize(size, lastNotifiedSize);
      }
      if (collapsible && onCollapse) {
        if ((lastNotifiedSize == null || lastNotifiedSize === collapsedSize) && size !== collapsedSize) {
          onCollapse(false);
        } else if (lastNotifiedSize !== collapsedSize && size === collapsedSize) {
          onCollapse(true);
        }
      }
    }
  });
}
function getBeforeAndAfterIds(id, panelsArray) {
  if (panelsArray.length < 2) {
    return [null, null];
  }
  const index = panelsArray.findIndex(panel => panel.current.id === id);
  if (index < 0) {
    return [null, null];
  }
  const isLastPanel = index === panelsArray.length - 1;
  const idBefore = isLastPanel ? panelsArray[index - 1].current.id : id;
  const idAfter = isLastPanel ? id : panelsArray[index + 1].current.id;
  return [idBefore, idAfter];
}

// This method returns a number between 1 and 100 representing
// the % of the group's overall space this panel should occupy.
function getFlexGrow(panels, id, sizes) {
  if (panels.size === 1) {
    return "100";
  }
  const panelsArray = panelsMapToSortedArray(panels);
  const index = panelsArray.findIndex(panel => panel.current.id === id);
  const size = sizes[index];
  if (size == null) {
    return "0";
  }
  return size.toPrecision(PRECISION);
}
function getPanel(id) {
  const element = document.querySelector(`[data-panel-id="${id}"]`);
  if (element) {
    return element;
  }
  return null;
}
function getPanelGroup(id) {
  const element = document.querySelector(`[data-panel-group-id="${id}"]`);
  if (element) {
    return element;
  }
  return null;
}
function getResizeHandle(id) {
  const element = document.querySelector(`[data-panel-resize-handle-id="${id}"]`);
  if (element) {
    return element;
  }
  return null;
}
function getResizeHandleIndex(id) {
  const handles = getResizeHandles();
  const index = handles.findIndex(handle => handle.getAttribute("data-panel-resize-handle-id") === id);
  return index ?? null;
}
function getResizeHandles() {
  return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id]`));
}
function getResizeHandlesForGroup(groupId) {
  return Array.from(document.querySelectorAll(`[data-panel-resize-handle-id][data-panel-group-id="${groupId}"]`));
}
function getResizeHandlePanelIds(groupId, handleId, panelsArray) {
  const handle = getResizeHandle(handleId);
  const handles = getResizeHandlesForGroup(groupId);
  const index = handle ? handles.indexOf(handle) : -1;
  const idBefore = panelsArray[index]?.current?.id ?? null;
  const idAfter = panelsArray[index + 1]?.current?.id ?? null;
  return [idBefore, idAfter];
}
function panelsMapToSortedArray(panels) {
  return Array.from(panels.values()).sort((panelA, panelB) => {
    const orderA = panelA.current.order;
    const orderB = panelB.current.order;
    if (orderA == null && orderB == null) {
      return 0;
    } else if (orderA == null) {
      return -1;
    } else if (orderB == null) {
      return 1;
    } else {
      return orderA - orderB;
    }
  });
}
function safeResizePanel(panel, delta, prevSize, event) {
  const nextSizeUnsafe = prevSize + delta;
  const {
    collapsedSize,
    collapsible,
    maxSize,
    minSize
  } = panel.current;
  if (collapsible) {
    if (prevSize > collapsedSize) {
      // Mimic VS COde behavior; collapse a panel if it's smaller than half of its min-size
      if (nextSizeUnsafe <= minSize / 2 + collapsedSize) {
        return collapsedSize;
      }
    } else {
      const isKeyboardEvent = event?.type?.startsWith("key");
      if (!isKeyboardEvent) {
        // Keyboard events should expand a collapsed panel to the min size,
        // but mouse events should wait until the panel has reached its min size
        // to avoid a visual flickering when dragging between collapsed and min size.
        if (nextSizeUnsafe < minSize) {
          return collapsedSize;
        }
      }
    }
  }
  const nextSize = Math.min(maxSize, Math.max(minSize, nextSizeUnsafe));
  return nextSize;
}

function assert(expectedCondition, message = "Assertion failed!") {
  if (!expectedCondition) {
    console.error(message);
    throw Error(message);
  }
}

// https://www.w3.org/WAI/ARIA/apg/patterns/windowsplitter/

function useWindowSplitterPanelGroupBehavior({
  committedValuesRef,
  groupId,
  panels,
  setSizes,
  sizes,
  panelSizeBeforeCollapse
}) {
  useEffect(() => {
    const {
      direction,
      panels
    } = committedValuesRef.current;
    const groupElement = getPanelGroup(groupId);
    const {
      height,
      width
    } = groupElement.getBoundingClientRect();
    const handles = getResizeHandlesForGroup(groupId);
    const cleanupFunctions = handles.map(handle => {
      const handleId = handle.getAttribute("data-panel-resize-handle-id");
      const panelsArray = panelsMapToSortedArray(panels);
      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
      if (idBefore == null || idAfter == null) {
        return () => {};
      }
      let minSize = 0;
      let maxSize = 100;
      let totalMinSize = 0;
      let totalMaxSize = 0;

      // A panel's effective min/max sizes also need to account for other panel's sizes.
      panelsArray.forEach(panelData => {
        if (panelData.current.id === idBefore) {
          maxSize = panelData.current.maxSize;
          minSize = panelData.current.minSize;
        } else {
          totalMinSize += panelData.current.minSize;
          totalMaxSize += panelData.current.maxSize;
        }
      });
      const ariaValueMax = Math.min(maxSize, 100 - totalMinSize);
      const ariaValueMin = Math.max(minSize, (panelsArray.length - 1) * 100 - totalMaxSize);
      const flexGrow = getFlexGrow(panels, idBefore, sizes);
      handle.setAttribute("aria-valuemax", "" + Math.round(ariaValueMax));
      handle.setAttribute("aria-valuemin", "" + Math.round(ariaValueMin));
      handle.setAttribute("aria-valuenow", "" + Math.round(parseInt(flexGrow)));
      const onKeyDown = event => {
        if (event.defaultPrevented) {
          return;
        }
        switch (event.key) {
          case "Enter":
            {
              event.preventDefault();
              const index = panelsArray.findIndex(panel => panel.current.id === idBefore);
              if (index >= 0) {
                const panelData = panelsArray[index];
                const size = sizes[index];
                if (size != null) {
                  let delta = 0;
                  if (size.toPrecision(PRECISION) <= panelData.current.minSize.toPrecision(PRECISION)) {
                    delta = direction === "horizontal" ? width : height;
                  } else {
                    delta = -(direction === "horizontal" ? width : height);
                  }
                  const nextSizes = adjustByDelta(event, panels, idBefore, idAfter, delta, sizes, panelSizeBeforeCollapse.current, null);
                  if (sizes !== nextSizes) {
                    setSizes(nextSizes);
                  }
                }
              }
              break;
            }
        }
      };
      handle.addEventListener("keydown", onKeyDown);
      const panelBefore = getPanel(idBefore);
      if (panelBefore != null) {
        handle.setAttribute("aria-controls", panelBefore.id);
      }
      return () => {
        handle.removeAttribute("aria-valuemax");
        handle.removeAttribute("aria-valuemin");
        handle.removeAttribute("aria-valuenow");
        handle.removeEventListener("keydown", onKeyDown);
        if (panelBefore != null) {
          handle.removeAttribute("aria-controls");
        }
      };
    });
    return () => {
      cleanupFunctions.forEach(cleanupFunction => cleanupFunction());
    };
  }, [committedValuesRef, groupId, panels, panelSizeBeforeCollapse, setSizes, sizes]);
}
function useWindowSplitterResizeHandlerBehavior({
  disabled,
  handleId,
  resizeHandler
}) {
  useEffect(() => {
    if (disabled || resizeHandler == null) {
      return;
    }
    const handleElement = getResizeHandle(handleId);
    if (handleElement == null) {
      return;
    }
    const onKeyDown = event => {
      if (event.defaultPrevented) {
        return;
      }
      switch (event.key) {
        case "ArrowDown":
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "End":
        case "Home":
          {
            event.preventDefault();
            resizeHandler(event);
            break;
          }
        case "F6":
          {
            event.preventDefault();
            const handles = getResizeHandles();
            const index = getResizeHandleIndex(handleId);
            assert(index !== null);
            const nextIndex = event.shiftKey ? index > 0 ? index - 1 : handles.length - 1 : index + 1 < handles.length ? index + 1 : 0;
            const nextHandle = handles[nextIndex];
            nextHandle.focus();
            break;
          }
      }
    };
    handleElement.addEventListener("keydown", onKeyDown);
    return () => {
      handleElement.removeEventListener("keydown", onKeyDown);
    };
  }, [disabled, handleId, resizeHandler]);
}

function areEqual(arrayA, arrayB) {
  if (arrayA.length !== arrayB.length) {
    return false;
  }
  for (let index = 0; index < arrayA.length; index++) {
    if (arrayA[index] !== arrayB[index]) {
      return false;
    }
  }
  return true;
}

function getDragOffset(event, handleId, direction, initialOffset = 0, initialHandleElementRect = null) {
  const isHorizontal = direction === "horizontal";
  let pointerOffset = 0;
  if (isMouseEvent(event)) {
    pointerOffset = isHorizontal ? event.clientX : event.clientY;
  } else if (isTouchEvent(event)) {
    const firstTouch = event.touches[0];
    pointerOffset = isHorizontal ? firstTouch.screenX : firstTouch.screenY;
  } else {
    return 0;
  }
  const handleElement = getResizeHandle(handleId);
  const rect = initialHandleElementRect || handleElement.getBoundingClientRect();
  const elementOffset = isHorizontal ? rect.left : rect.top;
  return pointerOffset - elementOffset - initialOffset;
}

// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/movementX
function getMovement(event, groupId, handleId, panelsArray, direction, prevSizes, initialDragState) {
  const {
    dragOffset = 0,
    dragHandleRect,
    sizes: initialSizes
  } = initialDragState || {};

  // If we're resizing by mouse or touch, use the initial sizes as a base.
  // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.
  const baseSizes = initialSizes || prevSizes;
  if (isKeyDown(event)) {
    const isHorizontal = direction === "horizontal";
    const groupElement = getPanelGroup(groupId);
    const rect = groupElement.getBoundingClientRect();
    const groupSizeInPixels = isHorizontal ? rect.width : rect.height;
    const denominator = event.shiftKey ? 10 : 100;
    const delta = groupSizeInPixels / denominator;
    let movement = 0;
    switch (event.key) {
      case "ArrowDown":
        movement = isHorizontal ? 0 : delta;
        break;
      case "ArrowLeft":
        movement = isHorizontal ? -delta : 0;
        break;
      case "ArrowRight":
        movement = isHorizontal ? delta : 0;
        break;
      case "ArrowUp":
        movement = isHorizontal ? 0 : -delta;
        break;
      case "End":
        movement = groupSizeInPixels;
        break;
      case "Home":
        movement = -groupSizeInPixels;
        break;
    }

    // If the Panel being resized is collapsible,
    // we need to special case resizing around the minSize boundary.
    // If contracting, Panels should shrink to their minSize and then snap to fully collapsed.
    // If expanding from collapsed, they should snap back to their minSize.
    const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
    const targetPanelId = movement < 0 ? idBefore : idAfter;
    const targetPanelIndex = panelsArray.findIndex(panel => panel.current.id === targetPanelId);
    const targetPanel = panelsArray[targetPanelIndex];
    if (targetPanel.current.collapsible) {
      const baseSize = baseSizes[targetPanelIndex];
      if (baseSize === 0 || baseSize.toPrecision(PRECISION) === targetPanel.current.minSize.toPrecision(PRECISION)) {
        movement = movement < 0 ? -targetPanel.current.minSize * groupSizeInPixels : targetPanel.current.minSize * groupSizeInPixels;
      }
    }
    return movement;
  } else {
    return getDragOffset(event, handleId, direction, dragOffset, dragHandleRect);
  }
}
function isKeyDown(event) {
  return event.type === "keydown";
}
function isMouseEvent(event) {
  return event.type.startsWith("mouse");
}
function isTouchEvent(event) {
  return event.type.startsWith("touch");
}

let currentState = null;
let react_resizable_panels_esm_element = null;
function getCursorStyle(state) {
  switch (state) {
    case "horizontal":
      return "ew-resize";
    case "horizontal-max":
      return "w-resize";
    case "horizontal-min":
      return "e-resize";
    case "vertical":
      return "ns-resize";
    case "vertical-max":
      return "n-resize";
    case "vertical-min":
      return "s-resize";
  }
}
function resetGlobalCursorStyle() {
  if (react_resizable_panels_esm_element !== null) {
    document.head.removeChild(react_resizable_panels_esm_element);
    currentState = null;
    react_resizable_panels_esm_element = null;
  }
}
function setGlobalCursorStyle(state) {
  if (currentState === state) {
    return;
  }
  currentState = state;
  const style = getCursorStyle(state);
  if (react_resizable_panels_esm_element === null) {
    react_resizable_panels_esm_element = document.createElement("style");
    document.head.appendChild(react_resizable_panels_esm_element);
  }
  react_resizable_panels_esm_element.innerHTML = `*{cursor: ${style}!important;}`;
}

function debounce(callback, durationMs = 10) {
  let timeoutId = null;
  let callable = (...args) => {
    if (timeoutId !== null) {
      clearTimeout(timeoutId);
    }
    timeoutId = setTimeout(() => {
      callback(...args);
    }, durationMs);
  };
  return callable;
}

// Note that Panel ids might be user-provided (stable) or useId generated (non-deterministic)
// so they should not be used as part of the serialization key.
// Using an attribute like minSize instead should work well enough.
// Pre-sorting by minSize allows remembering layouts even if panels are re-ordered/dragged.
function getSerializationKey(panels) {
  return panels.map(panel => {
    const {
      minSize,
      order
    } = panel.current;
    return order ? `${order}:${minSize}` : `${minSize}`;
  }).sort((a, b) => a.localeCompare(b)).join(",");
}
function loadSerializedPanelGroupState(autoSaveId, storage) {
  try {
    const serialized = storage.getItem(`PanelGroup:sizes:${autoSaveId}`);
    if (serialized) {
      const parsed = JSON.parse(serialized);
      if (typeof parsed === "object" && parsed != null) {
        return parsed;
      }
    }
  } catch (error) {}
  return null;
}
function loadPanelLayout(autoSaveId, panels, storage) {
  const state = loadSerializedPanelGroupState(autoSaveId, storage);
  if (state) {
    const key = getSerializationKey(panels);
    return state[key] ?? null;
  }
  return null;
}
function savePanelGroupLayout(autoSaveId, panels, sizes, storage) {
  const key = getSerializationKey(panels);
  const state = loadSerializedPanelGroupState(autoSaveId, storage) || {};
  state[key] = sizes;
  try {
    storage.setItem(`PanelGroup:sizes:${autoSaveId}`, JSON.stringify(state));
  } catch (error) {
    console.error(error);
  }
}

const debounceMap = {};

// PanelGroup might be rendering in a server-side environment where localStorage is not available
// or on a browser with cookies/storage disabled.
// In either case, this function avoids accessing localStorage until needed,
// and avoids throwing user-visible errors.
function initializeDefaultStorage(storageObject) {
  try {
    if (typeof localStorage !== "undefined") {
      // Bypass this check for future calls
      storageObject.getItem = name => {
        return localStorage.getItem(name);
      };
      storageObject.setItem = (name, value) => {
        localStorage.setItem(name, value);
      };
    } else {
      throw new Error("localStorage not supported in this environment");
    }
  } catch (error) {
    console.error(error);
    storageObject.getItem = () => null;
    storageObject.setItem = () => {};
  }
}
const defaultStorage = {
  getItem: name => {
    initializeDefaultStorage(defaultStorage);
    return defaultStorage.getItem(name);
  },
  setItem: (name, value) => {
    initializeDefaultStorage(defaultStorage);
    defaultStorage.setItem(name, value);
  }
};

// Initial drag state serves a few purposes:
// * dragOffset:
//   Resize is calculated by the distance between the current pointer event and the resize handle being "dragged"
//   This value accounts for the initial offset when the touch/click starts, so the handle doesn't appear to "jump"
// * dragHandleRect, sizes:
//   When resizing is done via mouse/touch event– some initial state is stored
//   so that any panels that contract will also expand if drag direction is reversed.
// TODO
// Within an active drag, remember original positions to refine more easily on expand.
// Look at what the Chrome devtools Sources does.
function PanelGroupWithForwardedRef({
  autoSaveId,
  children = null,
  className: classNameFromProps = "",
  direction,
  disablePointerEventsDuringResize = false,
  forwardedRef,
  id: idFromProps = null,
  onLayout,
  storage = defaultStorage,
  style: styleFromProps = {},
  tagName: Type = "div"
}) {
  const groupId = useUniqueId(idFromProps);
  const [activeHandleId, setActiveHandleId] = useState(null);
  const [panels, setPanels] = useState(new Map());

  // When resizing is done via mouse/touch event–
  // We store the initial Panel sizes in this ref, and apply move deltas to them instead of to the current sizes.
  // This has the benefit of causing force-collapsed panels to spring back open if drag is reversed.
  const initialDragStateRef = useRef(null);

  // Use a ref to guard against users passing inline props
  const callbacksRef = useRef({
    onLayout
  });
  useEffect(() => {
    callbacksRef.current.onLayout = onLayout;
  });
  const panelIdToLastNotifiedSizeMapRef = useRef({});

  // 0-1 values representing the relative size of each panel.
  const [sizes, setSizes] = useState([]);

  // Used to support imperative collapse/expand API.
  const panelSizeBeforeCollapse = useRef(new Map());
  const prevDeltaRef = useRef(0);

  // Store committed values to avoid unnecessarily re-running memoization/effects functions.
  const committedValuesRef = useRef({
    direction,
    panels,
    sizes
  });
  useImperativeHandle(forwardedRef, () => ({
    getLayout: () => {
      const {
        sizes
      } = committedValuesRef.current;
      return sizes;
    },
    setLayout: sizes => {
      const total = sizes.reduce((accumulated, current) => accumulated + current, 0);
      assert(total === 100, "Panel sizes must add up to 100%");
      const {
        panels
      } = committedValuesRef.current;
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      const panelsArray = panelsMapToSortedArray(panels);
      setSizes(sizes);
      callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap);
    }
  }), []);
  useIsomorphicLayoutEffect(() => {
    committedValuesRef.current.direction = direction;
    committedValuesRef.current.panels = panels;
    committedValuesRef.current.sizes = sizes;
  });
  useWindowSplitterPanelGroupBehavior({
    committedValuesRef,
    groupId,
    panels,
    setSizes,
    sizes,
    panelSizeBeforeCollapse
  });

  // Notify external code when sizes have changed.
  useEffect(() => {
    const {
      onLayout
    } = callbacksRef.current;
    const {
      panels,
      sizes
    } = committedValuesRef.current;

    // Don't commit layout until all panels have registered and re-rendered with their actual sizes.
    if (sizes.length > 0) {
      if (onLayout) {
        onLayout(sizes);
      }
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;

      // When possible, we notify before the next render so that rendering work can be batched together.
      // Some cases are difficult to detect though,
      // for example– panels that are conditionally rendered can affect the size of neighboring panels.
      // In this case, the best we can do is notify on commit.
      // The callPanelCallbacks() uses its own memoization to avoid notifying panels twice in these cases.
      const panelsArray = panelsMapToSortedArray(panels);
      callPanelCallbacks(panelsArray, sizes, panelIdToLastNotifiedSizeMap);
    }
  }, [sizes]);

  // Once all panels have registered themselves,
  // Compute the initial sizes based on default weights.
  // This assumes that panels register during initial mount (no conditional rendering)!
  useIsomorphicLayoutEffect(() => {
    const sizes = committedValuesRef.current.sizes;
    if (sizes.length === panels.size) {
      // Only compute (or restore) default sizes once per panel configuration.
      return;
    }

    // If this panel has been configured to persist sizing information,
    // default size should be restored from local storage if possible.
    let defaultSizes = null;
    if (autoSaveId) {
      const panelsArray = panelsMapToSortedArray(panels);
      defaultSizes = loadPanelLayout(autoSaveId, panelsArray, storage);
    }
    if (defaultSizes != null) {
      setSizes(defaultSizes);
    } else {
      const panelsArray = panelsMapToSortedArray(panels);
      let panelsWithNullDefaultSize = 0;
      let totalDefaultSize = 0;
      let totalMinSize = 0;

      // TODO
      // Implicit default size calculations below do not account for inferred min/max size values.
      // e.g. if Panel A has a maxSize of 40 then Panels A and B can't both have an implicit default size of 50.
      // For now, these logic edge cases are left to the user to handle via props.

      panelsArray.forEach(panel => {
        totalMinSize += panel.current.minSize;
        if (panel.current.defaultSize === null) {
          panelsWithNullDefaultSize++;
        } else {
          totalDefaultSize += panel.current.defaultSize;
        }
      });
      if (totalDefaultSize > 100) {
        throw new Error(`Default panel sizes cannot exceed 100%`);
      } else if (panelsArray.length > 1 && panelsWithNullDefaultSize === 0 && totalDefaultSize !== 100) {
        throw new Error(`Invalid default sizes specified for panels`);
      } else if (totalMinSize > 100) {
        throw new Error(`Minimum panel sizes cannot exceed 100%`);
      }
      setSizes(panelsArray.map(panel => {
        if (panel.current.defaultSize === null) {
          return (100 - totalDefaultSize) / panelsWithNullDefaultSize;
        }
        return panel.current.defaultSize;
      }));
    }
  }, [autoSaveId, panels, storage]);
  useEffect(() => {
    // If this panel has been configured to persist sizing information, save sizes to local storage.
    if (autoSaveId) {
      if (sizes.length === 0 || sizes.length !== panels.size) {
        return;
      }
      const panelsArray = panelsMapToSortedArray(panels);

      // Limit the frequency of localStorage updates.
      if (!debounceMap[autoSaveId]) {
        debounceMap[autoSaveId] = debounce(savePanelGroupLayout, 100);
      }
      debounceMap[autoSaveId](autoSaveId, panelsArray, sizes, storage);
    }
  }, [autoSaveId, panels, sizes, storage]);
  const getPanelStyle = useCallback((id, defaultSize) => {
    const {
      panels
    } = committedValuesRef.current;

    // Before mounting, Panels will not yet have registered themselves.
    // This includes server rendering.
    // At this point the best we can do is render everything with the same size.
    if (panels.size === 0) {
      return {
        flexBasis: 0,
        flexGrow: defaultSize != null ? defaultSize : undefined,
        flexShrink: 1,
        // Without this, Panel sizes may be unintentionally overridden by their content.
        overflow: "hidden"
      };
    }
    const flexGrow = getFlexGrow(panels, id, sizes);
    return {
      flexBasis: 0,
      flexGrow,
      flexShrink: 1,
      // Without this, Panel sizes may be unintentionally overridden by their content.
      overflow: "hidden",
      // Disable pointer events inside of a panel during resize.
      // This avoid edge cases like nested iframes.
      pointerEvents: disablePointerEventsDuringResize && activeHandleId !== null ? "none" : undefined
    };
  }, [activeHandleId, disablePointerEventsDuringResize, sizes]);
  const registerPanel = useCallback((id, panelRef) => {
    setPanels(prevPanels => {
      if (prevPanels.has(id)) {
        return prevPanels;
      }
      const nextPanels = new Map(prevPanels);
      nextPanels.set(id, panelRef);
      return nextPanels;
    });
  }, []);
  const registerResizeHandle = useCallback(handleId => {
    const resizeHandler = event => {
      event.preventDefault();
      const {
        direction,
        panels,
        sizes: prevSizes
      } = committedValuesRef.current;
      const panelsArray = panelsMapToSortedArray(panels);
      const [idBefore, idAfter] = getResizeHandlePanelIds(groupId, handleId, panelsArray);
      if (idBefore == null || idAfter == null) {
        return;
      }
      let movement = getMovement(event, groupId, handleId, panelsArray, direction, prevSizes, initialDragStateRef.current);
      if (movement === 0) {
        return;
      }
      const groupElement = getPanelGroup(groupId);
      const rect = groupElement.getBoundingClientRect();
      const isHorizontal = direction === "horizontal";

      // Support RTL layouts
      if (document.dir === "rtl" && isHorizontal) {
        movement = -movement;
      }
      const size = isHorizontal ? rect.width : rect.height;
      const delta = movement / size * 100;
      const nextSizes = adjustByDelta(event, panels, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, initialDragStateRef.current);
      const sizesChanged = !areEqual(prevSizes, nextSizes);

      // Don't update cursor for resizes triggered by keyboard interactions.
      if (isMouseEvent(event) || isTouchEvent(event)) {
        // Watch for multiple subsequent deltas; this might occur for tiny cursor movements.
        // In this case, Panel sizes might not change–
        // but updating cursor in this scenario would cause a flicker.
        if (prevDeltaRef.current != delta) {
          if (!sizesChanged) {
            // If the pointer has moved too far to resize the panel any further,
            // update the cursor style for a visual clue.
            // This mimics VS Code behavior.

            if (isHorizontal) {
              setGlobalCursorStyle(movement < 0 ? "horizontal-min" : "horizontal-max");
            } else {
              setGlobalCursorStyle(movement < 0 ? "vertical-min" : "vertical-max");
            }
          } else {
            // Reset the cursor style to the the normal resize cursor.
            setGlobalCursorStyle(isHorizontal ? "horizontal" : "vertical");
          }
        }
      }
      if (sizesChanged) {
        const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
        setSizes(nextSizes);

        // If resize change handlers have been declared, this is the time to call them.
        // Trigger user callbacks after updating state, so that user code can override the sizes.
        callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
      }
      prevDeltaRef.current = delta;
    };
    return resizeHandler;
  }, [groupId]);
  const unregisterPanel = useCallback(id => {
    setPanels(prevPanels => {
      if (!prevPanels.has(id)) {
        return prevPanels;
      }
      const nextPanels = new Map(prevPanels);
      nextPanels.delete(id);
      return nextPanels;
    });
  }, []);
  const collapsePanel = useCallback(id => {
    const {
      panels,
      sizes: prevSizes
    } = committedValuesRef.current;
    const panel = panels.get(id);
    if (panel == null) {
      return;
    }
    const {
      collapsedSize,
      collapsible
    } = panel.current;
    if (!collapsible) {
      return;
    }
    const panelsArray = panelsMapToSortedArray(panels);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize === collapsedSize) {
      // Panel is already collapsed.
      return;
    }
    panelSizeBeforeCollapse.current.set(id, currentSize);
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? currentSize : collapsedSize - currentSize;
    const nextSizes = adjustByDelta(null, panels, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);

      // If resize change handlers have been declared, this is the time to call them.
      // Trigger user callbacks after updating state, so that user code can override the sizes.
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const expandPanel = useCallback(id => {
    const {
      panels,
      sizes: prevSizes
    } = committedValuesRef.current;
    const panel = panels.get(id);
    if (panel == null) {
      return;
    }
    const {
      collapsedSize,
      minSize
    } = panel.current;
    const sizeBeforeCollapse = panelSizeBeforeCollapse.current.get(id) || minSize;
    if (!sizeBeforeCollapse) {
      return;
    }
    const panelsArray = panelsMapToSortedArray(panels);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize !== collapsedSize) {
      // Panel is already expanded.
      return;
    }
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? collapsedSize - sizeBeforeCollapse : sizeBeforeCollapse;
    const nextSizes = adjustByDelta(null, panels, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);

      // If resize change handlers have been declared, this is the time to call them.
      // Trigger user callbacks after updating state, so that user code can override the sizes.
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const resizePanel = useCallback((id, nextSize) => {
    const {
      panels,
      sizes: prevSizes
    } = committedValuesRef.current;
    const panel = panels.get(id);
    if (panel == null) {
      return;
    }
    const {
      collapsedSize,
      collapsible,
      maxSize,
      minSize
    } = panel.current;
    const panelsArray = panelsMapToSortedArray(panels);
    const index = panelsArray.indexOf(panel);
    if (index < 0) {
      return;
    }
    const currentSize = prevSizes[index];
    if (currentSize === nextSize) {
      return;
    }
    if (collapsible && nextSize === collapsedSize) ; else {
      nextSize = Math.min(maxSize, Math.max(minSize, nextSize));
    }
    const [idBefore, idAfter] = getBeforeAndAfterIds(id, panelsArray);
    if (idBefore == null || idAfter == null) {
      return;
    }
    const isLastPanel = index === panelsArray.length - 1;
    const delta = isLastPanel ? currentSize - nextSize : nextSize - currentSize;
    const nextSizes = adjustByDelta(null, panels, idBefore, idAfter, delta, prevSizes, panelSizeBeforeCollapse.current, null);
    if (prevSizes !== nextSizes) {
      const panelIdToLastNotifiedSizeMap = panelIdToLastNotifiedSizeMapRef.current;
      setSizes(nextSizes);

      // If resize change handlers have been declared, this is the time to call them.
      // Trigger user callbacks after updating state, so that user code can override the sizes.
      callPanelCallbacks(panelsArray, nextSizes, panelIdToLastNotifiedSizeMap);
    }
  }, []);
  const context = useMemo(() => ({
    activeHandleId,
    collapsePanel,
    direction,
    expandPanel,
    getPanelStyle,
    groupId,
    registerPanel,
    registerResizeHandle,
    resizePanel,
    startDragging: (id, event) => {
      setActiveHandleId(id);
      if (isMouseEvent(event) || isTouchEvent(event)) {
        const handleElement = getResizeHandle(id);
        initialDragStateRef.current = {
          dragHandleRect: handleElement.getBoundingClientRect(),
          dragOffset: getDragOffset(event, id, direction),
          sizes: committedValuesRef.current.sizes
        };
      }
    },
    stopDragging: () => {
      resetGlobalCursorStyle();
      setActiveHandleId(null);
      initialDragStateRef.current = null;
    },
    unregisterPanel
  }), [activeHandleId, collapsePanel, direction, expandPanel, getPanelStyle, groupId, registerPanel, registerResizeHandle, resizePanel, unregisterPanel]);
  const style = {
    display: "flex",
    flexDirection: direction === "horizontal" ? "row" : "column",
    height: "100%",
    overflow: "hidden",
    width: "100%"
  };
  return createElement(PanelGroupContext.Provider, {
    children: createElement(Type, {
      children,
      className: classNameFromProps,
      "data-panel-group": "",
      "data-panel-group-direction": direction,
      "data-panel-group-id": groupId,
      style: {
        ...style,
        ...styleFromProps
      }
    }),
    value: context
  });
}
const PanelGroup = forwardRef((props, ref) => createElement(PanelGroupWithForwardedRef, {
  ...props,
  forwardedRef: ref
}));

// Workaround for Parcel scope hoisting (which renames objects/functions).
// Casting to :any is required to avoid corrupting the generated TypeScript types.
// See github.com/parcel-bundler/parcel/issues/8724
PanelGroupWithForwardedRef.displayName = "PanelGroup";
PanelGroup.displayName = "forwardRef(PanelGroup)";

function PanelResizeHandle({
  children = null,
  className: classNameFromProps = "",
  disabled = false,
  id: idFromProps = null,
  onDragging,
  style: styleFromProps = {},
  tagName: Type = "div"
}) {
  const divElementRef = useRef(null);

  // Use a ref to guard against users passing inline props
  const callbacksRef = useRef({
    onDragging
  });
  useEffect(() => {
    callbacksRef.current.onDragging = onDragging;
  });
  const panelGroupContext = useContext(PanelGroupContext);
  if (panelGroupContext === null) {
    throw Error(`PanelResizeHandle components must be rendered within a PanelGroup container`);
  }
  const {
    activeHandleId,
    direction,
    groupId,
    registerResizeHandle,
    startDragging,
    stopDragging
  } = panelGroupContext;
  const resizeHandleId = useUniqueId(idFromProps);
  const isDragging = activeHandleId === resizeHandleId;
  const [isFocused, setIsFocused] = useState(false);
  const [resizeHandler, setResizeHandler] = useState(null);
  const stopDraggingAndBlur = useCallback(() => {
    // Clicking on the drag handle shouldn't leave it focused;
    // That would cause the PanelGroup to think it was still active.
    const div = divElementRef.current;
    div.blur();
    stopDragging();
    const {
      onDragging
    } = callbacksRef.current;
    if (onDragging) {
      onDragging(false);
    }
  }, [stopDragging]);
  useEffect(() => {
    if (disabled) {
      setResizeHandler(null);
    } else {
      const resizeHandler = registerResizeHandle(resizeHandleId);
      setResizeHandler(() => resizeHandler);
    }
  }, [disabled, resizeHandleId, registerResizeHandle]);
  useEffect(() => {
    if (disabled || resizeHandler == null || !isDragging) {
      return;
    }
    const onMove = event => {
      resizeHandler(event);
    };
    const onMouseLeave = event => {
      resizeHandler(event);
    };
    const divElement = divElementRef.current;
    const targetDocument = divElement.ownerDocument;
    targetDocument.body.addEventListener("contextmenu", stopDraggingAndBlur);
    targetDocument.body.addEventListener("mousemove", onMove);
    targetDocument.body.addEventListener("touchmove", onMove);
    targetDocument.body.addEventListener("mouseleave", onMouseLeave);
    window.addEventListener("mouseup", stopDraggingAndBlur);
    window.addEventListener("touchend", stopDraggingAndBlur);
    return () => {
      targetDocument.body.removeEventListener("contextmenu", stopDraggingAndBlur);
      targetDocument.body.removeEventListener("mousemove", onMove);
      targetDocument.body.removeEventListener("touchmove", onMove);
      targetDocument.body.removeEventListener("mouseleave", onMouseLeave);
      window.removeEventListener("mouseup", stopDraggingAndBlur);
      window.removeEventListener("touchend", stopDraggingAndBlur);
    };
  }, [direction, disabled, isDragging, resizeHandler, stopDraggingAndBlur]);
  useWindowSplitterResizeHandlerBehavior({
    disabled,
    handleId: resizeHandleId,
    resizeHandler
  });
  const style = {
    cursor: getCursorStyle(direction),
    touchAction: "none",
    userSelect: "none"
  };
  return createElement(Type, {
    children,
    className: classNameFromProps,
    "data-resize-handle-active": isDragging ? "pointer" : isFocused ? "keyboard" : undefined,
    "data-panel-group-direction": direction,
    "data-panel-group-id": groupId,
    "data-panel-resize-handle-enabled": !disabled,
    "data-panel-resize-handle-id": resizeHandleId,
    onBlur: () => setIsFocused(false),
    onFocus: () => setIsFocused(true),
    onMouseDown: event => {
      startDragging(resizeHandleId, event.nativeEvent);
      const {
        onDragging
      } = callbacksRef.current;
      if (onDragging) {
        onDragging(true);
      }
    },
    onMouseUp: stopDraggingAndBlur,
    onTouchCancel: stopDraggingAndBlur,
    onTouchEnd: stopDraggingAndBlur,
    onTouchStart: event => {
      startDragging(resizeHandleId, event.nativeEvent);
      const {
        onDragging
      } = callbacksRef.current;
      if (onDragging) {
        onDragging(true);
      }
    },
    ref: divElementRef,
    role: "separator",
    style: {
      ...style,
      ...styleFromProps
    },
    tabIndex: 0
  });
}

// Workaround for Parcel scope hoisting (which renames objects/functions).
// Casting to :any is required to avoid corrupting the generated TypeScript types.
// See github.com/parcel-bundler/parcel/issues/8724
PanelResizeHandle.displayName = "PanelResizeHandle";



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/panelLeftOpenIcon/dist/keystar-ui-icon-icons-panelLeftOpenIcon.esm.js


const panelLeftOpenIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    width: 18,
    height: 18,
    x: 3,
    y: 3,
    rx: 2,
    ry: 2
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M9 3v18M14 9l3 3-3 3"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/panelLeftCloseIcon/dist/keystar-ui-icon-icons-panelLeftCloseIcon.esm.js


const panelLeftCloseIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    width: 18,
    height: 18,
    x: 3,
    y: 3,
    rx: 2,
    ry: 2
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M9 3v18M16 15l-3-3 3-3"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/panelRightOpenIcon/dist/keystar-ui-icon-icons-panelRightOpenIcon.esm.js


const panelRightOpenIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    width: 18,
    height: 18,
    x: 3,
    y: 3,
    rx: 2,
    ry: 2
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M15 3v18M10 15l-3-3 3-3"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/panelRightCloseIcon/dist/keystar-ui-icon-icons-panelRightCloseIcon.esm.js


const panelRightCloseIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("rect", {
    width: 18,
    height: 18,
    x: 3,
    y: 3,
    rx: 2,
    ry: 2
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M15 3v18M8 9l3 3-3 3"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/checkCircle2Icon/dist/keystar-ui-icon-icons-checkCircle2Icon.esm.js


const checkCircle2Icon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "m9 12 2 2 4-4"
  })]
});



;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/infoIcon/dist/keystar-ui-icon-icons-infoIcon.esm.js


const infoIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("circle", {
    cx: 12,
    cy: 12,
    r: 10
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M12 16v-4M12 8h.01"
  })]
});



// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/alertTriangleIcon/dist/keystar-ui-icon-icons-alertTriangleIcon.esm.js
var keystar_ui_icon_icons_alertTriangleIcon_esm = __webpack_require__(5900);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/notice/dist/keystar-ui-notice.esm.js
'use client';













const noticeClassList = new keystar_ui_style_esm/* ClassList */.LJ('Notice');
const toneToIcon = {
  caution: keystar_ui_icon_icons_alertTriangleIcon_esm/* alertTriangleIcon */.U,
  critical: keystar_ui_icon_icons_alertTriangleIcon_esm/* alertTriangleIcon */.U,
  neutral: infoIcon,
  positive: checkCircle2Icon
};
const toneToRole = {
  caution: 'alert',
  critical: 'alert',
  neutral: 'status',
  positive: 'status'
};
/**
 * Use notices to highlight information that affects a section, feature or page.
 * Draw attention without interrupting users from their current task.
 */
function Notice(props) {
  const {
    children,
    tone = 'neutral',
    ...otherProps
  } = props;
  const ref = (0,react_.useRef)(null);
  const styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  const headingClassName = noticeClassList.declare('heading');
  const headingId = (0,dist_import/* useSlotId */.mp)();
  const contentId = (0,dist_import/* useSlotId */.mp)();
  const hasHeading = (0,keystar_ui_utils_esm/* useHasChild */.Bl)(noticeClassList.selector('heading'), ref);
  const coercedTone = tone === 'neutral' ? 'accent' : tone;
  const icon = toneToIcon[tone];
  const contentStyles = (0,keystar_ui_style_esm/* css */.iv)({
    display: 'grid',
    gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large
  });
  const slots = (0,react_.useMemo)(() => ({
    content: {
      elementType: 'div',
      gridArea: hasHeading ? 'content' : 'heading-start / heading-start / content-end / content-end',
      id: contentId,
      paddingY: hasHeading ? 'regular' : undefined,
      UNSAFE_className: contentStyles
    },
    heading: {
      elementType: 'div',
      gridArea: 'heading',
      id: headingId,
      UNSAFE_className: headingClassName,
      size: 'small'
    },
    text: {
      color: coercedTone,
      weight: 'medium'
    }
  }), [coercedTone, contentId, contentStyles, hasHeading, headingClassName, headingId]);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Grid */.rj, {
    "aria-live": "polite",
    "aria-labelledby": headingId,
    "aria-describedby": contentId,
    role: toneToRole[tone],
    ref: ref,
    tabIndex: 0,
    UNSAFE_className: styleProps.className,
    UNSAFE_style: styleProps.style,
    ...(0,dist_import/* filterDOMProps */.zL)(otherProps),
    // appearance
    backgroundColor: coercedTone,
    border: coercedTone,
    borderRadius: "medium",
    minWidth: 0,
    padding: "medium",
    width: "100%"
    // layout
    ,
    alignItems: "center",
    areas: ['icon heading', 'icon content'],
    columnGap: "medium",
    columns: ['icon.medium', 'auto'],
    rows: `${(0,keystar_ui_layout_esm/* minmax */.WF)('icon.medium', 'auto')} auto`,
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
      src: icon,
      size: "medium",
      color: coercedTone,
      gridArea: "icon",
      alignSelf: "start"
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
      slots: slots,
      children: (0,keystar_ui_utils_esm/* isReactText */.UY)(children) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Content */.VY, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          children: children
        })
      }) : children
    })]
  });
}



// EXTERNAL MODULE: ../node_modules/use-sync-external-store/shim/index.js
var shim = __webpack_require__(80800);
;// CONCATENATED MODULE: ../node_modules/@react-stately/toast/dist/import.mjs



/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $77b352cf12efcf73$export$c7b26b20d3ced9c5(props = {}) {
    let { maxVisibleToasts: maxVisibleToasts = 1 , hasExitAnimation: hasExitAnimation = false  } = props;
    let queue = (0, $jopoU$useMemo)(()=>new $77b352cf12efcf73$export$f1f8569633bbbec4({
            maxVisibleToasts: maxVisibleToasts,
            hasExitAnimation: hasExitAnimation
        }), [
        maxVisibleToasts,
        hasExitAnimation
    ]);
    return $77b352cf12efcf73$export$84726ef35ca2129a(queue);
}
function $77b352cf12efcf73$export$84726ef35ca2129a(queue) {
    let subscribe = (0, react_.useCallback)((fn)=>queue.subscribe(fn), [
        queue
    ]);
    let getSnapshot = (0, react_.useCallback)(()=>queue.visibleToasts, [
        queue
    ]);
    let visibleToasts = (0, shim.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);
    return {
        visibleToasts: visibleToasts,
        add: (content, options)=>queue.add(content, options),
        close: (key)=>queue.close(key),
        remove: (key)=>queue.remove(key),
        pauseAll: ()=>queue.pauseAll(),
        resumeAll: ()=>queue.resumeAll()
    };
}
class $77b352cf12efcf73$export$f1f8569633bbbec4 {
    /** Subscribes to updates to the visible toasts. */ subscribe(fn) {
        this.subscriptions.add(fn);
        return ()=>this.subscriptions.delete(fn);
    }
    /** Adds a new toast to the queue. */ add(content, options = {}) {
        let toastKey = Math.random().toString(36);
        let toast = {
            ...options,
            content: content,
            key: toastKey,
            timer: options.timeout ? new $77b352cf12efcf73$var$Timer(()=>this.close(toastKey), options.timeout) : null
        };
        let low = 0;
        let high = this.queue.length;
        while(low < high){
            let mid = Math.floor((low + high) / 2);
            if ((toast.priority || 0) > (this.queue[mid].priority || 0)) high = mid;
            else low = mid + 1;
        }
        this.queue.splice(low, 0, toast);
        toast.animation = low < this.maxVisibleToasts ? "entering" : "queued";
        let i = this.maxVisibleToasts;
        while(i < this.queue.length)this.queue[i++].animation = "queued";
        this.updateVisibleToasts();
        return toastKey;
    }
    /**
   * Closes a toast. If `hasExitAnimation` is true, the toast
   * transitions to an "exiting" state instead of being removed immediately.
   */ close(key) {
        let index = this.queue.findIndex((t)=>t.key === key);
        if (index >= 0) {
            var _this_queue_index, _this_queue_index_onClose;
            (_this_queue_index_onClose = (_this_queue_index = this.queue[index]).onClose) === null || _this_queue_index_onClose === void 0 ? void 0 : _this_queue_index_onClose.call(_this_queue_index);
            this.queue.splice(index, 1);
        }
        this.updateVisibleToasts();
    }
    /** Removes a toast from the visible toasts after an exiting animation. */ remove(key) {
        this.visibleToasts = this.visibleToasts.filter((t)=>t.key !== key);
        this.updateVisibleToasts();
    }
    updateVisibleToasts() {
        let toasts = this.queue.slice(0, this.maxVisibleToasts);
        if (this.hasExitAnimation) {
            let prevToasts = this.visibleToasts.filter((t)=>!toasts.some((t2)=>t.key === t2.key)).map((t)=>({
                    ...t,
                    animation: "exiting"
                }));
            this.visibleToasts = prevToasts.concat(toasts).sort((a, b)=>b.priority - a.priority);
        } else this.visibleToasts = toasts;
        for (let fn of this.subscriptions)fn();
    }
    /** Pauses the timers for all visible toasts. */ pauseAll() {
        for (let toast of this.visibleToasts)if (toast.timer) toast.timer.pause();
    }
    /** Resumes the timers for all visible toasts. */ resumeAll() {
        for (let toast of this.visibleToasts)if (toast.timer) toast.timer.resume();
    }
    constructor(options){
        this.queue = [];
        this.subscriptions = new Set();
        /** The currently visible toasts. */ this.visibleToasts = [];
        var _options_maxVisibleToasts;
        this.maxVisibleToasts = (_options_maxVisibleToasts = options === null || options === void 0 ? void 0 : options.maxVisibleToasts) !== null && _options_maxVisibleToasts !== void 0 ? _options_maxVisibleToasts : 1;
        var _options_hasExitAnimation;
        this.hasExitAnimation = (_options_hasExitAnimation = options === null || options === void 0 ? void 0 : options.hasExitAnimation) !== null && _options_hasExitAnimation !== void 0 ? _options_hasExitAnimation : false;
    }
}
class $77b352cf12efcf73$var$Timer {
    reset(delay) {
        this.remaining = delay;
        this.resume();
    }
    pause() {
        if (this.timerId == null) return;
        clearTimeout(this.timerId);
        this.timerId = null;
        this.remaining -= Date.now() - this.startTime;
    }
    resume() {
        if (this.remaining <= 0) return;
        this.startTime = Date.now();
        this.timerId = setTimeout(()=>{
            this.timerId = null;
            this.remaining = 0;
            this.callback();
        }, this.remaining);
    }
    constructor(callback, delay){
        this.remaining = delay;
        this.callback = callback;
    }
}





//# sourceMappingURL=module.js.map

;// CONCATENATED MODULE: ../node_modules/@react-aria/landmark/dist/import.mjs




/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


// Increment this version number whenever the
// LandmarkManagerApi or Landmark interfaces change.
const $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION = 1;
// Symbol under which the singleton landmark manager instance is attached to the document.
const $a86207c5d7f7e1fb$var$landmarkSymbol = Symbol.for("react-aria-landmark-manager");
function $a86207c5d7f7e1fb$var$subscribe(fn) {
    document.addEventListener("react-aria-landmark-manager-change", fn);
    return ()=>document.removeEventListener("react-aria-landmark-manager-change", fn);
}
function $a86207c5d7f7e1fb$var$getLandmarkManager() {
    if (typeof document === "undefined") return null;
    // Reuse an existing instance if it has the same or greater version.
    let instance = document[$a86207c5d7f7e1fb$var$landmarkSymbol];
    if (instance && instance.version >= $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION) return instance;
    // Otherwise, create a new instance and dispatch an event so anything using the existing
    // instance updates and re-registers their landmarks with the new one.
    document[$a86207c5d7f7e1fb$var$landmarkSymbol] = new $a86207c5d7f7e1fb$var$LandmarkManager();
    document.dispatchEvent(new CustomEvent("react-aria-landmark-manager-change"));
    return document[$a86207c5d7f7e1fb$var$landmarkSymbol];
}
// Subscribes a React component to the current landmark manager instance.
function $a86207c5d7f7e1fb$var$useLandmarkManager() {
    return (0, shim.useSyncExternalStore)($a86207c5d7f7e1fb$var$subscribe, $a86207c5d7f7e1fb$var$getLandmarkManager, $a86207c5d7f7e1fb$var$getLandmarkManager);
}
class $a86207c5d7f7e1fb$var$LandmarkManager {
    setupIfNeeded() {
        if (this.isListening) return;
        document.addEventListener("keydown", this.f6Handler, {
            capture: true
        });
        document.addEventListener("focusin", this.focusinHandler, {
            capture: true
        });
        document.addEventListener("focusout", this.focusoutHandler, {
            capture: true
        });
        this.isListening = true;
    }
    teardownIfNeeded() {
        if (!this.isListening || this.landmarks.length > 0 || this.refCount > 0) return;
        document.removeEventListener("keydown", this.f6Handler, {
            capture: true
        });
        document.removeEventListener("focusin", this.focusinHandler, {
            capture: true
        });
        document.removeEventListener("focusout", this.focusoutHandler, {
            capture: true
        });
        this.isListening = false;
    }
    focusLandmark(landmark, direction) {
        var _this_landmarks_find, _this_landmarks_find_focus;
        (_this_landmarks_find = this.landmarks.find((l)=>l.ref.current === landmark)) === null || _this_landmarks_find === void 0 ? void 0 : (_this_landmarks_find_focus = _this_landmarks_find.focus) === null || _this_landmarks_find_focus === void 0 ? void 0 : _this_landmarks_find_focus.call(_this_landmarks_find, direction);
    }
    /**
   * Return set of landmarks with a specific role.
   */ getLandmarksByRole(role) {
        return new Set(this.landmarks.filter((l)=>l.role === role));
    }
    /**
   * Return first landmark with a specific role.
   */ getLandmarkByRole(role) {
        return this.landmarks.find((l)=>l.role === role);
    }
    addLandmark(newLandmark) {
        this.setupIfNeeded();
        if (this.landmarks.find((landmark)=>landmark.ref === newLandmark.ref) || !newLandmark.ref.current) return;
        if (this.landmarks.filter((landmark)=>landmark.role === "main").length > 1) console.error('Page can contain no more than one landmark with the role "main".');
        if (this.landmarks.length === 0) {
            this.landmarks = [
                newLandmark
            ];
            this.checkLabels(newLandmark.role);
            return;
        }
        // Binary search to insert new landmark based on position in document relative to existing landmarks.
        // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
        let start = 0;
        let end = this.landmarks.length - 1;
        while(start <= end){
            let mid = Math.floor((start + end) / 2);
            let comparedPosition = newLandmark.ref.current.compareDocumentPosition(this.landmarks[mid].ref.current);
            let isNewAfterExisting = Boolean(comparedPosition & Node.DOCUMENT_POSITION_PRECEDING || comparedPosition & Node.DOCUMENT_POSITION_CONTAINS);
            if (isNewAfterExisting) start = mid + 1;
            else end = mid - 1;
        }
        this.landmarks.splice(start, 0, newLandmark);
        this.checkLabels(newLandmark.role);
    }
    updateLandmark(landmark) {
        let index = this.landmarks.findIndex((l)=>l.ref === landmark.ref);
        if (index >= 0) {
            this.landmarks[index] = {
                ...this.landmarks[index],
                ...landmark
            };
            this.checkLabels(this.landmarks[index].role);
        }
    }
    removeLandmark(ref) {
        this.landmarks = this.landmarks.filter((landmark)=>landmark.ref !== ref);
        this.teardownIfNeeded();
    }
    /**
   * Warn if there are 2+ landmarks with the same role but no label.
   * Labels for landmarks with the same role must also be unique.
   *
   * See https://www.w3.org/WAI/ARIA/apg/practices/landmark-regions/.
   */ checkLabels(role) {
        let landmarksWithRole = this.getLandmarksByRole(role);
        if (landmarksWithRole.size > 1) {
            let duplicatesWithoutLabel = [
                ...landmarksWithRole
            ].filter((landmark)=>!landmark.label);
            if (duplicatesWithoutLabel.length > 0) console.warn(`Page contains more than one landmark with the '${role}' role. If two or more landmarks on a page share the same role, all must be labeled with an aria-label or aria-labelledby attribute: `, duplicatesWithoutLabel.map((landmark)=>landmark.ref.current));
            else {
                let labels = [
                    ...landmarksWithRole
                ].map((landmark)=>landmark.label);
                let duplicateLabels = labels.filter((item, index)=>labels.indexOf(item) !== index);
                duplicateLabels.forEach((label)=>{
                    console.warn(`Page contains more than one landmark with the '${role}' role and '${label}' label. If two or more landmarks on a page share the same role, they must have unique labels: `, [
                        ...landmarksWithRole
                    ].filter((landmark)=>landmark.label === label).map((landmark)=>landmark.ref.current));
                });
            }
        }
    }
    /**
   * Get the landmark that is the closest parent in the DOM.
   * Returns undefined if no parent is a landmark.
   */ closestLandmark(element) {
        let landmarkMap = new Map(this.landmarks.map((l)=>[
                l.ref.current,
                l
            ]));
        let currentElement = element;
        while(currentElement && !landmarkMap.has(currentElement) && currentElement !== document.body && currentElement.parentElement)currentElement = currentElement.parentElement;
        return landmarkMap.get(currentElement);
    }
    /**
   * Gets the next landmark, in DOM focus order, or previous if backwards is specified.
   * If last landmark, next should be the first landmark.
   * If not inside a landmark, will return first landmark.
   * Returns undefined if there are no landmarks.
   */ getNextLandmark(element, { backward: backward  }) {
        var _this_landmarks_nextLandmarkIndex_ref_current;
        let currentLandmark = this.closestLandmark(element);
        let nextLandmarkIndex = backward ? this.landmarks.length - 1 : 0;
        if (currentLandmark) nextLandmarkIndex = this.landmarks.indexOf(currentLandmark) + (backward ? -1 : 1);
        let wrapIfNeeded = ()=>{
            // When we reach the end of the landmark sequence, fire a custom event that can be listened for by applications.
            // If this event is canceled, we return immediately. This can be used to implement landmark navigation across iframes.
            if (nextLandmarkIndex < 0) {
                if (!element.dispatchEvent(new CustomEvent("react-aria-landmark-navigation", {
                    detail: {
                        direction: "backward"
                    },
                    bubbles: true,
                    cancelable: true
                }))) return true;
                nextLandmarkIndex = this.landmarks.length - 1;
            } else if (nextLandmarkIndex >= this.landmarks.length) {
                if (!element.dispatchEvent(new CustomEvent("react-aria-landmark-navigation", {
                    detail: {
                        direction: "forward"
                    },
                    bubbles: true,
                    cancelable: true
                }))) return true;
                nextLandmarkIndex = 0;
            }
            if (nextLandmarkIndex < 0 || nextLandmarkIndex >= this.landmarks.length) return true;
            return false;
        };
        if (wrapIfNeeded()) return undefined;
        // Skip over hidden landmarks.
        let i = nextLandmarkIndex;
        while((_this_landmarks_nextLandmarkIndex_ref_current = this.landmarks[nextLandmarkIndex].ref.current) === null || _this_landmarks_nextLandmarkIndex_ref_current === void 0 ? void 0 : _this_landmarks_nextLandmarkIndex_ref_current.closest("[aria-hidden=true]")){
            nextLandmarkIndex += backward ? -1 : 1;
            if (wrapIfNeeded()) return undefined;
            if (nextLandmarkIndex === i) break;
        }
        return this.landmarks[nextLandmarkIndex];
    }
    /**
   * Look at next landmark. If an element was previously focused inside, restore focus there.
   * If not, focus the landmark itself.
   * If no landmarks at all, or none with focusable elements, don't move focus.
   */ f6Handler(e) {
        if (e.key === "F6") {
            // If alt key pressed, focus main landmark, otherwise navigate forward or backward based on shift key.
            let handled = e.altKey ? this.focusMain() : this.navigate(e.target, e.shiftKey);
            if (handled) {
                e.preventDefault();
                e.stopPropagation();
            }
        }
    }
    focusMain() {
        let main = this.getLandmarkByRole("main");
        if (main && main.ref.current && document.contains(main.ref.current)) {
            this.focusLandmark(main.ref.current, "forward");
            return true;
        }
        return false;
    }
    navigate(from, backward) {
        let nextLandmark = this.getNextLandmark(from, {
            backward: backward
        });
        if (!nextLandmark) return false;
        // If something was previously focused in the next landmark, then return focus to it
        if (nextLandmark.lastFocused) {
            let lastFocused = nextLandmark.lastFocused;
            if (document.body.contains(lastFocused)) {
                lastFocused.focus();
                return true;
            }
        }
        // Otherwise, focus the landmark itself
        if (nextLandmark.ref.current && document.contains(nextLandmark.ref.current)) {
            this.focusLandmark(nextLandmark.ref.current, backward ? "backward" : "forward");
            return true;
        }
        return false;
    }
    /**
   * Sets lastFocused for a landmark, if focus is moved within that landmark.
   * Lets the last focused landmark know it was blurred if something else is focused.
   */ focusinHandler(e) {
        let currentLandmark = this.closestLandmark(e.target);
        if (currentLandmark && currentLandmark.ref.current !== e.target) this.updateLandmark({
            ref: currentLandmark.ref,
            lastFocused: e.target
        });
        let previousFocusedElement = e.relatedTarget;
        if (previousFocusedElement) {
            let closestPreviousLandmark = this.closestLandmark(previousFocusedElement);
            if (closestPreviousLandmark && closestPreviousLandmark.ref.current === previousFocusedElement) closestPreviousLandmark.blur();
        }
    }
    /**
   * Track if the focus is lost to the body. If it is, do cleanup on the landmark that last had focus.
   */ focusoutHandler(e) {
        let previousFocusedElement = e.target;
        let nextFocusedElement = e.relatedTarget;
        // the === document seems to be a jest thing for focus to go there on generic blur event such as landmark.blur();
        // browsers appear to send focus instead to document.body and the relatedTarget is null when that happens
        if (!nextFocusedElement || nextFocusedElement === document) {
            let closestPreviousLandmark = this.closestLandmark(previousFocusedElement);
            if (closestPreviousLandmark && closestPreviousLandmark.ref.current === previousFocusedElement) closestPreviousLandmark.blur();
        }
    }
    createLandmarkController() {
        let instance = this;
        instance.refCount++;
        instance.setupIfNeeded();
        return {
            navigate (direction, opts) {
                let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
                return instance.navigate(element, direction === "backward");
            },
            focusNext (opts) {
                let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
                return instance.navigate(element, false);
            },
            focusPrevious (opts) {
                let element = (opts === null || opts === void 0 ? void 0 : opts.from) || document.activeElement;
                return instance.navigate(element, true);
            },
            focusMain () {
                return instance.focusMain();
            },
            dispose () {
                if (instance) {
                    instance.refCount--;
                    instance.teardownIfNeeded();
                    instance = null;
                }
            }
        };
    }
    registerLandmark(landmark) {
        if (this.landmarks.find((l)=>l.ref === landmark.ref)) this.updateLandmark(landmark);
        else this.addLandmark(landmark);
        return ()=>this.removeLandmark(landmark.ref);
    }
    constructor(){
        this.landmarks = [];
        this.isListening = false;
        this.refCount = 0;
        this.version = $a86207c5d7f7e1fb$var$LANDMARK_API_VERSION;
        this.f6Handler = this.f6Handler.bind(this);
        this.focusinHandler = this.focusinHandler.bind(this);
        this.focusoutHandler = this.focusoutHandler.bind(this);
    }
}
function $a86207c5d7f7e1fb$export$f50151dbd51cd1d9() {
    // Get the current landmark manager and create a controller using it.
    let instance = $a86207c5d7f7e1fb$var$getLandmarkManager();
    let controller = instance === null || instance === void 0 ? void 0 : instance.createLandmarkController();
    let unsubscribe = $a86207c5d7f7e1fb$var$subscribe(()=>{
        // If the landmark manager changes, dispose the old
        // controller and create a new one.
        controller === null || controller === void 0 ? void 0 : controller.dispose();
        instance = $a86207c5d7f7e1fb$var$getLandmarkManager();
        controller = instance === null || instance === void 0 ? void 0 : instance.createLandmarkController();
    });
    // Return a wrapper that proxies requests to the current controller instance.
    return {
        navigate (direction, opts) {
            return controller.navigate(direction, opts);
        },
        focusNext (opts) {
            return controller.focusNext(opts);
        },
        focusPrevious (opts) {
            return controller.focusPrevious(opts);
        },
        focusMain () {
            return controller.focusMain();
        },
        dispose () {
            controller === null || controller === void 0 ? void 0 : controller.dispose();
            unsubscribe();
            controller = undefined;
            instance = null;
        }
    };
}
function $a86207c5d7f7e1fb$export$4cc632584fd87fae(props, ref) {
    const { role: role , "aria-label": ariaLabel , "aria-labelledby": ariaLabelledby , focus: focus  } = props;
    let manager = $a86207c5d7f7e1fb$var$useLandmarkManager();
    let label = ariaLabel || ariaLabelledby;
    let [isLandmarkFocused, setIsLandmarkFocused] = (0, react_.useState)(false);
    let defaultFocus = (0, react_.useCallback)(()=>{
        setIsLandmarkFocused(true);
    }, [
        setIsLandmarkFocused
    ]);
    let blur = (0, react_.useCallback)(()=>{
        setIsLandmarkFocused(false);
    }, [
        setIsLandmarkFocused
    ]);
    (0, dist_import/* useLayoutEffect */.bt)(()=>{
        if (manager) return manager.registerLandmark({
            ref: ref,
            label: label,
            role: role,
            focus: focus || defaultFocus,
            blur: blur
        });
    }, [
        manager,
        label,
        ref,
        role,
        focus,
        defaultFocus,
        blur
    ]);
    (0, react_.useEffect)(()=>{
        var _ref_current;
        if (isLandmarkFocused) (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.focus();
    }, [
        isLandmarkFocused,
        ref
    ]);
    return {
        landmarkProps: {
            role: role,
            tabIndex: isLandmarkFocused ? -1 : undefined,
            "aria-label": ariaLabel,
            "aria-labelledby": ariaLabelledby
        }
    };
}





//# sourceMappingURL=module.js.map

;// CONCATENATED MODULE: ../node_modules/@react-aria/toast/dist/import.mjs






function toast_dist_import_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ var $7853651519a70071$exports = {};
var $ff9177efc58547ad$exports = {};
$ff9177efc58547ad$exports = {
    "close": `إغلاق`,
    "notifications": `إشعارات`
};


var $25eb7c0c0c45e544$exports = {};
$25eb7c0c0c45e544$exports = {
    "close": `Затвори`,
    "notifications": `Известия`
};


var $28feffc3d61a8691$exports = {};
$28feffc3d61a8691$exports = {
    "close": `Zavřít`,
    "notifications": `Upozornění`
};


var $390d441203d25ff4$exports = {};
$390d441203d25ff4$exports = {
    "close": `Luk`,
    "notifications": `Påmindelser`
};


var $7063c2d0f14f979a$exports = {};
$7063c2d0f14f979a$exports = {
    "close": `Schließen`,
    "notifications": `Benachrichtigungen`
};


var $2dfc1dbb6590af88$exports = {};
$2dfc1dbb6590af88$exports = {
    "close": `Κλείσιμο`,
    "notifications": `Ειδοποιήσεις`
};


var $9a12ff1caae5a7a5$exports = {};
$9a12ff1caae5a7a5$exports = {
    "close": `Close`,
    "notifications": `Notifications`
};


var $f4095fb5a72adbe6$exports = {};
$f4095fb5a72adbe6$exports = {
    "close": `Cerrar`,
    "notifications": `Notificaciones`
};


var $75bc5191b9d7826a$exports = {};
$75bc5191b9d7826a$exports = {
    "close": `Sule`,
    "notifications": `Teated`
};


var $e4b9aef18b0db8dc$exports = {};
$e4b9aef18b0db8dc$exports = {
    "close": `Sulje`,
    "notifications": `Ilmoitukset`
};


var $888756784d832bd7$exports = {};
$888756784d832bd7$exports = {
    "close": `Fermer`,
    "notifications": `Notifications`
};


var $6835949b68a1fabf$exports = {};
$6835949b68a1fabf$exports = {
    "close": `סגור`,
    "notifications": `התראות`
};


var $87ffcbc0b651e40b$exports = {};
$87ffcbc0b651e40b$exports = {
    "close": `Zatvori`,
    "notifications": `Obavijesti`
};


var $dc6e3b2813600d69$exports = {};
$dc6e3b2813600d69$exports = {
    "close": `Bezárás`,
    "notifications": `Értesítések`
};


var $fe136bcbacfcfa14$exports = {};
$fe136bcbacfcfa14$exports = {
    "close": `Chiudi`,
    "notifications": `Notifiche`
};


var $8fb53a929b46df83$exports = {};
$8fb53a929b46df83$exports = {
    "close": `閉じる`,
    "notifications": `通知`
};


var $2c38dbfaf041a865$exports = {};
$2c38dbfaf041a865$exports = {
    "close": `닫기`,
    "notifications": `알림`
};


var $48f3f33a29908d4c$exports = {};
$48f3f33a29908d4c$exports = {
    "close": `Uždaryti`,
    "notifications": `Pranešimai`
};


var $9867160d996455a0$exports = {};
$9867160d996455a0$exports = {
    "close": `Aizvērt`,
    "notifications": `Paziņojumi`
};


var $196258ea25c96487$exports = {};
$196258ea25c96487$exports = {
    "close": `Lukk`,
    "notifications": `Varsler`
};


var $949061cb954e8000$exports = {};
$949061cb954e8000$exports = {
    "close": `Sluiten`,
    "notifications": `Meldingen`
};


var $8189bed27add1ad3$exports = {};
$8189bed27add1ad3$exports = {
    "close": `Zamknij`,
    "notifications": `Powiadomienia`
};


var $a361756a93b6e28c$exports = {};
$a361756a93b6e28c$exports = {
    "close": `Fechar`,
    "notifications": `Notificações`
};


var $034c7393857c8db0$exports = {};
$034c7393857c8db0$exports = {
    "close": `Fechar`,
    "notifications": `Notificações`
};


var $e33d3b3868478b04$exports = {};
$e33d3b3868478b04$exports = {
    "close": `Închideţi`,
    "notifications": `Notificări`
};


var $9a7dcb914b29cd9f$exports = {};
$9a7dcb914b29cd9f$exports = {
    "close": `Закрыть`,
    "notifications": `Уведомления`
};


var $e43d964a0c7f1266$exports = {};
$e43d964a0c7f1266$exports = {
    "close": `Zatvoriť`,
    "notifications": `Oznámenia`
};


var $0bc56cee3275bcaa$exports = {};
$0bc56cee3275bcaa$exports = {
    "close": `Zapri`,
    "notifications": `Obvestila`
};


var $7dbdd7289c10d2ba$exports = {};
$7dbdd7289c10d2ba$exports = {
    "close": `Zatvori`,
    "notifications": `Obaveštenja`
};


var $ccbe6066c10b1e53$exports = {};
$ccbe6066c10b1e53$exports = {
    "close": `Stäng`,
    "notifications": `Aviseringar`
};


var $9d503476b9d858b7$exports = {};
$9d503476b9d858b7$exports = {
    "close": `Kapat`,
    "notifications": `Bildirimler`
};


var $32ee419c7b9b7a83$exports = {};
$32ee419c7b9b7a83$exports = {
    "close": `Закрити`,
    "notifications": `Сповіщення`
};


var $122525af1cb737c7$exports = {};
$122525af1cb737c7$exports = {
    "close": `关闭`,
    "notifications": `通知`
};


var $52e8b1b00094e5a3$exports = {};
$52e8b1b00094e5a3$exports = {
    "close": `關閉`,
    "notifications": `通知`
};


$7853651519a70071$exports = {
    "ar-AE": $ff9177efc58547ad$exports,
    "bg-BG": $25eb7c0c0c45e544$exports,
    "cs-CZ": $28feffc3d61a8691$exports,
    "da-DK": $390d441203d25ff4$exports,
    "de-DE": $7063c2d0f14f979a$exports,
    "el-GR": $2dfc1dbb6590af88$exports,
    "en-US": $9a12ff1caae5a7a5$exports,
    "es-ES": $f4095fb5a72adbe6$exports,
    "et-EE": $75bc5191b9d7826a$exports,
    "fi-FI": $e4b9aef18b0db8dc$exports,
    "fr-FR": $888756784d832bd7$exports,
    "he-IL": $6835949b68a1fabf$exports,
    "hr-HR": $87ffcbc0b651e40b$exports,
    "hu-HU": $dc6e3b2813600d69$exports,
    "it-IT": $fe136bcbacfcfa14$exports,
    "ja-JP": $8fb53a929b46df83$exports,
    "ko-KR": $2c38dbfaf041a865$exports,
    "lt-LT": $48f3f33a29908d4c$exports,
    "lv-LV": $9867160d996455a0$exports,
    "nb-NO": $196258ea25c96487$exports,
    "nl-NL": $949061cb954e8000$exports,
    "pl-PL": $8189bed27add1ad3$exports,
    "pt-BR": $a361756a93b6e28c$exports,
    "pt-PT": $034c7393857c8db0$exports,
    "ro-RO": $e33d3b3868478b04$exports,
    "ru-RU": $9a7dcb914b29cd9f$exports,
    "sk-SK": $e43d964a0c7f1266$exports,
    "sl-SI": $0bc56cee3275bcaa$exports,
    "sr-SP": $7dbdd7289c10d2ba$exports,
    "sv-SE": $ccbe6066c10b1e53$exports,
    "tr-TR": $9d503476b9d858b7$exports,
    "uk-UA": $32ee419c7b9b7a83$exports,
    "zh-CN": $122525af1cb737c7$exports,
    "zh-TW": $52e8b1b00094e5a3$exports
};





function $d6542812f0669241$export$a407b657d3044108(props, state, ref) {
    let { key: key , timer: timer , timeout: timeout , animation: animation  } = props.toast;
    (0, react_.useEffect)(()=>{
        if (!timer) return;
        timer.reset(timeout);
        return ()=>{
            timer.pause();
        };
    }, [
        timer,
        timeout
    ]);
    // Restore focus to the toast container on unmount.
    // If there are no more toasts, the container will be unmounted
    // and will restore focus to wherever focus was before the user
    // focused the toast region.
    let focusOnUnmount = (0, react_.useRef)(null);
    (0, dist_import/* useLayoutEffect */.bt)(()=>{
        let container = ref.current.closest("[role=region]");
        return ()=>{
            if (container && container.contains(document.activeElement)) // Focus must be delayed for focus ring to appear, but we can't wait
            // until useEffect cleanup to check if focus was inside the container.
            focusOnUnmount.current = container;
        };
    }, [
        ref
    ]);
    // eslint-disable-next-line
    (0, react_.useEffect)(()=>{
        return ()=>{
            if (focusOnUnmount.current) focusOnUnmount.current.focus();
        };
    }, [
        ref
    ]);
    let titleId = (0, dist_import/* useId */.Me)();
    let descriptionId = (0, dist_import/* useSlotId */.mp)();
    let stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/toast_dist_import_$parcel$interopDefault($7853651519a70071$exports))));
    return {
        toastProps: {
            role: "alert",
            "aria-label": props["aria-label"],
            "aria-labelledby": props["aria-labelledby"] || titleId,
            "aria-describedby": props["aria-describedby"] || descriptionId,
            "aria-details": props["aria-details"],
            // Hide toasts that are animating out so VoiceOver doesn't announce them.
            "aria-hidden": animation === "exiting" ? "true" : undefined
        },
        titleProps: {
            id: titleId
        },
        descriptionProps: {
            id: descriptionId
        },
        closeButtonProps: {
            "aria-label": stringFormatter.format("close"),
            onPress: ()=>state.close(key)
        }
    };
}








function $6cc546b19ee7130a$export$b8cbbb20a51697de(props, state, ref) {
    let stringFormatter = (0, real_module/* useLocalizedStringFormatter */.qb)((0, (/*@__PURE__*/toast_dist_import_$parcel$interopDefault($7853651519a70071$exports))));
    let { landmarkProps: landmarkProps  } = (0, $a86207c5d7f7e1fb$export$4cc632584fd87fae)({
        role: "region",
        "aria-label": props["aria-label"] || stringFormatter.format("notifications")
    }, ref);
    let { hoverProps: hoverProps  } = (0, interactions_dist_import/* useHover */.XI)({
        onHoverStart: state.pauseAll,
        onHoverEnd: state.resumeAll
    });
    let lastFocused = (0, react_.useRef)(null);
    let { focusWithinProps: focusWithinProps  } = (0, interactions_dist_import/* useFocusWithin */.L_)({
        onFocusWithin: (e)=>{
            state.pauseAll();
            lastFocused.current = e.relatedTarget;
        },
        onBlurWithin: ()=>{
            state.resumeAll();
            lastFocused.current = null;
        }
    });
    // When the region unmounts, restore focus to the last element that had focus
    // before the user moved focus into the region.
    // TODO: handle when the element has unmounted like FocusScope does?
    // eslint-disable-next-line arrow-body-style
    (0, react_.useEffect)(()=>{
        return ()=>{
            if (lastFocused.current && document.body.contains(lastFocused.current)) {
                if ((0, interactions_dist_import/* getInteractionModality */.Jz)() === "pointer") (0, dist_import/* focusWithoutScrolling */.Ao)(lastFocused.current);
                else lastFocused.current.focus();
            }
        };
    }, [
        ref
    ]);
    return {
        regionProps: (0, dist_import/* mergeProps */.dG)(landmarkProps, hoverProps, focusWithinProps, {
            tabIndex: -1,
            // Mark the toast region as a "top layer", so that it:
            //   - is not aria-hidden when opening an overlay
            //   - allows focus even outside a containing focus scope
            //   - doesn’t dismiss overlays when clicking on it, even though it is outside
            // @ts-ignore
            "data-react-aria-top-layer": true
        })
    };
}





//# sourceMappingURL=module.js.map

// EXTERNAL MODULE: external "next/dist/compiled/react-dom/server-rendering-stub"
var server_rendering_stub_ = __webpack_require__(98704);
var server_rendering_stub_default = /*#__PURE__*/__webpack_require__.n(server_rendering_stub_);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/toast/dist/keystar-ui-toast.esm.js



















var intlMessages = {
	"ar-AE": {
		info: "معلومات",
		critical: "خطأ",
		positive: "تم بنجاح"
	},
	"bg-BG": {
		info: "Инфо",
		critical: "Грешка",
		positive: "Успех"
	},
	"cs-CZ": {
		info: "Informace",
		critical: "Chyba",
		positive: "Úspěch"
	},
	"da-DK": {
		info: "Info",
		critical: "Fejl",
		positive: "Fuldført"
	},
	"de-DE": {
		info: "Informationen",
		critical: "Fehler",
		positive: "Erfolg"
	},
	"el-GR": {
		info: "Πληροφορίες",
		critical: "Σφάλμα",
		positive: "Επιτυχία"
	},
	"en-US": {
		info: "Info",
		critical: "Error",
		positive: "Success"
	},
	"es-ES": {
		info: "Información",
		critical: "Error",
		positive: "Éxito"
	},
	"et-EE": {
		info: "Teave",
		critical: "Viga",
		positive: "Valmis"
	},
	"fi-FI": {
		info: "Tiedot",
		critical: "Virhe",
		positive: "Onnistui"
	},
	"fr-FR": {
		info: "Infos",
		critical: "Erreur",
		positive: "Succès"
	},
	"he-IL": {
		info: "מידע",
		critical: "שגיאה",
		positive: "הצלחה"
	},
	"hr-HR": {
		info: "Informacije",
		critical: "Pogreška",
		positive: "Uspješno"
	},
	"hu-HU": {
		info: "Információ",
		critical: "Hiba",
		positive: "Siker"
	},
	"it-IT": {
		info: "Informazioni",
		critical: "Errore",
		positive: "Operazione riuscita"
	},
	"ja-JP": {
		info: "情報",
		critical: "エラー",
		positive: "成功"
	},
	"ko-KR": {
		info: "정보",
		critical: "오류",
		positive: "성공"
	},
	"lt-LT": {
		info: "Informacija",
		critical: "Klaida",
		positive: "Sėkmingai"
	},
	"lv-LV": {
		info: "Informācija",
		critical: "Kļūda",
		positive: "Izdevās"
	},
	"nb-NO": {
		info: "Info",
		critical: "Feil",
		positive: "Vellykket"
	},
	"nl-NL": {
		info: "Info",
		critical: "Fout",
		positive: "Geslaagd"
	},
	"pl-PL": {
		info: "Informacje",
		critical: "Błąd",
		positive: "Powodzenie"
	},
	"pt-BR": {
		info: "Informações",
		critical: "Erro",
		positive: "Sucesso"
	},
	"pt-PT": {
		info: "Informação",
		critical: "Erro",
		positive: "Sucesso"
	},
	"ro-RO": {
		info: "Informaţii",
		critical: "Eroare",
		positive: "Succes"
	},
	"ru-RU": {
		info: "Информация",
		critical: "Ошибка",
		positive: "Успешно"
	},
	"sk-SK": {
		info: "Informácie",
		critical: "Chyba",
		positive: "Úspech"
	},
	"sl-SI": {
		info: "Informacije",
		critical: "Napaka",
		positive: "Uspešno"
	},
	"sr-SP": {
		info: "Informacije",
		critical: "Greška",
		positive: "Uspešno"
	},
	"sv-SE": {
		info: "Info",
		critical: "Fel",
		positive: "Lyckades"
	},
	"tr-TR": {
		info: "Bilgiler",
		critical: "Hata",
		positive: "Başarılı"
	},
	"uk-UA": {
		info: "Інформація",
		critical: "Помилка",
		positive: "Успішно"
	},
	"zh-CN": {
		info: "信息",
		critical: "错误",
		positive: "成功"
	},
	"zh-TW": {
		info: "資訊",
		critical: "錯誤",
		positive: "成功"
	}
};

const ICONS = {
  info: infoIcon,
  critical: keystar_ui_icon_icons_alertTriangleIcon_esm/* alertTriangleIcon */.U,
  // neutral: infoIcon,
  positive: checkCircle2Icon
};
function Toast(props, ref) {
  let {
    toast: {
      key,
      animation,
      content: {
        children,
        tone,
        actionLabel,
        onAction,
        shouldCloseOnAction
      }
    },
    state,
    ...otherProps
  } = props;
  let domRef = (0,dist_import/* useObjectRef */.B3)(ref);
  let {
    closeButtonProps,
    titleProps,
    toastProps
  } = $d6542812f0669241$export$a407b657d3044108(props, state, domRef);
  let styleProps = (0,keystar_ui_style_esm/* useStyleProps */.FD)(otherProps);
  let stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(intlMessages);
  let iconLabel = tone && tone !== 'neutral' ? stringFormatter.format(tone) : null;
  let icon = tone && tone !== 'neutral' ? ICONS[tone] : null;
  const handleAction = () => {
    if (onAction) {
      onAction();
    }
    if (shouldCloseOnAction) {
      state.close(key);
    }
  };
  let slots = (0,react_.useMemo)(() => ({
    text: {
      color: 'inherit'
    }
  }), []);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    ...styleProps,
    ...toastProps,
    ref: domRef,
    "data-tone": tone,
    className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
      borderRadius: keystar_ui_style_esm/* tokenSchema */.iK.size.radius.regular,
      display: 'flex',
      margin: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      maxWidth: keystar_ui_style_esm/* tokenSchema */.iK.size.container.xsmall,
      minHeight: keystar_ui_style_esm/* tokenSchema */.iK.size.element.large,
      padding: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular,
      paddingInlineStart: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      pointerEvents: 'auto',
      position: 'absolute',
      // tones
      color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.onEmphasis,
      '&[data-tone=neutral]': {
        background: keystar_ui_style_esm/* tokenSchema */.iK.color.scale['slate9']
      },
      '&[data-tone=info]': {
        background: keystar_ui_style_esm/* tokenSchema */.iK.color.background.accentEmphasis
      },
      '&[data-tone=positive]': {
        background: keystar_ui_style_esm/* tokenSchema */.iK.color.background.positiveEmphasis
      },
      '&[data-tone=critical]': {
        background: keystar_ui_style_esm/* tokenSchema */.iK.color.background.criticalEmphasis
      },
      // animations
      '&[data-animation=entering]': {
        animation: `${slideInAnim} 300ms`
      },
      '&[data-animation=exiting]': {
        animation: `${fadeOutAnim} 300ms forwards`
      }
    }), styleProps.className),
    style: {
      ...styleProps.style,
      zIndex: props.toast.priority
    },
    "data-animation": animation,
    onAnimationEnd: () => {
      if (animation === 'exiting') {
        state.remove(key);
      }
    },
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_slots_esm/* SlotProvider */.Wl, {
      slots: slots,
      children: [icon && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
        "aria-label": iconLabel,
        src: icon,
        size: "medium",
        marginTop: "small",
        marginEnd: "regular"
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)("div", {
        className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
          alignItems: 'center',
          display: 'flex',
          columnGap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
          flex: 1,
          flexWrap: 'wrap',
          justifyContent: 'flex-end',
          paddingInlineEnd: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large
        })),
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
          className: (0,keystar_ui_style_esm/* classNames */.AK)((0,keystar_ui_style_esm/* css */.iv)({
            flexGrow: 1,
            paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular
          })),
          ...titleProps,
          children: (0,keystar_ui_utils_esm/* isReactText */.UY)(children) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: children
          }) : children
        }), actionLabel && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          onPress: handleAction
          // prominence="low"
          ,
          static: "light"
          // tone="secondary"
          // staticColor="white"
          ,
          children: actionLabel
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
        className: (0,keystar_ui_style_esm/* css */.iv)({
          borderInlineStart: `${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular} solid #fff3`,
          paddingInlineStart: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular
        }),
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ClearButton */.Cd, {
          static: "light",
          ...closeButtonProps
        })
      })]
    })
  });
}
let slideInAnim = (0,keystar_ui_style_esm/* keyframes */.F4)({
  from: {
    transform: `var(--slide-from)`
  },
  to: {
    transform: `var(--slide-to)`
  }
});
let fadeOutAnim = (0,keystar_ui_style_esm/* keyframes */.F4)({
  from: {
    opacity: 1
  },
  to: {
    opacity: 0
  }
});
let _Toast = /*#__PURE__*/(0,react_.forwardRef)(Toast);

/** @private Positioning and provider for toast children. */
function ToastContainer(props) {
  let {
    children,
    state
  } = props;
  let containerPlacement = (0,keystar_ui_style_esm/* useIsMobileDevice */.p3)() ? 'center' : 'right';
  let ref = (0,react_.useRef)(null);
  let {
    regionProps
  } = $6cc546b19ee7130a$export$b8cbbb20a51697de(props, state, ref);
  let contents = /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_core_esm/* VoussoirProvider */.Qn, {
    UNSAFE_style: {
      background: 'transparent'
    },
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_style_esm/* FocusRing */.tE, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
        ...regionProps,
        ref: ref,
        "data-position": "bottom",
        "data-placement": containerPlacement,
        className: (0,keystar_ui_style_esm/* css */.iv)({
          display: 'flex',
          insetInline: 0,
          outline: 'none',
          pointerEvents: 'none',
          position: 'fixed',
          zIndex: 100050 /* above modals */,

          '&[data-focus=visible] > :first-child:after': {
            borderRadius: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.radius.regular} + ${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRingGap})`,
            boxShadow: `0 0 0 ${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRing} ${keystar_ui_style_esm/* tokenSchema */.iK.color.alias.focusRing}`,
            content: '""',
            inset: 0,
            margin: `calc(-1 * ${keystar_ui_style_esm/* tokenSchema */.iK.size.alias.focusRingGap})`,
            pointerEvents: 'none',
            position: 'absolute'
          },
          '&[data-position=top]': {
            top: 0,
            flexDirection: 'column',
            '--slide-from': 'translateY(-100%)',
            '--slide-to': 'translateY(0)'
          },
          '&[data-position=bottom]': {
            bottom: 0,
            flexDirection: 'column-reverse',
            '--slide-from': 'translateY(100%)',
            '--slide-to': 'translateY(0)'
          },
          '&[data-placement=left]': {
            alignItems: 'flex-start',
            '--slide-from': 'translateX(-100%)',
            '--slide-to': 'translateX(0)',
            '&:dir(rtl)': {
              '--slide-from': 'translateX(100%)'
            }
          },
          '&[data-placement=center]': {
            alignItems: 'center'
          },
          '&[data-placement=right]': {
            alignItems: 'flex-end',
            '--slide-from': 'translateX(100%)',
            '--slide-to': 'translateX(0)',
            '&:dir(rtl)': {
              '--slide-from': 'translateX(-100%)'
            }
          }
        }),
        children: children
      })
    })
  });
  return /*#__PURE__*/server_rendering_stub_default().createPortal(contents, document.body);
}

// There is a single global toast queue instance for the whole app, initialized lazily.
let globalToastQueue = null;
function getGlobalToastQueue() {
  if (!globalToastQueue) {
    globalToastQueue = new $77b352cf12efcf73$export$f1f8569633bbbec4({
      maxVisibleToasts: 1,
      hasExitAnimation: true
    });
  }
  return globalToastQueue;
}
let toastProviders = new Set();
let subscriptions = new Set();
function subscribe(fn) {
  subscriptions.add(fn);
  return () => subscriptions.delete(fn);
}
function getActiveToaster() {
  return toastProviders.values().next().value;
}
function useActiveToaster() {
  return (0,react_.useSyncExternalStore)(subscribe, getActiveToaster, getActiveToaster);
}

/**
 * A Toaster renders the queued toasts in an application. It should be
 * placed at the root of the app.
 */
function Toaster(props) {
  // Track all toast provider instances in a set.
  // Only the first one will actually render.
  // We use a ref to do this, since it will have a stable identity
  // over the lifetime of the component.
  let ref = (0,react_.useRef)();
  toastProviders.add(ref);

  // eslint-disable-next-line arrow-body-style
  (0,react_.useEffect)(() => {
    return () => {
      // When this toast provider unmounts, reset all animations so that
      // when the new toast provider renders, it is seamless.
      for (let toast of getGlobalToastQueue().visibleToasts) {
        toast.animation = undefined;
      }

      // Remove this toast provider, and call subscriptions.
      // This will cause all other instances to re-render,
      // and the first one to become the new active toast provider.
      toastProviders.delete(ref);
      for (let fn of subscriptions) {
        fn();
      }
    };
  }, []);

  // Only render if this is the active toast provider instance, and there are visible toasts.
  let activeToaster = useActiveToaster();
  let state = $77b352cf12efcf73$export$84726ef35ca2129a(getGlobalToastQueue());
  if (ref === activeToaster && state.visibleToasts.length > 0) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(ToastContainer, {
      state: state,
      ...props,
      children: state.visibleToasts.map(toast => /*#__PURE__*/(0,jsx_runtime_.jsx)(_Toast, {
        toast: toast,
        state: state
      }, toast.key))
    });
  }
  return null;
}
function addToast(children, tone) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  // Dispatch a custom event so that toasts can be intercepted and re-targeted, e.g. when inside an iframe.
  if (typeof CustomEvent !== 'undefined' && typeof window !== 'undefined') {
    let event = new CustomEvent('keystar-ui-toast', {
      cancelable: true,
      bubbles: true,
      detail: {
        children,
        tone,
        options
      }
    });
    let shouldContinue = window.dispatchEvent(event);
    if (!shouldContinue) {
      return () => {};
    }
  }
  let value = {
    children,
    tone,
    actionLabel: options.actionLabel,
    onAction: options.onAction,
    shouldCloseOnAction: options.shouldCloseOnAction
  };

  // Actionable toasts cannot be auto dismissed.
  (0,emery_cjs.warning)(!(options.timeout && options.onAction), 'Timeouts are not supported on actionable toasts.');
  (0,emery_cjs.warning)(!!(options.timeout && options.timeout >= 5000), 'Timeouts must be at least 5000ms, for accessibility.');
  let timeout = options.timeout && !options.onAction ? Math.max(options.timeout, 5000) : undefined;
  let queue = getGlobalToastQueue();
  let key = queue.add(value, {
    priority: getPriority(tone, options),
    timeout,
    onClose: options.onClose
  });
  return () => queue.close(key);
}
const toastQueue = {
  /** Queues a neutral toast. */
  neutral(children) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return addToast(children, 'neutral', options);
  },
  /** Queues a positive toast. */
  positive(children) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return addToast(children, 'positive', options);
  },
  /** Queues a critical toast. */
  critical(children) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return addToast(children, 'critical', options);
  },
  /** Queues an informational toast. */
  info(children) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return addToast(children, 'info', options);
  }
};

// TODO: if a lower priority toast comes in, no way to know until you dismiss
// the higher priority one.
const PRIORITY = {
  // actionable toasts gain 4 priority points. make sure critical toasts are
  // always at the top.
  critical: 10,
  positive: 3,
  info: 2,
  neutral: 1
};
function getPriority(tone, options) {
  let priority = PRIORITY[tone] || 1;
  if (options.onAction) {
    priority += 4;
  }
  return priority;
}



// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-505d5440.node.esm.js
var ui_505d5440_node_esm = __webpack_require__(11592);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/index-a1f86d7d.node.esm.js
var index_a1f86d7d_node_esm = __webpack_require__(62598);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-d53317b9.node.esm.js
var ui_d53317b9_node_esm = __webpack_require__(92900);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-fabdbcda.node.esm.js
var ui_fabdbcda_node_esm = __webpack_require__(83002);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-ef5f825b.node.esm.js
var ui_ef5f825b_node_esm = __webpack_require__(99034);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-045cfd63.node.esm.js
var ui_045cfd63_node_esm = __webpack_require__(10772);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-b238173f.node.esm.js
var ui_b238173f_node_esm = __webpack_require__(74659);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-2518a09d.node.esm.js
var ui_2518a09d_node_esm = __webpack_require__(3112);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-de41af65.node.esm.js
var ui_de41af65_node_esm = __webpack_require__(66855);
// EXTERNAL MODULE: ../node_modules/@sindresorhus/slugify/index.js
var slugify = __webpack_require__(34903);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-37be050c.node.esm.js
var ui_37be050c_node_esm = __webpack_require__(63815);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-5bded06a.node.esm.js
var ui_5bded06a_node_esm = __webpack_require__(16293);
// EXTERNAL MODULE: ../node_modules/@braintree/sanitize-url/dist/index.js
var dist = __webpack_require__(19047);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-8015395f.node.esm.js
var ui_8015395f_node_esm = __webpack_require__(21040);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-56fd1352.node.esm.js
var ui_56fd1352_node_esm = __webpack_require__(96949);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/initial-values-7069614f.node.esm.js
var initial_values_7069614f_node_esm = __webpack_require__(32236);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/form-from-preview-c6d22994.node.esm.js
var form_from_preview_c6d22994_node_esm = __webpack_require__(62880);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/errors-e500af35.node.esm.js
var errors_e500af35_node_esm = __webpack_require__(85578);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-utils-11a4fc47.node.esm.js
var ui_utils_11a4fc47_node_esm = __webpack_require__(13005);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/action-group/dist/keystar-ui-action-group.esm.js + 1 modules
var keystar_ui_action_group_esm = __webpack_require__(69034);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/externalLinkIcon/dist/keystar-ui-icon-icons-externalLinkIcon.esm.js
var keystar_ui_icon_icons_externalLinkIcon_esm = __webpack_require__(69804);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/historyIcon/dist/keystar-ui-icon-icons-historyIcon.esm.js


const historyIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M3 3v5h5M12 7v5l4 2"
  })]
});



;// CONCATENATED MODULE: ../node_modules/js-yaml/dist/js-yaml.mjs

/*! js-yaml 4.1.0 https://github.com/nodeca/js-yaml @license MIT */
function isNothing(subject) {
  return (typeof subject === 'undefined') || (subject === null);
}


function isObject(subject) {
  return (typeof subject === 'object') && (subject !== null);
}


function toArray(sequence) {
  if (Array.isArray(sequence)) return sequence;
  else if (isNothing(sequence)) return [];

  return [ sequence ];
}


function extend(target, source) {
  var index, length, key, sourceKeys;

  if (source) {
    sourceKeys = Object.keys(source);

    for (index = 0, length = sourceKeys.length; index < length; index += 1) {
      key = sourceKeys[index];
      target[key] = source[key];
    }
  }

  return target;
}


function repeat(string, count) {
  var result = '', cycle;

  for (cycle = 0; cycle < count; cycle += 1) {
    result += string;
  }

  return result;
}


function isNegativeZero(number) {
  return (number === 0) && (Number.NEGATIVE_INFINITY === 1 / number);
}


var isNothing_1      = isNothing;
var isObject_1       = isObject;
var toArray_1        = toArray;
var repeat_1         = repeat;
var isNegativeZero_1 = isNegativeZero;
var extend_1         = extend;

var common = {
	isNothing: isNothing_1,
	isObject: isObject_1,
	toArray: toArray_1,
	repeat: repeat_1,
	isNegativeZero: isNegativeZero_1,
	extend: extend_1
};

// YAML error class. http://stackoverflow.com/questions/8458984


function formatError(exception, compact) {
  var where = '', message = exception.reason || '(unknown reason)';

  if (!exception.mark) return message;

  if (exception.mark.name) {
    where += 'in "' + exception.mark.name + '" ';
  }

  where += '(' + (exception.mark.line + 1) + ':' + (exception.mark.column + 1) + ')';

  if (!compact && exception.mark.snippet) {
    where += '\n\n' + exception.mark.snippet;
  }

  return message + ' ' + where;
}


function YAMLException$1(reason, mark) {
  // Super constructor
  Error.call(this);

  this.name = 'YAMLException';
  this.reason = reason;
  this.mark = mark;
  this.message = formatError(this, false);

  // Include stack trace in error object
  if (Error.captureStackTrace) {
    // Chrome and NodeJS
    Error.captureStackTrace(this, this.constructor);
  } else {
    // FF, IE 10+ and Safari 6+. Fallback for others
    this.stack = (new Error()).stack || '';
  }
}


// Inherit from Error
YAMLException$1.prototype = Object.create(Error.prototype);
YAMLException$1.prototype.constructor = YAMLException$1;


YAMLException$1.prototype.toString = function toString(compact) {
  return this.name + ': ' + formatError(this, compact);
};


var exception = YAMLException$1;

// get snippet for a single line, respecting maxLength
function getLine(buffer, lineStart, lineEnd, position, maxLineLength) {
  var head = '';
  var tail = '';
  var maxHalfLength = Math.floor(maxLineLength / 2) - 1;

  if (position - lineStart > maxHalfLength) {
    head = ' ... ';
    lineStart = position - maxHalfLength + head.length;
  }

  if (lineEnd - position > maxHalfLength) {
    tail = ' ...';
    lineEnd = position + maxHalfLength - tail.length;
  }

  return {
    str: head + buffer.slice(lineStart, lineEnd).replace(/\t/g, '→') + tail,
    pos: position - lineStart + head.length // relative position
  };
}


function padStart(string, max) {
  return common.repeat(' ', max - string.length) + string;
}


function makeSnippet(mark, options) {
  options = Object.create(options || null);

  if (!mark.buffer) return null;

  if (!options.maxLength) options.maxLength = 79;
  if (typeof options.indent      !== 'number') options.indent      = 1;
  if (typeof options.linesBefore !== 'number') options.linesBefore = 3;
  if (typeof options.linesAfter  !== 'number') options.linesAfter  = 2;

  var re = /\r?\n|\r|\0/g;
  var lineStarts = [ 0 ];
  var lineEnds = [];
  var match;
  var foundLineNo = -1;

  while ((match = re.exec(mark.buffer))) {
    lineEnds.push(match.index);
    lineStarts.push(match.index + match[0].length);

    if (mark.position <= match.index && foundLineNo < 0) {
      foundLineNo = lineStarts.length - 2;
    }
  }

  if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;

  var result = '', i, line;
  var lineNoLength = Math.min(mark.line + options.linesAfter, lineEnds.length).toString().length;
  var maxLineLength = options.maxLength - (options.indent + lineNoLength + 3);

  for (i = 1; i <= options.linesBefore; i++) {
    if (foundLineNo - i < 0) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo - i],
      lineEnds[foundLineNo - i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
      maxLineLength
    );
    result = common.repeat(' ', options.indent) + padStart((mark.line - i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n' + result;
  }

  line = getLine(mark.buffer, lineStarts[foundLineNo], lineEnds[foundLineNo], mark.position, maxLineLength);
  result += common.repeat(' ', options.indent) + padStart((mark.line + 1).toString(), lineNoLength) +
    ' | ' + line.str + '\n';
  result += common.repeat('-', options.indent + lineNoLength + 3 + line.pos) + '^' + '\n';

  for (i = 1; i <= options.linesAfter; i++) {
    if (foundLineNo + i >= lineEnds.length) break;
    line = getLine(
      mark.buffer,
      lineStarts[foundLineNo + i],
      lineEnds[foundLineNo + i],
      mark.position - (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
      maxLineLength
    );
    result += common.repeat(' ', options.indent) + padStart((mark.line + i + 1).toString(), lineNoLength) +
      ' | ' + line.str + '\n';
  }

  return result.replace(/\n$/, '');
}


var snippet = makeSnippet;

var TYPE_CONSTRUCTOR_OPTIONS = [
  'kind',
  'multi',
  'resolve',
  'construct',
  'instanceOf',
  'predicate',
  'represent',
  'representName',
  'defaultStyle',
  'styleAliases'
];

var YAML_NODE_KINDS = [
  'scalar',
  'sequence',
  'mapping'
];

function compileStyleAliases(map) {
  var result = {};

  if (map !== null) {
    Object.keys(map).forEach(function (style) {
      map[style].forEach(function (alias) {
        result[String(alias)] = style;
      });
    });
  }

  return result;
}

function Type$1(tag, options) {
  options = options || {};

  Object.keys(options).forEach(function (name) {
    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
      throw new exception('Unknown option "' + name + '" is met in definition of "' + tag + '" YAML type.');
    }
  });

  // TODO: Add tag format check.
  this.options       = options; // keep original options in case user wants to extend this type later
  this.tag           = tag;
  this.kind          = options['kind']          || null;
  this.resolve       = options['resolve']       || function () { return true; };
  this.construct     = options['construct']     || function (data) { return data; };
  this.instanceOf    = options['instanceOf']    || null;
  this.predicate     = options['predicate']     || null;
  this.represent     = options['represent']     || null;
  this.representName = options['representName'] || null;
  this.defaultStyle  = options['defaultStyle']  || null;
  this.multi         = options['multi']         || false;
  this.styleAliases  = compileStyleAliases(options['styleAliases'] || null);

  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
    throw new exception('Unknown kind "' + this.kind + '" is specified for "' + tag + '" YAML type.');
  }
}

var type = Type$1;

/*eslint-disable max-len*/





function compileList(schema, name) {
  var result = [];

  schema[name].forEach(function (currentType) {
    var newIndex = result.length;

    result.forEach(function (previousType, previousIndex) {
      if (previousType.tag === currentType.tag &&
          previousType.kind === currentType.kind &&
          previousType.multi === currentType.multi) {

        newIndex = previousIndex;
      }
    });

    result[newIndex] = currentType;
  });

  return result;
}


function compileMap(/* lists... */) {
  var result = {
        scalar: {},
        sequence: {},
        mapping: {},
        fallback: {},
        multi: {
          scalar: [],
          sequence: [],
          mapping: [],
          fallback: []
        }
      }, index, length;

  function collectType(type) {
    if (type.multi) {
      result.multi[type.kind].push(type);
      result.multi['fallback'].push(type);
    } else {
      result[type.kind][type.tag] = result['fallback'][type.tag] = type;
    }
  }

  for (index = 0, length = arguments.length; index < length; index += 1) {
    arguments[index].forEach(collectType);
  }
  return result;
}


function Schema$1(definition) {
  return this.extend(definition);
}


Schema$1.prototype.extend = function extend(definition) {
  var implicit = [];
  var explicit = [];

  if (definition instanceof type) {
    // Schema.extend(type)
    explicit.push(definition);

  } else if (Array.isArray(definition)) {
    // Schema.extend([ type1, type2, ... ])
    explicit = explicit.concat(definition);

  } else if (definition && (Array.isArray(definition.implicit) || Array.isArray(definition.explicit))) {
    // Schema.extend({ explicit: [ type1, type2, ... ], implicit: [ type1, type2, ... ] })
    if (definition.implicit) implicit = implicit.concat(definition.implicit);
    if (definition.explicit) explicit = explicit.concat(definition.explicit);

  } else {
    throw new exception('Schema.extend argument should be a Type, [ Type ], ' +
      'or a schema definition ({ implicit: [...], explicit: [...] })');
  }

  implicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }

    if (type$1.loadKind && type$1.loadKind !== 'scalar') {
      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');
    }

    if (type$1.multi) {
      throw new exception('There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.');
    }
  });

  explicit.forEach(function (type$1) {
    if (!(type$1 instanceof type)) {
      throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');
    }
  });

  var result = Object.create(Schema$1.prototype);

  result.implicit = (this.implicit || []).concat(implicit);
  result.explicit = (this.explicit || []).concat(explicit);

  result.compiledImplicit = compileList(result, 'implicit');
  result.compiledExplicit = compileList(result, 'explicit');
  result.compiledTypeMap  = compileMap(result.compiledImplicit, result.compiledExplicit);

  return result;
};


var schema = Schema$1;

var str = new type('tag:yaml.org,2002:str', {
  kind: 'scalar',
  construct: function (data) { return data !== null ? data : ''; }
});

var seq = new type('tag:yaml.org,2002:seq', {
  kind: 'sequence',
  construct: function (data) { return data !== null ? data : []; }
});

var map = new type('tag:yaml.org,2002:map', {
  kind: 'mapping',
  construct: function (data) { return data !== null ? data : {}; }
});

var failsafe = new schema({
  explicit: [
    str,
    seq,
    map
  ]
});

function resolveYamlNull(data) {
  if (data === null) return true;

  var max = data.length;

  return (max === 1 && data === '~') ||
         (max === 4 && (data === 'null' || data === 'Null' || data === 'NULL'));
}

function constructYamlNull() {
  return null;
}

function isNull(object) {
  return object === null;
}

var _null = new type('tag:yaml.org,2002:null', {
  kind: 'scalar',
  resolve: resolveYamlNull,
  construct: constructYamlNull,
  predicate: isNull,
  represent: {
    canonical: function () { return '~';    },
    lowercase: function () { return 'null'; },
    uppercase: function () { return 'NULL'; },
    camelcase: function () { return 'Null'; },
    empty:     function () { return '';     }
  },
  defaultStyle: 'lowercase'
});

function resolveYamlBoolean(data) {
  if (data === null) return false;

  var max = data.length;

  return (max === 4 && (data === 'true' || data === 'True' || data === 'TRUE')) ||
         (max === 5 && (data === 'false' || data === 'False' || data === 'FALSE'));
}

function constructYamlBoolean(data) {
  return data === 'true' ||
         data === 'True' ||
         data === 'TRUE';
}

function isBoolean(object) {
  return Object.prototype.toString.call(object) === '[object Boolean]';
}

var bool = new type('tag:yaml.org,2002:bool', {
  kind: 'scalar',
  resolve: resolveYamlBoolean,
  construct: constructYamlBoolean,
  predicate: isBoolean,
  represent: {
    lowercase: function (object) { return object ? 'true' : 'false'; },
    uppercase: function (object) { return object ? 'TRUE' : 'FALSE'; },
    camelcase: function (object) { return object ? 'True' : 'False'; }
  },
  defaultStyle: 'lowercase'
});

function isHexCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) ||
         ((0x41/* A */ <= c) && (c <= 0x46/* F */)) ||
         ((0x61/* a */ <= c) && (c <= 0x66/* f */));
}

function isOctCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x37/* 7 */));
}

function isDecCode(c) {
  return ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */));
}

function resolveYamlInteger(data) {
  if (data === null) return false;

  var max = data.length,
      index = 0,
      hasDigits = false,
      ch;

  if (!max) return false;

  ch = data[index];

  // sign
  if (ch === '-' || ch === '+') {
    ch = data[++index];
  }

  if (ch === '0') {
    // 0
    if (index + 1 === max) return true;
    ch = data[++index];

    // base 2, base 8, base 16

    if (ch === 'b') {
      // base 2
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (ch !== '0' && ch !== '1') return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'x') {
      // base 16
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isHexCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }


    if (ch === 'o') {
      // base 8
      index++;

      for (; index < max; index++) {
        ch = data[index];
        if (ch === '_') continue;
        if (!isOctCode(data.charCodeAt(index))) return false;
        hasDigits = true;
      }
      return hasDigits && ch !== '_';
    }
  }

  // base 10 (except 0)

  // value should not start with `_`;
  if (ch === '_') return false;

  for (; index < max; index++) {
    ch = data[index];
    if (ch === '_') continue;
    if (!isDecCode(data.charCodeAt(index))) {
      return false;
    }
    hasDigits = true;
  }

  // Should have digits and should not end with `_`
  if (!hasDigits || ch === '_') return false;

  return true;
}

function constructYamlInteger(data) {
  var value = data, sign = 1, ch;

  if (value.indexOf('_') !== -1) {
    value = value.replace(/_/g, '');
  }

  ch = value[0];

  if (ch === '-' || ch === '+') {
    if (ch === '-') sign = -1;
    value = value.slice(1);
    ch = value[0];
  }

  if (value === '0') return 0;

  if (ch === '0') {
    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);
    if (value[1] === 'x') return sign * parseInt(value.slice(2), 16);
    if (value[1] === 'o') return sign * parseInt(value.slice(2), 8);
  }

  return sign * parseInt(value, 10);
}

function isInteger(object) {
  return (Object.prototype.toString.call(object)) === '[object Number]' &&
         (object % 1 === 0 && !common.isNegativeZero(object));
}

var js_yaml_int = new type('tag:yaml.org,2002:int', {
  kind: 'scalar',
  resolve: resolveYamlInteger,
  construct: constructYamlInteger,
  predicate: isInteger,
  represent: {
    binary:      function (obj) { return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1); },
    octal:       function (obj) { return obj >= 0 ? '0o'  + obj.toString(8) : '-0o'  + obj.toString(8).slice(1); },
    decimal:     function (obj) { return obj.toString(10); },
    /* eslint-disable max-len */
    hexadecimal: function (obj) { return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() :  '-0x' + obj.toString(16).toUpperCase().slice(1); }
  },
  defaultStyle: 'decimal',
  styleAliases: {
    binary:      [ 2,  'bin' ],
    octal:       [ 8,  'oct' ],
    decimal:     [ 10, 'dec' ],
    hexadecimal: [ 16, 'hex' ]
  }
});

var YAML_FLOAT_PATTERN = new RegExp(
  // 2.5e4, 2.5 and integers
  '^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +
  // .2e4, .2
  // special case, seems not from spec
  '|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +
  // .inf
  '|[-+]?\\.(?:inf|Inf|INF)' +
  // .nan
  '|\\.(?:nan|NaN|NAN))$');

function resolveYamlFloat(data) {
  if (data === null) return false;

  if (!YAML_FLOAT_PATTERN.test(data) ||
      // Quick hack to not allow integers end with `_`
      // Probably should update regexp & check speed
      data[data.length - 1] === '_') {
    return false;
  }

  return true;
}

function constructYamlFloat(data) {
  var value, sign;

  value  = data.replace(/_/g, '').toLowerCase();
  sign   = value[0] === '-' ? -1 : 1;

  if ('+-'.indexOf(value[0]) >= 0) {
    value = value.slice(1);
  }

  if (value === '.inf') {
    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;

  } else if (value === '.nan') {
    return NaN;
  }
  return sign * parseFloat(value, 10);
}


var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;

function representYamlFloat(object, style) {
  var res;

  if (isNaN(object)) {
    switch (style) {
      case 'lowercase': return '.nan';
      case 'uppercase': return '.NAN';
      case 'camelcase': return '.NaN';
    }
  } else if (Number.POSITIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '.inf';
      case 'uppercase': return '.INF';
      case 'camelcase': return '.Inf';
    }
  } else if (Number.NEGATIVE_INFINITY === object) {
    switch (style) {
      case 'lowercase': return '-.inf';
      case 'uppercase': return '-.INF';
      case 'camelcase': return '-.Inf';
    }
  } else if (common.isNegativeZero(object)) {
    return '-0.0';
  }

  res = object.toString(10);

  // JS stringifier can build scientific format without dots: 5e-100,
  // while YAML requres dot: 5.e-100. Fix it with simple hack

  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;
}

function isFloat(object) {
  return (Object.prototype.toString.call(object) === '[object Number]') &&
         (object % 1 !== 0 || common.isNegativeZero(object));
}

var js_yaml_float = new type('tag:yaml.org,2002:float', {
  kind: 'scalar',
  resolve: resolveYamlFloat,
  construct: constructYamlFloat,
  predicate: isFloat,
  represent: representYamlFloat,
  defaultStyle: 'lowercase'
});

var json = failsafe.extend({
  implicit: [
    _null,
    bool,
    js_yaml_int,
    js_yaml_float
  ]
});

var core = json;

var YAML_DATE_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9])'                    + // [2] month
  '-([0-9][0-9])$');                   // [3] day

var YAML_TIMESTAMP_REGEXP = new RegExp(
  '^([0-9][0-9][0-9][0-9])'          + // [1] year
  '-([0-9][0-9]?)'                   + // [2] month
  '-([0-9][0-9]?)'                   + // [3] day
  '(?:[Tt]|[ \\t]+)'                 + // ...
  '([0-9][0-9]?)'                    + // [4] hour
  ':([0-9][0-9])'                    + // [5] minute
  ':([0-9][0-9])'                    + // [6] second
  '(?:\\.([0-9]*))?'                 + // [7] fraction
  '(?:[ \\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour
  '(?::([0-9][0-9]))?))?$');           // [11] tz_minute

function resolveYamlTimestamp(data) {
  if (data === null) return false;
  if (YAML_DATE_REGEXP.exec(data) !== null) return true;
  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
  return false;
}

function constructYamlTimestamp(data) {
  var match, year, month, day, hour, minute, second, fraction = 0,
      delta = null, tz_hour, tz_minute, date;

  match = YAML_DATE_REGEXP.exec(data);
  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);

  if (match === null) throw new Error('Date resolve error');

  // match: [1] year [2] month [3] day

  year = +(match[1]);
  month = +(match[2]) - 1; // JS month starts with 0
  day = +(match[3]);

  if (!match[4]) { // no hour
    return new Date(Date.UTC(year, month, day));
  }

  // match: [4] hour [5] minute [6] second [7] fraction

  hour = +(match[4]);
  minute = +(match[5]);
  second = +(match[6]);

  if (match[7]) {
    fraction = match[7].slice(0, 3);
    while (fraction.length < 3) { // milli-seconds
      fraction += '0';
    }
    fraction = +fraction;
  }

  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute

  if (match[9]) {
    tz_hour = +(match[10]);
    tz_minute = +(match[11] || 0);
    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds
    if (match[9] === '-') delta = -delta;
  }

  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));

  if (delta) date.setTime(date.getTime() - delta);

  return date;
}

function representYamlTimestamp(object /*, style*/) {
  return object.toISOString();
}

var timestamp = new type('tag:yaml.org,2002:timestamp', {
  kind: 'scalar',
  resolve: resolveYamlTimestamp,
  construct: constructYamlTimestamp,
  instanceOf: Date,
  represent: representYamlTimestamp
});

function resolveYamlMerge(data) {
  return data === '<<' || data === null;
}

var merge = new type('tag:yaml.org,2002:merge', {
  kind: 'scalar',
  resolve: resolveYamlMerge
});

/*eslint-disable no-bitwise*/





// [ 64, 65, 66 ] -> [ padding, CR, LF ]
var BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r';


function resolveYamlBinary(data) {
  if (data === null) return false;

  var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;

  // Convert one by one.
  for (idx = 0; idx < max; idx++) {
    code = map.indexOf(data.charAt(idx));

    // Skip CR/LF
    if (code > 64) continue;

    // Fail on illegal characters
    if (code < 0) return false;

    bitlen += 6;
  }

  // If there are any bits left, source was corrupted
  return (bitlen % 8) === 0;
}

function constructYamlBinary(data) {
  var idx, tailbits,
      input = data.replace(/[\r\n=]/g, ''), // remove CR/LF & padding to simplify scan
      max = input.length,
      map = BASE64_MAP,
      bits = 0,
      result = [];

  // Collect by 6*4 bits (3 bytes)

  for (idx = 0; idx < max; idx++) {
    if ((idx % 4 === 0) && idx) {
      result.push((bits >> 16) & 0xFF);
      result.push((bits >> 8) & 0xFF);
      result.push(bits & 0xFF);
    }

    bits = (bits << 6) | map.indexOf(input.charAt(idx));
  }

  // Dump tail

  tailbits = (max % 4) * 6;

  if (tailbits === 0) {
    result.push((bits >> 16) & 0xFF);
    result.push((bits >> 8) & 0xFF);
    result.push(bits & 0xFF);
  } else if (tailbits === 18) {
    result.push((bits >> 10) & 0xFF);
    result.push((bits >> 2) & 0xFF);
  } else if (tailbits === 12) {
    result.push((bits >> 4) & 0xFF);
  }

  return new Uint8Array(result);
}

function representYamlBinary(object /*, style*/) {
  var result = '', bits = 0, idx, tail,
      max = object.length,
      map = BASE64_MAP;

  // Convert every three bytes to 4 ASCII characters.

  for (idx = 0; idx < max; idx++) {
    if ((idx % 3 === 0) && idx) {
      result += map[(bits >> 18) & 0x3F];
      result += map[(bits >> 12) & 0x3F];
      result += map[(bits >> 6) & 0x3F];
      result += map[bits & 0x3F];
    }

    bits = (bits << 8) + object[idx];
  }

  // Dump tail

  tail = max % 3;

  if (tail === 0) {
    result += map[(bits >> 18) & 0x3F];
    result += map[(bits >> 12) & 0x3F];
    result += map[(bits >> 6) & 0x3F];
    result += map[bits & 0x3F];
  } else if (tail === 2) {
    result += map[(bits >> 10) & 0x3F];
    result += map[(bits >> 4) & 0x3F];
    result += map[(bits << 2) & 0x3F];
    result += map[64];
  } else if (tail === 1) {
    result += map[(bits >> 2) & 0x3F];
    result += map[(bits << 4) & 0x3F];
    result += map[64];
    result += map[64];
  }

  return result;
}

function isBinary(obj) {
  return Object.prototype.toString.call(obj) ===  '[object Uint8Array]';
}

var binary = new type('tag:yaml.org,2002:binary', {
  kind: 'scalar',
  resolve: resolveYamlBinary,
  construct: constructYamlBinary,
  predicate: isBinary,
  represent: representYamlBinary
});

var _hasOwnProperty$3 = Object.prototype.hasOwnProperty;
var _toString$2       = Object.prototype.toString;

function resolveYamlOmap(data) {
  if (data === null) return true;

  var objectKeys = [], index, length, pair, pairKey, pairHasKey,
      object = data;

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];
    pairHasKey = false;

    if (_toString$2.call(pair) !== '[object Object]') return false;

    for (pairKey in pair) {
      if (_hasOwnProperty$3.call(pair, pairKey)) {
        if (!pairHasKey) pairHasKey = true;
        else return false;
      }
    }

    if (!pairHasKey) return false;

    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
    else return false;
  }

  return true;
}

function constructYamlOmap(data) {
  return data !== null ? data : [];
}

var omap = new type('tag:yaml.org,2002:omap', {
  kind: 'sequence',
  resolve: resolveYamlOmap,
  construct: constructYamlOmap
});

var _toString$1 = Object.prototype.toString;

function resolveYamlPairs(data) {
  if (data === null) return true;

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    if (_toString$1.call(pair) !== '[object Object]') return false;

    keys = Object.keys(pair);

    if (keys.length !== 1) return false;

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return true;
}

function constructYamlPairs(data) {
  if (data === null) return [];

  var index, length, pair, keys, result,
      object = data;

  result = new Array(object.length);

  for (index = 0, length = object.length; index < length; index += 1) {
    pair = object[index];

    keys = Object.keys(pair);

    result[index] = [ keys[0], pair[keys[0]] ];
  }

  return result;
}

var pairs = new type('tag:yaml.org,2002:pairs', {
  kind: 'sequence',
  resolve: resolveYamlPairs,
  construct: constructYamlPairs
});

var _hasOwnProperty$2 = Object.prototype.hasOwnProperty;

function resolveYamlSet(data) {
  if (data === null) return true;

  var key, object = data;

  for (key in object) {
    if (_hasOwnProperty$2.call(object, key)) {
      if (object[key] !== null) return false;
    }
  }

  return true;
}

function constructYamlSet(data) {
  return data !== null ? data : {};
}

var set = new type('tag:yaml.org,2002:set', {
  kind: 'mapping',
  resolve: resolveYamlSet,
  construct: constructYamlSet
});

var _default = core.extend({
  implicit: [
    timestamp,
    merge
  ],
  explicit: [
    binary,
    omap,
    pairs,
    set
  ]
});

/*eslint-disable max-len,no-use-before-define*/







var _hasOwnProperty$1 = Object.prototype.hasOwnProperty;


var CONTEXT_FLOW_IN   = 1;
var CONTEXT_FLOW_OUT  = 2;
var CONTEXT_BLOCK_IN  = 3;
var CONTEXT_BLOCK_OUT = 4;


var CHOMPING_CLIP  = 1;
var CHOMPING_STRIP = 2;
var CHOMPING_KEEP  = 3;


var PATTERN_NON_PRINTABLE         = /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
var PATTERN_FLOW_INDICATORS       = /[,\[\]\{\}]/;
var PATTERN_TAG_HANDLE            = /^(?:!|!!|![a-z\-]+!)$/i;
var PATTERN_TAG_URI               = /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;


function _class(obj) { return Object.prototype.toString.call(obj); }

function is_EOL(c) {
  return (c === 0x0A/* LF */) || (c === 0x0D/* CR */);
}

function is_WHITE_SPACE(c) {
  return (c === 0x09/* Tab */) || (c === 0x20/* Space */);
}

function is_WS_OR_EOL(c) {
  return (c === 0x09/* Tab */) ||
         (c === 0x20/* Space */) ||
         (c === 0x0A/* LF */) ||
         (c === 0x0D/* CR */);
}

function is_FLOW_INDICATOR(c) {
  return c === 0x2C/* , */ ||
         c === 0x5B/* [ */ ||
         c === 0x5D/* ] */ ||
         c === 0x7B/* { */ ||
         c === 0x7D/* } */;
}

function fromHexCode(c) {
  var lc;

  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  /*eslint-disable no-bitwise*/
  lc = c | 0x20;

  if ((0x61/* a */ <= lc) && (lc <= 0x66/* f */)) {
    return lc - 0x61 + 10;
  }

  return -1;
}

function escapedHexLen(c) {
  if (c === 0x78/* x */) { return 2; }
  if (c === 0x75/* u */) { return 4; }
  if (c === 0x55/* U */) { return 8; }
  return 0;
}

function fromDecimalCode(c) {
  if ((0x30/* 0 */ <= c) && (c <= 0x39/* 9 */)) {
    return c - 0x30;
  }

  return -1;
}

function simpleEscapeSequence(c) {
  /* eslint-disable indent */
  return (c === 0x30/* 0 */) ? '\x00' :
        (c === 0x61/* a */) ? '\x07' :
        (c === 0x62/* b */) ? '\x08' :
        (c === 0x74/* t */) ? '\x09' :
        (c === 0x09/* Tab */) ? '\x09' :
        (c === 0x6E/* n */) ? '\x0A' :
        (c === 0x76/* v */) ? '\x0B' :
        (c === 0x66/* f */) ? '\x0C' :
        (c === 0x72/* r */) ? '\x0D' :
        (c === 0x65/* e */) ? '\x1B' :
        (c === 0x20/* Space */) ? ' ' :
        (c === 0x22/* " */) ? '\x22' :
        (c === 0x2F/* / */) ? '/' :
        (c === 0x5C/* \ */) ? '\x5C' :
        (c === 0x4E/* N */) ? '\x85' :
        (c === 0x5F/* _ */) ? '\xA0' :
        (c === 0x4C/* L */) ? '\u2028' :
        (c === 0x50/* P */) ? '\u2029' : '';
}

function charFromCodepoint(c) {
  if (c <= 0xFFFF) {
    return String.fromCharCode(c);
  }
  // Encode UTF-16 surrogate pair
  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF
  return String.fromCharCode(
    ((c - 0x010000) >> 10) + 0xD800,
    ((c - 0x010000) & 0x03FF) + 0xDC00
  );
}

var simpleEscapeCheck = new Array(256); // integer, for fast access
var simpleEscapeMap = new Array(256);
for (var js_yaml_i = 0; js_yaml_i < 256; js_yaml_i++) {
  simpleEscapeCheck[js_yaml_i] = simpleEscapeSequence(js_yaml_i) ? 1 : 0;
  simpleEscapeMap[js_yaml_i] = simpleEscapeSequence(js_yaml_i);
}


function State$1(input, options) {
  this.input = input;

  this.filename  = options['filename']  || null;
  this.schema    = options['schema']    || _default;
  this.onWarning = options['onWarning'] || null;
  // (Hidden) Remove? makes the loader to expect YAML 1.1 documents
  // if such documents have no explicit %YAML directive
  this.legacy    = options['legacy']    || false;

  this.json      = options['json']      || false;
  this.listener  = options['listener']  || null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.typeMap       = this.schema.compiledTypeMap;

  this.length     = input.length;
  this.position   = 0;
  this.line       = 0;
  this.lineStart  = 0;
  this.lineIndent = 0;

  // position of first leading tab in the current line,
  // used to make sure there are no tabs in the indentation
  this.firstTabInLine = -1;

  this.documents = [];

  /*
  this.version;
  this.checkLineBreaks;
  this.tagMap;
  this.anchorMap;
  this.tag;
  this.anchor;
  this.kind;
  this.result;*/

}


function generateError(state, message) {
  var mark = {
    name:     state.filename,
    buffer:   state.input.slice(0, -1), // omit trailing \0
    position: state.position,
    line:     state.line,
    column:   state.position - state.lineStart
  };

  mark.snippet = snippet(mark);

  return new exception(message, mark);
}

function throwError(state, message) {
  throw generateError(state, message);
}

function throwWarning(state, message) {
  if (state.onWarning) {
    state.onWarning.call(null, generateError(state, message));
  }
}


var directiveHandlers = {

  YAML: function handleYamlDirective(state, name, args) {

    var match, major, minor;

    if (state.version !== null) {
      throwError(state, 'duplication of %YAML directive');
    }

    if (args.length !== 1) {
      throwError(state, 'YAML directive accepts exactly one argument');
    }

    match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);

    if (match === null) {
      throwError(state, 'ill-formed argument of the YAML directive');
    }

    major = parseInt(match[1], 10);
    minor = parseInt(match[2], 10);

    if (major !== 1) {
      throwError(state, 'unacceptable YAML version of the document');
    }

    state.version = args[0];
    state.checkLineBreaks = (minor < 2);

    if (minor !== 1 && minor !== 2) {
      throwWarning(state, 'unsupported YAML version of the document');
    }
  },

  TAG: function handleTagDirective(state, name, args) {

    var handle, prefix;

    if (args.length !== 2) {
      throwError(state, 'TAG directive accepts exactly two arguments');
    }

    handle = args[0];
    prefix = args[1];

    if (!PATTERN_TAG_HANDLE.test(handle)) {
      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');
    }

    if (_hasOwnProperty$1.call(state.tagMap, handle)) {
      throwError(state, 'there is a previously declared suffix for "' + handle + '" tag handle');
    }

    if (!PATTERN_TAG_URI.test(prefix)) {
      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');
    }

    try {
      prefix = decodeURIComponent(prefix);
    } catch (err) {
      throwError(state, 'tag prefix is malformed: ' + prefix);
    }

    state.tagMap[handle] = prefix;
  }
};


function captureSegment(state, start, end, checkJson) {
  var _position, _length, _character, _result;

  if (start < end) {
    _result = state.input.slice(start, end);

    if (checkJson) {
      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {
        _character = _result.charCodeAt(_position);
        if (!(_character === 0x09 ||
              (0x20 <= _character && _character <= 0x10FFFF))) {
          throwError(state, 'expected valid JSON character');
        }
      }
    } else if (PATTERN_NON_PRINTABLE.test(_result)) {
      throwError(state, 'the stream contains non-printable characters');
    }

    state.result += _result;
  }
}

function mergeMappings(state, destination, source, overridableKeys) {
  var sourceKeys, key, index, quantity;

  if (!common.isObject(source)) {
    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');
  }

  sourceKeys = Object.keys(source);

  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {
    key = sourceKeys[index];

    if (!_hasOwnProperty$1.call(destination, key)) {
      destination[key] = source[key];
      overridableKeys[key] = true;
    }
  }
}

function storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode,
  startLine, startLineStart, startPos) {

  var index, quantity;

  // The output is a plain object here, so keys can only be strings.
  // We need to convert keyNode to a string, but doing so can hang the process
  // (deeply nested arrays that explode exponentially using aliases).
  if (Array.isArray(keyNode)) {
    keyNode = Array.prototype.slice.call(keyNode);

    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {
      if (Array.isArray(keyNode[index])) {
        throwError(state, 'nested arrays are not supported inside keys');
      }

      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {
        keyNode[index] = '[object Object]';
      }
    }
  }

  // Avoid code execution in load() via toString property
  // (still use its own toString for arrays, timestamps,
  // and whatever user schema extensions happen to have @@toStringTag)
  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {
    keyNode = '[object Object]';
  }


  keyNode = String(keyNode);

  if (_result === null) {
    _result = {};
  }

  if (keyTag === 'tag:yaml.org,2002:merge') {
    if (Array.isArray(valueNode)) {
      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {
        mergeMappings(state, _result, valueNode[index], overridableKeys);
      }
    } else {
      mergeMappings(state, _result, valueNode, overridableKeys);
    }
  } else {
    if (!state.json &&
        !_hasOwnProperty$1.call(overridableKeys, keyNode) &&
        _hasOwnProperty$1.call(_result, keyNode)) {
      state.line = startLine || state.line;
      state.lineStart = startLineStart || state.lineStart;
      state.position = startPos || state.position;
      throwError(state, 'duplicated mapping key');
    }

    // used for this specific key only because Object.defineProperty is slow
    if (keyNode === '__proto__') {
      Object.defineProperty(_result, keyNode, {
        configurable: true,
        enumerable: true,
        writable: true,
        value: valueNode
      });
    } else {
      _result[keyNode] = valueNode;
    }
    delete overridableKeys[keyNode];
  }

  return _result;
}

function readLineBreak(state) {
  var ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x0A/* LF */) {
    state.position++;
  } else if (ch === 0x0D/* CR */) {
    state.position++;
    if (state.input.charCodeAt(state.position) === 0x0A/* LF */) {
      state.position++;
    }
  } else {
    throwError(state, 'a line break is expected');
  }

  state.line += 1;
  state.lineStart = state.position;
  state.firstTabInLine = -1;
}

function skipSeparationSpace(state, allowComments, checkIndent) {
  var lineBreaks = 0,
      ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    while (is_WHITE_SPACE(ch)) {
      if (ch === 0x09/* Tab */ && state.firstTabInLine === -1) {
        state.firstTabInLine = state.position;
      }
      ch = state.input.charCodeAt(++state.position);
    }

    if (allowComments && ch === 0x23/* # */) {
      do {
        ch = state.input.charCodeAt(++state.position);
      } while (ch !== 0x0A/* LF */ && ch !== 0x0D/* CR */ && ch !== 0);
    }

    if (is_EOL(ch)) {
      readLineBreak(state);

      ch = state.input.charCodeAt(state.position);
      lineBreaks++;
      state.lineIndent = 0;

      while (ch === 0x20/* Space */) {
        state.lineIndent++;
        ch = state.input.charCodeAt(++state.position);
      }
    } else {
      break;
    }
  }

  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {
    throwWarning(state, 'deficient indentation');
  }

  return lineBreaks;
}

function testDocumentSeparator(state) {
  var _position = state.position,
      ch;

  ch = state.input.charCodeAt(_position);

  // Condition state.position === state.lineStart is tested
  // in parent on each call, for efficiency. No needs to test here again.
  if ((ch === 0x2D/* - */ || ch === 0x2E/* . */) &&
      ch === state.input.charCodeAt(_position + 1) &&
      ch === state.input.charCodeAt(_position + 2)) {

    _position += 3;

    ch = state.input.charCodeAt(_position);

    if (ch === 0 || is_WS_OR_EOL(ch)) {
      return true;
    }
  }

  return false;
}

function writeFoldedLines(state, count) {
  if (count === 1) {
    state.result += ' ';
  } else if (count > 1) {
    state.result += common.repeat('\n', count - 1);
  }
}


function readPlainScalar(state, nodeIndent, withinFlowCollection) {
  var preceding,
      following,
      captureStart,
      captureEnd,
      hasPendingContent,
      _line,
      _lineStart,
      _lineIndent,
      _kind = state.kind,
      _result = state.result,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (is_WS_OR_EOL(ch)      ||
      is_FLOW_INDICATOR(ch) ||
      ch === 0x23/* # */    ||
      ch === 0x26/* & */    ||
      ch === 0x2A/* * */    ||
      ch === 0x21/* ! */    ||
      ch === 0x7C/* | */    ||
      ch === 0x3E/* > */    ||
      ch === 0x27/* ' */    ||
      ch === 0x22/* " */    ||
      ch === 0x25/* % */    ||
      ch === 0x40/* @ */    ||
      ch === 0x60/* ` */) {
    return false;
  }

  if (ch === 0x3F/* ? */ || ch === 0x2D/* - */) {
    following = state.input.charCodeAt(state.position + 1);

    if (is_WS_OR_EOL(following) ||
        withinFlowCollection && is_FLOW_INDICATOR(following)) {
      return false;
    }
  }

  state.kind = 'scalar';
  state.result = '';
  captureStart = captureEnd = state.position;
  hasPendingContent = false;

  while (ch !== 0) {
    if (ch === 0x3A/* : */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following) ||
          withinFlowCollection && is_FLOW_INDICATOR(following)) {
        break;
      }

    } else if (ch === 0x23/* # */) {
      preceding = state.input.charCodeAt(state.position - 1);

      if (is_WS_OR_EOL(preceding)) {
        break;
      }

    } else if ((state.position === state.lineStart && testDocumentSeparator(state)) ||
               withinFlowCollection && is_FLOW_INDICATOR(ch)) {
      break;

    } else if (is_EOL(ch)) {
      _line = state.line;
      _lineStart = state.lineStart;
      _lineIndent = state.lineIndent;
      skipSeparationSpace(state, false, -1);

      if (state.lineIndent >= nodeIndent) {
        hasPendingContent = true;
        ch = state.input.charCodeAt(state.position);
        continue;
      } else {
        state.position = captureEnd;
        state.line = _line;
        state.lineStart = _lineStart;
        state.lineIndent = _lineIndent;
        break;
      }
    }

    if (hasPendingContent) {
      captureSegment(state, captureStart, captureEnd, false);
      writeFoldedLines(state, state.line - _line);
      captureStart = captureEnd = state.position;
      hasPendingContent = false;
    }

    if (!is_WHITE_SPACE(ch)) {
      captureEnd = state.position + 1;
    }

    ch = state.input.charCodeAt(++state.position);
  }

  captureSegment(state, captureStart, captureEnd, false);

  if (state.result) {
    return true;
  }

  state.kind = _kind;
  state.result = _result;
  return false;
}

function readSingleQuotedScalar(state, nodeIndent) {
  var ch,
      captureStart, captureEnd;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x27/* ' */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x27/* ' */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (ch === 0x27/* ' */) {
        captureStart = state.position;
        state.position++;
        captureEnd = state.position;
      } else {
        return true;
      }

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a single quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a single quoted scalar');
}

function readDoubleQuotedScalar(state, nodeIndent) {
  var captureStart,
      captureEnd,
      hexLength,
      hexResult,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x22/* " */) {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';
  state.position++;
  captureStart = captureEnd = state.position;

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    if (ch === 0x22/* " */) {
      captureSegment(state, captureStart, state.position, true);
      state.position++;
      return true;

    } else if (ch === 0x5C/* \ */) {
      captureSegment(state, captureStart, state.position, true);
      ch = state.input.charCodeAt(++state.position);

      if (is_EOL(ch)) {
        skipSeparationSpace(state, false, nodeIndent);

        // TODO: rework to inline fn with no type cast?
      } else if (ch < 256 && simpleEscapeCheck[ch]) {
        state.result += simpleEscapeMap[ch];
        state.position++;

      } else if ((tmp = escapedHexLen(ch)) > 0) {
        hexLength = tmp;
        hexResult = 0;

        for (; hexLength > 0; hexLength--) {
          ch = state.input.charCodeAt(++state.position);

          if ((tmp = fromHexCode(ch)) >= 0) {
            hexResult = (hexResult << 4) + tmp;

          } else {
            throwError(state, 'expected hexadecimal character');
          }
        }

        state.result += charFromCodepoint(hexResult);

        state.position++;

      } else {
        throwError(state, 'unknown escape sequence');
      }

      captureStart = captureEnd = state.position;

    } else if (is_EOL(ch)) {
      captureSegment(state, captureStart, captureEnd, true);
      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));
      captureStart = captureEnd = state.position;

    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {
      throwError(state, 'unexpected end of the document within a double quoted scalar');

    } else {
      state.position++;
      captureEnd = state.position;
    }
  }

  throwError(state, 'unexpected end of the stream within a double quoted scalar');
}

function readFlowCollection(state, nodeIndent) {
  var readNext = true,
      _line,
      _lineStart,
      _pos,
      _tag     = state.tag,
      _result,
      _anchor  = state.anchor,
      following,
      terminator,
      isPair,
      isExplicitPair,
      isMapping,
      overridableKeys = Object.create(null),
      keyNode,
      keyTag,
      valueNode,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x5B/* [ */) {
    terminator = 0x5D;/* ] */
    isMapping = false;
    _result = [];
  } else if (ch === 0x7B/* { */) {
    terminator = 0x7D;/* } */
    isMapping = true;
    _result = {};
  } else {
    return false;
  }

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(++state.position);

  while (ch !== 0) {
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === terminator) {
      state.position++;
      state.tag = _tag;
      state.anchor = _anchor;
      state.kind = isMapping ? 'mapping' : 'sequence';
      state.result = _result;
      return true;
    } else if (!readNext) {
      throwError(state, 'missed comma between flow collection entries');
    } else if (ch === 0x2C/* , */) {
      // "flow collection entries can never be completely empty", as per YAML 1.2, section 7.4
      throwError(state, "expected the node content, but found ','");
    }

    keyTag = keyNode = valueNode = null;
    isPair = isExplicitPair = false;

    if (ch === 0x3F/* ? */) {
      following = state.input.charCodeAt(state.position + 1);

      if (is_WS_OR_EOL(following)) {
        isPair = isExplicitPair = true;
        state.position++;
        skipSeparationSpace(state, true, nodeIndent);
      }
    }

    _line = state.line; // Save the current line.
    _lineStart = state.lineStart;
    _pos = state.position;
    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
    keyTag = state.tag;
    keyNode = state.result;
    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if ((isExplicitPair || state.line === _line) && ch === 0x3A/* : */) {
      isPair = true;
      ch = state.input.charCodeAt(++state.position);
      skipSeparationSpace(state, true, nodeIndent);
      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
      valueNode = state.result;
    }

    if (isMapping) {
      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos);
    } else if (isPair) {
      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode, _line, _lineStart, _pos));
    } else {
      _result.push(keyNode);
    }

    skipSeparationSpace(state, true, nodeIndent);

    ch = state.input.charCodeAt(state.position);

    if (ch === 0x2C/* , */) {
      readNext = true;
      ch = state.input.charCodeAt(++state.position);
    } else {
      readNext = false;
    }
  }

  throwError(state, 'unexpected end of the stream within a flow collection');
}

function readBlockScalar(state, nodeIndent) {
  var captureStart,
      folding,
      chomping       = CHOMPING_CLIP,
      didReadContent = false,
      detectedIndent = false,
      textIndent     = nodeIndent,
      emptyLines     = 0,
      atMoreIndented = false,
      tmp,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch === 0x7C/* | */) {
    folding = false;
  } else if (ch === 0x3E/* > */) {
    folding = true;
  } else {
    return false;
  }

  state.kind = 'scalar';
  state.result = '';

  while (ch !== 0) {
    ch = state.input.charCodeAt(++state.position);

    if (ch === 0x2B/* + */ || ch === 0x2D/* - */) {
      if (CHOMPING_CLIP === chomping) {
        chomping = (ch === 0x2B/* + */) ? CHOMPING_KEEP : CHOMPING_STRIP;
      } else {
        throwError(state, 'repeat of a chomping mode identifier');
      }

    } else if ((tmp = fromDecimalCode(ch)) >= 0) {
      if (tmp === 0) {
        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');
      } else if (!detectedIndent) {
        textIndent = nodeIndent + tmp - 1;
        detectedIndent = true;
      } else {
        throwError(state, 'repeat of an indentation width identifier');
      }

    } else {
      break;
    }
  }

  if (is_WHITE_SPACE(ch)) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (is_WHITE_SPACE(ch));

    if (ch === 0x23/* # */) {
      do { ch = state.input.charCodeAt(++state.position); }
      while (!is_EOL(ch) && (ch !== 0));
    }
  }

  while (ch !== 0) {
    readLineBreak(state);
    state.lineIndent = 0;

    ch = state.input.charCodeAt(state.position);

    while ((!detectedIndent || state.lineIndent < textIndent) &&
           (ch === 0x20/* Space */)) {
      state.lineIndent++;
      ch = state.input.charCodeAt(++state.position);
    }

    if (!detectedIndent && state.lineIndent > textIndent) {
      textIndent = state.lineIndent;
    }

    if (is_EOL(ch)) {
      emptyLines++;
      continue;
    }

    // End of the scalar.
    if (state.lineIndent < textIndent) {

      // Perform the chomping.
      if (chomping === CHOMPING_KEEP) {
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
      } else if (chomping === CHOMPING_CLIP) {
        if (didReadContent) { // i.e. only if the scalar is not empty.
          state.result += '\n';
        }
      }

      // Break this `while` cycle and go to the funciton's epilogue.
      break;
    }

    // Folded style: use fancy rules to handle line breaks.
    if (folding) {

      // Lines starting with white space characters (more-indented lines) are not folded.
      if (is_WHITE_SPACE(ch)) {
        atMoreIndented = true;
        // except for the first content line (cf. Example 8.1)
        state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);

      // End of more-indented block.
      } else if (atMoreIndented) {
        atMoreIndented = false;
        state.result += common.repeat('\n', emptyLines + 1);

      // Just one line break - perceive as the same line.
      } else if (emptyLines === 0) {
        if (didReadContent) { // i.e. only if we have already read some scalar content.
          state.result += ' ';
        }

      // Several line breaks - perceive as different lines.
      } else {
        state.result += common.repeat('\n', emptyLines);
      }

    // Literal style: just add exact number of line breaks between content lines.
    } else {
      // Keep all line breaks except the header line break.
      state.result += common.repeat('\n', didReadContent ? 1 + emptyLines : emptyLines);
    }

    didReadContent = true;
    detectedIndent = true;
    emptyLines = 0;
    captureStart = state.position;

    while (!is_EOL(ch) && (ch !== 0)) {
      ch = state.input.charCodeAt(++state.position);
    }

    captureSegment(state, captureStart, state.position, false);
  }

  return true;
}

function readBlockSequence(state, nodeIndent) {
  var _line,
      _tag      = state.tag,
      _anchor   = state.anchor,
      _result   = [],
      following,
      detected  = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    if (ch !== 0x2D/* - */) {
      break;
    }

    following = state.input.charCodeAt(state.position + 1);

    if (!is_WS_OR_EOL(following)) {
      break;
    }

    detected = true;
    state.position++;

    if (skipSeparationSpace(state, true, -1)) {
      if (state.lineIndent <= nodeIndent) {
        _result.push(null);
        ch = state.input.charCodeAt(state.position);
        continue;
      }
    }

    _line = state.line;
    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
    _result.push(state.result);
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a sequence entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'sequence';
    state.result = _result;
    return true;
  }
  return false;
}

function readBlockMapping(state, nodeIndent, flowIndent) {
  var following,
      allowCompact,
      _line,
      _keyLine,
      _keyLineStart,
      _keyPos,
      _tag          = state.tag,
      _anchor       = state.anchor,
      _result       = {},
      overridableKeys = Object.create(null),
      keyTag        = null,
      keyNode       = null,
      valueNode     = null,
      atExplicitKey = false,
      detected      = false,
      ch;

  // there is a leading tab before this token, so it can't be a block sequence/mapping;
  // it can still be flow sequence/mapping or a scalar
  if (state.firstTabInLine !== -1) return false;

  if (state.anchor !== null) {
    state.anchorMap[state.anchor] = _result;
  }

  ch = state.input.charCodeAt(state.position);

  while (ch !== 0) {
    if (!atExplicitKey && state.firstTabInLine !== -1) {
      state.position = state.firstTabInLine;
      throwError(state, 'tab characters must not be used in indentation');
    }

    following = state.input.charCodeAt(state.position + 1);
    _line = state.line; // Save the current line.

    //
    // Explicit notation case. There are two separate blocks:
    // first for the key (denoted by "?") and second for the value (denoted by ":")
    //
    if ((ch === 0x3F/* ? */ || ch === 0x3A/* : */) && is_WS_OR_EOL(following)) {

      if (ch === 0x3F/* ? */) {
        if (atExplicitKey) {
          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
          keyTag = keyNode = valueNode = null;
        }

        detected = true;
        atExplicitKey = true;
        allowCompact = true;

      } else if (atExplicitKey) {
        // i.e. 0x3A/* : */ === character after the explicit key.
        atExplicitKey = false;
        allowCompact = true;

      } else {
        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');
      }

      state.position += 1;
      ch = following;

    //
    // Implicit notation case. Flow-style node as the key first, then ":", and the value.
    //
    } else {
      _keyLine = state.line;
      _keyLineStart = state.lineStart;
      _keyPos = state.position;

      if (!composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {
        // Neither implicit nor explicit notation.
        // Reading is done. Go to the epilogue.
        break;
      }

      if (state.line === _line) {
        ch = state.input.charCodeAt(state.position);

        while (is_WHITE_SPACE(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }

        if (ch === 0x3A/* : */) {
          ch = state.input.charCodeAt(++state.position);

          if (!is_WS_OR_EOL(ch)) {
            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');
          }

          if (atExplicitKey) {
            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
            keyTag = keyNode = valueNode = null;
          }

          detected = true;
          atExplicitKey = false;
          allowCompact = false;
          keyTag = state.tag;
          keyNode = state.result;

        } else if (detected) {
          throwError(state, 'can not read an implicit mapping pair; a colon is missed');

        } else {
          state.tag = _tag;
          state.anchor = _anchor;
          return true; // Keep the result of `composeNode`.
        }

      } else if (detected) {
        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');

      } else {
        state.tag = _tag;
        state.anchor = _anchor;
        return true; // Keep the result of `composeNode`.
      }
    }

    //
    // Common reading code for both explicit and implicit notations.
    //
    if (state.line === _line || state.lineIndent > nodeIndent) {
      if (atExplicitKey) {
        _keyLine = state.line;
        _keyLineStart = state.lineStart;
        _keyPos = state.position;
      }

      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {
        if (atExplicitKey) {
          keyNode = state.result;
        } else {
          valueNode = state.result;
        }
      }

      if (!atExplicitKey) {
        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _keyLine, _keyLineStart, _keyPos);
        keyTag = keyNode = valueNode = null;
      }

      skipSeparationSpace(state, true, -1);
      ch = state.input.charCodeAt(state.position);
    }

    if ((state.line === _line || state.lineIndent > nodeIndent) && (ch !== 0)) {
      throwError(state, 'bad indentation of a mapping entry');
    } else if (state.lineIndent < nodeIndent) {
      break;
    }
  }

  //
  // Epilogue.
  //

  // Special case: last mapping's node contains only the key in explicit notation.
  if (atExplicitKey) {
    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null, _keyLine, _keyLineStart, _keyPos);
  }

  // Expose the resulting mapping.
  if (detected) {
    state.tag = _tag;
    state.anchor = _anchor;
    state.kind = 'mapping';
    state.result = _result;
  }

  return detected;
}

function readTagProperty(state) {
  var _position,
      isVerbatim = false,
      isNamed    = false,
      tagHandle,
      tagName,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x21/* ! */) return false;

  if (state.tag !== null) {
    throwError(state, 'duplication of a tag property');
  }

  ch = state.input.charCodeAt(++state.position);

  if (ch === 0x3C/* < */) {
    isVerbatim = true;
    ch = state.input.charCodeAt(++state.position);

  } else if (ch === 0x21/* ! */) {
    isNamed = true;
    tagHandle = '!!';
    ch = state.input.charCodeAt(++state.position);

  } else {
    tagHandle = '!';
  }

  _position = state.position;

  if (isVerbatim) {
    do { ch = state.input.charCodeAt(++state.position); }
    while (ch !== 0 && ch !== 0x3E/* > */);

    if (state.position < state.length) {
      tagName = state.input.slice(_position, state.position);
      ch = state.input.charCodeAt(++state.position);
    } else {
      throwError(state, 'unexpected end of the stream within a verbatim tag');
    }
  } else {
    while (ch !== 0 && !is_WS_OR_EOL(ch)) {

      if (ch === 0x21/* ! */) {
        if (!isNamed) {
          tagHandle = state.input.slice(_position - 1, state.position + 1);

          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
            throwError(state, 'named tag handle cannot contain such characters');
          }

          isNamed = true;
          _position = state.position + 1;
        } else {
          throwError(state, 'tag suffix cannot contain exclamation marks');
        }
      }

      ch = state.input.charCodeAt(++state.position);
    }

    tagName = state.input.slice(_position, state.position);

    if (PATTERN_FLOW_INDICATORS.test(tagName)) {
      throwError(state, 'tag suffix cannot contain flow indicator characters');
    }
  }

  if (tagName && !PATTERN_TAG_URI.test(tagName)) {
    throwError(state, 'tag name cannot contain such characters: ' + tagName);
  }

  try {
    tagName = decodeURIComponent(tagName);
  } catch (err) {
    throwError(state, 'tag name is malformed: ' + tagName);
  }

  if (isVerbatim) {
    state.tag = tagName;

  } else if (_hasOwnProperty$1.call(state.tagMap, tagHandle)) {
    state.tag = state.tagMap[tagHandle] + tagName;

  } else if (tagHandle === '!') {
    state.tag = '!' + tagName;

  } else if (tagHandle === '!!') {
    state.tag = 'tag:yaml.org,2002:' + tagName;

  } else {
    throwError(state, 'undeclared tag handle "' + tagHandle + '"');
  }

  return true;
}

function readAnchorProperty(state) {
  var _position,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x26/* & */) return false;

  if (state.anchor !== null) {
    throwError(state, 'duplication of an anchor property');
  }

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an anchor node must contain at least one character');
  }

  state.anchor = state.input.slice(_position, state.position);
  return true;
}

function readAlias(state) {
  var _position, alias,
      ch;

  ch = state.input.charCodeAt(state.position);

  if (ch !== 0x2A/* * */) return false;

  ch = state.input.charCodeAt(++state.position);
  _position = state.position;

  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
    ch = state.input.charCodeAt(++state.position);
  }

  if (state.position === _position) {
    throwError(state, 'name of an alias node must contain at least one character');
  }

  alias = state.input.slice(_position, state.position);

  if (!_hasOwnProperty$1.call(state.anchorMap, alias)) {
    throwError(state, 'unidentified alias "' + alias + '"');
  }

  state.result = state.anchorMap[alias];
  skipSeparationSpace(state, true, -1);
  return true;
}

function composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {
  var allowBlockStyles,
      allowBlockScalars,
      allowBlockCollections,
      indentStatus = 1, // 1: this>parent, 0: this=parent, -1: this<parent
      atNewLine  = false,
      hasContent = false,
      typeIndex,
      typeQuantity,
      typeList,
      type,
      flowIndent,
      blockIndent;

  if (state.listener !== null) {
    state.listener('open', state);
  }

  state.tag    = null;
  state.anchor = null;
  state.kind   = null;
  state.result = null;

  allowBlockStyles = allowBlockScalars = allowBlockCollections =
    CONTEXT_BLOCK_OUT === nodeContext ||
    CONTEXT_BLOCK_IN  === nodeContext;

  if (allowToSeek) {
    if (skipSeparationSpace(state, true, -1)) {
      atNewLine = true;

      if (state.lineIndent > parentIndent) {
        indentStatus = 1;
      } else if (state.lineIndent === parentIndent) {
        indentStatus = 0;
      } else if (state.lineIndent < parentIndent) {
        indentStatus = -1;
      }
    }
  }

  if (indentStatus === 1) {
    while (readTagProperty(state) || readAnchorProperty(state)) {
      if (skipSeparationSpace(state, true, -1)) {
        atNewLine = true;
        allowBlockCollections = allowBlockStyles;

        if (state.lineIndent > parentIndent) {
          indentStatus = 1;
        } else if (state.lineIndent === parentIndent) {
          indentStatus = 0;
        } else if (state.lineIndent < parentIndent) {
          indentStatus = -1;
        }
      } else {
        allowBlockCollections = false;
      }
    }
  }

  if (allowBlockCollections) {
    allowBlockCollections = atNewLine || allowCompact;
  }

  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {
      flowIndent = parentIndent;
    } else {
      flowIndent = parentIndent + 1;
    }

    blockIndent = state.position - state.lineStart;

    if (indentStatus === 1) {
      if (allowBlockCollections &&
          (readBlockSequence(state, blockIndent) ||
           readBlockMapping(state, blockIndent, flowIndent)) ||
          readFlowCollection(state, flowIndent)) {
        hasContent = true;
      } else {
        if ((allowBlockScalars && readBlockScalar(state, flowIndent)) ||
            readSingleQuotedScalar(state, flowIndent) ||
            readDoubleQuotedScalar(state, flowIndent)) {
          hasContent = true;

        } else if (readAlias(state)) {
          hasContent = true;

          if (state.tag !== null || state.anchor !== null) {
            throwError(state, 'alias node should not have any properties');
          }

        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {
          hasContent = true;

          if (state.tag === null) {
            state.tag = '?';
          }
        }

        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
      }
    } else if (indentStatus === 0) {
      // Special case: block sequences are allowed to have same indentation level as the parent.
      // http://www.yaml.org/spec/1.2/spec.html#id2799784
      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);
    }
  }

  if (state.tag === null) {
    if (state.anchor !== null) {
      state.anchorMap[state.anchor] = state.result;
    }

  } else if (state.tag === '?') {
    // Implicit resolving is not allowed for non-scalar types, and '?'
    // non-specific tag is only automatically assigned to plain scalars.
    //
    // We only need to check kind conformity in case user explicitly assigns '?'
    // tag, for example like this: "!<?> [0]"
    //
    if (state.result !== null && state.kind !== 'scalar') {
      throwError(state, 'unacceptable node kind for !<?> tag; it should be "scalar", not "' + state.kind + '"');
    }

    for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {
      type = state.implicitTypes[typeIndex];

      if (type.resolve(state.result)) { // `state.result` updated in resolver if matched
        state.result = type.construct(state.result);
        state.tag = type.tag;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = state.result;
        }
        break;
      }
    }
  } else if (state.tag !== '!') {
    if (_hasOwnProperty$1.call(state.typeMap[state.kind || 'fallback'], state.tag)) {
      type = state.typeMap[state.kind || 'fallback'][state.tag];
    } else {
      // looking for multi type
      type = null;
      typeList = state.typeMap.multi[state.kind || 'fallback'];

      for (typeIndex = 0, typeQuantity = typeList.length; typeIndex < typeQuantity; typeIndex += 1) {
        if (state.tag.slice(0, typeList[typeIndex].tag.length) === typeList[typeIndex].tag) {
          type = typeList[typeIndex];
          break;
        }
      }
    }

    if (!type) {
      throwError(state, 'unknown tag !<' + state.tag + '>');
    }

    if (state.result !== null && type.kind !== state.kind) {
      throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be "' + type.kind + '", not "' + state.kind + '"');
    }

    if (!type.resolve(state.result, state.tag)) { // `state.result` updated in resolver if matched
      throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');
    } else {
      state.result = type.construct(state.result, state.tag);
      if (state.anchor !== null) {
        state.anchorMap[state.anchor] = state.result;
      }
    }
  }

  if (state.listener !== null) {
    state.listener('close', state);
  }
  return state.tag !== null ||  state.anchor !== null || hasContent;
}

function readDocument(state) {
  var documentStart = state.position,
      _position,
      directiveName,
      directiveArgs,
      hasDirectives = false,
      ch;

  state.version = null;
  state.checkLineBreaks = state.legacy;
  state.tagMap = Object.create(null);
  state.anchorMap = Object.create(null);

  while ((ch = state.input.charCodeAt(state.position)) !== 0) {
    skipSeparationSpace(state, true, -1);

    ch = state.input.charCodeAt(state.position);

    if (state.lineIndent > 0 || ch !== 0x25/* % */) {
      break;
    }

    hasDirectives = true;
    ch = state.input.charCodeAt(++state.position);
    _position = state.position;

    while (ch !== 0 && !is_WS_OR_EOL(ch)) {
      ch = state.input.charCodeAt(++state.position);
    }

    directiveName = state.input.slice(_position, state.position);
    directiveArgs = [];

    if (directiveName.length < 1) {
      throwError(state, 'directive name must not be less than one character in length');
    }

    while (ch !== 0) {
      while (is_WHITE_SPACE(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      if (ch === 0x23/* # */) {
        do { ch = state.input.charCodeAt(++state.position); }
        while (ch !== 0 && !is_EOL(ch));
        break;
      }

      if (is_EOL(ch)) break;

      _position = state.position;

      while (ch !== 0 && !is_WS_OR_EOL(ch)) {
        ch = state.input.charCodeAt(++state.position);
      }

      directiveArgs.push(state.input.slice(_position, state.position));
    }

    if (ch !== 0) readLineBreak(state);

    if (_hasOwnProperty$1.call(directiveHandlers, directiveName)) {
      directiveHandlers[directiveName](state, directiveName, directiveArgs);
    } else {
      throwWarning(state, 'unknown document directive "' + directiveName + '"');
    }
  }

  skipSeparationSpace(state, true, -1);

  if (state.lineIndent === 0 &&
      state.input.charCodeAt(state.position)     === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 1) === 0x2D/* - */ &&
      state.input.charCodeAt(state.position + 2) === 0x2D/* - */) {
    state.position += 3;
    skipSeparationSpace(state, true, -1);

  } else if (hasDirectives) {
    throwError(state, 'directives end mark is expected');
  }

  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);
  skipSeparationSpace(state, true, -1);

  if (state.checkLineBreaks &&
      PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {
    throwWarning(state, 'non-ASCII line breaks are interpreted as content');
  }

  state.documents.push(state.result);

  if (state.position === state.lineStart && testDocumentSeparator(state)) {

    if (state.input.charCodeAt(state.position) === 0x2E/* . */) {
      state.position += 3;
      skipSeparationSpace(state, true, -1);
    }
    return;
  }

  if (state.position < (state.length - 1)) {
    throwError(state, 'end of the stream or a document separator is expected');
  } else {
    return;
  }
}


function loadDocuments(input, options) {
  input = String(input);
  options = options || {};

  if (input.length !== 0) {

    // Add tailing `\n` if not exists
    if (input.charCodeAt(input.length - 1) !== 0x0A/* LF */ &&
        input.charCodeAt(input.length - 1) !== 0x0D/* CR */) {
      input += '\n';
    }

    // Strip BOM
    if (input.charCodeAt(0) === 0xFEFF) {
      input = input.slice(1);
    }
  }

  var state = new State$1(input, options);

  var nullpos = input.indexOf('\0');

  if (nullpos !== -1) {
    state.position = nullpos;
    throwError(state, 'null byte is not allowed in input');
  }

  // Use 0 as string terminator. That significantly simplifies bounds check.
  state.input += '\0';

  while (state.input.charCodeAt(state.position) === 0x20/* Space */) {
    state.lineIndent += 1;
    state.position += 1;
  }

  while (state.position < (state.length - 1)) {
    readDocument(state);
  }

  return state.documents;
}


function loadAll$1(input, iterator, options) {
  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {
    options = iterator;
    iterator = null;
  }

  var documents = loadDocuments(input, options);

  if (typeof iterator !== 'function') {
    return documents;
  }

  for (var index = 0, length = documents.length; index < length; index += 1) {
    iterator(documents[index]);
  }
}


function load$1(input, options) {
  var documents = loadDocuments(input, options);

  if (documents.length === 0) {
    /*eslint-disable no-undefined*/
    return undefined;
  } else if (documents.length === 1) {
    return documents[0];
  }
  throw new exception('expected a single document in the stream, but found more');
}


var loadAll_1 = loadAll$1;
var load_1    = load$1;

var loader = {
	loadAll: loadAll_1,
	load: load_1
};

/*eslint-disable no-use-before-define*/





var _toString       = Object.prototype.toString;
var _hasOwnProperty = Object.prototype.hasOwnProperty;

var CHAR_BOM                  = 0xFEFF;
var CHAR_TAB                  = 0x09; /* Tab */
var CHAR_LINE_FEED            = 0x0A; /* LF */
var CHAR_CARRIAGE_RETURN      = 0x0D; /* CR */
var CHAR_SPACE                = 0x20; /* Space */
var CHAR_EXCLAMATION          = 0x21; /* ! */
var CHAR_DOUBLE_QUOTE         = 0x22; /* " */
var CHAR_SHARP                = 0x23; /* # */
var CHAR_PERCENT              = 0x25; /* % */
var CHAR_AMPERSAND            = 0x26; /* & */
var CHAR_SINGLE_QUOTE         = 0x27; /* ' */
var CHAR_ASTERISK             = 0x2A; /* * */
var CHAR_COMMA                = 0x2C; /* , */
var CHAR_MINUS                = 0x2D; /* - */
var CHAR_COLON                = 0x3A; /* : */
var CHAR_EQUALS               = 0x3D; /* = */
var CHAR_GREATER_THAN         = 0x3E; /* > */
var CHAR_QUESTION             = 0x3F; /* ? */
var CHAR_COMMERCIAL_AT        = 0x40; /* @ */
var CHAR_LEFT_SQUARE_BRACKET  = 0x5B; /* [ */
var CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */
var CHAR_GRAVE_ACCENT         = 0x60; /* ` */
var CHAR_LEFT_CURLY_BRACKET   = 0x7B; /* { */
var CHAR_VERTICAL_LINE        = 0x7C; /* | */
var CHAR_RIGHT_CURLY_BRACKET  = 0x7D; /* } */

var ESCAPE_SEQUENCES = {};

ESCAPE_SEQUENCES[0x00]   = '\\0';
ESCAPE_SEQUENCES[0x07]   = '\\a';
ESCAPE_SEQUENCES[0x08]   = '\\b';
ESCAPE_SEQUENCES[0x09]   = '\\t';
ESCAPE_SEQUENCES[0x0A]   = '\\n';
ESCAPE_SEQUENCES[0x0B]   = '\\v';
ESCAPE_SEQUENCES[0x0C]   = '\\f';
ESCAPE_SEQUENCES[0x0D]   = '\\r';
ESCAPE_SEQUENCES[0x1B]   = '\\e';
ESCAPE_SEQUENCES[0x22]   = '\\"';
ESCAPE_SEQUENCES[0x5C]   = '\\\\';
ESCAPE_SEQUENCES[0x85]   = '\\N';
ESCAPE_SEQUENCES[0xA0]   = '\\_';
ESCAPE_SEQUENCES[0x2028] = '\\L';
ESCAPE_SEQUENCES[0x2029] = '\\P';

var DEPRECATED_BOOLEANS_SYNTAX = [
  'y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON',
  'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'
];

var DEPRECATED_BASE60_SYNTAX = /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;

function compileStyleMap(schema, map) {
  var result, keys, index, length, tag, style, type;

  if (map === null) return {};

  result = {};
  keys = Object.keys(map);

  for (index = 0, length = keys.length; index < length; index += 1) {
    tag = keys[index];
    style = String(map[tag]);

    if (tag.slice(0, 2) === '!!') {
      tag = 'tag:yaml.org,2002:' + tag.slice(2);
    }
    type = schema.compiledTypeMap['fallback'][tag];

    if (type && _hasOwnProperty.call(type.styleAliases, style)) {
      style = type.styleAliases[style];
    }

    result[tag] = style;
  }

  return result;
}

function encodeHex(character) {
  var string, handle, length;

  string = character.toString(16).toUpperCase();

  if (character <= 0xFF) {
    handle = 'x';
    length = 2;
  } else if (character <= 0xFFFF) {
    handle = 'u';
    length = 4;
  } else if (character <= 0xFFFFFFFF) {
    handle = 'U';
    length = 8;
  } else {
    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');
  }

  return '\\' + handle + common.repeat('0', length - string.length) + string;
}


var QUOTING_TYPE_SINGLE = 1,
    QUOTING_TYPE_DOUBLE = 2;

function State(options) {
  this.schema        = options['schema'] || _default;
  this.indent        = Math.max(1, (options['indent'] || 2));
  this.noArrayIndent = options['noArrayIndent'] || false;
  this.skipInvalid   = options['skipInvalid'] || false;
  this.flowLevel     = (common.isNothing(options['flowLevel']) ? -1 : options['flowLevel']);
  this.styleMap      = compileStyleMap(this.schema, options['styles'] || null);
  this.sortKeys      = options['sortKeys'] || false;
  this.lineWidth     = options['lineWidth'] || 80;
  this.noRefs        = options['noRefs'] || false;
  this.noCompatMode  = options['noCompatMode'] || false;
  this.condenseFlow  = options['condenseFlow'] || false;
  this.quotingType   = options['quotingType'] === '"' ? QUOTING_TYPE_DOUBLE : QUOTING_TYPE_SINGLE;
  this.forceQuotes   = options['forceQuotes'] || false;
  this.replacer      = typeof options['replacer'] === 'function' ? options['replacer'] : null;

  this.implicitTypes = this.schema.compiledImplicit;
  this.explicitTypes = this.schema.compiledExplicit;

  this.tag = null;
  this.result = '';

  this.duplicates = [];
  this.usedDuplicates = null;
}

// Indents every line in a string. Empty lines (\n only) are not indented.
function indentString(string, spaces) {
  var ind = common.repeat(' ', spaces),
      position = 0,
      next = -1,
      result = '',
      line,
      length = string.length;

  while (position < length) {
    next = string.indexOf('\n', position);
    if (next === -1) {
      line = string.slice(position);
      position = length;
    } else {
      line = string.slice(position, next + 1);
      position = next + 1;
    }

    if (line.length && line !== '\n') result += ind;

    result += line;
  }

  return result;
}

function generateNextLine(state, level) {
  return '\n' + common.repeat(' ', state.indent * level);
}

function testImplicitResolving(state, str) {
  var index, length, type;

  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {
    type = state.implicitTypes[index];

    if (type.resolve(str)) {
      return true;
    }
  }

  return false;
}

// [33] s-white ::= s-space | s-tab
function isWhitespace(c) {
  return c === CHAR_SPACE || c === CHAR_TAB;
}

// Returns true if the character can be printed without escaping.
// From YAML 1.2: "any allowed characters known to be non-printable
// should also be escaped. [However,] This isn’t mandatory"
// Derived from nb-char - \t - #x85 - #xA0 - #x2028 - #x2029.
function isPrintable(c) {
  return  (0x00020 <= c && c <= 0x00007E)
      || ((0x000A1 <= c && c <= 0x00D7FF) && c !== 0x2028 && c !== 0x2029)
      || ((0x0E000 <= c && c <= 0x00FFFD) && c !== CHAR_BOM)
      ||  (0x10000 <= c && c <= 0x10FFFF);
}

// [34] ns-char ::= nb-char - s-white
// [27] nb-char ::= c-printable - b-char - c-byte-order-mark
// [26] b-char  ::= b-line-feed | b-carriage-return
// Including s-white (for some reason, examples doesn't match specs in this aspect)
// ns-char ::= c-printable - b-line-feed - b-carriage-return - c-byte-order-mark
function isNsCharOrWhitespace(c) {
  return isPrintable(c)
    && c !== CHAR_BOM
    // - b-char
    && c !== CHAR_CARRIAGE_RETURN
    && c !== CHAR_LINE_FEED;
}

// [127]  ns-plain-safe(c) ::= c = flow-out  ⇒ ns-plain-safe-out
//                             c = flow-in   ⇒ ns-plain-safe-in
//                             c = block-key ⇒ ns-plain-safe-out
//                             c = flow-key  ⇒ ns-plain-safe-in
// [128] ns-plain-safe-out ::= ns-char
// [129]  ns-plain-safe-in ::= ns-char - c-flow-indicator
// [130]  ns-plain-char(c) ::=  ( ns-plain-safe(c) - “:” - “#” )
//                            | ( /* An ns-char preceding */ “#” )
//                            | ( “:” /* Followed by an ns-plain-safe(c) */ )
function isPlainSafe(c, prev, inblock) {
  var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
  var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
  return (
    // ns-plain-safe
    inblock ? // c = flow-in
      cIsNsCharOrWhitespace
      : cIsNsCharOrWhitespace
        // - c-flow-indicator
        && c !== CHAR_COMMA
        && c !== CHAR_LEFT_SQUARE_BRACKET
        && c !== CHAR_RIGHT_SQUARE_BRACKET
        && c !== CHAR_LEFT_CURLY_BRACKET
        && c !== CHAR_RIGHT_CURLY_BRACKET
  )
    // ns-plain-char
    && c !== CHAR_SHARP // false on '#'
    && !(prev === CHAR_COLON && !cIsNsChar) // false on ': '
    || (isNsCharOrWhitespace(prev) && !isWhitespace(prev) && c === CHAR_SHARP) // change to true on '[^ ]#'
    || (prev === CHAR_COLON && cIsNsChar); // change to true on ':[^ ]'
}

// Simplified test for values allowed as the first character in plain style.
function isPlainSafeFirst(c) {
  // Uses a subset of ns-char - c-indicator
  // where ns-char = nb-char - s-white.
  // No support of ( ( “?” | “:” | “-” ) /* Followed by an ns-plain-safe(c)) */ ) part
  return isPrintable(c) && c !== CHAR_BOM
    && !isWhitespace(c) // - s-white
    // - (c-indicator ::=
    // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”
    && c !== CHAR_MINUS
    && c !== CHAR_QUESTION
    && c !== CHAR_COLON
    && c !== CHAR_COMMA
    && c !== CHAR_LEFT_SQUARE_BRACKET
    && c !== CHAR_RIGHT_SQUARE_BRACKET
    && c !== CHAR_LEFT_CURLY_BRACKET
    && c !== CHAR_RIGHT_CURLY_BRACKET
    // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “"”
    && c !== CHAR_SHARP
    && c !== CHAR_AMPERSAND
    && c !== CHAR_ASTERISK
    && c !== CHAR_EXCLAMATION
    && c !== CHAR_VERTICAL_LINE
    && c !== CHAR_EQUALS
    && c !== CHAR_GREATER_THAN
    && c !== CHAR_SINGLE_QUOTE
    && c !== CHAR_DOUBLE_QUOTE
    // | “%” | “@” | “`”)
    && c !== CHAR_PERCENT
    && c !== CHAR_COMMERCIAL_AT
    && c !== CHAR_GRAVE_ACCENT;
}

// Simplified test for values allowed as the last character in plain style.
function isPlainSafeLast(c) {
  // just not whitespace or colon, it will be checked to be plain character later
  return !isWhitespace(c) && c !== CHAR_COLON;
}

// Same as 'string'.codePointAt(pos), but works in older browsers.
function codePointAt(string, pos) {
  var first = string.charCodeAt(pos), second;
  if (first >= 0xD800 && first <= 0xDBFF && pos + 1 < string.length) {
    second = string.charCodeAt(pos + 1);
    if (second >= 0xDC00 && second <= 0xDFFF) {
      // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
      return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
    }
  }
  return first;
}

// Determines whether block indentation indicator is required.
function needIndentIndicator(string) {
  var leadingSpaceRe = /^\n* /;
  return leadingSpaceRe.test(string);
}

var STYLE_PLAIN   = 1,
    STYLE_SINGLE  = 2,
    STYLE_LITERAL = 3,
    STYLE_FOLDED  = 4,
    STYLE_DOUBLE  = 5;

// Determines which scalar styles are possible and returns the preferred style.
// lineWidth = -1 => no limit.
// Pre-conditions: str.length > 0.
// Post-conditions:
//    STYLE_PLAIN or STYLE_SINGLE => no \n are in the string.
//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).
//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).
function chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth,
  testAmbiguousType, quotingType, forceQuotes, inblock) {

  var i;
  var char = 0;
  var prevChar = null;
  var hasLineBreak = false;
  var hasFoldableLine = false; // only checked if shouldTrackWidth
  var shouldTrackWidth = lineWidth !== -1;
  var previousLineBreak = -1; // count the first line correctly
  var plain = isPlainSafeFirst(codePointAt(string, 0))
          && isPlainSafeLast(codePointAt(string, string.length - 1));

  if (singleLineOnly || forceQuotes) {
    // Case: no block styles.
    // Check for disallowed characters to rule out plain and single.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
  } else {
    // Case: block styles permitted.
    for (i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
      char = codePointAt(string, i);
      if (char === CHAR_LINE_FEED) {
        hasLineBreak = true;
        // Check if any line can be folded.
        if (shouldTrackWidth) {
          hasFoldableLine = hasFoldableLine ||
            // Foldable line = too long, and not more-indented.
            (i - previousLineBreak - 1 > lineWidth &&
             string[previousLineBreak + 1] !== ' ');
          previousLineBreak = i;
        }
      } else if (!isPrintable(char)) {
        return STYLE_DOUBLE;
      }
      plain = plain && isPlainSafe(char, prevChar, inblock);
      prevChar = char;
    }
    // in case the end is missing a \n
    hasFoldableLine = hasFoldableLine || (shouldTrackWidth &&
      (i - previousLineBreak - 1 > lineWidth &&
       string[previousLineBreak + 1] !== ' '));
  }
  // Although every style can represent \n without escaping, prefer block styles
  // for multiline, since they're more readable and they don't add empty lines.
  // Also prefer folding a super-long line.
  if (!hasLineBreak && !hasFoldableLine) {
    // Strings interpretable as another type have to be quoted;
    // e.g. the string 'true' vs. the boolean true.
    if (plain && !forceQuotes && !testAmbiguousType(string)) {
      return STYLE_PLAIN;
    }
    return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
  }
  // Edge case: block indentation indicator can only have one digit.
  if (indentPerLevel > 9 && needIndentIndicator(string)) {
    return STYLE_DOUBLE;
  }
  // At this point we know block styles are valid.
  // Prefer literal style unless we want to fold.
  if (!forceQuotes) {
    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
  }
  return quotingType === QUOTING_TYPE_DOUBLE ? STYLE_DOUBLE : STYLE_SINGLE;
}

// Note: line breaking/folding is implemented for only the folded style.
// NB. We drop the last trailing newline (if any) of a returned block scalar
//  since the dumper adds its own newline. This always works:
//    • No ending newline => unaffected; already using strip "-" chomping.
//    • Ending newline    => removed then restored.
//  Importantly, this keeps the "+" chomp indicator from gaining an extra line.
function writeScalar(state, string, level, iskey, inblock) {
  state.dump = (function () {
    if (string.length === 0) {
      return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
    }
    if (!state.noCompatMode) {
      if (DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1 || DEPRECATED_BASE60_SYNTAX.test(string)) {
        return state.quotingType === QUOTING_TYPE_DOUBLE ? ('"' + string + '"') : ("'" + string + "'");
      }
    }

    var indent = state.indent * Math.max(1, level); // no 0-indent scalars
    // As indentation gets deeper, let the width decrease monotonically
    // to the lower bound min(state.lineWidth, 40).
    // Note that this implies
    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.
    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.
    // This behaves better than a constant minimum width which disallows narrower options,
    // or an indent threshold which causes the width to suddenly increase.
    var lineWidth = state.lineWidth === -1
      ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);

    // Without knowing if keys are implicit/explicit, assume implicit for safety.
    var singleLineOnly = iskey
      // No block styles in flow mode.
      || (state.flowLevel > -1 && level >= state.flowLevel);
    function testAmbiguity(string) {
      return testImplicitResolving(state, string);
    }

    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth,
      testAmbiguity, state.quotingType, state.forceQuotes && !iskey, inblock)) {

      case STYLE_PLAIN:
        return string;
      case STYLE_SINGLE:
        return "'" + string.replace(/'/g, "''") + "'";
      case STYLE_LITERAL:
        return '|' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(string, indent));
      case STYLE_FOLDED:
        return '>' + blockHeader(string, state.indent)
          + dropEndingNewline(indentString(foldString(string, lineWidth), indent));
      case STYLE_DOUBLE:
        return '"' + escapeString(string) + '"';
      default:
        throw new exception('impossible error: invalid scalar style');
    }
  }());
}

// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.
function blockHeader(string, indentPerLevel) {
  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';

  // note the special case: the string '\n' counts as a "trailing" empty line.
  var clip =          string[string.length - 1] === '\n';
  var keep = clip && (string[string.length - 2] === '\n' || string === '\n');
  var chomp = keep ? '+' : (clip ? '' : '-');

  return indentIndicator + chomp + '\n';
}

// (See the note for writeScalar.)
function dropEndingNewline(string) {
  return string[string.length - 1] === '\n' ? string.slice(0, -1) : string;
}

// Note: a long line without a suitable break point will exceed the width limit.
// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.
function foldString(string, width) {
  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—
  // unless they're before or after a more-indented line, or at the very
  // beginning or end, in which case $k$ maps to $k$.
  // Therefore, parse each chunk as newline(s) followed by a content line.
  var lineRe = /(\n+)([^\n]*)/g;

  // first line (possibly an empty line)
  var result = (function () {
    var nextLF = string.indexOf('\n');
    nextLF = nextLF !== -1 ? nextLF : string.length;
    lineRe.lastIndex = nextLF;
    return foldLine(string.slice(0, nextLF), width);
  }());
  // If we haven't reached the first content line yet, don't add an extra \n.
  var prevMoreIndented = string[0] === '\n' || string[0] === ' ';
  var moreIndented;

  // rest of the lines
  var match;
  while ((match = lineRe.exec(string))) {
    var prefix = match[1], line = match[2];
    moreIndented = (line[0] === ' ');
    result += prefix
      + (!prevMoreIndented && !moreIndented && line !== ''
        ? '\n' : '')
      + foldLine(line, width);
    prevMoreIndented = moreIndented;
  }

  return result;
}

// Greedy line breaking.
// Picks the longest line under the limit each time,
// otherwise settles for the shortest line over the limit.
// NB. More-indented lines *cannot* be folded, as that would add an extra \n.
function foldLine(line, width) {
  if (line === '' || line[0] === ' ') return line;

  // Since a more-indented line adds a \n, breaks can't be followed by a space.
  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.
  var match;
  // start is an inclusive index. end, curr, and next are exclusive.
  var start = 0, end, curr = 0, next = 0;
  var result = '';

  // Invariants: 0 <= start <= length-1.
  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.
  // Inside the loop:
  //   A match implies length >= 2, so curr and next are <= length-2.
  while ((match = breakRe.exec(line))) {
    next = match.index;
    // maintain invariant: curr - start <= width
    if (next - start > width) {
      end = (curr > start) ? curr : next; // derive end <= length-2
      result += '\n' + line.slice(start, end);
      // skip the space that was output as \n
      start = end + 1;                    // derive start <= length-1
    }
    curr = next;
  }

  // By the invariants, start <= length-1, so there is something left over.
  // It is either the whole string or a part starting from non-whitespace.
  result += '\n';
  // Insert a break if the remainder is too long and there is a break available.
  if (line.length - start > width && curr > start) {
    result += line.slice(start, curr) + '\n' + line.slice(curr + 1);
  } else {
    result += line.slice(start);
  }

  return result.slice(1); // drop extra \n joiner
}

// Escapes a double-quoted string.
function escapeString(string) {
  var result = '';
  var char = 0;
  var escapeSeq;

  for (var i = 0; i < string.length; char >= 0x10000 ? i += 2 : i++) {
    char = codePointAt(string, i);
    escapeSeq = ESCAPE_SEQUENCES[char];

    if (!escapeSeq && isPrintable(char)) {
      result += string[i];
      if (char >= 0x10000) result += string[i + 1];
    } else {
      result += escapeSeq || encodeHex(char);
    }
  }

  return result;
}

function writeFlowSequence(state, level, object) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level, value, false, false) ||
        (typeof value === 'undefined' &&
         writeNode(state, level, null, false, false))) {

      if (_result !== '') _result += ',' + (!state.condenseFlow ? ' ' : '');
      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = '[' + _result + ']';
}

function writeBlockSequence(state, level, object, compact) {
  var _result = '',
      _tag    = state.tag,
      index,
      length,
      value;

  for (index = 0, length = object.length; index < length; index += 1) {
    value = object[index];

    if (state.replacer) {
      value = state.replacer.call(object, String(index), value);
    }

    // Write only valid elements, put null instead of invalid elements.
    if (writeNode(state, level + 1, value, true, true, false, true) ||
        (typeof value === 'undefined' &&
         writeNode(state, level + 1, null, true, true, false, true))) {

      if (!compact || _result !== '') {
        _result += generateNextLine(state, level);
      }

      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        _result += '-';
      } else {
        _result += '- ';
      }

      _result += state.dump;
    }
  }

  state.tag = _tag;
  state.dump = _result || '[]'; // Empty sequence if no valid values.
}

function writeFlowMapping(state, level, object) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      pairBuffer;

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {

    pairBuffer = '';
    if (_result !== '') pairBuffer += ', ';

    if (state.condenseFlow) pairBuffer += '"';

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level, objectKey, false, false)) {
      continue; // Skip this pair because of invalid key;
    }

    if (state.dump.length > 1024) pairBuffer += '? ';

    pairBuffer += state.dump + (state.condenseFlow ? '"' : '') + ':' + (state.condenseFlow ? '' : ' ');

    if (!writeNode(state, level, objectValue, false, false)) {
      continue; // Skip this pair because of invalid value.
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = '{' + _result + '}';
}

function writeBlockMapping(state, level, object, compact) {
  var _result       = '',
      _tag          = state.tag,
      objectKeyList = Object.keys(object),
      index,
      length,
      objectKey,
      objectValue,
      explicitPair,
      pairBuffer;

  // Allow sorting keys so that the output file is deterministic
  if (state.sortKeys === true) {
    // Default sorting
    objectKeyList.sort();
  } else if (typeof state.sortKeys === 'function') {
    // Custom sort function
    objectKeyList.sort(state.sortKeys);
  } else if (state.sortKeys) {
    // Something is wrong
    throw new exception('sortKeys must be a boolean or a function');
  }

  for (index = 0, length = objectKeyList.length; index < length; index += 1) {
    pairBuffer = '';

    if (!compact || _result !== '') {
      pairBuffer += generateNextLine(state, level);
    }

    objectKey = objectKeyList[index];
    objectValue = object[objectKey];

    if (state.replacer) {
      objectValue = state.replacer.call(object, objectKey, objectValue);
    }

    if (!writeNode(state, level + 1, objectKey, true, true, true)) {
      continue; // Skip this pair because of invalid key.
    }

    explicitPair = (state.tag !== null && state.tag !== '?') ||
                   (state.dump && state.dump.length > 1024);

    if (explicitPair) {
      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
        pairBuffer += '?';
      } else {
        pairBuffer += '? ';
      }
    }

    pairBuffer += state.dump;

    if (explicitPair) {
      pairBuffer += generateNextLine(state, level);
    }

    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
      continue; // Skip this pair because of invalid value.
    }

    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
      pairBuffer += ':';
    } else {
      pairBuffer += ': ';
    }

    pairBuffer += state.dump;

    // Both key and value are valid.
    _result += pairBuffer;
  }

  state.tag = _tag;
  state.dump = _result || '{}'; // Empty mapping if no valid pairs.
}

function detectType(state, object, explicit) {
  var _result, typeList, index, length, type, style;

  typeList = explicit ? state.explicitTypes : state.implicitTypes;

  for (index = 0, length = typeList.length; index < length; index += 1) {
    type = typeList[index];

    if ((type.instanceOf  || type.predicate) &&
        (!type.instanceOf || ((typeof object === 'object') && (object instanceof type.instanceOf))) &&
        (!type.predicate  || type.predicate(object))) {

      if (explicit) {
        if (type.multi && type.representName) {
          state.tag = type.representName(object);
        } else {
          state.tag = type.tag;
        }
      } else {
        state.tag = '?';
      }

      if (type.represent) {
        style = state.styleMap[type.tag] || type.defaultStyle;

        if (_toString.call(type.represent) === '[object Function]') {
          _result = type.represent(object, style);
        } else if (_hasOwnProperty.call(type.represent, style)) {
          _result = type.represent[style](object, style);
        } else {
          throw new exception('!<' + type.tag + '> tag resolver accepts not "' + style + '" style');
        }

        state.dump = _result;
      }

      return true;
    }
  }

  return false;
}

// Serializes `object` and writes it to global `result`.
// Returns true on success, or false on invalid object.
//
function writeNode(state, level, object, block, compact, iskey, isblockseq) {
  state.tag = null;
  state.dump = object;

  if (!detectType(state, object, false)) {
    detectType(state, object, true);
  }

  var type = _toString.call(state.dump);
  var inblock = block;
  var tagStr;

  if (block) {
    block = (state.flowLevel < 0 || state.flowLevel > level);
  }

  var objectOrArray = type === '[object Object]' || type === '[object Array]',
      duplicateIndex,
      duplicate;

  if (objectOrArray) {
    duplicateIndex = state.duplicates.indexOf(object);
    duplicate = duplicateIndex !== -1;
  }

  if ((state.tag !== null && state.tag !== '?') || duplicate || (state.indent !== 2 && level > 0)) {
    compact = false;
  }

  if (duplicate && state.usedDuplicates[duplicateIndex]) {
    state.dump = '*ref_' + duplicateIndex;
  } else {
    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {
      state.usedDuplicates[duplicateIndex] = true;
    }
    if (type === '[object Object]') {
      if (block && (Object.keys(state.dump).length !== 0)) {
        writeBlockMapping(state, level, state.dump, compact);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowMapping(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object Array]') {
      if (block && (state.dump.length !== 0)) {
        if (state.noArrayIndent && !isblockseq && level > 0) {
          writeBlockSequence(state, level - 1, state.dump, compact);
        } else {
          writeBlockSequence(state, level, state.dump, compact);
        }
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + state.dump;
        }
      } else {
        writeFlowSequence(state, level, state.dump);
        if (duplicate) {
          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;
        }
      }
    } else if (type === '[object String]') {
      if (state.tag !== '?') {
        writeScalar(state, state.dump, level, iskey, inblock);
      }
    } else if (type === '[object Undefined]') {
      return false;
    } else {
      if (state.skipInvalid) return false;
      throw new exception('unacceptable kind of an object to dump ' + type);
    }

    if (state.tag !== null && state.tag !== '?') {
      // Need to encode all characters except those allowed by the spec:
      //
      // [35] ns-dec-digit    ::=  [#x30-#x39] /* 0-9 */
      // [36] ns-hex-digit    ::=  ns-dec-digit
      //                         | [#x41-#x46] /* A-F */ | [#x61-#x66] /* a-f */
      // [37] ns-ascii-letter ::=  [#x41-#x5A] /* A-Z */ | [#x61-#x7A] /* a-z */
      // [38] ns-word-char    ::=  ns-dec-digit | ns-ascii-letter | “-”
      // [39] ns-uri-char     ::=  “%” ns-hex-digit ns-hex-digit | ns-word-char | “#”
      //                         | “;” | “/” | “?” | “:” | “@” | “&” | “=” | “+” | “$” | “,”
      //                         | “_” | “.” | “!” | “~” | “*” | “'” | “(” | “)” | “[” | “]”
      //
      // Also need to encode '!' because it has special meaning (end of tag prefix).
      //
      tagStr = encodeURI(
        state.tag[0] === '!' ? state.tag.slice(1) : state.tag
      ).replace(/!/g, '%21');

      if (state.tag[0] === '!') {
        tagStr = '!' + tagStr;
      } else if (tagStr.slice(0, 18) === 'tag:yaml.org,2002:') {
        tagStr = '!!' + tagStr.slice(18);
      } else {
        tagStr = '!<' + tagStr + '>';
      }

      state.dump = tagStr + ' ' + state.dump;
    }
  }

  return true;
}

function getDuplicateReferences(object, state) {
  var objects = [],
      duplicatesIndexes = [],
      index,
      length;

  inspectNode(object, objects, duplicatesIndexes);

  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {
    state.duplicates.push(objects[duplicatesIndexes[index]]);
  }
  state.usedDuplicates = new Array(length);
}

function inspectNode(object, objects, duplicatesIndexes) {
  var objectKeyList,
      index,
      length;

  if (object !== null && typeof object === 'object') {
    index = objects.indexOf(object);
    if (index !== -1) {
      if (duplicatesIndexes.indexOf(index) === -1) {
        duplicatesIndexes.push(index);
      }
    } else {
      objects.push(object);

      if (Array.isArray(object)) {
        for (index = 0, length = object.length; index < length; index += 1) {
          inspectNode(object[index], objects, duplicatesIndexes);
        }
      } else {
        objectKeyList = Object.keys(object);

        for (index = 0, length = objectKeyList.length; index < length; index += 1) {
          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);
        }
      }
    }
  }
}

function dump$1(input, options) {
  options = options || {};

  var state = new State(options);

  if (!state.noRefs) getDuplicateReferences(input, state);

  var value = input;

  if (state.replacer) {
    value = state.replacer.call({ '': value }, '', value);
  }

  if (writeNode(state, 0, value, true, true)) return state.dump + '\n';

  return '';
}

var dump_1 = dump$1;

var dumper = {
	dump: dump_1
};

function renamed(from, to) {
  return function () {
    throw new Error('Function yaml.' + from + ' is removed in js-yaml 4. ' +
      'Use yaml.' + to + ' instead, which is now safe by default.');
  };
}


var Type                = type;
var Schema              = schema;
var FAILSAFE_SCHEMA     = failsafe;
var JSON_SCHEMA         = json;
var CORE_SCHEMA         = core;
var DEFAULT_SCHEMA      = _default;
var load                = loader.load;
var loadAll             = loader.loadAll;
var dump                = dumper.dump;
var YAMLException       = exception;

// Re-export all types in case user wants to create custom schema
var types = {
  binary:    binary,
  float:     js_yaml_float,
  map:       map,
  null:      _null,
  pairs:     pairs,
  set:       set,
  timestamp: timestamp,
  bool:      bool,
  int:       js_yaml_int,
  merge:     merge,
  omap:      omap,
  seq:       seq,
  str:       str
};

// Removed functions from JS-YAML 3.0.x
var safeLoad            = renamed('safeLoad', 'load');
var safeLoadAll         = renamed('safeLoadAll', 'loadAll');
var safeDump            = renamed('safeDump', 'dump');

var jsYaml = {
	Type: Type,
	Schema: Schema,
	FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,
	JSON_SCHEMA: JSON_SCHEMA,
	CORE_SCHEMA: CORE_SCHEMA,
	DEFAULT_SCHEMA: DEFAULT_SCHEMA,
	load: load,
	loadAll: loadAll,
	dump: dump,
	YAMLException: YAMLException,
	types: types,
	safeLoad: safeLoad,
	safeLoadAll: safeLoadAll,
	safeDump: safeDump
};

/* harmony default export */ const js_yaml = ((/* unused pure expression or super */ null && (jsYaml)));


// EXTERNAL MODULE: ../node_modules/js-base64/base64.mjs
var base64 = __webpack_require__(222);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/node_modules/lru-cache/index.mjs
var lru_cache = __webpack_require__(48736);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/index-5b109eb9.node.esm.js
var index_5b109eb9_node_esm = __webpack_require__(46824);
;// CONCATENATED MODULE: ../node_modules/@keystatic/core/dist/required-files-f12cd7f9.node.esm.js



const textDecoder = new TextDecoder();
const textEncoder = new TextEncoder();
function splitFrontmatter(data) {
  const str = textDecoder.decode(data);
  const match = str.match(/^---(?:\r?\n([^]*?))?\r?\n---\r?\n?/);
  if (match) {
    var _match$;
    const encoded = textEncoder.encode(match[0]);
    return {
      frontmatter: (_match$ = match[1]) !== null && _match$ !== void 0 ? _match$ : '',
      content: data.slice(encoded.byteLength)
    };
  }
  return null;
}
function loadDataFile(data, formatInfo) {
  const parse = formatInfo.data === 'json' ? JSON.parse : load;
  if (!formatInfo.contentField) {
    const dataFile = textDecoder.decode(data);
    return {
      loaded: parse(dataFile)
    };
  }
  const res = splitFrontmatter(data);
  (0,emery_cjs.assert)(res !== null, 'frontmatter not found');
  return {
    loaded: parse(res.frontmatter),
    extraFakeFile: {
      path: `${formatInfo.contentField.key}${formatInfo.contentField.config.contentExtension}`,
      contents: res.content
    }
  };
}



;// CONCATENATED MODULE: ../node_modules/@0no-co/graphql.web/dist/graphql.web.mjs
var graphql_web_e = {
  NAME: "Name",
  DOCUMENT: "Document",
  OPERATION_DEFINITION: "OperationDefinition",
  VARIABLE_DEFINITION: "VariableDefinition",
  SELECTION_SET: "SelectionSet",
  FIELD: "Field",
  ARGUMENT: "Argument",
  FRAGMENT_SPREAD: "FragmentSpread",
  INLINE_FRAGMENT: "InlineFragment",
  FRAGMENT_DEFINITION: "FragmentDefinition",
  VARIABLE: "Variable",
  INT: "IntValue",
  FLOAT: "FloatValue",
  STRING: "StringValue",
  BOOLEAN: "BooleanValue",
  NULL: "NullValue",
  ENUM: "EnumValue",
  LIST: "ListValue",
  OBJECT: "ObjectValue",
  OBJECT_FIELD: "ObjectField",
  DIRECTIVE: "Directive",
  NAMED_TYPE: "NamedType",
  LIST_TYPE: "ListType",
  NON_NULL_TYPE: "NonNullType"
};

var graphql_web_r = {
  QUERY: "query",
  MUTATION: "mutation",
  SUBSCRIPTION: "subscription"
};

class GraphQLError extends Error {
  constructor(e, r, i, n, a, t, o) {
    super(e);
    this.name = "GraphQLError";
    this.message = e;
    if (a) {
      this.path = a;
    }
    if (r) {
      this.nodes = Array.isArray(r) ? r : [ r ];
    }
    if (i) {
      this.source = i;
    }
    if (n) {
      this.positions = n;
    }
    if (t) {
      this.originalError = t;
    }
    var l = o;
    if (!l && t) {
      var u = t.extensions;
      if (u && "object" == typeof u) {
        l = u;
      }
    }
    this.extensions = l || {};
  }
  toJSON() {
    return {
      ...this,
      message: this.message
    };
  }
  toString() {
    return this.message;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
}

var graphql_web_i;

var graphql_web_n;

function error(e) {
  return new GraphQLError(`Syntax Error: Unexpected token at ${graphql_web_n} in ${e}`);
}

function advance(e) {
  e.lastIndex = graphql_web_n;
  if (e.test(graphql_web_i)) {
    return graphql_web_i.slice(graphql_web_n, graphql_web_n = e.lastIndex);
  }
}

var graphql_web_a = / +(?=[^\s])/y;

function blockString(e) {
  var r = e.split("\n");
  var i = "";
  var n = 0;
  var t = 0;
  var o = r.length - 1;
  for (var l = 0; l < r.length; l++) {
    graphql_web_a.lastIndex = 0;
    if (graphql_web_a.test(r[l])) {
      if (l && (!n || graphql_web_a.lastIndex < n)) {
        n = graphql_web_a.lastIndex;
      }
      t = t || l;
      o = l;
    }
  }
  for (var u = t; u <= o; u++) {
    if (u !== t) {
      i += "\n";
    }
    i += r[u].slice(n).replace(/\\"""/g, '"""');
  }
  return i;
}

function ignored() {
  for (var e = 0 | graphql_web_i.charCodeAt(graphql_web_n++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | graphql_web_i.charCodeAt(graphql_web_n++)) {
    if (35 === e) {
      while (10 !== (e = graphql_web_i.charCodeAt(graphql_web_n++)) && 13 !== e) {}
    }
  }
  graphql_web_n--;
}

var graphql_web_t = /[_A-Za-z]\w*/y;

function graphql_web_name() {
  var e;
  if (e = advance(graphql_web_t)) {
    return {
      kind: "Name",
      value: e
    };
  }
}

var graphql_web_o = /(?:null|true|false)/y;

var graphql_web_l = /\$[_A-Za-z]\w*/y;

var graphql_web_u = /-?\d+/y;

var graphql_web_v = /(?:\.\d+)?[eE][+-]?\d+|\.\d+/y;

var graphql_web_d = /\\/g;

var graphql_web_s = /"""(?:"""|(?:[\s\S]*?[^\\])""")/y;

var graphql_web_c = /"(?:"|[^\r\n]*?[^\\]")/y;

function value(e) {
  var r;
  var a;
  if (a = advance(graphql_web_o)) {
    r = "null" === a ? {
      kind: "NullValue"
    } : {
      kind: "BooleanValue",
      value: "true" === a
    };
  } else if (!e && (a = advance(graphql_web_l))) {
    r = {
      kind: "Variable",
      name: {
        kind: "Name",
        value: a.slice(1)
      }
    };
  } else if (a = advance(graphql_web_u)) {
    var f = a;
    if (a = advance(graphql_web_v)) {
      r = {
        kind: "FloatValue",
        value: f + a
      };
    } else {
      r = {
        kind: "IntValue",
        value: f
      };
    }
  } else if (a = advance(graphql_web_t)) {
    r = {
      kind: "EnumValue",
      value: a
    };
  } else if (a = advance(graphql_web_s)) {
    r = {
      kind: "StringValue",
      value: blockString(a.slice(3, -3)),
      block: !0
    };
  } else if (a = advance(graphql_web_c)) {
    r = {
      kind: "StringValue",
      value: graphql_web_d.test(a) ? JSON.parse(a) : a.slice(1, -1),
      block: !1
    };
  } else if (r = function list(e) {
    var r;
    if (91 === graphql_web_i.charCodeAt(graphql_web_n)) {
      graphql_web_n++;
      ignored();
      var a = [];
      while (r = value(e)) {
        a.push(r);
      }
      if (93 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
        throw error("ListValue");
      }
      ignored();
      return {
        kind: "ListValue",
        values: a
      };
    }
  }(e) || function object(e) {
    if (123 === graphql_web_i.charCodeAt(graphql_web_n)) {
      graphql_web_n++;
      ignored();
      var r = [];
      var a;
      while (a = graphql_web_name()) {
        ignored();
        if (58 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
          throw error("ObjectField");
        }
        ignored();
        var t = value(e);
        if (!t) {
          throw error("ObjectField");
        }
        r.push({
          kind: "ObjectField",
          name: a,
          value: t
        });
      }
      if (125 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
        throw error("ObjectValue");
      }
      ignored();
      return {
        kind: "ObjectValue",
        fields: r
      };
    }
  }(e)) {
    return r;
  }
  ignored();
  return r;
}

function arguments_(e) {
  var r = [];
  ignored();
  if (40 === graphql_web_i.charCodeAt(graphql_web_n)) {
    graphql_web_n++;
    ignored();
    var a;
    while (a = graphql_web_name()) {
      ignored();
      if (58 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
        throw error("Argument");
      }
      ignored();
      var t = value(e);
      if (!t) {
        throw error("Argument");
      }
      r.push({
        kind: "Argument",
        name: a,
        value: t
      });
    }
    if (!r.length || 41 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
      throw error("Argument");
    }
    ignored();
  }
  return r;
}

function directives(e) {
  var r = [];
  ignored();
  while (64 === graphql_web_i.charCodeAt(graphql_web_n)) {
    graphql_web_n++;
    var a = graphql_web_name();
    if (!a) {
      throw error("Directive");
    }
    ignored();
    r.push({
      kind: "Directive",
      name: a,
      arguments: arguments_(e)
    });
  }
  return r;
}

function field() {
  var e = graphql_web_name();
  if (e) {
    ignored();
    var r;
    if (58 === graphql_web_i.charCodeAt(graphql_web_n)) {
      graphql_web_n++;
      ignored();
      r = e;
      if (!(e = graphql_web_name())) {
        throw error("Field");
      }
      ignored();
    }
    return {
      kind: "Field",
      alias: r,
      name: e,
      arguments: arguments_(!1),
      directives: directives(!1),
      selectionSet: selectionSet()
    };
  }
}

function graphql_web_type() {
  var e;
  ignored();
  if (91 === graphql_web_i.charCodeAt(graphql_web_n)) {
    graphql_web_n++;
    ignored();
    var r = graphql_web_type();
    if (!r || 93 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
      throw error("ListType");
    }
    e = {
      kind: "ListType",
      type: r
    };
  } else if (e = graphql_web_name()) {
    e = {
      kind: "NamedType",
      name: e
    };
  } else {
    throw error("NamedType");
  }
  ignored();
  if (33 === graphql_web_i.charCodeAt(graphql_web_n)) {
    graphql_web_n++;
    ignored();
    return {
      kind: "NonNullType",
      type: e
    };
  } else {
    return e;
  }
}

var graphql_web_f = /on/y;

function typeCondition() {
  if (advance(graphql_web_f)) {
    ignored();
    var e = graphql_web_name();
    if (!e) {
      throw error("NamedType");
    }
    ignored();
    return {
      kind: "NamedType",
      name: e
    };
  }
}

var graphql_web_p = /\.\.\./y;

function fragmentSpread() {
  if (advance(graphql_web_p)) {
    ignored();
    var e = graphql_web_n;
    var r;
    if ((r = graphql_web_name()) && "on" !== r.value) {
      return {
        kind: "FragmentSpread",
        name: r,
        directives: directives(!1)
      };
    } else {
      graphql_web_n = e;
      var i = typeCondition();
      var a = directives(!1);
      var t = selectionSet();
      if (!t) {
        throw error("InlineFragment");
      }
      return {
        kind: "InlineFragment",
        typeCondition: i,
        directives: a,
        selectionSet: t
      };
    }
  }
}

function selectionSet() {
  var e;
  ignored();
  if (123 === graphql_web_i.charCodeAt(graphql_web_n)) {
    graphql_web_n++;
    ignored();
    var r = [];
    while (e = fragmentSpread() || field()) {
      r.push(e);
    }
    if (!r.length || 125 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
      throw error("SelectionSet");
    }
    ignored();
    return {
      kind: "SelectionSet",
      selections: r
    };
  }
}

var graphql_web_m = /fragment/y;

function fragmentDefinition() {
  if (advance(graphql_web_m)) {
    ignored();
    var e = graphql_web_name();
    if (!e) {
      throw error("FragmentDefinition");
    }
    ignored();
    var r = typeCondition();
    if (!r) {
      throw error("FragmentDefinition");
    }
    var i = directives(!1);
    var n = selectionSet();
    if (!n) {
      throw error("FragmentDefinition");
    }
    return {
      kind: "FragmentDefinition",
      name: e,
      typeCondition: r,
      directives: i,
      selectionSet: n
    };
  }
}

var graphql_web_g = /(?:query|mutation|subscription)/y;

function operationDefinition() {
  var e;
  var r;
  var a = [];
  var t = [];
  if (e = advance(graphql_web_g)) {
    ignored();
    r = graphql_web_name();
    a = function variableDefinitions() {
      var e;
      var r = [];
      ignored();
      if (40 === graphql_web_i.charCodeAt(graphql_web_n)) {
        graphql_web_n++;
        ignored();
        while (e = advance(graphql_web_l)) {
          ignored();
          if (58 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
            throw error("VariableDefinition");
          }
          var a = graphql_web_type();
          var t = void 0;
          if (61 === graphql_web_i.charCodeAt(graphql_web_n)) {
            graphql_web_n++;
            ignored();
            if (!(t = value(!0))) {
              throw error("VariableDefinition");
            }
          }
          ignored();
          r.push({
            kind: "VariableDefinition",
            variable: {
              kind: "Variable",
              name: {
                kind: "Name",
                value: e.slice(1)
              }
            },
            type: a,
            defaultValue: t,
            directives: directives(!0)
          });
        }
        if (41 !== graphql_web_i.charCodeAt(graphql_web_n++)) {
          throw error("VariableDefinition");
        }
        ignored();
      }
      return r;
    }();
    t = directives(!1);
  }
  var o = selectionSet();
  if (o) {
    return {
      kind: "OperationDefinition",
      operation: e || "query",
      name: r,
      variableDefinitions: a,
      directives: t,
      selectionSet: o
    };
  }
}

function parse(e, r) {
  graphql_web_i = "string" == typeof e.body ? e.body : e;
  graphql_web_n = 0;
  return function document() {
    var e;
    ignored();
    var r = [];
    while (e = fragmentDefinition() || operationDefinition()) {
      r.push(e);
    }
    return {
      kind: "Document",
      definitions: r
    };
  }();
}

function parseValue(e, r) {
  graphql_web_i = "string" == typeof e.body ? e.body : e;
  graphql_web_n = 0;
  ignored();
  var a = value(!1);
  if (!a) {
    throw error("ValueNode");
  }
  return a;
}

function parseType(e, r) {
  graphql_web_i = "string" == typeof e.body ? e.body : e;
  graphql_web_n = 0;
  return graphql_web_type();
}

var graphql_web_h = {};

function visit(e, r) {
  var i = [];
  var n = [];
  try {
    var a = function traverse(e, a, t) {
      var o = !1;
      var l = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;
      var u = l && l.call(r, e, a, t, n, i);
      if (!1 === u) {
        return e;
      } else if (null === u) {
        return null;
      } else if (u === graphql_web_h) {
        throw graphql_web_h;
      } else if (u && "string" == typeof u.kind) {
        o = u !== e;
        e = u;
      }
      if (t) {
        i.push(t);
      }
      var v;
      var d = {
        ...e
      };
      for (var s in e) {
        n.push(s);
        var c = e[s];
        if (Array.isArray(c)) {
          var f = [];
          for (var p = 0; p < c.length; p++) {
            if (null != c[p] && "string" == typeof c[p].kind) {
              i.push(e);
              n.push(p);
              v = traverse(c[p], p, c);
              n.pop();
              i.pop();
              if (null == v) {
                o = !0;
              } else {
                o = o || v !== c[p];
                f.push(v);
              }
            }
          }
          c = f;
        } else if (null != c && "string" == typeof c.kind) {
          if (void 0 !== (v = traverse(c, s, e))) {
            o = o || c !== v;
            c = v;
          }
        }
        n.pop();
        if (o) {
          d[s] = c;
        }
      }
      if (t) {
        i.pop();
      }
      var m = r[e.kind] && r[e.kind].leave || r.leave;
      var g = m && m.call(r, e, a, t, n, i);
      if (g === graphql_web_h) {
        throw graphql_web_h;
      } else if (void 0 !== g) {
        return g;
      } else if (void 0 !== u) {
        return o ? d : u;
      } else {
        return o ? d : e;
      }
    }(e);
    return void 0 !== a && !1 !== a ? a : e;
  } catch (r) {
    if (r !== graphql_web_h) {
      throw r;
    }
    return e;
  }
}

function printString(e) {
  return JSON.stringify(e);
}

function printBlockString(e) {
  return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
}

var hasItems = e => !(!e || !e.length);

var graphql_web_y = {
  OperationDefinition(e) {
    if ("query" === e.operation && !e.name && !hasItems(e.variableDefinitions) && !hasItems(e.directives)) {
      return graphql_web_y.SelectionSet(e.selectionSet);
    }
    var r = e.operation;
    if (e.name) {
      r += " " + e.name.value;
    }
    if (hasItems(e.variableDefinitions)) {
      if (!e.name) {
        r += " ";
      }
      r += "(" + e.variableDefinitions.map(graphql_web_y.VariableDefinition).join(", ") + ")";
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return r + " " + graphql_web_y.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var r = graphql_web_y.Variable(e.variable) + ": " + print(e.type);
    if (e.defaultValue) {
      r += " = " + print(e.defaultValue);
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return r;
  },
  Field(e) {
    var r = (e.alias ? e.alias.value + ": " : "") + e.name.value;
    if (hasItems(e.arguments)) {
      var i = e.arguments.map(graphql_web_y.Argument);
      var n = r + "(" + i.join(", ") + ")";
      r = n.length > 80 ? r + "(\n  " + i.join("\n").replace(/\n/g, "\n  ") + "\n)" : n;
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return e.selectionSet ? r + " " + graphql_web_y.SelectionSet(e.selectionSet) : r;
  },
  StringValue: e => e.block ? printBlockString(e.value) : printString(e.value),
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + e.values.map(print).join(", ") + "]",
  ObjectValue: e => "{" + e.fields.map(graphql_web_y.ObjectField).join(", ") + "}",
  ObjectField: e => e.name.value + ": " + print(e.value),
  Document: e => hasItems(e.definitions) ? e.definitions.map(print).join("\n\n") : "",
  SelectionSet: e => "{\n  " + e.selections.map(print).join("\n").replace(/\n/g, "\n  ") + "\n}",
  Argument: e => e.name.value + ": " + print(e.value),
  FragmentSpread(e) {
    var r = "..." + e.name.value;
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return r;
  },
  InlineFragment(e) {
    var r = "...";
    if (e.typeCondition) {
      r += " on " + e.typeCondition.name.value;
    }
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return r + " " + print(e.selectionSet);
  },
  FragmentDefinition(e) {
    var r = "fragment " + e.name.value;
    r += " on " + e.typeCondition.name.value;
    if (hasItems(e.directives)) {
      r += " " + e.directives.map(graphql_web_y.Directive).join(" ");
    }
    return r + " " + print(e.selectionSet);
  },
  Directive(e) {
    var r = "@" + e.name.value;
    if (hasItems(e.arguments)) {
      r += "(" + e.arguments.map(graphql_web_y.Argument).join(", ") + ")";
    }
    return r;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + print(e.type) + "]",
  NonNullType: e => print(e.type) + "!"
};

function print(e) {
  return graphql_web_y[e.kind] ? graphql_web_y[e.kind](e) : "";
}

function valueFromASTUntyped(e, r) {
  switch (e.kind) {
   case "NullValue":
    return null;

   case "IntValue":
    return parseInt(e.value, 10);

   case "FloatValue":
    return parseFloat(e.value);

   case "StringValue":
   case "EnumValue":
   case "BooleanValue":
    return e.value;

   case "ListValue":
    var i = [];
    for (var n = 0, a = e.values; n < a.length; n += 1) {
      i.push(valueFromASTUntyped(a[n], r));
    }
    return i;

   case "ObjectValue":
    var t = Object.create(null);
    for (var o = 0, l = e.fields; o < l.length; o += 1) {
      var u = l[o];
      t[u.name.value] = valueFromASTUntyped(u.value, r);
    }
    return t;

   case "Variable":
    return r && r[e.name.value];
  }
}

function valueFromTypeNode(e, r, i) {
  if ("Variable" === e.kind) {
    return i ? valueFromTypeNode(i[e.name.value], r, i) : void 0;
  } else if ("NonNullType" === r.kind) {
    return "NullValue" !== e.kind ? valueFromTypeNode(e, r, i) : void 0;
  } else if ("NullValue" === e.kind) {
    return null;
  } else if ("ListType" === r.kind) {
    if ("ListValue" === e.kind) {
      var n = [];
      for (var a = 0, t = e.values; a < t.length; a += 1) {
        var o = valueFromTypeNode(t[a], r.type, i);
        if (void 0 === o) {
          return;
        } else {
          n.push(o);
        }
      }
      return n;
    }
  } else if ("NamedType" === r.kind) {
    switch (r.name.value) {
     case "Int":
     case "Float":
     case "String":
     case "Bool":
      return r.name.value + "Value" === e.kind ? valueFromASTUntyped(e, i) : void 0;

     default:
      return valueFromASTUntyped(e, i);
    }
  }
}


//# sourceMappingURL=graphql.web.mjs.map

;// CONCATENATED MODULE: ../node_modules/@urql/core/dist/urql-core-chunk.mjs




var rehydrateGraphQlError = e => {
  if (e && e.message && (e.extensions || "GraphQLError" === e.name)) {
    return e;
  } else if ("object" == typeof e && e.message) {
    return new GraphQLError(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {});
  } else {
    return new GraphQLError(e);
  }
};

class CombinedError extends Error {
  constructor(r) {
    var e = (r.graphQLErrors || []).map(rehydrateGraphQlError);
    var t = ((r, e) => {
      var t = "";
      if (r) {
        return `[Network] ${r.message}`;
      }
      if (e) {
        for (var a of e) {
          if (t) {
            t += "\n";
          }
          t += `[GraphQL] ${a.message}`;
        }
      }
      return t;
    })(r.networkError, e);
    super(t);
    this.name = "CombinedError";
    this.message = t;
    this.graphQLErrors = e;
    this.networkError = r.networkError;
    this.response = r.response;
  }
  toString() {
    return this.message;
  }
}

var phash = (r, e) => {
  var t = 0 | (e || 5381);
  for (var a = 0, o = 0 | r.length; a < o; a++) {
    t = (t << 5) + t + r.charCodeAt(a);
  }
  return t;
};

var urql_core_chunk_i = new Set;

var urql_core_chunk_f = new WeakMap;

var stringify = r => {
  if (null === r || urql_core_chunk_i.has(r)) {
    return "null";
  } else if ("object" != typeof r) {
    return JSON.stringify(r) || "";
  } else if (r.toJSON) {
    return stringify(r.toJSON());
  } else if (Array.isArray(r)) {
    var e = "[";
    for (var t of r) {
      if (e.length > 1) {
        e += ",";
      }
      e += stringify(t) || "null";
    }
    return e += "]";
  } else if (urql_core_chunk_v !== NoopConstructor && r instanceof urql_core_chunk_v || urql_core_chunk_l !== NoopConstructor && r instanceof urql_core_chunk_l) {
    return "null";
  }
  var a = Object.keys(r).sort();
  if (!a.length && r.constructor && r.constructor !== Object) {
    var o = urql_core_chunk_f.get(r) || Math.random().toString(36).slice(2);
    urql_core_chunk_f.set(r, o);
    return stringify({
      __key: o
    });
  }
  urql_core_chunk_i.add(r);
  var n = "{";
  for (var s of a) {
    var c = stringify(r[s]);
    if (c) {
      if (n.length > 1) {
        n += ",";
      }
      n += stringify(s) + ":" + c;
    }
  }
  urql_core_chunk_i.delete(r);
  return n += "}";
};

var extract = (r, e, t) => {
  if (null == t || "object" != typeof t || t.toJSON || urql_core_chunk_i.has(t)) {} else if (Array.isArray(t)) {
    for (var a = 0, o = t.length; a < o; a++) {
      extract(r, `${e}.${a}`, t[a]);
    }
  } else if (t instanceof urql_core_chunk_v || t instanceof urql_core_chunk_l) {
    r.set(e, t);
  } else {
    urql_core_chunk_i.add(t);
    for (var n of Object.keys(t)) {
      extract(r, `${e}.${n}`, t[n]);
    }
  }
};

var stringifyVariables = r => {
  urql_core_chunk_i.clear();
  return stringify(r);
};

class NoopConstructor {}

var urql_core_chunk_v = "undefined" != typeof File ? File : NoopConstructor;

var urql_core_chunk_l = "undefined" != typeof Blob ? Blob : NoopConstructor;

var urql_core_chunk_c = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;

var urql_core_chunk_d = /(?:#[^\n\r]+)?(?:[\r\n]+|$)/g;

var replaceOutsideStrings = (r, e) => e % 2 == 0 ? r.replace(urql_core_chunk_d, "\n") : r;

var sanitizeDocument = r => r.split(urql_core_chunk_c).map(replaceOutsideStrings).join("").trim();

var urql_core_chunk_p = new Map;

var urql_core_chunk_u = new Map;

var stringifyDocument = r => {
  var t;
  if ("string" == typeof r) {
    t = sanitizeDocument(r);
  } else if (r.loc && urql_core_chunk_u.get(r.__key) === r) {
    t = r.loc.source.body;
  } else {
    t = urql_core_chunk_p.get(r) || sanitizeDocument(print(r));
    urql_core_chunk_p.set(r, t);
  }
  if ("string" != typeof r && !r.loc) {
    r.loc = {
      start: 0,
      end: t.length,
      source: {
        body: t,
        name: "gql",
        locationOffset: {
          line: 1,
          column: 1
        }
      }
    };
  }
  return t;
};

var hashDocument = r => {
  var e = phash(stringifyDocument(r));
  if (r.definitions) {
    var t = getOperationName(r);
    if (t) {
      e = phash(`\n# ${t}`, e);
    }
  }
  return e;
};

var keyDocument = r => {
  var e;
  var a;
  if ("string" == typeof r) {
    e = hashDocument(r);
    a = urql_core_chunk_u.get(e) || parse(r, {
      noLocation: !0
    });
  } else {
    e = r.__key || hashDocument(r);
    a = urql_core_chunk_u.get(e) || r;
  }
  if (!a.loc) {
    stringifyDocument(a);
  }
  a.__key = e;
  urql_core_chunk_u.set(e, a);
  return a;
};

var createRequest = (r, e, t) => {
  var a = e || {};
  var o = keyDocument(r);
  var n = stringifyVariables(a);
  var s = o.__key;
  if ("{}" !== n) {
    s = phash(n, s);
  }
  return {
    key: s,
    query: o,
    variables: a,
    extensions: t
  };
};

var getOperationName = r => {
  for (var e of r.definitions) {
    if (e.kind === graphql_web_e.OPERATION_DEFINITION) {
      return e.name ? e.name.value : void 0;
    }
  }
};

var getOperationType = r => {
  for (var e of r.definitions) {
    if (e.kind === a.OPERATION_DEFINITION) {
      return e.operation;
    }
  }
};

var makeResult = (r, e, t) => {
  if (!("data" in e) && !("errors" in e)) {
    throw new Error("No Content");
  }
  var a = "subscription" === r.kind;
  return {
    operation: r,
    data: e.data,
    error: Array.isArray(e.errors) ? new CombinedError({
      graphQLErrors: e.errors,
      response: t
    }) : void 0,
    extensions: e.extensions ? {
      ...e.extensions
    } : void 0,
    hasNext: null == e.hasNext ? a : e.hasNext,
    stale: !1
  };
};

var deepMerge = (r, e) => {
  if ("object" == typeof r && null != r) {
    if (!r.constructor || r.constructor === Object || Array.isArray(r)) {
      r = Array.isArray(r) ? [ ...r ] : {
        ...r
      };
      for (var t of Object.keys(e)) {
        r[t] = deepMerge(r[t], e[t]);
      }
      return r;
    }
  }
  return e;
};

var mergeResultPatch = (r, e, t) => {
  var a = r.error ? r.error.graphQLErrors : [];
  var o = !!r.extensions || !!e.extensions;
  var n = {
    ...r.extensions,
    ...e.extensions
  };
  var s = e.incremental;
  if ("path" in e) {
    s = [ e ];
  }
  var i = {
    data: r.data
  };
  if (s) {
    for (var f of s) {
      if (Array.isArray(f.errors)) {
        a.push(...f.errors);
      }
      if (f.extensions) {
        Object.assign(n, f.extensions);
        o = !0;
      }
      var v = "data";
      var l = i;
      for (var c = 0, d = f.path.length; c < d; v = f.path[c++]) {
        l = l[v] = Array.isArray(l[v]) ? [ ...l[v] ] : {
          ...l[v]
        };
      }
      if (f.items) {
        var p = +v >= 0 ? v : 0;
        for (var u = 0, y = f.items.length; u < y; u++) {
          l[p + u] = deepMerge(l[p + u], f.items[u]);
        }
      } else if (void 0 !== f.data) {
        l[v] = deepMerge(l[v], f.data);
      }
    }
  } else {
    i.data = e.data || r.data;
    a = e.errors || a;
  }
  return {
    operation: r.operation,
    data: i.data,
    error: a.length ? new CombinedError({
      graphQLErrors: a,
      response: t
    }) : void 0,
    extensions: o ? n : void 0,
    hasNext: null != e.hasNext ? e.hasNext : r.hasNext,
    stale: !1
  };
};

var makeErrorResult = (r, e, t) => ({
  operation: r,
  data: void 0,
  error: new CombinedError({
    networkError: e,
    response: t
  }),
  extensions: void 0,
  hasNext: !1,
  stale: !1
});

function makeFetchBody(r) {
  return {
    query: r.extensions && r.extensions.persistedQuery && !r.extensions.persistedQuery.miss ? void 0 : stringifyDocument(r.query),
    operationName: getOperationName(r.query),
    variables: r.variables || void 0,
    extensions: r.extensions
  };
}

var makeFetchURL = (r, e) => {
  var t = "query" === r.kind && r.context.preferGetMethod;
  if (!t || !e) {
    return r.context.url;
  }
  var a = new URL(r.context.url);
  for (var o in e) {
    var n = e[o];
    if (n) {
      a.searchParams.set(o, "object" == typeof n ? stringifyVariables(n) : n);
    }
  }
  var s = a.toString();
  if (s.length > 2047 && "force" !== t) {
    r.context.preferGetMethod = !1;
    return r.context.url;
  }
  return s;
};

var serializeBody = (r, e) => {
  if (e && !("query" === r.kind && !!r.context.preferGetMethod)) {
    var t = stringifyVariables(e);
    var a = (r => {
      var e = new Map;
      if (urql_core_chunk_v !== NoopConstructor || urql_core_chunk_l !== NoopConstructor) {
        urql_core_chunk_i.clear();
        extract(e, "variables", r);
      }
      return e;
    })(e.variables);
    if (a.size) {
      var o = new FormData;
      o.append("operations", t);
      o.append("map", stringifyVariables({
        ...[ ...a.keys() ].map((r => [ r ]))
      }));
      var n = 0;
      for (var s of a.values()) {
        o.append("" + n++, s);
      }
      return o;
    }
    return t;
  }
};

var makeFetchOptions = (r, e) => {
  var t = {
    accept: "subscription" === r.kind ? "text/event-stream, multipart/mixed" : "application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed"
  };
  var a = ("function" == typeof r.context.fetchOptions ? r.context.fetchOptions() : r.context.fetchOptions) || {};
  if (a.headers) {
    for (var o in a.headers) {
      t[o.toLowerCase()] = a.headers[o];
    }
  }
  var n = serializeBody(r, e);
  if ("string" == typeof n && !t["content-type"]) {
    t["content-type"] = "application/json";
  }
  return {
    ...a,
    method: n ? "POST" : "GET",
    body: n,
    headers: t
  };
};

var urql_core_chunk_y = "undefined" != typeof TextDecoder ? new TextDecoder : null;

var urql_core_chunk_h = /boundary="?([^=";]+)"?/i;

var urql_core_chunk_x = /data: ?([^\n]+)/;

var urql_core_chunk_toString = r => "Buffer" === r.constructor.name ? r.toString() : urql_core_chunk_y.decode(r);

async function* streamBody(r) {
  if (r.body[Symbol.asyncIterator]) {
    for await (var e of r.body) {
      yield urql_core_chunk_toString(e);
    }
  } else {
    var t = r.body.getReader();
    var a;
    try {
      while (!(a = await t.read()).done) {
        yield urql_core_chunk_toString(a.value);
      }
    } finally {
      t.cancel();
    }
  }
}

async function* split(r, e) {
  var t = "";
  var a;
  for await (var o of r) {
    t += o;
    while ((a = t.indexOf(e)) > -1) {
      yield t.slice(0, a);
      t = t.slice(a + e.length);
    }
  }
}

async function* fetchOperation(r, e, t) {
  var a = !0;
  var o = null;
  var n;
  try {
    yield await Promise.resolve();
    var s = (n = await (r.context.fetch || fetch)(e, t)).headers.get("Content-Type") || "";
    var i;
    if (/multipart\/mixed/i.test(s)) {
      i = async function* parseMultipartMixed(r, e) {
        var t = r.match(urql_core_chunk_h);
        var a = "--" + (t ? t[1] : "-");
        var o = !0;
        var n;
        for await (var s of split(streamBody(e), "\r\n" + a)) {
          if (o) {
            o = !1;
            var i = s.indexOf(a);
            if (i > -1) {
              s = s.slice(i + a.length);
            } else {
              continue;
            }
          }
          try {
            yield n = JSON.parse(s.slice(s.indexOf("\r\n\r\n") + 4));
          } catch (r) {
            if (!n) {
              throw r;
            }
          }
          if (n && !1 === n.hasNext) {
            break;
          }
        }
        if (n && !1 !== n.hasNext) {
          yield {
            hasNext: !1
          };
        }
      }(s, n);
    } else if (/text\/event-stream/i.test(s)) {
      i = async function* parseEventStream(r) {
        var e;
        for await (var t of split(streamBody(r), "\n\n")) {
          var a = t.match(urql_core_chunk_x);
          if (a) {
            var o = a[1];
            try {
              yield e = JSON.parse(o);
            } catch (r) {
              if (!e) {
                throw r;
              }
            }
            if (e && !1 === e.hasNext) {
              break;
            }
          }
        }
        if (e && !1 !== e.hasNext) {
          yield {
            hasNext: !1
          };
        }
      }(n);
    } else if (!/text\//i.test(s)) {
      i = async function* parseJSON(r) {
        yield JSON.parse(await r.text());
      }(n);
    } else {
      throw new Error(await n.text());
    }
    for await (var f of i) {
      o = o ? mergeResultPatch(o, f, n) : makeResult(r, f, n);
      a = !1;
      yield o;
      a = !0;
    }
    if (!o) {
      yield o = makeResult(r, {}, n);
    }
  } catch (e) {
    if (!a) {
      throw e;
    }
    yield makeErrorResult(r, n && (n.status < 200 || n.status >= 300) && n.statusText ? new Error(n.statusText) : e, n);
  }
}

function makeFetchSource(r, e, t) {
  var a;
  if ("undefined" != typeof AbortController) {
    t.signal = (a = new AbortController).signal;
  }
  return o((() => {
    if (a) {
      a.abort();
    }
  }))(n((r => !!r))(s(fetchOperation(r, e, t))));
}


//# sourceMappingURL=urql-core-chunk.mjs.map

;// CONCATENATED MODULE: ../node_modules/@urql/core/dist/urql-core.mjs








var collectTypes = (e, r) => {
  if (Array.isArray(e)) {
    for (var t of e) {
      collectTypes(t, r);
    }
  } else if ("object" == typeof e && null !== e) {
    for (var n in e) {
      if ("__typename" === n && "string" == typeof e[n]) {
        r.add(e[n]);
      } else {
        collectTypes(e[n], r);
      }
    }
  }
  return r;
};

var formatNode = r => {
  var t = !1;
  if ("definitions" in r) {
    var n = [];
    for (var a of r.definitions) {
      var o = formatNode(a);
      t = t || o !== a;
      n.push(o);
    }
    if (t) {
      return {
        ...r,
        definitions: n
      };
    }
  } else if ("selectionSet" in r) {
    var i = [];
    var s = r.kind === graphql_web_e.OPERATION_DEFINITION;
    if (r.selectionSet) {
      for (var c of r.selectionSet.selections || []) {
        s = s || c.kind === graphql_web_e.FIELD && "__typename" === c.name.value && !c.alias;
        var u = formatNode(c);
        t = t || u !== c;
        i.push(u);
      }
      if (!s) {
        t = !0;
        i.push({
          kind: graphql_web_e.FIELD,
          name: {
            kind: graphql_web_e.NAME,
            value: "__typename"
          }
        });
      }
      if (t) {
        return {
          ...r,
          selectionSet: {
            ...r.selectionSet,
            selections: i
          }
        };
      }
    }
  }
  return r;
};

var I = new Map;

var formatDocument = e => {
  var t = keyDocument(e);
  var n = I.get(t.__key);
  if (!n) {
    I.set(t.__key, n = formatNode(t));
    Object.defineProperty(n, "__key", {
      value: t.__key,
      enumerable: !1
    });
  }
  return n;
};

var maskTypename = (e, r) => {
  if (!e || "object" != typeof e) {
    return e;
  } else if (Array.isArray(e)) {
    return e.map((e => maskTypename(e)));
  } else if (e && "object" == typeof e && (r || "__typename" in e)) {
    var t = {};
    for (var n in e) {
      if ("__typename" === n) {
        Object.defineProperty(t, "__typename", {
          enumerable: !1,
          value: e.__typename
        });
      } else {
        t[n] = maskTypename(e[n]);
      }
    }
    return t;
  } else {
    return e;
  }
};

function withPromise(e) {
  var source$ = r => e(r);
  source$.toPromise = () => l(h(1)(y((e => !e.stale && !e.hasNext))(source$)));
  source$.then = (e, r) => source$.toPromise().then(e, r);
  source$.subscribe = e => k(e)(source$);
  return source$;
}

function makeOperation(e, r, t) {
  return {
    ...r,
    kind: e,
    context: r.context ? {
      ...r.context,
      ...t
    } : t || r.context
  };
}

var addMetadata = (e, r) => makeOperation(e.kind, e, {
  meta: {
    ...e.context.meta,
    ...r
  }
});

var noop = () => {};

function gql(n) {
  var a = new Map;
  var o = [];
  var i = [];
  var s = Array.isArray(n) ? n[0] : n || "";
  for (var c = 1; c < arguments.length; c++) {
    var u = arguments[c];
    if (u && u.definitions) {
      i.push(u);
    } else {
      s += u;
    }
    s += arguments[0][c];
  }
  i.unshift(r(s));
  for (var p of i) {
    for (var d of p.definitions) {
      if (d.kind === e.FRAGMENT_DEFINITION) {
        var f = d.name.value;
        var v = t(d);
        if (!a.has(f)) {
          a.set(f, v);
          o.push(d);
        } else if (false) {}
      } else {
        o.push(d);
      }
    }
  }
  return r({
    kind: e.DOCUMENT,
    definitions: o
  });
}

var shouldSkip = ({kind: e}) => "mutation" !== e && "query" !== e;

var mapTypeNames = e => {
  var r = formatDocument(e.query);
  if (r !== e.query) {
    var t = makeOperation(e.kind, e);
    t.query = r;
    return t;
  } else {
    return e;
  }
};

var cacheExchange = ({forward: e, client: r, dispatchDebug: t}) => {
  var n = new Map;
  var a = new Map;
  var isOperationCached = e => "query" === e.kind && "network-only" !== e.context.requestPolicy && ("cache-only" === e.context.requestPolicy || n.has(e.key));
  return o => {
    var i = m((e => {
      var a = n.get(e.key);
       false && 0;
      var o = a;
      if (false) {}
      if ("cache-and-network" === e.context.requestPolicy) {
        o.stale = !0;
        reexecuteOperation(r, e);
      }
      return o;
    }))(y((e => !shouldSkip(e) && isOperationCached(e)))(o));
    var s = x((e => {
      var {operation: o} = e;
      if (!o) {
        return;
      }
      var i = o.context.additionalTypenames || [];
      if ("subscription" !== e.operation.kind) {
        i = (e => [ ...collectTypes(e, new Set) ])(e.data).concat(i);
      }
      if ("mutation" === e.operation.kind || "subscription" === e.operation.kind) {
        var s = new Set;
         false && 0;
        for (var c = 0; c < i.length; c++) {
          var u = i[c];
          var p = a.get(u);
          if (!p) {
            a.set(u, p = new Set);
          }
          for (var d of p.values()) {
            s.add(d);
          }
          p.clear();
        }
        for (var f of s.values()) {
          if (n.has(f)) {
            o = n.get(f).operation;
            n.delete(f);
            reexecuteOperation(r, o);
          }
        }
      } else if ("query" === o.kind && e.data) {
        n.set(o.key, e);
        for (var v = 0; v < i.length; v++) {
          var l = i[v];
          var h = a.get(l);
          if (!h) {
            a.set(l, h = new Set);
          }
          h.add(o.key);
        }
      }
    }))(e(y((e => "query" !== e.kind || "cache-only" !== e.context.requestPolicy))(m((e =>  false ? 0 : e))(E([ m(mapTypeNames)(y((e => !shouldSkip(e) && !isOperationCached(e)))(o)), y((e => shouldSkip(e)))(o) ])))));
    return E([ i, s ]);
  };
};

var reexecuteOperation = (e, r) => e.reexecuteOperation(makeOperation(r.kind, r, {
  requestPolicy: "network-only"
}));

var T = new Set;

var ssrExchange = (e = {}) => {
  var r = !!e.staleWhileRevalidate;
  var t = !!e.includeExtensions;
  var a = {};
  var o = [];
  var invalidate = e => {
    o.push(e.operation.key);
    if (1 === o.length) {
      Promise.resolve().then((() => {
        var e;
        while (e = o.shift()) {
          a[e] = null;
        }
      }));
    }
  };
  var ssr = ({client: o, forward: i}) => s => {
    var c = e && "boolean" == typeof e.isClient ? !!e.isClient : !o.suspense;
    var u = i(m(mapTypeNames)(y((e => !a[e.key] || !!a[e.key].hasNext || "network-only" === e.context.requestPolicy))(s)));
    var p = m((e => {
      var i = ((e, r, t) => ({
        operation: e,
        data: r.data ? JSON.parse(r.data) : void 0,
        extensions: t && r.extensions ? JSON.parse(r.extensions) : void 0,
        error: r.error ? new n({
          networkError: r.error.networkError ? new Error(r.error.networkError) : void 0,
          graphQLErrors: r.error.graphQLErrors
        }) : void 0,
        stale: !1,
        hasNext: !!r.hasNext
      }))(e, a[e.key], t);
      if (r && !T.has(e.key)) {
        i.stale = !0;
        T.add(e.key);
        reexecuteOperation(o, e);
      }
      return {
        ...i,
        operation:  false ? 0 : e
      };
    }))(y((e => !!a[e.key] && "network-only" !== e.context.requestPolicy))(s));
    if (!c) {
      u = x((e => {
        var {operation: r} = e;
        if ("mutation" !== r.kind) {
          var n = ((e, r) => {
            var t = {
              data: JSON.stringify(e.data),
              hasNext: e.hasNext
            };
            if (void 0 !== e.data) {
              t.data = JSON.stringify(e.data);
            }
            if (r && void 0 !== e.extensions) {
              t.extensions = JSON.stringify(e.extensions);
            }
            if (e.error) {
              t.error = {
                graphQLErrors: e.error.graphQLErrors.map((e => {
                  if (!e.path && !e.extensions) {
                    return e.message;
                  }
                  return {
                    message: e.message,
                    path: e.path,
                    extensions: e.extensions
                  };
                }))
              };
              if (e.error.networkError) {
                t.error.networkError = "" + e.error.networkError;
              }
            }
            return t;
          })(e, t);
          a[r.key] = n;
        }
      }))(u);
    } else {
      p = x(invalidate)(p);
    }
    return E([ u, p ]);
  };
  ssr.restoreData = e => {
    for (var r in e) {
      if (null !== a[r]) {
        a[r] = e[r];
      }
    }
  };
  ssr.extractData = () => {
    var e = {};
    for (var r in a) {
      if (null != a[r]) {
        e[r] = a[r];
      }
    }
    return e;
  };
  if (e && e.initialState) {
    ssr.restoreData(e.initialState);
  }
  return ssr;
};

var subscriptionExchange = ({forwardSubscription: e, enableAllOperations: r, isSubscriptionOperation: t}) => ({client: n, forward: i}) => {
  var u = t || (e => "subscription" === e.kind || !!r && ("query" === e.kind || "mutation" === e.kind));
  return r => {
    var t = w((t => {
      var {key: i} = t;
      var u = y((e => "teardown" === e.kind && e.key === i))(r);
      return O(u)((r => {
        var t = e(a(r), r);
        return g((({next: e, complete: a}) => {
          var i = !1;
          var u;
          var p;
          Promise.resolve().then((() => {
            if (i) {
              return;
            }
            u = t.subscribe({
              next(t) {
                e(p = p ? o(p, t) : s(r, t));
              },
              error(t) {
                e(c(r, t));
              },
              complete() {
                if (!i) {
                  i = !0;
                  if ("subscription" === r.kind) {
                    n.reexecuteOperation(makeOperation("teardown", r, r.context));
                  }
                  if (p && p.hasNext) {
                    e(o(p, {
                      hasNext: !1
                    }));
                  }
                  a();
                }
              }
            });
          }));
          return () => {
            i = !0;
            if (u) {
              u.unsubscribe();
            }
          };
        }));
      })(t));
    }))(y((e => "teardown" !== e.kind && u(e)))(r));
    var p = i(y((e => "teardown" === e.kind || !u(e)))(r));
    return E([ t, p ]);
  };
};

var debugExchange = ({forward: e}) => {
  if (true) {
    return r => e(r);
  } else {}
};

var dedupExchange = ({forward: e}) => r => e(r);

var fetchExchange = ({forward: e, dispatchDebug: r}) => t => {
  var n = w((e => {
    var n = a(e);
    var o = u(e, n);
    var i = p(e, n);
     false && 0;
    var s = O(y((r => "teardown" === r.kind && r.key === e.key))(t))(d(e, o, i));
    if (false) {}
    return s;
  }))(y((e => "teardown" !== e.kind && ("subscription" !== e.kind || !!e.context.fetchSubscriptions)))(t));
  var o = e(y((e => "teardown" === e.kind || "subscription" === e.kind && !e.context.fetchSubscriptions))(t));
  return E([ n, o ]);
};

var composeExchanges = e => ({client: r, forward: t, dispatchDebug: n}) => e.reduceRight(((e, t) => {
  var a = !1;
  return t({
    client: r,
    forward(r) {
      if (false) {}
      return b(e(b(r)));
    },
    dispatchDebug(e) {
       false && 0;
    }
  });
}), t);

var mapExchange = ({onOperation: e, onResult: r, onError: t}) => ({forward: n}) => a => w((e => {
  if (t && e.error) {
    t(e.error, e.operation);
  }
  var n = r && r(e) || e;
  return "then" in n ? _(n) : q(n);
}))(n(w((r => {
  var t = e && e(r) || r;
  return "then" in t ? _(t) : q(t);
}))(a)));

var fallbackExchange = ({dispatchDebug: e}) => r => {
  if (false) {}
  return y((e => !1))(r);
};

var C = function Client(e) {
  if (false) {}
  var r = 0;
  var t = new Map;
  var n = new Map;
  var a = new Set;
  var o = [];
  var i = {
    url: e.url,
    fetchSubscriptions: e.fetchSubscriptions,
    fetchOptions: e.fetchOptions,
    fetch: e.fetch,
    preferGetMethod: !!e.preferGetMethod,
    requestPolicy: e.requestPolicy || "cache-first"
  };
  var s = D();
  function nextOperation(e) {
    if ("mutation" === e.kind || "teardown" === e.kind || !a.has(e.key)) {
      if ("teardown" === e.kind) {
        a.delete(e.key);
      } else if ("mutation" !== e.kind) {
        a.add(e.key);
      }
      s.next(e);
    }
  }
  var c = !1;
  function dispatchOperation(e) {
    if (e) {
      nextOperation(e);
    }
    if (!c) {
      c = !0;
      while (c && (e = o.shift())) {
        nextOperation(e);
      }
      c = !1;
    }
  }
  var makeResultSource = r => {
    var i = O(y((e => "teardown" === e.kind && e.key === r.key))(s.source))(y((e => e.operation.kind === r.kind && e.operation.key === r.key && (!e.operation.context._instance || e.operation.context._instance === r.context._instance)))(g));
    if (e.maskTypename) {
      i = m((e => ({
        ...e,
        data: maskTypename(e.data, !0)
      })))(i);
    }
    if ("query" !== r.kind) {
      i = A((e => !!e.hasNext), !0)(i);
    } else {
      i = V((e => {
        var t = q(e);
        return e.stale || e.hasNext ? t : E([ t, m((() => {
          e.stale = !0;
          return e;
        }))(h(1)(y((e => e.key === r.key))(s.source))) ]);
      }))(i);
    }
    if ("mutation" !== r.kind) {
      i = M((() => {
        a.delete(r.key);
        t.delete(r.key);
        n.delete(r.key);
        c = !1;
        for (var e = o.length - 1; e >= 0; e--) {
          if (o[e].key === r.key) {
            o.splice(e, 1);
          }
        }
        nextOperation(makeOperation("teardown", r, r.context));
      }))(N((e => {
        if (e.stale) {
          for (var n of o) {
            if (n.key === e.operation.key) {
              a.delete(n.key);
              break;
            }
          }
        } else if (!e.hasNext) {
          a.delete(r.key);
        }
        t.set(r.key, e);
      }))(i));
    } else {
      i = P((() => {
        nextOperation(r);
      }))(i);
    }
    return b(i);
  };
  var u = this instanceof Client ? this : Object.create(Client.prototype);
  var p = Object.assign(u, {
    suspense: !!e.suspense,
    operations$: s.source,
    reexecuteOperation(e) {
      if ("teardown" === e.kind) {
        dispatchOperation(e);
      } else if ("mutation" === e.kind || n.has(e.key)) {
        o.push(e);
        Promise.resolve().then(dispatchOperation);
      }
    },
    createRequestOperation(e, t, n) {
      if (!n) {
        n = {};
      }
      var a;
      if (false) {}
      return makeOperation(e, t, {
        _instance: "mutation" === e ? r = r + 1 | 0 : void 0,
        ...i,
        ...n,
        requestPolicy: n.requestPolicy || i.requestPolicy,
        suspense: n.suspense || !1 !== n.suspense && p.suspense
      });
    },
    executeRequestOperation(e) {
      if ("mutation" === e.kind) {
        return withPromise(makeResultSource(e));
      }
      return withPromise(S((() => {
        var r = n.get(e.key);
        if (!r) {
          n.set(e.key, r = makeResultSource(e));
        }
        r = P((() => {
          dispatchOperation(e);
        }))(r);
        var a = t.get(e.key);
        if ("query" === e.kind && a && (a.stale || a.hasNext)) {
          return V(q)(E([ r, y((r => r === t.get(e.key)))(q(a)) ]));
        } else {
          return r;
        }
      })));
    },
    executeQuery(e, r) {
      var t = p.createRequestOperation("query", e, r);
      return p.executeRequestOperation(t);
    },
    executeSubscription(e, r) {
      var t = p.createRequestOperation("subscription", e, r);
      return p.executeRequestOperation(t);
    },
    executeMutation(e, r) {
      var t = p.createRequestOperation("mutation", e, r);
      return p.executeRequestOperation(t);
    },
    readQuery(e, r, t) {
      var n = null;
      k((e => {
        n = e;
      }))(p.query(e, r, t)).unsubscribe();
      return n;
    },
    query: (e, r, t) => p.executeQuery(v(e, r), t),
    subscription: (e, r, t) => p.executeSubscription(v(e, r), t),
    mutation: (e, r, t) => p.executeMutation(v(e, r), t)
  });
  var d = noop;
  if (false) { var x, l; }
  var w = composeExchanges(e.exchanges);
  var g = b(w({
    client: p,
    dispatchDebug: d,
    forward: fallbackExchange({
      dispatchDebug: d
    })
  })(s.source));
  R(g);
  return p;
};

var j = (/* unused pure expression or super */ null && (C));


//# sourceMappingURL=urql-core.mjs.map

;// CONCATENATED MODULE: ../node_modules/wonka/dist/wonka.mjs
var teardownPlaceholder = () => {};

var wonka_e = teardownPlaceholder;

function start(e) {
  return {
    tag: 0,
    0: e
  };
}

function push(e) {
  return {
    tag: 1,
    0: e
  };
}

var identity = e => e;

function buffer(r) {
  return t => i => {
    var a = [];
    var f = wonka_e;
    var n = wonka_e;
    var s = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        n(1);
        if (a.length) {
          i(push(a));
        }
        i(0);
      } else if (0 === e.tag) {
        f = e[0];
        r((e => {
          if (l) {} else if (0 === e) {
            l = !0;
            f(1);
            if (a.length) {
              i(push(a));
            }
            i(0);
          } else if (0 === e.tag) {
            n = e[0];
          } else if (a.length) {
            var r = push(a);
            a = [];
            i(r);
          }
        }));
      } else {
        a.push(e[0]);
        if (!s) {
          s = !0;
          f(0);
          n(0);
        } else {
          s = !1;
        }
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        f(1);
        n(1);
      } else if (!l && !s) {
        s = !0;
        f(0);
        n(0);
      }
    })));
  };
}

function concatMap(r) {
  return t => i => {
    var a = [];
    var f = wonka_e;
    var n = wonka_e;
    var s = !1;
    var l = !1;
    var u = !1;
    var o = !1;
    function applyInnerSource(e) {
      u = !0;
      e((e => {
        if (0 === e) {
          if (u) {
            u = !1;
            if (a.length) {
              applyInnerSource(r(a.shift()));
            } else if (o) {
              i(0);
            } else if (!s) {
              s = !0;
              f(0);
            }
          }
        } else if (0 === e.tag) {
          l = !1;
          (n = e[0])(0);
        } else if (u) {
          i(e);
          if (l) {
            l = !1;
          } else {
            n(0);
          }
        }
      }));
    }
    t((e => {
      if (o) {} else if (0 === e) {
        o = !0;
        if (!u && !a.length) {
          i(0);
        }
      } else if (0 === e.tag) {
        f = e[0];
      } else {
        s = !1;
        if (u) {
          a.push(e[0]);
        } else {
          applyInnerSource(r(e[0]));
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!o) {
          o = !0;
          f(1);
        }
        if (u) {
          u = !1;
          n(1);
        }
      } else {
        if (!o && !s) {
          s = !0;
          f(0);
        }
        if (u && !l) {
          l = !0;
          n(0);
        }
      }
    })));
  };
}

function concatAll(e) {
  return concatMap(identity)(e);
}

function concat(e) {
  return concatAll(wonka_r(e));
}

function filter(r) {
  return t => i => {
    var a = wonka_e;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        i(e);
      } else if (!r(e[0])) {
        a(0);
      } else {
        i(e);
      }
    }));
  };
}

function wonka_map(e) {
  return r => t => r((r => {
    if (0 === r || 0 === r.tag) {
      t(r);
    } else {
      t(push(e(r[0])));
    }
  }));
}

function mergeMap(r) {
  return t => i => {
    var a = [];
    var f = wonka_e;
    var n = !1;
    var s = !1;
    t((t => {
      if (s) {} else if (0 === t) {
        s = !0;
        if (!a.length) {
          i(0);
        }
      } else if (0 === t.tag) {
        f = t[0];
      } else {
        n = !1;
        !function applyInnerSource(r) {
          var t = wonka_e;
          r((e => {
            if (0 === e) {
              if (a.length) {
                var r = a.indexOf(t);
                if (r > -1) {
                  (a = a.slice()).splice(r, 1);
                }
                if (!a.length) {
                  if (s) {
                    i(0);
                  } else if (!n) {
                    n = !0;
                    f(0);
                  }
                }
              }
            } else if (0 === e.tag) {
              a.push(t = e[0]);
              t(0);
            } else if (a.length) {
              i(e);
              t(0);
            }
          }));
        }(r(t[0]));
        if (!n) {
          n = !0;
          f(0);
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!s) {
          s = !0;
          f(1);
        }
        for (var r = 0, t = a, i = a.length; r < i; r++) {
          t[r](1);
        }
        a.length = 0;
      } else {
        if (!s && !n) {
          n = !0;
          f(0);
        } else {
          n = !1;
        }
        for (var l = 0, u = a, o = a.length; l < o; l++) {
          u[l](0);
        }
      }
    })));
  };
}

function mergeAll(e) {
  return mergeMap(identity)(e);
}

function wonka_merge(e) {
  return mergeAll(wonka_r(e));
}

function onEnd(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
        e();
      } else if (0 === r.tag) {
        var a = r[0];
        t(start((r => {
          if (1 === r) {
            i = !0;
            a(1);
            e();
          } else {
            a(r);
          }
        })));
      } else {
        t(r);
      }
    }));
  };
}

function onPush(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
      } else if (0 === r.tag) {
        var a = r[0];
        t(start((e => {
          if (1 === e) {
            i = !0;
          }
          a(e);
        })));
      } else {
        e(r[0]);
        t(r);
      }
    }));
  };
}

function onStart(e) {
  return r => t => r((r => {
    if (0 === r) {
      t(0);
    } else if (0 === r.tag) {
      t(r);
      e();
    } else {
      t(r);
    }
  }));
}

function sample(r) {
  return t => i => {
    var a = wonka_e;
    var f = wonka_e;
    var n;
    var s = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        f(1);
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
      } else {
        n = e[0];
        if (!s) {
          s = !0;
          f(0);
          a(0);
        } else {
          s = !1;
        }
      }
    }));
    r((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        a(1);
        i(0);
      } else if (0 === e.tag) {
        f = e[0];
      } else if (void 0 !== n) {
        var r = push(n);
        n = void 0;
        i(r);
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        a(1);
        f(1);
      } else if (!l && !s) {
        s = !0;
        a(0);
        f(0);
      }
    })));
  };
}

function scan(e, r) {
  return t => i => {
    var a = r;
    t((r => {
      if (0 === r) {
        i(0);
      } else if (0 === r.tag) {
        i(r);
      } else {
        i(push(a = e(a, r[0])));
      }
    }));
  };
}

function share(r) {
  var t = [];
  var i = wonka_e;
  var a = !1;
  return e => {
    t.push(e);
    if (1 === t.length) {
      r((e => {
        if (0 === e) {
          for (var r = 0, f = t, n = t.length; r < n; r++) {
            f[r](0);
          }
          t.length = 0;
        } else if (0 === e.tag) {
          i = e[0];
        } else {
          a = !1;
          for (var s = 0, l = t, u = t.length; s < u; s++) {
            l[s](e);
          }
        }
      }));
    }
    e(start((r => {
      if (1 === r) {
        var f = t.indexOf(e);
        if (f > -1) {
          (t = t.slice()).splice(f, 1);
        }
        if (!t.length) {
          i(1);
        }
      } else if (!a) {
        a = !0;
        i(0);
      }
    })));
  };
}

function skip(r) {
  return t => i => {
    var a = wonka_e;
    var f = r;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        i(e);
      } else if (f-- > 0) {
        a(0);
      } else {
        i(e);
      }
    }));
  };
}

function skipUntil(r) {
  return t => i => {
    var a = wonka_e;
    var f = wonka_e;
    var n = !0;
    var s = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        if (n) {
          f(1);
        }
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        r((e => {
          if (0 === e) {
            if (n) {
              l = !0;
              a(1);
            }
          } else if (0 === e.tag) {
            (f = e[0])(0);
          } else {
            n = !1;
            f(1);
          }
        }));
      } else if (!n) {
        s = !1;
        i(e);
      } else if (!s) {
        s = !0;
        a(0);
        f(0);
      } else {
        s = !1;
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        a(1);
        if (n) {
          f(1);
        }
      } else if (!l && !s) {
        s = !0;
        if (n) {
          f(0);
        }
        a(0);
      }
    })));
  };
}

function skipWhile(r) {
  return t => i => {
    var a = wonka_e;
    var f = !0;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        i(e);
      } else if (f) {
        if (r(e[0])) {
          a(0);
        } else {
          f = !1;
          i(e);
        }
      } else {
        i(e);
      }
    }));
  };
}

function switchMap(r) {
  return t => i => {
    var a = wonka_e;
    var f = wonka_e;
    var n = !1;
    var s = !1;
    var l = !1;
    var u = !1;
    t((t => {
      if (u) {} else if (0 === t) {
        u = !0;
        if (!l) {
          i(0);
        }
      } else if (0 === t.tag) {
        a = t[0];
      } else {
        if (l) {
          f(1);
          f = wonka_e;
        }
        if (!n) {
          n = !0;
          a(0);
        } else {
          n = !1;
        }
        !function applyInnerSource(e) {
          l = !0;
          e((e => {
            if (!l) {} else if (0 === e) {
              l = !1;
              if (u) {
                i(0);
              } else if (!n) {
                n = !0;
                a(0);
              }
            } else if (0 === e.tag) {
              s = !1;
              (f = e[0])(0);
            } else {
              i(e);
              if (!s) {
                f(0);
              } else {
                s = !1;
              }
            }
          }));
        }(r(t[0]));
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!u) {
          u = !0;
          a(1);
        }
        if (l) {
          l = !1;
          f(1);
        }
      } else {
        if (!u && !n) {
          n = !0;
          a(0);
        }
        if (l && !s) {
          s = !0;
          f(0);
        }
      }
    })));
  };
}

function switchAll(e) {
  return switchMap(identity)(e);
}

function take(r) {
  return t => i => {
    var a = wonka_e;
    var f = !1;
    var n = 0;
    t((e => {
      if (f) {} else if (0 === e) {
        f = !0;
        i(0);
      } else if (0 === e.tag) {
        if (r <= 0) {
          f = !0;
          i(0);
          e[0](1);
        } else {
          a = e[0];
        }
      } else if (n++ < r) {
        i(e);
        if (!f && n >= r) {
          f = !0;
          i(0);
          a(1);
        }
      } else {
        i(e);
      }
    }));
    i(start((e => {
      if (1 === e && !f) {
        f = !0;
        a(1);
      } else if (0 === e && !f && n < r) {
        a(0);
      }
    })));
  };
}

function takeLast(t) {
  return i => a => {
    var f = [];
    var n = wonka_e;
    i((e => {
      if (0 === e) {
        wonka_r(f)(a);
      } else if (0 === e.tag) {
        if (t <= 0) {
          e[0](1);
          wonka_r(f)(a);
        } else {
          (n = e[0])(0);
        }
      } else {
        if (f.length >= t && t) {
          f.shift();
        }
        f.push(e[0]);
        n(0);
      }
    }));
  };
}

function takeUntil(r) {
  return t => i => {
    var a = wonka_e;
    var f = wonka_e;
    var n = !1;
    t((e => {
      if (n) {} else if (0 === e) {
        n = !0;
        f(1);
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        r((e => {
          if (0 === e) {} else if (0 === e.tag) {
            (f = e[0])(0);
          } else {
            n = !0;
            f(1);
            a(1);
            i(0);
          }
        }));
      } else {
        i(e);
      }
    }));
    i(start((e => {
      if (1 === e && !n) {
        n = !0;
        a(1);
        f(1);
      } else if (!n) {
        a(0);
      }
    })));
  };
}

function takeWhile(r, t) {
  return i => a => {
    var f = wonka_e;
    var n = !1;
    i((e => {
      if (n) {} else if (0 === e) {
        n = !0;
        a(0);
      } else if (0 === e.tag) {
        f = e[0];
        a(e);
      } else if (!r(e[0])) {
        n = !0;
        if (t) {
          a(e);
        }
        a(0);
        f(1);
      } else {
        a(e);
      }
    }));
  };
}

function wonka_debounce(e) {
  return r => t => {
    var i;
    var a = !1;
    var f = !1;
    r((r => {
      if (f) {} else if (0 === r) {
        f = !0;
        if (i) {
          a = !0;
        } else {
          t(0);
        }
      } else if (0 === r.tag) {
        var n = r[0];
        t(start((e => {
          if (1 === e && !f) {
            f = !0;
            a = !1;
            if (i) {
              clearTimeout(i);
            }
            n(1);
          } else if (!f) {
            n(0);
          }
        })));
      } else {
        if (i) {
          clearTimeout(i);
        }
        i = setTimeout((() => {
          i = void 0;
          t(r);
          if (a) {
            t(0);
          }
        }), e(r[0]));
      }
    }));
  };
}

function delay(e) {
  return r => t => {
    var i = 0;
    r((r => {
      if (0 !== r && 0 === r.tag) {
        t(r);
      } else {
        i++;
        setTimeout((() => {
          if (i) {
            i--;
            t(r);
          }
        }), e);
      }
    }));
  };
}

function throttle(e) {
  return r => t => {
    var i = !1;
    var a;
    r((r => {
      if (0 === r) {
        if (a) {
          clearTimeout(a);
        }
        t(0);
      } else if (0 === r.tag) {
        var f = r[0];
        t(start((e => {
          if (1 === e) {
            if (a) {
              clearTimeout(a);
            }
            f(1);
          } else {
            f(0);
          }
        })));
      } else if (!i) {
        i = !0;
        if (a) {
          clearTimeout(a);
        }
        a = setTimeout((() => {
          a = void 0;
          i = !1;
        }), e(r[0]));
        t(r);
      }
    }));
  };
}

function lazy(e) {
  return r => e()(r);
}

function fromAsyncIterable(e) {
  return r => {
    var t = e[Symbol.asyncIterator]();
    var i = !1;
    var a = !1;
    var f = !1;
    var n;
    r(start((async e => {
      if (1 === e) {
        i = !0;
        if (t.return) {
          t.return();
        }
      } else if (a) {
        f = !0;
      } else {
        for (f = a = !0; f && !i; ) {
          if ((n = await t.next()).done) {
            i = !0;
            if (t.return) {
              await t.return();
            }
            r(0);
          } else {
            try {
              f = !1;
              r(push(n.value));
            } catch (e) {
              if (t.throw) {
                if (i = !!(await t.throw(e)).done) {
                  r(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        a = !1;
      }
    })));
  };
}

function fromIterable(e) {
  if (e[Symbol.asyncIterator]) {
    return fromAsyncIterable(e);
  }
  return r => {
    var t = e[Symbol.iterator]();
    var i = !1;
    var a = !1;
    var f = !1;
    var n;
    r(start((e => {
      if (1 === e) {
        i = !0;
        if (t.return) {
          t.return();
        }
      } else if (a) {
        f = !0;
      } else {
        for (f = a = !0; f && !i; ) {
          if ((n = t.next()).done) {
            i = !0;
            if (t.return) {
              t.return();
            }
            r(0);
          } else {
            try {
              f = !1;
              r(push(n.value));
            } catch (e) {
              if (t.throw) {
                if (i = !!t.throw(e).done) {
                  r(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        a = !1;
      }
    })));
  };
}

var wonka_r = fromIterable;

function fromValue(e) {
  return r => {
    var t = !1;
    r(start((i => {
      if (1 === i) {
        t = !0;
      } else if (!t) {
        t = !0;
        r(push(e));
        r(0);
      }
    })));
  };
}

function make(e) {
  return r => {
    var t = !1;
    var i = e({
      next(e) {
        if (!t) {
          r(push(e));
        }
      },
      complete() {
        if (!t) {
          t = !0;
          r(0);
        }
      }
    });
    r(start((e => {
      if (1 === e && !t) {
        t = !0;
        i();
      }
    })));
  };
}

function makeSubject() {
  var e;
  var r;
  return {
    source: share(make((t => {
      e = t.next;
      r = t.complete;
      return teardownPlaceholder;
    }))),
    next(r) {
      if (e) {
        e(r);
      }
    },
    complete() {
      if (r) {
        r();
      }
    }
  };
}

var empty = e => {
  var r = !1;
  e(start((t => {
    if (1 === t) {
      r = !0;
    } else if (!r) {
      r = !0;
      e(0);
    }
  })));
};

var never = r => {
  r(start(wonka_e));
};

function interval(e) {
  return make((r => {
    var t = 0;
    var i = setInterval((() => r.next(t++)), e);
    return () => clearInterval(i);
  }));
}

function fromDomEvent(e, r) {
  return make((t => {
    e.addEventListener(r, t.next);
    return () => e.removeEventListener(r, t.next);
  }));
}

function fromPromise(e) {
  return make((r => {
    e.then((e => {
      Promise.resolve(e).then((() => {
        r.next(e);
        r.complete();
      }));
    }));
    return teardownPlaceholder;
  }));
}

function wonka_subscribe(r) {
  return t => {
    var i = wonka_e;
    var a = !1;
    t((e => {
      if (0 === e) {
        a = !0;
      } else if (0 === e.tag) {
        (i = e[0])(0);
      } else if (!a) {
        r(e[0]);
        i(0);
      }
    }));
    return {
      unsubscribe() {
        if (!a) {
          a = !0;
          i(1);
        }
      }
    };
  };
}

function forEach(e) {
  return r => {
    wonka_subscribe(e)(r);
  };
}

function publish(e) {
  wonka_subscribe((e => {}))(e);
}

var wonka_t = {
  done: !0
};

var toAsyncIterable = r => ({
  [Symbol.asyncIterator]() {
    var i = [];
    var a = !1;
    var f = wonka_e;
    var n;
    r((e => {
      if (a) {} else if (0 === e) {
        if (n) {
          n = n(wonka_t);
        }
        a = !0;
      } else if (0 === e.tag) {
        (f = e[0])(0);
      } else if (n) {
        n = n({
          value: e[0],
          done: !1
        });
      } else {
        i.push(e[0]);
      }
    }));
    return {
      async next() {
        if (a && !i.length) {
          return wonka_t;
        } else if (!a && i.length <= 1) {
          f(0);
        }
        return i.length ? {
          value: i.shift(),
          done: !1
        } : new Promise((e => n = e));
      },
      async return() {
        if (!a) {
          n = f(1);
        }
        a = !0;
        return wonka_t;
      }
    };
  }
});

function wonka_toArray(r) {
  var t = [];
  var i = wonka_e;
  var a = !1;
  r((e => {
    if (0 === e) {
      a = !0;
    } else if (0 === e.tag) {
      (i = e[0])(0);
    } else {
      t.push(e[0]);
      i(0);
    }
  }));
  if (!a) {
    i(1);
  }
  return t;
}

function toPromise(r) {
  return new Promise((t => {
    var i = wonka_e;
    var a;
    r((e => {
      if (0 === e) {
        Promise.resolve(a).then(t);
      } else if (0 === e.tag) {
        (i = e[0])(0);
      } else {
        a = e[0];
        i(0);
      }
    }));
  }));
}

function zip(r) {
  var t = Object.keys(r).length;
  return i => {
    var a = new Set;
    var f = Array.isArray(r) ? new Array(t).fill(wonka_e) : {};
    var n = Array.isArray(r) ? new Array(t) : {};
    var s = !1;
    var l = !1;
    var u = !1;
    var o = 0;
    var loop = function(v) {
      r[v]((c => {
        if (0 === c) {
          if (o >= t - 1) {
            u = !0;
            i(0);
          } else {
            o++;
          }
        } else if (0 === c.tag) {
          f[v] = c[0];
        } else if (!u) {
          n[v] = c[0];
          a.add(v);
          if (!s && a.size < t) {
            if (!l) {
              for (var h in r) {
                if (!a.has(h)) {
                  (f[h] || wonka_e)(0);
                }
              }
            } else {
              l = !1;
            }
          } else {
            s = !0;
            l = !1;
            i(push(Array.isArray(n) ? n.slice() : {
              ...n
            }));
          }
        }
      }));
    };
    for (var v in r) {
      loop(v);
    }
    i(start((e => {
      if (u) {} else if (1 === e) {
        u = !0;
        for (var r in f) {
          f[r](1);
        }
      } else if (!l) {
        l = !0;
        for (var t in f) {
          f[t](0);
        }
      }
    })));
  };
}

function combine(...e) {
  return zip(e);
}

var observableSymbol = () => Symbol.observable || "@@observable";

function fromObservable(e) {
  return r => {
    var t = (e[observableSymbol()] ? e[observableSymbol()]() : e).subscribe({
      next(e) {
        r(push(e));
      },
      complete() {
        r(0);
      },
      error(e) {
        throw e;
      }
    });
    r(start((e => {
      if (1 === e) {
        t.unsubscribe();
      }
    })));
  };
}

function toObservable(r) {
  return {
    subscribe(t, i, a) {
      var f = "object" == typeof t ? t : {
        next: t,
        error: i,
        complete: a
      };
      var n = wonka_e;
      var s = !1;
      r((e => {
        if (s) {} else if (0 === e) {
          s = !0;
          if (f.complete) {
            f.complete();
          }
        } else if (0 === e.tag) {
          (n = e[0])(0);
        } else {
          f.next(e[0]);
          n(0);
        }
      }));
      var l = {
        closed: !1,
        unsubscribe() {
          l.closed = !0;
          s = !0;
          n(1);
        }
      };
      return l;
    },
    [observableSymbol()]() {
      return this;
    }
  };
}

function fromCallbag(e) {
  return r => {
    e(0, ((e, t) => {
      if (0 === e) {
        r(start((e => {
          t(e + 1);
        })));
      } else if (1 === e) {
        r(push(t));
      } else {
        r(0);
      }
    }));
  };
}

function toCallbag(e) {
  return (r, t) => {
    if (0 === r) {
      e((e => {
        if (0 === e) {
          t(2);
        } else if (0 === e.tag) {
          t(0, (r => {
            if (r < 3) {
              e[0](r - 1);
            }
          }));
        } else {
          t(1, e[0]);
        }
      }));
    }
  };
}

var pipe = (...e) => {
  var r = e[0];
  for (var t = 1, i = e.length; t < i; t++) {
    r = e[t](r);
  }
  return r;
};


//# sourceMappingURL=wonka.mjs.map

;// CONCATENATED MODULE: ../node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs






var urql_exchange_graphcache_h = "\nhttps://bit.ly/2XbVrpR#";

var urql_exchange_graphcache_m = new Set;

var urql_exchange_graphcache_g = (/* unused pure expression or super */ null && ([]));

var popDebugNode = () => urql_exchange_graphcache_g.pop();

var pushDebugNode = (e, r) => {
  var t = "";
  if (r.kind === n.INLINE_FRAGMENT) {
    t = e ? `Inline Fragment on "${e}"` : "Inline Fragment";
  } else if (r.kind === n.OPERATION_DEFINITION) {
    t = `${r.name ? `"${r.name.value}"` : "Unnamed"} ${r.operation}`;
  } else if (r.kind === n.FRAGMENT_DEFINITION) {
    t = `"${r.name.value}" Fragment`;
  }
  if (t) {
    urql_exchange_graphcache_g.push(t);
  }
};

var getDebugOutput = () => urql_exchange_graphcache_g.length ? "\n(Caused At: " + urql_exchange_graphcache_g.join(", ") + ")" : "";

function invariant(e, r, t) {
  if (!e) {
    var a = r || "Minfied Error #" + t + "\n";
    if (false) {}
    var i = new Error(a + urql_exchange_graphcache_h + t);
    i.name = "Graphcache Error";
    throw i;
  }
}

function warn(e, r) {
  if (!urql_exchange_graphcache_m.has(e)) {
    console.warn(e + getDebugOutput() + urql_exchange_graphcache_h + r);
    urql_exchange_graphcache_m.add(e);
  }
}

var getName = e => e.name.value;

var getFragmentTypeName = e => e.typeCondition.name.value;

var getFieldAlias = e => e.alias ? e.alias.value : e.name.value;

var urql_exchange_graphcache_ = [];

var getSelectionSet = e => e.selectionSet ? e.selectionSet.selections : urql_exchange_graphcache_;

var getTypeCondition = e => e.typeCondition ? e.typeCondition.name.value : null;

var isFieldNode = e => e.kind === graphql_web_e.FIELD;

var isInlineFragment = e => e.kind === graphql_web_e.INLINE_FRAGMENT;

var getFieldArguments = (e, r) => {
  var t = null;
  if (e.arguments) {
    for (var a = 0, i = e.arguments.length; a < i; a++) {
      var n = e.arguments[a];
      var s = valueFromASTUntyped(n.value, r);
      if (null != s) {
        if (!t) {
          t = {};
        }
        t[getName(n)] = s;
      }
    }
  }
  return t;
};

var filterVariables = (e, r) => {
  if (!r || !e.variableDefinitions) {
    return;
  }
  var t = {};
  for (var a = 0, i = e.variableDefinitions.length; a < i; a++) {
    var n = getName(e.variableDefinitions[a].variable);
    t[n] = r[n];
  }
  return t;
};

var normalizeVariables = (e, r) => {
  var t = {};
  if (!r) {
    return t;
  }
  if (e.variableDefinitions) {
    for (var a = 0, i = e.variableDefinitions.length; a < i; a++) {
      var n = e.variableDefinitions[a];
      var s = getName(n.variable);
      t[s] = void 0 === r[s] && n.defaultValue ? valueFromASTUntyped(n.defaultValue, r) : r[s];
    }
  }
  for (var v in r) {
    if (!(v in t)) {
      t[v] = r[v];
    }
  }
  return t;
};

var getMainOperation = e => {
  for (var r = 0; r < e.definitions.length; r++) {
    if (e.definitions[r].kind === graphql_web_e.OPERATION_DEFINITION) {
      return e.definitions[r];
    }
  }
  invariant(!1,  false ? 0 : "", 1);
};

var getFragments = e => {
  var r = {};
  for (var t = 0; t < e.definitions.length; t++) {
    var a = e.definitions[t];
    if (a.kind === graphql_web_e.FRAGMENT_DEFINITION) {
      r[getName(a)] = a;
    }
  }
  return r;
};

var shouldInclude = (e, r) => {
  for (var t = 0; e.directives && t < e.directives.length; t++) {
    var a = e.directives[t];
    var i = getName(a);
    if (("include" === i || "skip" === i) && a.arguments && a.arguments[0] && "if" === getName(a.arguments[0])) {
      var n = valueFromASTUntyped(a.arguments[0].value, r);
      return "include" === i ? !!n : !n;
    }
  }
  return !0;
};

var isDeferred = (e, r) => {
  for (var t = 0; e.directives && t < e.directives.length; t++) {
    var a = e.directives[t];
    if ("defer" === getName(a)) {
      for (var i = 0; a.arguments && i < a.arguments.length; i++) {
        var n = a.arguments[t];
        if ("if" === getName(n)) {
          return !!valueFromASTUntyped(n.value, r);
        }
      }
      return !0;
    }
  }
  return !1;
};

var urql_exchange_graphcache_N = "__";

var isFieldNullable = (e, r, t) => {
  var a = getField(e, r, t);
  return !!a && "NON_NULL" !== a.type.kind;
};

var isListNullable = (e, r, t) => {
  var a = getField(e, r, t);
  if (!a) {
    return !1;
  }
  var i = "NON_NULL" === a.type.kind ? a.type.ofType : a.type;
  return "LIST" === i.kind && "NON_NULL" !== i.ofType.kind;
};

var isFieldAvailableOnType = (e, r, t) => 0 === t.indexOf(urql_exchange_graphcache_N) || 0 === r.indexOf(urql_exchange_graphcache_N) || !!getField(e, r, t);

var isInterfaceOfType = (e, r, t) => {
  if (!t) {
    return !1;
  }
  var a = getTypeCondition(r);
  if (!a || t === a) {
    return !0;
  } else if (e.types.has(a) && "OBJECT" === e.types.get(a).kind) {
    return a === t;
  }
  !function expectAbstractType(e, r) {
    invariant(e.types.has(r) && ("INTERFACE" === e.types.get(r).kind || "UNION" === e.types.get(r).kind),  false ? 0 : "", 5);
  }(e, a);
  expectObjectType(e, t);
  return e.isSubType(a, t);
};

var getField = (e, r, t) => {
  if (0 === t.indexOf(urql_exchange_graphcache_N) || 0 === r.indexOf(urql_exchange_graphcache_N)) {
    return;
  }
  expectObjectType(e, r);
  var a = e.types.get(r).fields()[t];
  if (false) {}
  return a;
};

function expectObjectType(e, r) {
  invariant(e.types.has(r) && "OBJECT" === e.types.get(r).kind,  false ? 0 : "", 3);
}

function warnAboutResolver(e) {
   false && 0;
}

var keyOfField = (r, t) => t ? `${r}(${stringifyVariables(t)})` : r;

var joinKeys = (e, r) => `${e}.${r}`;

var fieldInfoOfKey = e => {
  var r = e.indexOf("(");
  if (r > -1) {
    return {
      fieldKey: e,
      fieldName: e.slice(0, r),
      arguments: JSON.parse(e.slice(r + 1, -1))
    };
  } else {
    return {
      fieldKey: e,
      fieldName: e,
      arguments: null
    };
  }
};

var deserializeKeyInfo = e => {
  var r = e.indexOf(".");
  return {
    entityKey: e.slice(0, r).replace(/%2e/g, "."),
    fieldKey: e.slice(r + 1)
  };
};

var makeDict = () => Object.create(null);

var urql_exchange_graphcache_k = null;

var urql_exchange_graphcache_E = null;

var urql_exchange_graphcache_O = null;

var urql_exchange_graphcache_w = null;

var urql_exchange_graphcache_b = null;

var urql_exchange_graphcache_D = null;

var urql_exchange_graphcache_x = !1;

var urql_exchange_graphcache_V = !1;

function makeData(e, r) {
  var t;
  if (e) {
    if (urql_exchange_graphcache_k.has(e)) {
      return e;
    }
    t = urql_exchange_graphcache_E.get(e);
  }
  if (null == t) {
    t = r ? [] : {};
  }
  if (e) {
    urql_exchange_graphcache_E.set(e, t);
  }
  urql_exchange_graphcache_k.add(t);
  return t;
}

var ownsData = e => !!e && urql_exchange_graphcache_k.has(e);

var initDataState = (e, r, t, a, i) => {
  urql_exchange_graphcache_k = new WeakSet;
  urql_exchange_graphcache_E = new WeakMap;
  urql_exchange_graphcache_b = e;
  urql_exchange_graphcache_O = r;
  urql_exchange_graphcache_D = new Set;
  urql_exchange_graphcache_V = !!a;
  urql_exchange_graphcache_x = !!i;
  if (false) {}
  if (!t) {
    urql_exchange_graphcache_w = null;
  } else if ("read" === urql_exchange_graphcache_b) {
    urql_exchange_graphcache_w = t;
  } else if (a || r.hydrating || r.optimisticOrder.length > 1) {
    if (!a && !r.commutativeKeys.has(t)) {
      reserveLayer(r, t);
    } else if (a) {
      if (-1 !== r.optimisticOrder.indexOf(t) && !r.commutativeKeys.has(t)) {
        r.optimisticOrder.splice(r.optimisticOrder.indexOf(t), 1);
      }
      r.commutativeKeys.delete(t);
    }
    urql_exchange_graphcache_w = t;
    createLayer(r, t);
  } else {
    urql_exchange_graphcache_w = null;
    deleteLayer(r, t);
  }
};

var clearDataState = () => {
  if (false) {}
  var e = urql_exchange_graphcache_O;
  var r = urql_exchange_graphcache_w;
  urql_exchange_graphcache_V = !1;
  urql_exchange_graphcache_w = null;
  if (!e.hydrating && r && e.optimisticOrder.indexOf(r) > -1) {
    var t = e.optimisticOrder.length;
    while (--t >= 0 && e.dirtyKeys.has(e.optimisticOrder[t]) && e.commutativeKeys.has(e.optimisticOrder[t])) {
      squashLayer(e.optimisticOrder[t]);
    }
  }
  urql_exchange_graphcache_k = null;
  urql_exchange_graphcache_E = null;
  urql_exchange_graphcache_b = null;
  urql_exchange_graphcache_O = null;
  urql_exchange_graphcache_D = null;
  if (false) {}
  if (true) {
    if (!e.defer && (e.storage || !e.optimisticOrder.length)) {
      e.defer = !0;
      setTimeout((() => {
        initDataState("read", e, null);
        gc();
        persistData();
        clearDataState();
        e.defer = !1;
      }));
    }
  }
};

var noopDataState = (e, r, t) => {
  if (r && !t) {
    e.deferredKeys.delete(r);
  }
  initDataState("write", e, r, t);
  clearDataState();
};

var getCurrentDependencies = () => {
  invariant(null !== urql_exchange_graphcache_D,  false ? 0 : "", 2);
  return urql_exchange_graphcache_D;
};

var setNode = (e, r, t, a) => {
  if (false) {}
  var i = urql_exchange_graphcache_w ? e.optimistic.get(urql_exchange_graphcache_w) : e.base;
  var n = i.get(r);
  if (void 0 === n) {
    i.set(r, n = makeDict());
  }
  if (void 0 === a && !urql_exchange_graphcache_w) {
    delete n[t];
  } else {
    n[t] = a;
  }
};

var getNode = (e, r, t) => {
  var a;
  var i = !urql_exchange_graphcache_V && "read" === urql_exchange_graphcache_b && urql_exchange_graphcache_w && urql_exchange_graphcache_O.commutativeKeys.has(urql_exchange_graphcache_w);
  for (var n = 0, o = urql_exchange_graphcache_O.optimisticOrder.length; n < o; n++) {
    var s = urql_exchange_graphcache_O.optimisticOrder[n];
    var v = e.optimistic.get(s);
    i = i && s !== urql_exchange_graphcache_w;
    if (v && (!i || !urql_exchange_graphcache_O.commutativeKeys.has(s)) && (!urql_exchange_graphcache_V || "write" === urql_exchange_graphcache_b || urql_exchange_graphcache_O.commutativeKeys.has(s)) && void 0 !== (a = v.get(r)) && t in a) {
      return a[t];
    }
  }
  return void 0 !== (a = e.base.get(r)) ? a[t] : void 0;
};

var updateRCForLink = (e, r) => {
  if (Array.isArray(e)) {
    for (var t = 0, a = e.length; t < a; t++) {
      updateRCForLink(e[t], r);
    }
  } else if ("string" == typeof e) {
    ((e, r) => {
      var t = urql_exchange_graphcache_O.refCount.get(e) || 0;
      var a = t + r > 0 ? t + r : 0;
      urql_exchange_graphcache_O.refCount.set(e, a);
      if (!a) {
        urql_exchange_graphcache_O.gc.add(e);
      } else if (!t && a) {
        urql_exchange_graphcache_O.gc.delete(e);
      }
    })(e, r);
  }
};

var extractNodeFields = (e, r, t) => {
  if (void 0 !== t) {
    for (var a in t) {
      if (!r.has(a)) {
        e.push(fieldInfoOfKey(a));
        r.add(a);
      }
    }
  }
};

var extractNodeMapFields = (e, r, t, a) => {
  extractNodeFields(e, r, a.base.get(t));
  for (var i = 0, n = urql_exchange_graphcache_O.optimisticOrder.length; i < n; i++) {
    var o = a.optimistic.get(urql_exchange_graphcache_O.optimisticOrder[i]);
    if (void 0 !== o) {
      extractNodeFields(e, r, o.get(t));
    }
  }
};

var gc = () => {
  if (urql_exchange_graphcache_O.optimisticOrder.length) {
    return;
  }
  for (var e of urql_exchange_graphcache_O.gc.keys()) {
    urql_exchange_graphcache_O.gc.delete(e);
    if ((urql_exchange_graphcache_O.refCount.get(e) || 0) > 0) {
      continue;
    }
    urql_exchange_graphcache_O.refCount.delete(e);
    urql_exchange_graphcache_O.records.base.delete(e);
    var r = urql_exchange_graphcache_O.links.base.get(e);
    if (r) {
      urql_exchange_graphcache_O.links.base.delete(e);
      for (var t in r) {
        updateRCForLink(r[t], -1);
      }
    }
  }
};

var updateDependencies = (e, r) => {
  if ("__typename" !== r) {
    if (e !== urql_exchange_graphcache_O.queryRootKey) {
      urql_exchange_graphcache_D.add(e);
    } else if (void 0 !== r) {
      urql_exchange_graphcache_D.add(joinKeys(e, r));
    }
  }
};

var updatePersist = (e, r) => {
  if (!urql_exchange_graphcache_V && urql_exchange_graphcache_O.storage) {
    urql_exchange_graphcache_O.persist.add(((e, r) => `${e.replace(/\./g, "%2e")}.${r}`)(e, r));
  }
};

var readRecord = (e, r) => {
  updateDependencies(e, r);
  return getNode(urql_exchange_graphcache_O.records, e, r);
};

var readLink = (e, r) => {
  updateDependencies(e, r);
  return getNode(urql_exchange_graphcache_O.links, e, r);
};

var writeRecord = (e, r, t) => {
  updateDependencies(e, r);
  updatePersist(e, r);
  setNode(urql_exchange_graphcache_O.records, e, r, t);
};

var hasField = (e, r) => void 0 !== readRecord(e, r) || void 0 !== readLink(e, r);

var writeLink = (e, r, t) => {
  var a = urql_exchange_graphcache_w ? urql_exchange_graphcache_O.links.optimistic.get(urql_exchange_graphcache_w) : urql_exchange_graphcache_O.links.base;
  if (!urql_exchange_graphcache_w) {
    var i = a && a.get(e);
    updateRCForLink(i && i[r], -1);
    updateRCForLink(t, 1);
  }
  updateDependencies(e, r);
  updatePersist(e, r);
  setNode(urql_exchange_graphcache_O.links, e, r, t);
};

var reserveLayer = (e, r, t) => {
  var a = e.optimisticOrder.indexOf(r);
  if (a > -1) {
    e.optimisticOrder.splice(a, 1);
  }
  if (t) {
    e.deferredKeys.add(r);
    for (a = a > -1 ? a : 0; a < e.optimisticOrder.length && !e.deferredKeys.has(e.optimisticOrder[a]) && (!e.dirtyKeys.has(e.optimisticOrder[a]) || !e.commutativeKeys.has(e.optimisticOrder[a])); a++) {}
  } else {
    e.deferredKeys.delete(r);
    if (a > -1 && !e.commutativeKeys.has(r)) {
      clearLayer(e, r);
    }
    a = 0;
  }
  e.optimisticOrder.splice(a, 0, r);
  e.commutativeKeys.add(r);
};

var createLayer = (e, r) => {
  if (-1 === e.optimisticOrder.indexOf(r)) {
    e.optimisticOrder.unshift(r);
  }
  if (!e.dirtyKeys.has(r)) {
    e.dirtyKeys.add(r);
    e.links.optimistic.set(r, new Map);
    e.records.optimistic.set(r, new Map);
  }
};

var clearLayer = (e, r) => {
  if (e.dirtyKeys.has(r)) {
    e.dirtyKeys.delete(r);
    e.records.optimistic.delete(r);
    e.links.optimistic.delete(r);
    e.deferredKeys.delete(r);
  }
};

var deleteLayer = (e, r) => {
  var t = e.optimisticOrder.indexOf(r);
  if (t > -1) {
    e.optimisticOrder.splice(t, 1);
    e.commutativeKeys.delete(r);
  }
  clearLayer(e, r);
};

var squashLayer = e => {
  var r = urql_exchange_graphcache_D;
  urql_exchange_graphcache_D = new Set;
  urql_exchange_graphcache_b = "write";
  var t = urql_exchange_graphcache_O.links.optimistic.get(e);
  if (t) {
    for (var a of t.entries()) {
      var i = a[0];
      var n = a[1];
      for (var o in n) {
        writeLink(i, o, n[o]);
      }
    }
  }
  var s = urql_exchange_graphcache_O.records.optimistic.get(e);
  if (s) {
    for (var v of s.entries()) {
      var l = v[0];
      var d = v[1];
      for (var u in d) {
        writeRecord(l, u, d[u]);
      }
    }
  }
  urql_exchange_graphcache_D = r;
  deleteLayer(urql_exchange_graphcache_O, e);
};

var inspectFields = e => {
  var {links: r, records: t} = urql_exchange_graphcache_O;
  var a = [];
  var i = new Set;
  updateDependencies(e);
  extractNodeMapFields(a, i, e, r);
  extractNodeMapFields(a, i, e, t);
  return a;
};

var persistData = () => {
  if (urql_exchange_graphcache_O.storage) {
    urql_exchange_graphcache_V = !0;
    urql_exchange_graphcache_b = "read";
    var r = makeDict();
    for (var t of urql_exchange_graphcache_O.persist.keys()) {
      var {entityKey: a, fieldKey: i} = deserializeKeyInfo(t);
      var n = void 0;
      if (void 0 !== (n = readLink(a, i))) {
        r[t] = `:${stringifyVariables(n)}`;
      } else if (void 0 !== (n = readRecord(a, i))) {
        r[t] = stringifyVariables(n);
      } else {
        r[t] = void 0;
      }
    }
    urql_exchange_graphcache_V = !1;
    urql_exchange_graphcache_O.storage.writeData(r);
    urql_exchange_graphcache_O.persist.clear();
  }
};

var urql_exchange_graphcache_q = null;

var urql_exchange_graphcache_I = !1;

var getFieldError = e => e.__internal.path.length > 0 && e.__internal.errorMap ? e.__internal.errorMap[e.__internal.path.join(".")] : void 0;

var makeContext = (e, r, t, a, i, n) => {
  var o = {
    store: e,
    variables: r,
    fragments: t,
    parent: {
      __typename: a
    },
    parentTypeName: a,
    parentKey: i,
    parentFieldKey: "",
    fieldName: "",
    error: void 0,
    partial: !1,
    hasNext: !1,
    optimistic: urql_exchange_graphcache_V,
    __internal: {
      path: [],
      errorMap: void 0
    }
  };
  if (n && n.graphQLErrors) {
    for (var s = 0; s < n.graphQLErrors.length; s++) {
      var v = n.graphQLErrors[s];
      if (v.path && v.path.length) {
        if (!o.__internal.errorMap) {
          o.__internal.errorMap = Object.create(null);
        }
        o.__internal.errorMap[v.path.join(".")] = v;
      }
    }
  }
  return o;
};

var updateContext = (e, r, t, a, i, n) => {
  urql_exchange_graphcache_q = e;
  e.parent = r;
  e.parentTypeName = t;
  e.parentKey = a;
  e.parentFieldKey = i;
  e.fieldName = n;
  e.error = getFieldError(e);
};

var isFragmentHeuristicallyMatching = (e, r, t, a) => {
  if (!r) {
    return !1;
  }
  var i = getTypeCondition(e);
  if (!i || r === i) {
    return !0;
  }
   false && 0;
  return "write" === urql_exchange_graphcache_b || !getSelectionSet(e).some((e => {
    if (!isFieldNode(e)) {
      return !1;
    }
    var r = keyOfField(getName(e), getFieldArguments(e, a));
    return !hasField(t, r);
  }));
};

var makeSelectionIterator = (e, r, t, a, i) => {
  var n;
  var o = 0;
  return function next() {
    var s;
    while (n || o < a.length) {
      s = void 0;
      urql_exchange_graphcache_I = t;
      if (n) {
        if (s = n()) {
          return s;
        } else {
          n = void 0;
          if (false) {}
        }
      } else {
        var v = a[o++];
        if (!shouldInclude(v, i.variables)) {} else if (!isFieldNode(v)) {
          var l = !isInlineFragment(v) ? i.fragments[getName(v)] : v;
          if (l) {
            if (!l.typeCondition || (i.store.schema ? isInterfaceOfType(i.store.schema, l, e) : isFragmentHeuristicallyMatching(l, e, r, i.variables))) {
              if (false) {}
              n = makeSelectionIterator(e, r, t || isDeferred(v, i.variables), getSelectionSet(l), i);
            }
          }
        } else {
          return v;
        }
      }
    }
  };
};

var ensureData = e => null == e ? null : e;

var ensureLink = (e, r) => {
  if (null == r) {
    return r;
  } else if (Array.isArray(r)) {
    var t = new Array(r.length);
    for (var a = 0, i = t.length; a < i; a++) {
      t[a] = ensureLink(e, r[a]);
    }
    return t;
  }
  var n = e.keyOfEntity(r);
  if (false) {}
  return n;
};

var _query = (e, r, t, a) => {
  var i = getMainOperation(r.query);
  var n = e.rootFields[i.operation];
  var o = getSelectionSet(i);
  var s = makeContext(e, normalizeVariables(i, r.variables), getFragments(r.query), n, n, a);
  if (false) {}
  var v = n !== s.store.rootFields.query ? readRoot(s, n, o, t || makeData()) : readSelection(s, n, o, t || makeData());
  if (false) {}
  return {
    dependencies: urql_exchange_graphcache_D,
    partial: s.partial || !v,
    hasNext: s.hasNext,
    data: v || null
  };
};

var readRoot = (e, r, t, a) => {
  if ("string" != typeof (e.store.rootNames[r] ? r : a.__typename)) {
    return a;
  }
  var i = makeSelectionIterator(r, r, urql_exchange_graphcache_I, t, e);
  var n;
  var o = urql_exchange_graphcache_x;
  var s = makeData(a);
  while (n = i()) {
    var v = getFieldAlias(n);
    var l = a[v];
    e.__internal.path.push(v);
    var d = void 0;
    if (n.selectionSet && null !== l) {
      d = readRootField(e, getSelectionSet(n), ensureData(l));
    } else {
      d = l;
    }
    o = o || d !== l;
    if (void 0 !== d) {
      s[v] = d;
    }
    e.__internal.path.pop();
  }
  return o ? s : a;
};

var readRootField = (e, r, t) => {
  if (Array.isArray(t)) {
    var a = new Array(t.length);
    var i = urql_exchange_graphcache_x;
    for (var n = 0, o = t.length; n < o; n++) {
      e.__internal.path.push(n);
      a[n] = readRootField(e, r, t[n]);
      i = i || a[n] !== t[n];
      e.__internal.path.pop();
    }
    return i ? a : t;
  } else if (null === t) {
    return null;
  }
  var s = e.store.keyOfEntity(t);
  if (null !== s) {
    return readSelection(e, s, r, t) || null;
  } else {
    return readRoot(e, t.__typename, r, t);
  }
};

var readSelection = (e, r, t, a, i) => {
  var {store: n} = e;
  var o = r === n.rootFields.query;
  var s = i && n.keyOfEntity(i) || r;
  if (false) {}
  var v = !o ? readRecord(s, "__typename") || i && i.__typename : r;
  if ("string" != typeof v) {
    return;
  } else if (i && v !== i.__typename) {
     false && 0;
    return;
  }
  var l = n.resolvers[v];
  var d = makeSelectionIterator(v, s, urql_exchange_graphcache_I, t, e);
  var u = !1;
  var p = !1;
  var c = !1;
  var f = urql_exchange_graphcache_x;
  var y;
  var h = makeData(a);
  while (void 0 !== (y = d())) {
    var m = getName(y);
    var g = getFieldArguments(y, e.variables);
    var _ = getFieldAlias(y);
    var N = keyOfField(m, g);
    var k = joinKeys(s, N);
    var E = readRecord(s, N);
    var O = i ? i[m] : void 0;
    if (false) {}
    e.__internal.path.push(_);
    var w = void 0;
    if ("__typename" === m) {
      w = v;
    } else if (void 0 !== O && void 0 === y.selectionSet) {
      w = O;
    } else if ("read" === urql_exchange_graphcache_b && l && l[m]) {
      updateContext(e, h, v, s, k, m);
      if (void 0 !== E) {
        h[_] = E;
      }
      w = l[m](h, g || {}, n, e);
      if (y.selectionSet) {
        w = resolveResolverResult(e, v, m, k, getSelectionSet(y), void 0 !== h[_] ? h[_] : a[_], w, ownsData(a));
      }
      if (n.schema && null === w && !isFieldNullable(n.schema, v, m)) {
        return;
      }
    } else if (!y.selectionSet) {
      w = E;
    } else if (void 0 !== O) {
      w = resolveResolverResult(e, v, m, k, getSelectionSet(y), void 0 !== h[_] ? h[_] : a[_], O, ownsData(a));
    } else {
      var D = readLink(s, N);
      if (void 0 !== D) {
        w = resolveLink(e, D, v, m, getSelectionSet(y), void 0 !== h[_] ? h[_] : a[_], ownsData(a));
      } else if ("object" == typeof E && null !== E) {
        w = E;
      }
    }
    if (void 0 === w && urql_exchange_graphcache_I) {
      c = !0;
    } else if (void 0 === w && (n.schema && isFieldNullable(n.schema, v, m) || getFieldError(e))) {
      p = !0;
      w = null;
    } else if (void 0 === w) {
      e.__internal.path.pop();
      return;
    } else {
      u = u || "__typename" !== m;
    }
    e.__internal.path.pop();
    f = f || w !== a[_];
    if (void 0 !== w) {
      h[_] = w;
    }
  }
  e.partial = e.partial || p;
  e.hasNext = e.hasNext || c;
  return o && p && !u ? void 0 : f ? h : a;
};

var resolveResolverResult = (e, r, t, a, i, n, o, s) => {
  if (Array.isArray(o)) {
    var {store: v} = e;
    var l = v.schema ? isListNullable(v.schema, r, t) : !1;
    var d = makeData(n, !0);
    var u = urql_exchange_graphcache_x || !Array.isArray(n) || o.length !== n.length;
    for (var p = 0, c = o.length; p < c; p++) {
      e.__internal.path.push(p);
      var f = resolveResolverResult(e, r, t, joinKeys(a, `${p}`), i, null != n ? n[p] : void 0, o[p], s);
      e.__internal.path.pop();
      if (void 0 === f && !l) {
        return;
      } else {
        e.partial = e.partial || void 0 === f && l;
        d[p] = null != f ? f : null;
        u = u || d[p] !== n[p];
      }
    }
    return u ? d : n;
  } else if (null == o) {
    return o;
  } else if (!s && null === n) {
    return null;
  } else if (isDataOrKey(o)) {
    var y = n || makeData(n);
    return "string" == typeof o ? readSelection(e, o, i, y) : readSelection(e, a, i, y, o);
  } else {
     false && 0;
    return;
  }
};

var resolveLink = (e, r, t, a, i, n, o) => {
  if (Array.isArray(r)) {
    var {store: s} = e;
    var v = s.schema ? isListNullable(s.schema, t, a) : !1;
    var l = makeData(n, !0);
    var d = urql_exchange_graphcache_x || !Array.isArray(n) || r.length !== n.length;
    for (var u = 0, p = r.length; u < p; u++) {
      e.__internal.path.push(u);
      var c = resolveLink(e, r[u], t, a, i, null != n ? n[u] : void 0, o);
      e.__internal.path.pop();
      if (void 0 === c && !v) {
        return;
      } else {
        e.partial = e.partial || void 0 === c && v;
        l[u] = c || null;
        d = d || l[u] !== n[u];
      }
    }
    return d ? l : n;
  } else if (null === r || null === n && o) {
    return null;
  }
  return readSelection(e, r, i, n || makeData(n));
};

var isDataOrKey = e => "string" == typeof e || "object" == typeof e && "string" == typeof e.__typename;

var _write = (e, r, t, a) => {
  if (false) {}
  var i = getMainOperation(r.query);
  var n = {
    data: t || makeData(),
    dependencies: urql_exchange_graphcache_D
  };
  var o = e.rootFields[i.operation];
  var s = makeContext(e, normalizeVariables(i, r.variables), getFragments(r.query), o, o, a);
  if (false) {}
  writeSelection(s, o, getSelectionSet(i), n.data);
  if (false) {}
  return n;
};

var writeSelection = (e, r, t, a) => {
  var i = e.store.rootNames[r] || "query";
  var n = !!e.store.rootNames[r];
  var o = n ? r : a.__typename;
  if (!o && r && e.optimistic) {
    o = readRecord(r, "__typename");
  }
  if (!o) {
     false && 0;
    return;
  } else if (!n && r) {
    writeRecord(r, "__typename", o);
  }
  var s = e.store.updates[o];
  var v = makeSelectionIterator(o, r || o, urql_exchange_graphcache_I, t, e);
  var l;
  while (l = v()) {
    var d = getName(l);
    var u = getFieldArguments(l, e.variables);
    var p = keyOfField(d, u);
    var c = getFieldAlias(l);
    var f = a[e.optimistic ? d : c];
    if ("__typename" === d || void 0 === f && (urql_exchange_graphcache_I || e.optimistic && "query" === i)) {
      continue;
    }
    if (false) {}
    e.__internal.path.push(c);
    var y = void 0;
    if (e.optimistic && "mutation" === i) {
      if (!(y = e.store.optimisticMutations[d])) {
        continue;
      }
    } else if (e.optimistic && "function" == typeof f) {
      y = f;
    }
    if (y) {
      updateContext(e, a, o, r || o, p, d);
      f = ensureData(y(u || {}, e.store, e));
    }
    if (void 0 === f) {
      if (false) {}
      continue;
    }
    if (l.selectionSet) {
      if (r && "query" === i) {
        var h = joinKeys(r, p);
        var m = writeField(e, getSelectionSet(l), ensureData(f), h, e.optimistic ? readLink(r || o, p) : void 0);
        writeLink(r || o, p, m);
      } else {
        writeField(e, getSelectionSet(l), ensureData(f));
      }
    } else if (r && "query" === i) {
      writeRecord(r || o, p, null !== f || !getFieldError(e) ? f : void 0);
    }
    var g = s && s[d];
    if (g) {
      updateContext(e, a, o, r || o, joinKeys(o, p), d);
      a[d] = f;
      g(a, u || {}, e.store, e);
    }
    e.__internal.path.pop();
  }
};

var urql_exchange_graphcache_T = /^__|PageInfo|(Connection|Edge)$/;

var writeField = (e, r, t, a, i) => {
  if (Array.isArray(t)) {
    var n = new Array(t.length);
    for (var o = 0, s = t.length; o < s; o++) {
      e.__internal.path.push(o);
      var v = a ? joinKeys(a, `${o}`) : void 0;
      var l = writeField(e, r, t[o], v, null != i ? i[o] : void 0);
      n[o] = l;
      e.__internal.path.pop();
    }
    return n;
  } else if (null === t) {
    return getFieldError(e) ? void 0 : null;
  }
  var d = e.store.keyOfEntity(t) || ("string" == typeof i ? i : null);
  var u = t.__typename;
  if (false) {}
  var p = d || a;
  writeSelection(e, p, r, t);
  return p || null;
};

class Store {
  constructor(e) {
    if (!e) {
      e = {};
    }
    this.resolvers = e.resolvers || {};
    this.optimisticMutations = e.optimistic || {};
    this.keys = e.keys || {};
    this.globalIDs = Array.isArray(e.globalIDs) ? new Set(e.globalIDs) : !!e.globalIDs;
    var r = "Query";
    var t = "Mutation";
    var a = "Subscription";
    if (e.schema) {
      var i = (({__schema: e}) => {
        var r = new Map;
        var buildNameMap = e => {
          var r;
          return () => {
            if (!r) {
              r = {};
              for (var t = 0; t < e.length; t++) {
                r[e[t].name] = e[t];
              }
            }
            return r;
          };
        };
        var buildType = e => {
          switch (e.kind) {
           case "OBJECT":
           case "INTERFACE":
            return {
              name: e.name,
              kind: e.kind,
              interfaces: buildNameMap(e.interfaces || []),
              fields: buildNameMap(e.fields.map((e => ({
                name: e.name,
                type: e.type,
                args: buildNameMap(e.args)
              }))))
            };

           case "UNION":
            return {
              name: e.name,
              kind: e.kind,
              types: buildNameMap(e.possibleTypes || [])
            };
          }
        };
        var t = {
          query: e.queryType ? e.queryType.name : null,
          mutation: e.mutationType ? e.mutationType.name : null,
          subscription: e.subscriptionType ? e.subscriptionType.name : null,
          types: void 0,
          isSubType(e, t) {
            var a = r.get(e);
            var i = r.get(t);
            if (!a || !i) {
              return !1;
            } else if ("UNION" === a.kind) {
              return !!a.types()[t];
            } else if ("OBJECT" !== a.kind && "OBJECT" === i.kind) {
              return !!i.interfaces()[e];
            } else {
              return e === t;
            }
          }
        };
        if (e.types) {
          t.types = r;
          for (var a = 0; a < e.types.length; a++) {
            var i = e.types[a];
            if (i && i.name) {
              var n = buildType(i);
              if (n) {
                r.set(i.name, n);
              }
            }
          }
        }
        return t;
      })(e.schema);
      r = i.query || r;
      t = i.mutation || t;
      a = i.subscription || a;
      if (i.types) {
        this.schema = i;
      }
    }
    this.updates = e.updates || {};
    this.rootFields = {
      query: r,
      mutation: t,
      subscription: a
    };
    this.rootNames = {
      [r]: "query",
      [t]: "mutation",
      [a]: "subscription"
    };
    this.data = (n = r, {
      hydrating: !1,
      defer: !1,
      gc: new Set,
      persist: new Set,
      queryRootKey: n,
      refCount: new Map,
      links: {
        optimistic: new Map,
        base: new Map
      },
      records: {
        optimistic: new Map,
        base: new Map
      },
      deferredKeys: new Set,
      commutativeKeys: new Set,
      dirtyKeys: new Set,
      optimisticOrder: [],
      storage: null
    });
    var n;
    if (this.schema && "production" !== "production") {}
  }
  keyOfField(e, r) {
    return keyOfField(e, r);
  }
  keyOfEntity(e) {
    if (urql_exchange_graphcache_q && e === urql_exchange_graphcache_q.parent) {
      return urql_exchange_graphcache_q.parentKey;
    } else if (null == e || "string" == typeof e) {
      return e || null;
    } else if (!e.__typename) {
      return null;
    } else if (this.rootNames[e.__typename]) {
      return e.__typename;
    }
    var r = null;
    if (this.keys[e.__typename]) {
      r = this.keys[e.__typename](e) || null;
    } else if (null != e.id) {
      r = `${e.id}`;
    } else if (null != e._id) {
      r = `${e._id}`;
    }
    var t = e.__typename;
    return !0 === this.globalIDs || this.globalIDs && this.globalIDs.has(t) || !r ? r : `${t}:${r}`;
  }
  resolve(e, r, t) {
    var a = keyOfField(r, t);
    var i = this.keyOfEntity(e);
    if (!i) {
      return null;
    }
    var n = readRecord(i, a);
    if (void 0 !== n) {
      return n;
    }
    return readLink(i, a) || null;
  }
  resolveFieldByKey(e, r, t) {
    return this.resolve(e, r, t);
  }
  invalidate(e, r, t) {
    var a = this.keyOfEntity(e);
    invariant(a,  false ? 0 : "", 19);
    ((e, r, t) => {
      var a = r ? [ {
        fieldKey: keyOfField(r, t)
      } ] : inspectFields(e);
      for (var i = 0, n = a.length; i < n; i++) {
        var {fieldKey: o} = a[i];
        if (void 0 !== readLink(e, o)) {
          writeLink(e, o, void 0);
        } else {
          writeRecord(e, o, void 0);
        }
      }
    })(a, r, t);
  }
  inspectFields(e) {
    var r = this.keyOfEntity(e);
    return r ? inspectFields(r) : [];
  }
  updateQuery(e, a) {
    var i = createRequest(e.query, e.variables);
    i.query = formatDocument(i.query);
    var n = a(this.readQuery(i));
    if (null !== n) {
      _write(this, i, n, void 0);
    }
  }
  readQuery(e) {
    var a = createRequest(e.query, e.variables);
    a.query = formatDocument(a.query);
    return _query(this, a, void 0, void 0).data;
  }
  readFragment(e, r, a, i) {
    return ((e, r, t, a, i) => {
      var n = getFragments(r);
      var o;
      if (i) {
        if (!(o = n[i])) {
           false && 0;
          return null;
        }
      } else if (!(o = n[Object.keys(n)[0]])) {
         false && 0;
        return null;
      }
      var s = getFragmentTypeName(o);
      if ("string" != typeof t && !t.__typename) {
        t.__typename = s;
      }
      var v = e.keyOfEntity(t);
      if (!v) {
         false && 0;
        return null;
      }
      if (false) {}
      var l = makeContext(e, a || {}, n, s, v, void 0);
      var d = readSelection(l, v, getSelectionSet(o), makeData()) || null;
      if (false) {}
      return d;
    })(this, formatDocument(e), r, a, i);
  }
  writeFragment(e, r, a, i) {
    ((e, r, t, a, i) => {
      var n = getFragments(r);
      var o;
      if (i) {
        if (!(o = n[i])) {
           false && 0;
          return null;
        }
      } else if (!(o = n[Object.keys(n)[0]])) {
         false && 0;
        return null;
      }
      var s = getFragmentTypeName(o);
      var v = {
        __typename: s,
        ...t
      };
      var l = e.keyOfEntity(v);
      if (!l) {
        return  false ? 0 : void 0;
      }
      if (false) {}
      var d = makeContext(e, a || {}, n, s, l, void 0);
      writeSelection(d, l, getSelectionSet(o), v);
      if (false) {}
    })(this, formatDocument(e), r, a, i);
  }
  link(e, r, t, a) {
    var i = void 0 !== a ? t : null;
    var n = void 0 !== a ? a : t;
    var o = ensureLink(this, e);
    if ("string" == typeof o) {
      writeLink(o, keyOfField(r, i), ensureLink(this, n));
    }
  }
}

var urql_exchange_graphcache_addMetadata = (e, r) => a(e.kind, e, {
  ...e.context,
  meta: {
    ...e.context.meta,
    ...r
  }
});

var toRequestPolicy = (e, r) => makeOperation(e.kind, e, {
  ...e.context,
  requestPolicy: r
});

var urql_exchange_graphcache_cacheExchange = e => ({forward: r, client: i, dispatchDebug: n}) => {
  var o = new Store(e);
  if (e && e.storage) {
    o.data.hydrating = !0;
    e.storage.readData().then((r => {
      ((e, r, t) => {
        initDataState("write", e, null);
        for (var a in t) {
          var i = t[a];
          if (void 0 !== i) {
            var {entityKey: n, fieldKey: o} = deserializeKeyInfo(a);
            if (":" === i[0]) {
              if (void 0 === readLink(n, o)) {
                writeLink(n, o, JSON.parse(i.slice(1)));
              }
            } else if (void 0 === readRecord(n, o)) {
              writeRecord(n, o, JSON.parse(i));
            }
          }
        }
        e.storage = r;
        e.hydrating = !1;
        clearDataState();
      })(o.data, e.storage, r);
    }));
  }
  var f = new Map;
  var y = [];
  var h = new Map;
  var m = new Map;
  var g = new Set;
  var _ = new Set;
  var N = new Map;
  var k = new Set;
  var E = new Set;
  var isBlockedByOptimisticUpdate = e => {
    for (var r of e.values()) {
      if (g.has(r)) {
        return !0;
      }
    }
    return !1;
  };
  var collectPendingOperations = (e, r) => {
    if (r) {
      for (var t of r.values()) {
        var a = N.get(t);
        if (a) {
          for (var i of a.values()) {
            e.add(i);
          }
        }
      }
    }
  };
  var executePendingOperations = (e, r, t) => {
    for (var a of r.values()) {
      if (a !== e.key) {
        var n = h.get(a);
        if (n) {
          if ("query" === e.kind) {
            E.add(a);
          }
          var o = "cache-first";
          if (_.has(a)) {
            _.delete(a);
            o = "cache-and-network";
          }
          i.reexecuteOperation(toRequestPolicy(n, o));
        }
      }
    }
    if (!t) {
      var s = k;
      if ("query" === e.kind) {
        (k = E).add(e.key);
      }
      (E = s).clear();
    }
  };
  var prepareForwardedOperation = e => {
    if ("query" === e.kind) {
      reserveLayer(o.data, e.key);
      h.set(e.key, e);
    } else if ("teardown" === e.kind) {
      h.delete(e.key);
      m.delete(e.key);
      k.delete(e.key);
      noopDataState(o.data, e.key);
    } else if ("mutation" === e.kind && "network-only" !== e.context.requestPolicy) {
      h.set(e.key, e);
      initDataState("write", o.data, e.key, !0, !1);
      var {dependencies: r} = _write(o, e, void 0, void 0);
      clearDataState();
      if (r.size) {
        for (var i of r.values()) {
          g.add(i);
        }
        f.set(e.key, r);
        var n = new Set;
        collectPendingOperations(n, r);
        executePendingOperations(e, n, !0);
      }
    }
    return makeOperation(e.kind, {
      key: e.key,
      query: formatDocument(e.query),
      variables: e.variables ? filterVariables(getMainOperation(e.query), e.variables) : e.variables
    }, e.context);
  };
  var updateDependencies = (e, r) => {
    for (var t of r.values()) {
      var a = N.get(t);
      if (!a) {
        N.set(t, a = new Set);
      }
      a.add(e.key);
    }
  };
  var operationResultFromCache = e => {
    initDataState("read", o.data, void 0, !1, !1);
    var r = _query(o, e, m.get(e.key), void 0);
    clearDataState();
    var t = r.data ? !r.partial && !r.hasNext ? "hit" : "partial" : "miss";
    m.set(e.key, r.data);
    h.set(e.key, e);
    updateDependencies(e, r.dependencies);
    return {
      outcome: t,
      operation: e,
      data: r.data,
      dependencies: r.dependencies,
      hasNext: r.hasNext
    };
  };
  var updateCacheWithResult = (e, r) => {
    var t = h.get(e.operation.key) || e.operation;
    if ("mutation" === t.kind) {
      var a = f.get(t.key);
      collectPendingOperations(r, a);
      f.delete(t.key);
    }
    if ("subscription" === t.kind || e.hasNext) {
      reserveLayer(o.data, t.key, !0);
    }
    var i;
    var n = e.data;
    if (n) {
      initDataState("write", o.data, t.key, !1, !1);
      var s = _write(o, t, n, e.error).dependencies;
      clearDataState();
      collectPendingOperations(r, s);
      var v = "query" === t.kind ? m.get(t.key) : null;
      initDataState("read", o.data, t.key, !1, v !== n);
      var l = _query(o, t, v || n, e.error);
      clearDataState();
      n = l.data;
      if ("query" === t.kind) {
        collectPendingOperations(r, i = l.dependencies);
        m.set(t.key, n);
      }
    } else {
      noopDataState(o.data, t.key);
    }
    if (i) {
      updateDependencies(e.operation, i);
    }
    return {
      operation: t,
      data: n,
      error: e.error,
      extensions: e.extensions,
      hasNext: e.hasNext,
      stale: e.stale
    };
  };
  return e => {
    var t = share(wonka_map(operationResultFromCache)(filter((e => "query" === e.kind && "network-only" !== e.context.requestPolicy))(e)));
    var a = filter((e => "query" !== e.kind || "network-only" === e.context.requestPolicy))(e);
    var m = wonka_map((e => {
       false && 0;
      return  false ? 0 : e.operation;
    }))(filter((e => "miss" === e.outcome && "cache-only" !== e.operation.context.requestPolicy && !isBlockedByOptimisticUpdate(e.dependencies) && !k.has(e.operation.key)))(t));
    var N = wonka_map((e => {
      var {requestPolicy: r} = e.operation.context;
      var t = "cache-only" !== r && (e.hasNext || "cache-and-network" === r || "cache-first" === r && "partial" === e.outcome && !k.has(e.operation.key));
      var a = {
        operation:  false ? 0 : e.operation,
        data: e.data,
        error: e.error,
        extensions: e.extensions,
        stale: t && !e.hasNext,
        hasNext: t && e.hasNext
      };
      if (!t) {} else if (!isBlockedByOptimisticUpdate(e.dependencies)) {
        i.reexecuteOperation(toRequestPolicy(h.get(e.operation.key) || e.operation, "network-only"));
      } else if ("cache-and-network" === r) {
        _.add(e.operation.key);
      }
       false && 0;
      return a;
    }))(filter((e => "miss" !== e.outcome || "cache-only" === e.operation.context.requestPolicy))(t));
    var E = r(wonka_map(prepareForwardedOperation)(wonka_merge([ a, m ])));
    var O = wonka_map((e => {
      var r = new Set;
      var t = updateCacheWithResult(e, r);
      executePendingOperations(e.operation, r, !1);
      return t;
    }))(filter((e => !f.has(e.operation.key)))(E));
    var w = mergeMap((e => {
      if (y.push(e) < f.size) {
        return empty;
      }
      for (var r = 0; r < y.length; r++) {
        reserveLayer(o.data, y[r].operation.key);
      }
      g.clear();
      var t = [];
      var a = new Set;
      var i;
      while (i = y.shift()) {
        t.push(updateCacheWithResult(i, a));
      }
      executePendingOperations(e.operation, a, !1);
      return wonka_r(t);
    }))(filter((e => f.has(e.operation.key)))(E));
    return wonka_merge([ O, w, N ]);
  };
};

var offlineExchange = e => t => {
  var {storage: n} = e;
  var o = e.isOfflineError || (e => e && e.networkError && !e.response && ("undefined" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\s?error/i.test(e.networkError.message)));
  if (n && n.onOnline && n.readMetadata && n.writeMetadata) {
    var {forward: v, client: u, dispatchDebug: p} = t;
    var {source: c, next: h} = f();
    var m = e.optimistic || {};
    var g = [];
    var _ = !1;
    var N = !1;
    var updateMetadata = () => {
      if (_) {
        var e = [];
        for (var r = 0; r < g.length; r++) {
          var t = g[r];
          if ("mutation" === t.kind) {
            e.push({
              query: i(t.query),
              variables: t.variables,
              extensions: t.extensions
            });
          }
        }
        n.writeMetadata(e);
      }
    };
    var flushQueue = () => {
      if (!N) {
        N = !0;
        var e = new Set;
        for (var r = 0; r < g.length; r++) {
          var t = g[r];
          if ("mutation" === t.kind || !e.has(t.key)) {
            if ("subscription" !== t.kind) {
              h(a("teardown", t));
            }
            e.add(t.key);
            h(toRequestPolicy(t, "cache-first"));
          }
        }
        g.length = 0;
        N = !1;
        updateMetadata();
      }
    };
    var k = urql_exchange_graphcache_cacheExchange({
      ...e,
      storage: {
        ...n,
        readData() {
          var e = n.readData();
          return {
            async then(t) {
              var a = await n.readMetadata();
              for (var i = 0; a && i < a.length; i++) {
                g.push(u.createRequestOperation("mutation", r(a[i].query, a[i].variables), a[i].extensions));
              }
              t(await e);
              n.onOnline(flushQueue);
              _ = !0;
              flushQueue();
            }
          };
        }
      }
    })({
      client: u,
      dispatchDebug: p,
      forward: e => s(l((e => {
        if (_ && "mutation" === e.operation.kind && o(e.error, e) && ((e, r) => {
          var t = r.variables || {};
          var a = getFragments(r.query);
          var i = [ ...getSelectionSet(getMainOperation(r.query)) ];
          var n;
          while (n = i.pop()) {
            if (!shouldInclude(n, t)) {
              continue;
            } else if (!isFieldNode(n)) {
              var o = !isInlineFragment(n) ? a[getName(n)] : n;
              if (o) {
                i.push(...getSelectionSet(o));
              }
            } else if (e[getName(n)]) {
              return !0;
            }
          }
          return !1;
        })(m, e.operation)) {
          g.push(e.operation);
          updateMetadata();
          return !1;
        }
        return !0;
      }))(v(e)))
    });
    return e => {
      var r = d([ c, y((e => {
        if ("query" === e.kind && !_) {
          g.push(e);
        } else if ("teardown" === e.kind) {
          for (var r = g.length - 1; r >= 0; r--) {
            if (g[r].key === e.key) {
              g.splice(r, 1);
            }
          }
        }
      }))(e) ]);
      return l((e => {
        if ("query" === e.operation.kind && o(e.error, e)) {
          h(toRequestPolicy(e.operation, "cache-only"));
          g.push(e.operation);
          return !1;
        }
        return !0;
      }))(k(r));
    };
  }
  return urql_exchange_graphcache_cacheExchange(e)(t);
};


//# sourceMappingURL=urql-exchange-graphcache.mjs.map

;// CONCATENATED MODULE: ../node_modules/@urql/exchange-auth/dist/urql-exchange-auth.mjs




var addAuthAttemptToOperation = (t, e) => makeOperation(t.kind, t, {
  ...t.context,
  authAttempt: e
});

function authExchange(s) {
  return ({client: f, forward: d}) => {
    var p = new Set;
    var l = makeSubject();
    var x = makeSubject();
    var A = new Map;
    function flushQueue() {
      v = void 0;
      var t = A;
      A = new Map;
      t.forEach(l.next);
    }
    function errorQueue(t) {
      v = void 0;
      var e = A;
      A = new Map;
      e.forEach((e => {
        x.next(makeErrorResult(e, t));
      }));
    }
    var v;
    var m = null;
    return t => {
      v = Promise.resolve().then((() => s({
        mutate(t, a, u) {
          var c = f.createRequestOperation("mutation", createRequest(t, a), u);
          return toPromise(take(1)(filter((t => t.operation.key === c.key && c.context._instance === t.operation.context._instance))(onStart((() => {
            var t = addAuthToOperation(c);
            p.add(t.context._instance);
            l.next(t);
          }))(k))));
        },
        appendHeaders(t, e) {
          var r = "function" == typeof t.context.fetchOptions ? t.context.fetchOptions() : t.context.fetchOptions || {};
          return makeOperation(t.kind, t, {
            ...t.context,
            fetchOptions: {
              ...r,
              headers: {
                ...r.headers,
                ...e
              }
            }
          });
        }
      }))).then((t => {
        if (t) {
          m = t;
        }
        flushQueue();
      }));
      function refreshAuth(t) {
        A.set(t.key, addAuthAttemptToOperation(t, !0));
        if (m && !v) {
          v = m.refreshAuth().then(flushQueue).catch(errorQueue);
        }
      }
      function addAuthToOperation(t) {
        return m ? m.addAuthToOperation(t) : t;
      }
      var h = filter(Boolean)(wonka_map((t => {
        if ("teardown" === t.kind) {
          A.delete(t.key);
          return t;
        } else if (t.context._instance && p.has(t.context._instance)) {
          return t;
        } else if (t.context.authAttempt) {
          return addAuthToOperation(t);
        } else if (v) {
          if (!A.has(t.key)) {
            A.set(t.key, addAuthAttemptToOperation(t, !1));
          }
          return null;
        } else if (function willAuthError(t) {
          return !t.context.authAttempt && m && m.willAuthError && m.willAuthError(t);
        }(t)) {
          refreshAuth(t);
          return null;
        }
        return addAuthToOperation(addAuthAttemptToOperation(t, !1));
      }))(wonka_merge([ l.source, t ])));
      var k = d(h);
      return wonka_merge([ x.source, filter((t => {
        if (!p.has(t.operation.context._instance) && t.error && function didAuthError(t) {
          return m && m.didAuthError && m.didAuthError(t.error, t.operation);
        }(t) && !t.operation.context.authAttempt) {
          refreshAuth(t.operation);
          return !1;
        }
        if (p.has(t.operation.context._instance)) {
          p.delete(t.operation.context._instance);
        }
        return !0;
      }))(k) ]);
    };
  };
}


//# sourceMappingURL=urql-exchange-auth.mjs.map

;// CONCATENATED MODULE: ../node_modules/@urql/exchange-persisted/dist/urql-exchange-persisted.mjs




var urql_exchange_persisted_u = "undefined" != typeof window ? window.crypto : "undefined" != typeof self ? self.crypto : null;

var urql_exchange_persisted_p;

var hash = async e => {
  if (urql_exchange_persisted_u && urql_exchange_persisted_u.subtle) {
    var r = await urql_exchange_persisted_u.subtle.digest({
      name: "SHA-256"
    }, (new TextEncoder).encode(e));
    return new Uint8Array(r).reduce(((e, r) => e + r.toString(16).padStart(2, "0")), "");
  } else if (await (async () => {
    if (!urql_exchange_persisted_p) {
      try {
        urql_exchange_persisted_p = new Function("require", 'return require("crypto")')(require);
      } catch (e) {
        try {
          urql_exchange_persisted_p = new Function('return import("crypto")')();
        } catch (e) {}
      }
    }
    return urql_exchange_persisted_p;
  })()) {
    return (await urql_exchange_persisted_p).createHash("sha256").update(e).digest("hex");
  }
  if (false) {}
  return "";
};

var persistedExchange = u => ({forward: p}) => {
  if (!u) {
    u = {};
  }
  var d = !!u.preferGetForPersistedQueries;
  var c = !!u.enforcePersistedQueries;
  var f = u.generateHash || hash;
  var y = !!u.enableForMutation;
  var l = !0;
  var operationFilter = e => l && !e.context.persistAttempt && (y && "mutation" === e.kind || "query" === e.kind);
  return u => {
    var y = makeSubject();
    var v = filter((e => !operationFilter(e)))(u);
    var x = mergeMap(fromPromise)(wonka_map((async e => {
      var r = makeOperation(e.kind, e, {
        ...e.context,
        persistAttempt: !0
      });
      var t = await f(stringifyDocument(e.query), e.query);
      if (t) {
        r.extensions = {
          ...r.extensions,
          persistedQuery: {
            version: 1,
            sha256Hash: t
          }
        };
        if ("query" === r.kind && d) {
          r.context.preferGetMethod = "force";
        }
      }
      return r;
    }))(filter(operationFilter)(u)));
    return filter((e => !!e))(wonka_map((e => {
      if (!c && e.operation.extensions && e.operation.extensions.persistedQuery) {
        if (e.error && e.error.graphQLErrors.some((e => "PersistedQueryNotSupported" === e.message))) {
          l = !1;
          var r = makeOperation(e.operation.kind, e.operation);
          if (r.extensions) {
            delete r.extensions.persistedQuery;
          }
          y.next(r);
          return null;
        } else if (e.error && (e => e.graphQLErrors.some((e => "PersistedQueryNotFound" === e.message)))(e.error)) {
          var t = makeOperation(e.operation.kind, e.operation);
          t.extensions = {
            ...t.extensions,
            persistedQuery: {
              ...(t.extensions || {}).persistedQuery,
              miss: !0
            }
          };
          y.next(t);
          return null;
        }
      }
      return e;
    }))(p(wonka_merge([ x, v, y.source ]))));
  };
};


//# sourceMappingURL=urql-exchange-persisted.mjs.map

// EXTERNAL MODULE: ../node_modules/fast-deep-equal/index.js
var fast_deep_equal = __webpack_require__(39954);
var fast_deep_equal_default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/icon/icons/plusIcon/dist/keystar-ui-icon-icons-plusIcon.esm.js
var keystar_ui_icon_icons_plusIcon_esm = __webpack_require__(28273);
;// CONCATENATED MODULE: ../node_modules/@keystar/ui/icon/icons/refreshCwIcon/dist/keystar-ui-icon-icons-refreshCwIcon.esm.js


const refreshCwIcon = /*#__PURE__*/(0,jsx_runtime_.jsxs)("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 24 24",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  width: "1em",
  height: "1em",
  children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M21 3v5h-5M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
  }), /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
    d: "M8 16H3v5"
  })]
});



// EXTERNAL MODULE: ../node_modules/cookie/index.js
var cookie = __webpack_require__(496);
// EXTERNAL MODULE: ../node_modules/zod/lib/index.mjs
var lib = __webpack_require__(52072);
// EXTERNAL MODULE: external "crypto"
var external_crypto_ = __webpack_require__(6113);
// EXTERNAL MODULE: ../node_modules/emery/assertions/dist/emery-assertions.cjs.js
var emery_assertions_cjs = __webpack_require__(86522);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/index-9164e4cf.node.esm.js
var index_9164e4cf_node_esm = __webpack_require__(30422);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-a02dcde7.node.esm.js
var ui_a02dcde7_node_esm = __webpack_require__(67956);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/utils-6a6b1fd6.node.esm.js
var utils_6a6b1fd6_node_esm = __webpack_require__(48727);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/languages-7e3ec82d.node.esm.js
var languages_7e3ec82d_node_esm = __webpack_require__(99634);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/prism-3a8814e8.node.esm.js
var prism_3a8814e8_node_esm = __webpack_require__(46105);
// EXTERNAL MODULE: ../node_modules/@keystatic/core/dist/ui-e5ca793d.node.esm.js
var ui_e5ca793d_node_esm = __webpack_require__(18061);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/drag-and-drop/dist/keystar-ui-drag-and-drop.esm.js + 2 modules
var keystar_ui_drag_and_drop_esm = __webpack_require__(63138);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/list-view/dist/keystar-ui-list-view.esm.js + 2 modules
var keystar_ui_list_view_esm = __webpack_require__(6027);
// EXTERNAL MODULE: ../node_modules/@keystar/ui/tooltip/dist/keystar-ui-tooltip.esm.js + 2 modules
var keystar_ui_tooltip_esm = __webpack_require__(74404);
;// CONCATENATED MODULE: ../node_modules/@keystatic/core/ui/dist/keystatic-core-ui.node.esm.js

















































































































// the collator enables language-sensitive string comparison
const collator = new Intl.Collator(undefined, {
  sensitivity: 'base'
});

/**
 * Creates a comparison function that should be provided to the `sort()` method
 * of your data array.
 */
function sortByDescriptor(sortDescriptor) {
  const key = sortDescriptor.column;
  (0,emery_cjs.assert)(key != null, '`sortDescriptor.column` is required');
  return (a, b) => {
    const valueA = a[key];
    const valueB = b[key];
    const modifier = sortDescriptor.direction === 'ascending' ? 1 : -1;

    // always push `null` and `undefined` to the bottom
    if (valueA == null) return 1;
    if (valueB == null) return -1;

    // the collator is only appropriate for strings, it fails in subtle
    // ways for floats, dates, etc.
    if (typeof valueA === 'string' && typeof valueB === 'string') {
      return collator.compare(valueA, valueB) * modifier;
    }
    return compare(valueA, valueB) * modifier;
  };
}

/** Default comparison for non-string values */
function compare(a, b) {
  if (a < b) return -1;
  if (a > b) return 1;
  return 0;
}

const SIDE_PANEL_ID = 'keystatic-side-panel';
const MAIN_PANEL_ID = 'keystatic-main-panel';

function ZapLogo() {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("svg", {
    width: "24",
    height: "24",
    viewBox: "0 0 24 24",
    fill: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutral,
    className: (0,keystar_ui_style_esm/* css */.iv)({
      flexShrink: 0,
      [keystar_ui_style_esm/* breakpointQueries */.l0.below.tablet]: {
        height: keystar_ui_style_esm/* tokenSchema */.iK.size.icon.regular,
        width: keystar_ui_style_esm/* tokenSchema */.iK.size.icon.regular
      }
    }),
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)("path", {
      d: "M13.3982 1.08274C13.8054 1.25951 14.0473 1.68358 13.9923 2.12407L13.1328 9.00003H21C21.388 9.00003 21.741 9.22449 21.9056 9.57588C22.0702 9.92726 22.0166 10.3421 21.7682 10.6402L11.7682 22.6402C11.484 22.9812 11.009 23.0941 10.6018 22.9173C10.1946 22.7405 9.95267 22.3165 10.0077 21.876L10.8672 15H3.00002C2.612 15 2.25901 14.7756 2.09443 14.4242C1.92985 14.0728 1.9834 13.6579 2.2318 13.3598L12.2318 1.35986C12.516 1.01882 12.991 0.905971 13.3982 1.08274Z"
    })
  });
}

const SidebarContext = /*#__PURE__*/(0,react_.createContext)(null);
function useSidebar() {
  let context = (0,react_.useContext)(SidebarContext);
  if (!context) {
    throw new Error('useSidebar must be within a SidebarProvider');
  }
  return context;
}
function SidebarProvider(props) {
  const state = (0,_react_stately_overlays_dist_import/* useOverlayTriggerState */.d)({});
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarContext.Provider, {
    value: state,
    children: props.children
  });
}
function SidebarPanel(props) {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    backgroundColor: "surface",
    direction: "column",
    height: "100%",
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarNav, {
      ...props
    })
  });
}
function SidebarHeader() {
  let config = (0,useSlugsInCollection_5c98cbe0_node_esm.u)();
  let text = 'Keystatic';
  if ((0,utils_542a6faa_node_esm.i)(config)) {
    text = config.storage.project;
  }
  if ((0,utils_542a6faa_node_esm.a)(config)) {
    text = (0,data_27b10ed2_node_esm.s)(config.storage.repo);
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    borderBottom: "muted",
    gap: "regular",
    height: "element.large",
    paddingX: "xlarge",
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(ZapLogo, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      color: "neutralEmphasis",
      weight: "semibold",
      children: text
    })]
  });
}
function SidebarDialog(props) {
  const state = useSidebar();
  const router = (0,data_27b10ed2_node_esm.u)();

  // close the sidebar when the route changes
  (0,react_.useEffect)(() => {
    state.close();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [router.href]);
  let dialogRef = (0,react_.useRef)(null);
  let {
    modalProps,
    underlayProps
  } = (0,overlays_dist_import/* useModalOverlay */.NE)({
    isDismissable: true
  }, state, dialogRef);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_overlays_esm/* Blanket */.Sm, {
      ...underlayProps,
      isOpen: state.isOpen,
      zIndex: 10
    }), /*#__PURE__*/(0,jsx_runtime_.jsxs)("div", {
      "data-visible": state.isOpen,
      id: SIDE_PANEL_ID,
      ref: dialogRef,
      ...modalProps,
      // styles
      className: (0,keystar_ui_style_esm/* css */.iv)({
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.surface,
        boxShadow: `${keystar_ui_style_esm/* tokenSchema */.iK.size.shadow.large} ${keystar_ui_style_esm/* tokenSchema */.iK.color.shadow.regular}`,
        display: 'flex',
        flexDirection: 'column',
        inset: 0,
        insetInlineEnd: 'auto',
        // ensure that there's always enough of gutter for the user to press
        // and exit the sidebar
        maxWidth: `calc(100% - ${keystar_ui_style_esm/* tokenSchema */.iK.size.element.medium})`,
        minWidth: keystar_ui_style_esm/* tokenSchema */.iK.size.scale[3000],
        outline: 0,
        pointerEvents: 'none',
        position: 'fixed',
        transform: 'translateX(-100%)',
        visibility: 'hidden',
        zIndex: 10,
        // exit animation
        transition: [(0,keystar_ui_style_esm/* transition */.eR)('transform', {
          easing: 'easeIn',
          duration: 'short'
          // delay: 'short',
        }), (0,keystar_ui_style_esm/* transition */.eR)('visibility', {
          delay: 'regular',
          duration: 0,
          easing: 'linear'
        })].join(', '),
        '&[data-visible=true]': {
          transform: 'translateX(0)',
          // enter animation
          transition: (0,keystar_ui_style_esm/* transition */.eR)('transform', {
            easing: 'easeOut'
          }),
          pointerEvents: 'auto',
          visibility: 'visible'
        }
      }),
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarHeader, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarNav, {
        ...props
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(overlays_dist_import/* DismissButton */.U4, {
        onDismiss: state.close
      })]
    })]
  });
}
function SidebarNav(props) {
  let config = (0,useSlugsInCollection_5c98cbe0_node_esm.u)();
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const router = (0,data_27b10ed2_node_esm.u)();
  const isCurrent = function (href) {
    let {
      exact = false
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (exact) {
      return href === router.href ? 'page' : undefined;
    }
    return href === router.href || router.href.startsWith(`${href}/`) ? 'page' : undefined;
  };
  const collectionsArray = Object.entries(config.collections || {});
  const singletonsArray = Object.entries(config.singletons || {});
  const changedData = (0,data_27b10ed2_node_esm.a)();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    className: (0,keystar_ui_style_esm/* css */.iv)({
      flex: 1,
      overflowY: 'auto',
      paddingBlock: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      paddingInlineEnd: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      WebkitOverflowScrolling: 'touch'
    }),
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(NavList, {
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(NavItem, {
        href: props.hrefBase,
        "aria-current": isCurrent(props.hrefBase, {
          exact: true
        }),
        children: stringFormatter.format('dashboard')
      }), collectionsArray.length !== 0 && /*#__PURE__*/(0,jsx_runtime_.jsx)(NavGroup, {
        title: stringFormatter.format('collections'),
        children: collectionsArray.map(_ref => {
          let [key, collection] = _ref;
          const href = `${props.hrefBase}/collection/${encodeURIComponent(key)}`;
          const changes = changedData.collections.get(key);
          const allChangesCount = changes ? changes.changed.size + changes.added.size + changes.removed.size : 0;
          return /*#__PURE__*/(0,jsx_runtime_.jsxs)(NavItem, {
            href: href,
            "aria-current": isCurrent(href),
            children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
              truncate: true,
              title: collection.label,
              children: collection.label
            }), !!allChangesCount && /*#__PURE__*/(0,jsx_runtime_.jsxs)(Badge, {
              tone: "accent",
              marginStart: "auto",
              children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                children: allChangesCount
              }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                visuallyHidden: true,
                children: (0,utils_542a6faa_node_esm.p)(allChangesCount, {
                  singular: 'change',
                  plural: 'changes',
                  inclusive: false
                })
              })]
            })]
          }, key);
        })
      }), singletonsArray.length !== 0 && /*#__PURE__*/(0,jsx_runtime_.jsx)(NavGroup, {
        title: stringFormatter.format('singletons'),
        children: singletonsArray.map(_ref2 => {
          let [key, collection] = _ref2;
          const href = `${props.hrefBase}/singleton/${key}`;
          return /*#__PURE__*/(0,jsx_runtime_.jsxs)(NavItem, {
            href: href,
            "aria-current": isCurrent(href),
            children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
              truncate: true,
              title: collection.label,
              children: collection.label
            }), changedData.singletons.has(key) && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
              backgroundColor: "accentEmphasis",
              height: "scale.75",
              width: "scale.75",
              borderRadius: "full",
              marginStart: "auto",
              children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                visuallyHidden: true,
                children: "Changed"
              })
            })]
          }, key);
        })
      })]
    })
  });
}

function BranchPicker() {
  const {
    allBranches,
    currentBranch,
    defaultBranch
  } = (0,react_.useContext)(data_27b10ed2_node_esm.B);
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const router = (0,data_27b10ed2_node_esm.u)();
  const items = (0,react_.useMemo)(() => {
    let defaultItems = allBranches.map(name => ({
      id: name,
      name
    }));
    if (defaultBranch) {
      return [{
        id: defaultBranch,
        name: defaultBranch,
        description: stringFormatter.format('defaultBranch')
      }, ...defaultItems.filter(i => i.name !== defaultBranch)];
    }
    return defaultItems;
  }, [allBranches, defaultBranch, stringFormatter]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_picker_esm/* Picker */.cW, {
    "aria-label": stringFormatter.format('currentBranch'),
    items: items,
    selectedKey: currentBranch,
    onSelectionChange: key => {
      if (typeof key === 'string') {
        router.push(router.href.replace(/\/branch\/[^/]+/, '/branch/' + encodeURIComponent(key)));
      }
    }
    // styles
    ,
    prominence: "low",
    width: "auto",
    menuWidth: 288,
    UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
      button: {
        contain: 'layout'
      }
    }),
    children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_picker_esm/* Item */.ck, {
      textValue: item.name,
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
        src: gitBranchIcon
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        truncate: true,
        children: item.name
      }), 'description' in item && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        slot: "description",
        children: item.description
      })]
    }, item.id)
  });
}
function CreateBranchDialog(props) {
  const branchInfo = (0,react_.useContext)(data_27b10ed2_node_esm.B);
  const isDefaultBranch = branchInfo.defaultBranch === branchInfo.currentBranch;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const [{
    error,
    fetching
  }, createBranch] = useCreateBranchMutation();
  const repositoryId = (0,data_27b10ed2_node_esm.b)();
  const createBranchSubmitButtonId = 'create-branch-submit-button';
  const [branchName, setBranchName] = (0,react_.useState)('');
  const [baseBranch, setBaseBranch] = (0,react_.useState)(branchInfo.defaultBranch);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* Dialog */.Vq, {
    size: "small",
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)("form", {
      style: {
        display: 'contents'
      },
      onSubmit: async event => {
        var _result$data, _result$data$createRe;
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        const name = `refs/heads/${branchName}`;
        const result = await createBranch({
          input: {
            name,
            oid: branchInfo.branchNameToBaseCommit.get(baseBranch),
            repositoryId
          }
        });
        if ((_result$data = result.data) !== null && _result$data !== void 0 && (_result$data$createRe = _result$data.createRef) !== null && _result$data$createRe !== void 0 && _result$data$createRe.__typename) {
          props.onCreate(branchName);
        }
      },
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        children: stringFormatter.format('newBranch')
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Content */.VY, {
        children: isDefaultBranch ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
          value: branchName,
          onChange: setBranchName,
          label: stringFormatter.format('branchName')
          // description="Your new branch will be based on the currently checked out branch, which is the default branch for this repository."
          ,
          autoFocus: true,
          errorMessage: error === null || error === void 0 ? void 0 : error.message
        }) : /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Grid */.rj, {
          gap: "xlarge",
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
            label: stringFormatter.format('branchName'),
            value: branchName,
            onChange: setBranchName,
            autoFocus: true,
            errorMessage: error === null || error === void 0 ? void 0 : error.message
          }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(RadioGroup, {
            label: stringFormatter.format('basedOn'),
            value: baseBranch,
            onChange: setBaseBranch,
            children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(Radio, {
              value: branchInfo.defaultBranch,
              children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
                children: [branchInfo.defaultBranch, /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                  visuallyHidden: true,
                  children: "."
                })]
              }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                slot: "description",
                children: stringFormatter.format('theDefaultBranchInYourRepository')
              })]
            }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(Radio, {
              value: branchInfo.currentBranch,
              children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
                children: [branchInfo.currentBranch, /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                  visuallyHidden: true,
                  children: "."
                })]
              }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
                slot: "description",
                children: stringFormatter.format('theCurrentlyCheckedOutBranch')
              })]
            })]
          })]
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Footer */.$_, {
        UNSAFE_style: {
          justifyContent: 'flex-end'
        },
        children: fetching && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
          "aria-labelledby": createBranchSubmitButtonId,
          isIndeterminate: true,
          size: "small"
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* ButtonGroup */.hE, {
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          onPress: props.onDismiss,
          isDisabled: fetching,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          isDisabled: fetching,
          prominence: "high",
          type: "submit",
          id: createBranchSubmitButtonId,
          children: stringFormatter.format('create')
        })]
      })]
    })
  });
}

// Data
// -----------------------------------------------------------------------------

function useCreateBranchMutation() {
  return (0,urql.useMutation)(tag_cjs.gql`
      mutation CreateBranch($input: CreateRefInput!) {
        createRef(input: $input) {
          __typename
          ref {
            ...Ref_base
          }
        }
      }
      ${data_27b10ed2_node_esm.R}
    `);
}

const ThemeContext = /*#__PURE__*/(0,react_.createContext)({
  theme: 'system',
  setTheme: () => {
    throw new Error('ThemeContext was not initialized.');
  }
});
const ThemeProvider = ThemeContext.Provider;
const STORAGE_KEY = 'keystatic-color-scheme';

// only for initializing the provider, for consumption use `useThemeContext()`
function useTheme() {
  let initialValue = localStorage.getItem(STORAGE_KEY) || 'system';
  let [theme, setThemeValue] = (0,react_.useState)(initialValue);
  let setTheme = theme => {
    localStorage.setItem(STORAGE_KEY, theme);
    setThemeValue(theme);
  };
  return {
    theme,
    setTheme
  };
}
function useThemeContext() {
  return (0,react_.useContext)(ThemeContext);
}

const TopBar = () => {
  let config = (0,useSlugsInCollection_5c98cbe0_node_esm.u)();
  if ((0,utils_542a6faa_node_esm.i)(config)) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(CloudHeader, {
      config: config
    });
  }
  if ((0,utils_542a6faa_node_esm.a)(config)) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(GithubHeader, {
      config: config
    });
  }
  if ((0,utils_542a6faa_node_esm.b)(config)) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(LocalHeader, {
      config: config
    });
  }
  throw new Error('Unknown config type.');
};

// Cloud
// -----------------------------------------------------------------------------

function CloudHeader(_ref) {
  let {
    config
  } = _ref;
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(HeaderOuter, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(ZapLogo, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      color: "neutralEmphasis",
      weight: "semibold",
      marginX: "regular",
      truncate: true,
      isHidden: {
        below: 'tablet'
      },
      children: config.storage.project
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(Slash, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(BranchPicker, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(GitMenu, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
      flex: "1"
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ThemeMenu, {})]
  });
}

// Github
// -----------------------------------------------------------------------------

function GithubHeader(_ref2) {
  let {
    config
  } = _ref2;
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(HeaderOuter, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(ZapLogo, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
      href: `https://github.com/${(0,data_27b10ed2_node_esm.s)(config.storage.repo)}`,
      target: "_blank",
      rel: "noopener noreferrer",
      prominence: "low",
      isHidden: {
        below: 'tablet'
      },
      UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
        paddingInline: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular
      }),
      children: (0,data_27b10ed2_node_esm.s)(config.storage.repo)
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(Slash, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(BranchPicker, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(GitMenu, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
      flex: "1"
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ThemeMenu, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(UserMenu, {})]
  });
}

// Local
// -----------------------------------------------------------------------------

function LocalHeader(_ref3) {
  let {
    config
  } = _ref3;
  console.log('local header', config);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(HeaderOuter, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(ZapLogo, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      color: "neutralEmphasis",
      weight: "semibold",
      children: "Keystatic"
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
      flex: "1"
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ThemeMenu, {})]
  });
}

// =============================================================================
// Misc.
// =============================================================================

function Slash() {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
    "aria-hidden": true,
    color: "neutralTertiary",
    role: "presentation",
    isHidden: {
      below: 'tablet'
    },
    UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
      userSelect: 'none'
    }),
    children: "/"
  });
}
function HeaderOuter(_ref4) {
  let {
    children
  } = _ref4;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    elementType: "header"
    // styles
    ,
    alignItems: "center",
    borderBottom: "muted",
    flexShrink: 0,
    gap: "small",
    height: {
      mobile: 'element.large',
      tablet: 'scale.700'
    },
    paddingX: {
      mobile: 'medium',
      tablet: 'xlarge'
    },
    paddingEnd: {
      desktop: 'xxlarge'
    },
    children: children
  });
}

// Theme controls
// -----------------------------------------------------------------------------

const THEME_MODE = {
  light: {
    icon: sunIcon,
    label: 'Light'
  },
  dark: {
    icon: moonIcon,
    label: 'Dark'
  },
  system: {
    icon: monitorIcon,
    label: 'System'
  }
};
const themeItems = Object.entries(THEME_MODE).map(_ref5 => {
  let [id, {
    icon,
    label
  }] = _ref5;
  return {
    id,
    icon,
    label
  };
});
function ThemeMenu() {
  let {
    theme,
    setTheme
  } = useThemeContext();
  let matchesDark = (0,keystar_ui_style_esm/* useMediaQuery */.ac)('(prefers-color-scheme: dark)');
  let icon = THEME_MODE[theme].icon;
  if (theme === 'system') {
    icon = matchesDark ? moonIcon : sunIcon;
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_menu_esm/* MenuTrigger */.bF, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
      "aria-label": "Theme",
      prominence: "low",
      UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
        borderRadius: '50%',
        padding: 0
      }),
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
        src: icon
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_menu_esm/* Menu */.v2, {
      items: themeItems,
      onSelectionChange: _ref6 => {
        let [key] = _ref6;
        return setTheme(key);
      },
      disallowEmptySelection: true,
      selectedKeys: [theme],
      selectionMode: "single",
      children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)(collections_dist_import/* Item */.ck, {
        textValue: item.label,
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
          src: item.icon
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          children: item.label
        })]
      })
    })]
  });
}

// User controls
// -----------------------------------------------------------------------------

function UserMenu() {
  var _user$name, _user$name2, _user$name3;
  let user = (0,data_27b10ed2_node_esm.c)();
  let config = (0,useSlugsInCollection_5c98cbe0_node_esm.u)();
  const menuItems = (0,react_.useMemo)(() => {
    let items = [{
      id: 'logout',
      label: 'Log out',
      icon: logOutIcon
    }];
    if ((0,utils_542a6faa_node_esm.i)(config)) {
      items.unshift({
        id: 'manage',
        label: 'Manage account',
        icon: userIcon
      });
    }
    return items;
  }, [config]);
  if (!user) {
    return null;
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_menu_esm/* MenuTrigger */.bF, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
      "aria-label": "User menu",
      prominence: "low",
      UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
        borderRadius: '50%',
        padding: 0
      }),
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Avatar, {
        src: user.avatarUrl,
        name: (_user$name = user.name) !== null && _user$name !== void 0 ? _user$name : undefined,
        size: "small"
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
      children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        borderBottom: "muted",
        gap: "regular",
        marginX: "regular",
        paddingY: "regular",
        paddingEnd: "xxlarge",
        alignItems: "center",
        UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
          userSelect: 'none'
        }),
        "aria-hidden": true,
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(Avatar, {
          src: user.avatarUrl,
          name: (_user$name2 = user.name) !== null && _user$name2 !== void 0 ? _user$name2 : undefined,
          size: "small"
        }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
          direction: "column",
          gap: "small",
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            size: "small",
            weight: "semibold",
            color: "neutralEmphasis",
            children: (_user$name3 = user.name) !== null && _user$name3 !== void 0 ? _user$name3 : user.login
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            size: "small",
            color: "neutralTertiary",
            children: user.login
          })]
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_menu_esm/* Menu */.v2, {
        items: menuItems,
        minWidth: "scale.2400",
        onAction: key => {
          switch (key) {
            case 'manage':
              openBlankTargetSafely('https://keystatic.cloud/account');
              break;
            case 'logout':
              switch (config.storage.kind) {
                case 'github':
                  window.location.href = '/api/keystatic/github/logout';
                  break;
                case 'cloud':
                  localStorage.removeItem('keystatic-cloud-access-token');
                  window.location.reload();
                  break;
              }
          }
        },
        children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)(collections_dist_import/* Item */.ck, {
          textValue: item.label,
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: item.icon
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: item.label
          })]
        })
      })]
    })]
  });
}

// Git controls
// -----------------------------------------------------------------------------

function GitMenu() {
  var _appShellData$data, _appShellData$data$re;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const data = (0,react_.useContext)(data_27b10ed2_node_esm.B);
  const [newBranchDialogVisible, toggleNewBranchDialog] = (0,react_.useReducer)(v => !v, false);
  const [deleteBranchDialogVisible, toggleDeleteBranchDialog] = (0,react_.useReducer)(v => !v, false);
  const [, deleteBranch] = (0,urql.useMutation)(tag_cjs.gql`
      mutation DeleteBranch($refId: ID!) {
        deleteRef(input: { refId: $refId }) {
          __typename
        }
      }
    `);
  const appShellData = (0,react_.useContext)(data_27b10ed2_node_esm.G);
  const fork = (appShellData === null || appShellData === void 0 ? void 0 : (_appShellData$data = appShellData.data) === null || _appShellData$data === void 0 ? void 0 : _appShellData$data.repository) && 'forks' in appShellData.data.repository && ((_appShellData$data$re = appShellData.data.repository.forks.nodes) === null || _appShellData$data$re === void 0 ? void 0 : _appShellData$data$re[0]);
  const gitMenuItems = (0,react_.useMemo)(() => {
    let isDefaultBranch = data.currentBranch === data.defaultBranch;
    let items = [];
    let branchSection = [{
      key: 'new-branch',
      icon: gitBranchPlusIcon,
      label: stringFormatter.format('newBranch')
    }];
    let prSection = [];
    let repoSection = [{
      key: 'repo',
      icon: githubIcon,
      label: 'Github repo' // TODO: l10n
    }];

    if (!isDefaultBranch) {
      prSection.push({
        key: 'create-pull-request',
        icon: gitPullRequestIcon,
        label: stringFormatter.format('createPullRequest')
      });
      if (!data.hasPullRequests) {
        branchSection.push({
          key: 'delete-branch',
          icon: keystar_ui_icon_icons_trash2Icon_esm/* trash2Icon */.S,
          label: stringFormatter.format('deleteBranch')
        });
      }
    }
    if (data.hasPullRequests) {
      prSection.push({
        key: 'related-pull-requests',
        icon: listTodoIcon,
        label: stringFormatter.format('viewPullRequests')
      });
    }
    if (fork) {
      repoSection.push({
        key: 'fork',
        icon: gitForkIcon,
        label: 'View fork' // TODO: l10n
      });
    }

    if (branchSection.length) {
      items.push({
        key: 'branch-section',
        label: stringFormatter.format('branches'),
        children: branchSection
      });
    }
    if (prSection.length) {
      items.push({
        key: 'pr-section',
        label: stringFormatter.format('pullRequests'),
        children: prSection
      });
    }
    if (repoSection.length) {
      items.push({
        key: 'repo-section',
        label: 'Repository',
        // TODO: l10n
        children: repoSection
      });
    }
    return items;
  }, [fork, data.currentBranch, data.defaultBranch, data.hasPullRequests, stringFormatter]);
  const router = (0,data_27b10ed2_node_esm.u)();
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_menu_esm/* ActionMenu */.PC, {
      "aria-label": "git actions",
      prominence: "low",
      items: gitMenuItems,
      onAction: key => {
        let repoURL = (0,utils_542a6faa_node_esm.g)(data);
        switch (key) {
          case 'new-branch':
            toggleNewBranchDialog();
            break;
          case 'delete-branch':
            {
              toggleDeleteBranchDialog();
              break;
            }
          case 'related-pull-requests':
            let query = [['is', 'pr'], ['is', 'open'], ['head', data.currentBranch]].map(_ref7 => {
              let [key, value] = _ref7;
              return encodeURIComponent(`${key}:${value}`);
            }).join('+');
            openBlankTargetSafely(`${repoURL}/pulls?q=${query}`);
            break;
          case 'create-pull-request':
            openBlankTargetSafely(`${repoURL}/pull/new/${data.currentBranch}`);
            break;
          case 'repo':
            openBlankTargetSafely(repoURL);
            break;
          case 'fork':
            (0,emery_cjs.assert)(!!fork);
            openBlankTargetSafely(`https://github.com/${fork.owner.login}/${fork.name}`);
        }
      },
      children: item => /*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Section */.$0, {
        items: item.children,
        "aria-label": item.label,
        children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)(collections_dist_import/* Item */.ck, {
          textValue: item.label,
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: item.icon
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: item.label
          })]
        }, item.key)
      }, item.key)
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW, {
      onDismiss: toggleNewBranchDialog,
      children: newBranchDialogVisible && /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateBranchDialog, {
        onDismiss: toggleNewBranchDialog,
        onCreate: branchName => {
          toggleNewBranchDialog();
          router.push(router.href.replace(/\/branch\/[^/]+/, '/branch/' + encodeURIComponent(branchName)));
        }
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW, {
      onDismiss: toggleDeleteBranchDialog,
      children: deleteBranchDialogVisible && /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_dialog_esm/* AlertDialog */.aR, {
        title: "Delete branch",
        tone: "critical",
        cancelLabel: "Cancel",
        primaryActionLabel: "Yes, delete",
        autoFocusButton: "cancel",
        onPrimaryAction: async () => {
          await deleteBranch({
            refId: data.branchNameToId.get(data.currentBranch)
          });
          router.push(router.href.replace(/\/branch\/[^/]+/, '/branch/' + encodeURIComponent(data.defaultBranch)));
        },
        children: ["Are you sure you want to delete the \"", data.currentBranch, "\" branch? This cannot be undone."]
      })
    })]
  });
}

// ============================================================================
// Utils
// ============================================================================

function openBlankTargetSafely(url) {
  window.open(url, '_blank', 'noopener,noreferrer');
}

const ContentPanelContext = /*#__PURE__*/(0,react_.createContext)('mobile');
function useContentPanelSize() {
  return (0,react_.useContext)(ContentPanelContext);
}
function useContentPanelQuery(options) {
  const sizes = ['mobile', 'tablet', 'desktop', 'wide'];
  const size = useContentPanelSize();
  const startIndex = 'above' in options ? sizes.indexOf(options.above) + 1 : 0;
  const endIndex = 'below' in options ? sizes.indexOf(options.below) - 1 : sizes.length - 1;
  const range = sizes.slice(startIndex, endIndex + 1);
  return range.includes(size);
}

// Main panel layout
// -----------------------------------------------------------------------------

const MainPanelLayout = props => {
  let {
    basePath,
    children,
    config
  } = props;
  let isBelowTablet = (0,keystar_ui_style_esm/* useMediaQuery */.ac)(keystar_ui_style_esm/* breakpointQueries */.l0.below.tablet);
  let [isDragging, setIsDragging] = (0,react_.useState)(false);
  let [size, setSize] = (0,react_.useState)(() => getInitialSizes());
  let [contentSize, setContentSize] = (0,react_.useState)('mobile');
  let sidebarState = useSidebar();
  let sidebarPanelRef = (0,react_.useRef)(null);
  const contentPanelId = 'content';
  const panelGroupId = 'main';

  // Sync sidebar context with panel state.
  (0,dist_import/* useLayoutEffect */.bt)(() => {
    let panel = sidebarPanelRef.current;
    if (panel) {
      if (!sidebarState.isOpen) {
        panel.collapse();
      } else {
        panel.expand();
      }
    }
  }, [sidebarState.isOpen]);

  // Handle cases where the sidebar has an invalid size. This can happen when
  // the panel has been resized in a larger window, then the window is resized
  // to be smaller, or vice versa.
  (0,dist_import/* useLayoutEffect */.bt)(() => {
    let panel = sidebarPanelRef.current;
    if (panel && !panel.getCollapsed()) {
      let currentSize = panel.getSize();
      if (currentSize < size.minSize || currentSize > size.maxSize) {
        panel.resize(clamp(currentSize, size.minSize, size.maxSize));
      }
    }
  }, [size.maxSize, size.minSize]);
  (0,dist_import/* useLayoutEffect */.bt)(() => {
    const panelGroup = document.querySelector(`[data-panel-group-id="${panelGroupId}"]`);
    const contentPanel = document.querySelector(`[data-panel-id="${contentPanelId}"]`);
    const resizeHandles = document.querySelectorAll('[data-panel-resize-handle-id]');
    if (!panelGroup || !contentPanel) {
      return;
    }
    const observer = new ResizeObserver(() => {
      // GROUP: pixel fixes
      let groupWidth = panelGroup.offsetWidth;
      resizeHandles.forEach(resizeHandle => {
        // subtract the width of the resize handles
        groupWidth -= resizeHandle.offsetWidth;
      });
      let minSize = calcMin(groupWidth);
      let maxSize = calcMax(groupWidth);
      let defaultSize = calcDefault(groupWidth);
      setSize({
        minSize,
        maxSize,
        defaultSize
      });

      // CONTENT PANEL: for context
      let contentWidth = contentPanel.offsetWidth;
      setContentSize(() => {
        if (contentWidth >= keystar_ui_style_esm/* breakpoints */.AV.wide) {
          return 'wide';
        }
        if (contentWidth >= keystar_ui_style_esm/* breakpoints */.AV.desktop) {
          return 'desktop';
        }
        if (contentWidth >= keystar_ui_style_esm/* breakpoints */.AV.tablet) {
          return 'tablet';
        }
        return 'mobile';
      });
    });
    observer.observe(panelGroup);
    observer.observe(contentPanel);
    resizeHandles.forEach(resizeHandle => {
      observer.observe(resizeHandle);
    });
    return () => {
      observer.disconnect();
    };
  }, []);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(ContentPanelContext.Provider, {
    value: contentSize,
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(PanelGroup, {
      disablePointerEventsDuringResize: true,
      id: panelGroupId,
      autoSaveId: panelGroupId,
      direction: "horizontal",
      className: (0,keystar_ui_style_esm/* css */.iv)({
        flex: 1
      }),
      children: [isBelowTablet ? /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarDialog, {
        hrefBase: basePath,
        config: config
      }) : /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(Panel, {
          order: 1,
          collapsible: true,
          defaultSize: size.defaultSize,
          maxSize: size.maxSize,
          minSize: size.minSize,
          onCollapse: isCollapsed => sidebarState.setOpen(!isCollapsed),
          ref: sidebarPanelRef,
          className: (0,keystar_ui_style_esm/* css */.iv)({
            containerName: 'app-side-panel',
            containerType: 'inline-size'
          }),
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarPanel, {
            hrefBase: basePath,
            config: config
          })
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ResizeHandle, {
          onDragging: setIsDragging,
          disabled: !isDragging && !sidebarState.isOpen
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(Panel, {
        order: 2,
        id: contentPanelId,
        className: (0,keystar_ui_style_esm/* css */.iv)({
          containerName: 'app-main-panel',
          containerType: 'inline-size'
        }),
        children: children
      })]
    })
  });
};

// Content panel layout
// -----------------------------------------------------------------------------

const ContentPanelLayout = _ref => {
  let {
    children
  } = _ref;
  const [main, aside] = children;
  const panelGroupId = 'content';
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(PanelGroup, {
    disablePointerEventsDuringResize: true,
    id: panelGroupId,
    autoSaveId: panelGroupId,
    direction: "horizontal",
    className: (0,keystar_ui_style_esm/* css */.iv)({
      flex: 1
    }),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(Panel, {
      minSize: 25,
      maxSize: 75,
      defaultSize: 67,
      children: main
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ResizeHandle, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(Panel, {
      minSize: 25,
      maxSize: 75,
      defaultSize: 33,
      children: aside
    })]
  });
};

// Utils
// -----------------------------------------------------------------------------

const SIDEBAR_MIN_PERCENT = 14;
const SIDEBAR_DEFAULT_PERCENT = 20;
const SIDEBAR_MAX_PERCENT = 48;
const SIDEBAR_MIN_PX = 180;
const SIDEBAR_DEFAULT_PX = 260;
const SIDEBAR_MAX_PX = 600;
const calcDefault = t => toFixedNumber(SIDEBAR_DEFAULT_PX / t * 100, 0);
const calcMin = t => toFixedNumber(SIDEBAR_MIN_PX / t * 100, 0);
const calcMax = t => toFixedNumber(Math.min(SIDEBAR_MAX_PX / t * 100, SIDEBAR_MAX_PERCENT), 0);
function getInitialSizes() {
  var _window$visualViewpor;
  if (typeof window === 'undefined') {
    return {
      minSize: SIDEBAR_MIN_PERCENT,
      maxSize: SIDEBAR_MAX_PERCENT,
      defaultSize: SIDEBAR_DEFAULT_PERCENT
    };
  }

  // Fallback to `window.innerWidth`, which doesn't include scrollbars but it's
  // okay for this approximation.
  let viewportWidth = ((_window$visualViewpor = window.visualViewport) === null || _window$visualViewpor === void 0 ? void 0 : _window$visualViewpor.width) || window.innerWidth;
  let minSize = calcMin(viewportWidth);
  let maxSize = calcMax(viewportWidth);
  let defaultSize = calcDefault(viewportWidth);
  return {
    minSize,
    maxSize,
    defaultSize
  };
}

/** Takes a value and forces it to the closest min/max if it's outside. */
function clamp(value) {
  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -Infinity;
  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}

/* Takes a value and rounds off to the number of digits. */
function toFixedNumber(value, digits) {
  let base = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;
  let pow = Math.pow(base, digits);
  return Math.round(value * pow) / pow;
}

// Styled components
// -----------------------------------------------------------------------------

function ResizeHandle(props) {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(PanelResizeHandle, {
    ...props,
    className: (0,keystar_ui_style_esm/* css */.iv)({
      backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.border.muted,
      boxSizing: 'border-box',
      outline: 0,
      position: 'relative',
      transition: (0,keystar_ui_style_esm/* transition */.eR)('background-color'),
      width: keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular,
      zIndex: 1,
      // hide when disabled
      '&[data-panel-resize-handle-enabled=false]': {
        position: 'absolute',
        // take no space when hidden
        visibility: 'hidden'
      },
      // increase hit area
      '&::before': {
        content: '""',
        position: 'absolute',
        inset: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.small} * -1)`
      },
      // drag indicator
      '&::after': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.alias.backgroundHovered,
        content: '""',
        insetBlock: 0,
        insetInline: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.border.medium} * -1)`,
        opacity: 0,
        position: 'absolute',
        transition: (0,keystar_ui_style_esm/* transition */.eR)('opacity')
      },
      // delay to avoid flicker. user may just be mousing around the screen; wait for intent
      '&:hover': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.border.neutral,
        transitionDelay: keystar_ui_style_esm/* tokenSchema */.iK.animation.duration.regular,
        '&::after': {
          opacity: 1,
          transitionDelay: keystar_ui_style_esm/* tokenSchema */.iK.animation.duration.regular
        }
      },
      '&[data-resize-handle-active]::after': {
        backgroundColor: keystar_ui_style_esm/* tokenSchema */.iK.color.background.accentEmphasis,
        insetInline: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular} * -1)`,
        opacity: 1
      }
    })
  });
}

const View = props => {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
    height: "100%",
    minHeight: 0,
    minWidth: 0,
    ...props
  });
};
const ScrollView = props => {
  let {
    isDisabled,
    ...otherProps
  } = props;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(View, {
    "data-scrollable": isDisabled ? undefined : true,
    UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
      '&[data-scrollable]': {
        overflowY: 'auto',
        WebkitOverflowScrolling: 'touch'
      }
    }),
    ...otherProps
  });
};

const AppShell = props => {
  const content = /*#__PURE__*/(0,jsx_runtime_.jsx)(data_27b10ed2_node_esm.A.Consumer, {
    children: error => error && !(error !== null && error !== void 0 && error.graphQLErrors.some(err => {
      var _err$originalError;
      return (err === null || err === void 0 ? void 0 : (_err$originalError = err.originalError) === null || _err$originalError === void 0 ? void 0 : _err$originalError.type) === 'NOT_FOUND';
    })) ? /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
      icon: alertCircleIcon,
      title: "Failed to load shell",
      message: error.message
    }) : props.children
  });
  const inner = /*#__PURE__*/(0,jsx_runtime_.jsx)(useSlugsInCollection_5c98cbe0_node_esm.C.Provider, {
    value: props.config,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(SidebarProvider, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        direction: "column",
        height: "100vh",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(TopBar, {}), /*#__PURE__*/(0,jsx_runtime_.jsx)(MainPanelLayout, {
          basePath: props.basePath,
          config: props.config,
          children: content
        })]
      })
    })
  });
  if ((0,utils_542a6faa_node_esm.a)(props.config) || props.config.storage.kind === 'cloud') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(data_27b10ed2_node_esm.d, {
      currentBranch: props.currentBranch,
      config: props.config,
      children: inner
    });
  }
  if ((0,utils_542a6faa_node_esm.b)(props.config)) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(data_27b10ed2_node_esm.L, {
      config: props.config,
      children: inner
    });
  }
  return null;
};

// Styled components
// -----------------------------------------------------------------------------

function EmptyState(props) {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    direction: "column",
    gap: "large",
    justifyContent: "center",
    minHeight: "scale.3000",
    paddingX: {
      mobile: 'medium',
      tablet: 'xlarge',
      desktop: 'xxlarge'
    },
    children: 'children' in props ? props.children : /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
      children: [props.icon && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
        src: props.icon,
        size: "large",
        color: "neutralEmphasis"
      }), props.title && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        align: "center",
        size: "medium",
        children: props.title
      }), props.message && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        align: "center",
        children: props.message
      }), props.actions]
    })
  });
}

// Composite components
// -----------------------------------------------------------------------------

const AppShellBody = _ref => {
  let {
    children,
    isScrollable
  } = _ref;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(ScrollView, {
    isDisabled: !isScrollable,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellContainer
    // padding on the container so descendants can use sticky positioning
    // with simple relative offsets
    , {
      paddingY: "xlarge",
      children: children
    })
  });
};
const AppShellContext = /*#__PURE__*/(0,react_.createContext)({
  containerWidth: 'medium'
});
const AppShellRoot = _ref2 => {
  let {
    children,
    containerWidth = 'medium'
  } = _ref2;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellContext.Provider, {
    value: {
      containerWidth
    },
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
      elementType: "main",
      direction: "column",
      id: MAIN_PANEL_ID,
      flex: true,
      height: "100%"
      // fix flexbox issues
      ,
      minHeight: 0,
      minWidth: 0,
      children: children
    })
  });
};
const AppShellContainer = props => {
  const {
    containerWidth
  } = (0,react_.useContext)(AppShellContext);
  const maxWidth = containerWidth === 'none' ? undefined : `container.${containerWidth}`;
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
    minHeight: 0,
    minWidth: 0,
    maxWidth: maxWidth
    // marginX="auto"
    ,
    paddingX: {
      mobile: 'medium',
      tablet: 'xlarge',
      desktop: 'xxlarge'
    },
    ...props
  });
};

const AppShellHeader = _ref => {
  let {
    children
  } = _ref;
  const sidebarState = useSidebar();
  const menuButtonRef = (0,react_.useRef)(null);
  const {
    direction
  } = (0,real_module/* useLocale */.bU)();
  let icon = sidebarState.isOpen ? panelLeftCloseIcon : panelLeftOpenIcon;
  if (direction === 'rtl') {
    icon = sidebarState.isOpen ? panelRightCloseIcon : panelRightOpenIcon;
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
    borderBottom: "muted",
    elementType: "header",
    height: {
      mobile: 'element.large',
      tablet: 'scale.700'
    },
    flexShrink: 0,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellContainer, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        alignItems: "center",
        gap: {
          mobile: 'small',
          tablet: 'regular'
        },
        height: {
          mobile: 'element.large',
          tablet: 'scale.700'
        },
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
          prominence: "low",
          isHidden: sidebarState.isOpen ? {
            above: 'mobile'
          } : undefined,
          onPress: sidebarState.toggle,
          ref: menuButtonRef,
          UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
            marginInlineStart: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular} * -1)`
          }),
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: icon
          })
        }), children]
      })
    })
  });
};

class NotFoundError extends Error {
  constructor() {
    super('Not found');
    this.name = 'NotFoundError';
  }
}
function isNotFoundError(err) {
  return typeof err === 'object' && err !== null && err instanceof NotFoundError;
}
function notFound() {
  throw new NotFoundError();
}
class NotFoundErrorBoundaryInner extends (react_default()).Component {
  constructor(props) {
    super(props);
    this.state = {
      notFound: false,
      lastHref: props.href
    };
  }
  static getDerivedStateFromError(err) {
    if (isNotFoundError(err)) {
      return {
        notFound: true
      };
    }
    throw err;
  }
  static getDerivedStateFromProps(props, state) {
    if (props.href !== state.lastHref && state.notFound) {
      return {
        notFound: false,
        lastHref: props.href
      };
    }
    return {
      notFound: state.notFound,
      lastHref: props.href
    };
  }
  render() {
    if (this.state.notFound) return this.props.fallback;
    return this.props.children;
  }
}
function NotFoundBoundary(props) {
  const router = (0,data_27b10ed2_node_esm.u)();
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(NotFoundErrorBoundaryInner, {
    ...props,
    href: router.href
  });
}

function CollectionPage(props) {
  var _config$collections;
  const {
    collection,
    config
  } = props;
  const containerWidth = 'none'; // TODO: use a "large" when we have more columns
  const collectionConfig = (_config$collections = config.collections) === null || _config$collections === void 0 ? void 0 : _config$collections[collection];
  if (!collectionConfig) notFound();
  const [searchTerm, setSearchTerm] = (0,react_.useState)('');
  let debouncedSearchTerm = useDebouncedValue(searchTerm, 300);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
    containerWidth: containerWidth,
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(CollectionPageHeader, {
      collectionLabel: collectionConfig.label,
      createHref: `${props.basePath}/collection/${encodeURIComponent(props.collection)}/create`,
      searchTerm: searchTerm,
      onSearchTermChange: setSearchTerm
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(CollectionPageContent, {
      searchTerm: debouncedSearchTerm,
      ...props
    })]
  });
}
function CollectionPageHeader(props) {
  const {
    collectionLabel,
    createHref
  } = props;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellHeader, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(_Breadcrumbs, {
      flex: true,
      minWidth: 0,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
        children: collectionLabel
      }, "collection")
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
      role: "search",
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(SearchField, {
        "aria-label": stringFormatter.format('search') // TODO: l10n "Search {collection}"?
        ,
        onChange: props.onSearchTermChange,
        onClear: () => props.onSearchTermChange(''),
        placeholder: stringFormatter.format('search'),
        value: props.searchTerm,
        width: "scale.2400"
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
      marginStart: "auto",
      prominence: "high",
      href: createHref,
      children: stringFormatter.format('add')
    })]
  });
}
function CollectionPageContent(props) {
  const trees = (0,data_27b10ed2_node_esm.e)();
  const tree = trees.merged.kind === 'loaded' ? trees.merged.data.current.entries.get((0,utils_542a6faa_node_esm.c)(props.config, props.collection)) : null;
  if (trees.merged.kind === 'error') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
      icon: alertCircleIcon,
      title: "Unable to load collection",
      message: trees.merged.error.message,
      actions: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
        tone: "accent",
        href: props.basePath,
        children: "Dashboard"
      })
    });
  }
  if (trees.merged.kind === 'loading') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
        "aria-label": "Loading Entries",
        isIndeterminate: true,
        size: "large"
      })
    });
  }
  if (!tree) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
      icon: listXIcon,
      title: "Empty collection",
      message: /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
        children: ["There aren't any entries yet.", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_link_esm/* TextLink */.hh, {
          href: `${props.basePath}/collection/${encodeURIComponent(props.collection)}/create`,
          children: "Create the first entry"
        }), ' ', "to see it here."]
      })
    });
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(CollectionTable, {
    ...props,
    trees: trees.merged.data
  });
}
function CollectionTable(props) {
  let {
    searchTerm
  } = props;
  let router = (0,data_27b10ed2_node_esm.u)();
  let [sortDescriptor, setSortDescriptor] = (0,react_.useState)({
    column: 'name',
    direction: 'ascending'
  });
  const entriesWithStatus = (0,react_.useMemo)(() => {
    const defaultEntries = new Map((0,utils_542a6faa_node_esm.d)(props.config, props.collection, props.trees.default.tree).map(x => [x.slug, x.key]));
    return (0,utils_542a6faa_node_esm.d)(props.config, props.collection, props.trees.current.tree).map(entry => {
      return {
        name: entry.slug,
        status: defaultEntries.has(entry.slug) ? defaultEntries.get(entry.slug) === entry.key ? 'Unchanged' : 'Changed' : 'Added'
      };
    });
  }, [props.collection, props.config, props.trees]);
  const filteredItems = (0,react_.useMemo)(() => {
    return entriesWithStatus.filter(item => item.name.toLowerCase().includes(searchTerm.toLowerCase()));
  }, [entriesWithStatus, searchTerm]);
  const sortedItems = (0,react_.useMemo)(() => {
    return [...filteredItems].sort(sortByDescriptor(sortDescriptor));
  }, [filteredItems, sortDescriptor]);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(TableView, {
    "aria-labelledby": "page-title",
    selectionMode: "none",
    onSortChange: setSortDescriptor,
    sortDescriptor: sortDescriptor,
    overflowMode: "truncate",
    onRowAction: key => {
      router.push(getItemPath(props.basePath, props.collection, key));
    },
    renderEmptyState: () => /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
      icon: searchXIcon,
      title: "No results",
      message: `No items matching "${searchTerm}" were found.`
    })
    // prominence="low"
    ,
    flex: true,
    marginTop: {
      tablet: 'large'
    },
    marginBottom: {
      mobile: 'regular',
      tablet: 'xlarge'
    },
    UNSAFE_className: (0,keystar_ui_style_esm/* css */.iv)({
      marginInline: keystar_ui_style_esm/* tokenSchema */.iK.size.space.regular,
      [keystar_ui_style_esm/* breakpointQueries */.l0.above.mobile]: {
        marginInline: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.xlarge} - ${keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium})`
      },
      [keystar_ui_style_esm/* breakpointQueries */.l0.above.tablet]: {
        marginInline: `calc(${keystar_ui_style_esm/* tokenSchema */.iK.size.space.xxlarge} - ${keystar_ui_style_esm/* tokenSchema */.iK.size.space.medium})`
      }
    }),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)($312ae3b56a94a86e$export$f850895b287ef28e, {
      columns: [{
        name: 'Name',
        key: 'name'
      }, {
        name: 'Status',
        key: 'status',
        minWidth: 140,
        width: '20%'
      }],
      children: _ref => {
        let {
          name,
          key,
          ...options
        } = _ref;
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(VoussoirColumn, {
          isRowHeader: true,
          allowsSorting: true,
          ...options,
          children: name
        }, key);
      }
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)($4ae5314bf50db1a3$export$76ccd210b9029917, {
      items: sortedItems,
      children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)($70d70eb16ea48428$export$b59bdbef9ce70de2, {
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)($941d1d9a6a28982a$export$f6f0c3fe4ec306ea, {
          textValue: item.name,
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_link_esm/* TextLink */.hh, {
            href: getItemPath(props.basePath, props.collection, item.name),
            children: item.name
          })
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)($941d1d9a6a28982a$export$f6f0c3fe4ec306ea, {
          textValue: item.status,
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
            tone: statusTones[item.status],
            children: item.status
          })
        })]
      }, item.name)
    })]
  });
}
function getItemPath(basePath, collection, key) {
  return `${basePath}/collection/${encodeURIComponent(collection)}/item/${encodeURIComponent(key)}`;
}
function useDebouncedValue(value) {
  let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  const [debouncedValue, setDebouncedValue] = (0,react_.useState)(value);
  (0,react_.useEffect)(() => {
    const timer = setTimeout(() => setDebouncedValue(value), delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
const statusTones = {
  Added: 'positive',
  Changed: 'accent',
  Unchanged: 'neutral'
};

const emptyArray = [];
function containerWidthForEntryLayout(config) {
  return config.entryLayout === 'content' ? 'none' : 'medium';
}
function FormForEntry(_ref) {
  let {
    formatInfo,
    forceValidation,
    slugField,
    entryLayout,
    previewProps: _previewProps
  } = _ref;
  const isAboveMobile = useContentPanelQuery({
    above: 'mobile'
  });
  const props = _previewProps;
  if (entryLayout === 'content' && formatInfo.contentField && isAboveMobile) {
    const {
      contentField
    } = formatInfo;
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(ui_37be050c_node_esm/* PathContextProvider */.o, {
      value: emptyArray,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(ui_37be050c_node_esm/* SlugFieldProvider */.Ut, {
        value: slugField,
        children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(ContentPanelLayout, {
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(ScrollView, {
            children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
              padding: {
                mobile: 'medium',
                tablet: 'xlarge',
                desktop: 'xxlarge'
              },
              minHeight: 0,
              minWidth: 0,
              maxWidth: "container.medium",
              marginX: "auto",
              children: /*#__PURE__*/(0,jsx_runtime_.jsx)(ui_37be050c_node_esm/* AddToPathProvider */.i1, {
                part: contentField.key,
                children: /*#__PURE__*/(0,jsx_runtime_.jsx)(form_from_preview_c6d22994_node_esm.I, {
                  forceValidation: forceValidation,
                  ...props.fields[contentField.key]
                })
              })
            })
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(ScrollView, {
            children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Grid */.rj, {
              gap: "xlarge",
              padding: {
                mobile: 'medium',
                tablet: 'xlarge',
                desktop: 'xxlarge'
              },
              children: Object.entries(props.fields).map(_ref2 => {
                let [key, propVal] = _ref2;
                return key === contentField.key ? null : /*#__PURE__*/(0,jsx_runtime_.jsx)(ui_37be050c_node_esm/* AddToPathProvider */.i1, {
                  part: key,
                  children: /*#__PURE__*/(0,jsx_runtime_.jsx)(form_from_preview_c6d22994_node_esm.I, {
                    forceValidation: forceValidation,
                    ...propVal
                  })
                }, key);
              })
            })
          })]
        })
      })
    });
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(ScrollView, {
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellContainer, {
      paddingY: {
        mobile: 'medium',
        tablet: 'xlarge',
        desktop: 'xxlarge'
      },
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(form_from_preview_c6d22994_node_esm.F
      // autoFocus
      , {
        forceValidation: forceValidation,
        slugField: slugField,
        ...props
      })
    })
  });
}

const AppSlugContext = /*#__PURE__*/(0,react_.createContext)(undefined);
const AppSlugProvider = AppSlugContext.Provider;
function InstallGitHubApp(props) {
  var _URL$searchParams$get;
  const router = (0,data_27b10ed2_node_esm.u)();
  const appSlugFromContext = (0,react_.useContext)(AppSlugContext);
  const appSlug = (_URL$searchParams$get = new URL(router.href, 'https://example.com').searchParams.get('slug')) !== null && _URL$searchParams$get !== void 0 ? _URL$searchParams$get : appSlugFromContext === null || appSlugFromContext === void 0 ? void 0 : appSlugFromContext.value;
  const parsedRepo = (0,data_27b10ed2_node_esm.p)(props.config.storage.repo);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
    direction: "column",
    gap: "regular",
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      alignItems: "end",
      gap: "regular",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
        label: "Repo Name",
        width: "100%",
        isReadOnly: true,
        value: parsedRepo.name
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
        onPress: () => {
          navigator.clipboard.writeText(parsedRepo.name);
        },
        children: "Copy Repo Name"
      })]
    }), appSlug ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
      prominence: "high",
      href: `https://github.com/apps/${appSlug}/installations/new`,
      children: "Install GitHub App"
    }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
      tone: "caution",
      children: appSlugFromContext ? /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
        children: ["The ", /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
          children: appSlugFromContext.envName
        }), " environment variable wasn't provided so we can't link to the GitHub app installation page. You should find the App on GitHub and add the repo yourself."]
      }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "Find the App on GitHub and add the repo."
      })
    })]
  });
}

function ForkRepoDialog(props) {
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const client = (0,urql.useClient)();
  const [state, setState] = (0,react_.useState)({
    kind: 'idle'
  });
  (0,react_.useEffect)(() => {
    const listener = async event => {
      if (event.key === 'ks-refetch-installations' && event.newValue === 'true') {
        localStorage.removeItem('ks-refetch-installations');
        try {
          var _res$data, _res$data$repository, _res$data$repository$;
          const auth = await (0,data_27b10ed2_node_esm.g)(props.config);
          if (!auth) throw new Error('Unauthorized');
          const res = await client.query(data_27b10ed2_node_esm.f, (0,data_27b10ed2_node_esm.p)(props.config.storage.repo)).toPromise();
          if ((_res$data = res.data) !== null && _res$data !== void 0 && (_res$data$repository = _res$data.repository) !== null && _res$data$repository !== void 0 && (_res$data$repository$ = _res$data$repository.forks.nodes) !== null && _res$data$repository$ !== void 0 && _res$data$repository$.some(x => (x === null || x === void 0 ? void 0 : x.viewerPermission) === 'ADMIN' || (x === null || x === void 0 ? void 0 : x.viewerPermission) === 'WRITE' || (x === null || x === void 0 ? void 0 : x.viewerPermission) === 'MAINTAIN')) {
            await new Promise(resolve => setTimeout(resolve, 100));
            props.onCreate();
          }
        } catch (err) {
          setState({
            kind: 'error',
            error: err
          });
        }
      }
    };
    addEventListener('storage', listener);
    return () => removeEventListener('storage', listener);
  }, [client, props]);
  const appSlug = (0,react_.useContext)(AppSlugContext);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_dialog_esm/* Dialog */.Vq, {
    size: "small",
    isDismissable: true,
    onDismiss: () => {
      props.onDismiss();
    },
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
      children: "Fork Repo"
    }), state.kind === 'error' ? /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Content */.VY, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
          tone: "critical",
          children: state.error.message
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ButtonGroup */.hE, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          onPress: props.onDismiss,
          children: stringFormatter.format('cancel')
        })
      })]
    }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(jsx_runtime_.Fragment, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Content */.VY, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
          gap: "large",
          direction: "column",
          marginBottom: "large",
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: "You don't have permission to write to this repo so to save your changes, you need to fork the repo."
          }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
            children: ["To start,", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_link_esm/* TextLink */.hh, {
              href: `https://github.com/${(0,data_27b10ed2_node_esm.s)(props.config.storage.repo)}/fork`,
              target: "_blank",
              rel: "noopener noreferrer",
              children: "fork the repo on GitHub"
            }), ". Then, come back to this page and", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_link_esm/* TextLink */.hh, {
              href: `https://github.com/apps/${appSlug === null || appSlug === void 0 ? void 0 : appSlug.value}/installations/new?state=close`,
              target: "_blank",
              rel: "noopener noreferrer",
              children: "install the Keystatic GitHub App on your fork."
            })]
          })]
        })
      })
    })]
  });
}

function parseEntry(args, files) {
  const dataFilepath = (0,utils_542a6faa_node_esm.j)(args.dirpath, args.format);
  const data = files.get(dataFilepath);
  if (!data) {
    throw new Error(`Could not find data file at ${dataFilepath}`);
  }
  const {
    loaded,
    extraFakeFile
  } = loadDataFile(data, args.format);
  const filesWithFakeFile = new Map(files);
  if (extraFakeFile) {
    filesWithFakeFile.set(`${args.dirpath}/${extraFakeFile.path}`, extraFakeFile.contents);
  }
  const rootSchema = (0,utils_542a6faa_node_esm.o)(args.schema);
  let initialState;
  try {
    initialState = (0,errors_e500af35_node_esm.p)(rootSchema, loaded, [], [], (schema, value, path, pathWithArrayFieldSlugs) => {
      var _args$slug;
      if (path.length === 1 && path[0] === ((_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.field)) {
        if (schema.formKind !== 'slug') {
          throw new Error(`slugField is not a slug field`);
        }
        return schema.parse(value, {
          slug: args.slug.slug
        });
      }
      if (schema.formKind === 'asset') {
        var _args$slug2, _args$slug3, _args$slug4;
        const suggestedFilenamePrefix = pathWithArrayFieldSlugs.join('/');
        const filepath = schema.filename(value, {
          suggestedFilenamePrefix,
          slug: (_args$slug2 = args.slug) === null || _args$slug2 === void 0 ? void 0 : _args$slug2.slug
        });
        const asset = filepath ? filesWithFakeFile.get(`${schema.directory ? `${schema.directory}${((_args$slug3 = args.slug) === null || _args$slug3 === void 0 ? void 0 : _args$slug3.slug) === undefined ? '' : `/${args.slug.slug}`}` : args.dirpath}/${filepath}`) : undefined;
        return schema.parse(value, {
          asset,
          slug: (_args$slug4 = args.slug) === null || _args$slug4 === void 0 ? void 0 : _args$slug4.slug
        });
      }
      if (schema.formKind === 'content') {
        var _args$slug7;
        const rootPath = `${args.dirpath}/${pathWithArrayFieldSlugs.join('/')}`;
        const mainFilepath = rootPath + schema.contentExtension;
        const mainContents = filesWithFakeFile.get(mainFilepath);
        const otherFiles = new Map();
        const otherDirectories = new Map();
        for (const [filename] of filesWithFakeFile) {
          if (filename.startsWith(rootPath + '/')) {
            const relativePath = filename.slice(rootPath.length + 1);
            otherFiles.set(relativePath, filesWithFakeFile.get(filename));
          }
        }
        for (const dir of (_schema$directories = schema.directories) !== null && _schema$directories !== void 0 ? _schema$directories : []) {
          var _schema$directories, _args$slug5, _args$slug6;
          const dirFiles = new Map();
          const start = `${dir}${((_args$slug5 = args.slug) === null || _args$slug5 === void 0 ? void 0 : _args$slug5.slug) === undefined ? '' : `/${(_args$slug6 = args.slug) === null || _args$slug6 === void 0 ? void 0 : _args$slug6.slug}`}/`;
          for (const [filename, val] of filesWithFakeFile) {
            if (filename.startsWith(start)) {
              const relativePath = filename.slice(start.length);
              dirFiles.set(relativePath, val);
            }
          }
          if (dirFiles.size) {
            otherDirectories.set(dir, dirFiles);
          }
        }
        return schema.parse(value, {
          content: mainContents,
          other: otherFiles,
          external: otherDirectories,
          slug: (_args$slug7 = args.slug) === null || _args$slug7 === void 0 ? void 0 : _args$slug7.slug
        });
      }
      return schema.parse(value, undefined);
    }, false);
  } catch (err) {
    throw (0,errors_e500af35_node_esm.t)(err);
  }
  const initialFiles = [...files.keys()];
  return {
    initialState,
    initialFiles
  };
}
function getAllFilesInTree(tree) {
  return [...tree.values()].flatMap(val => val.children ? getAllFilesInTree(val.children) : [val.entry]);
}
function useItemData(args) {
  var _args$slug9;
  const {
    current: currentBranch
  } = (0,data_27b10ed2_node_esm.e)();
  const rootTree = currentBranch.kind === 'loaded' ? currentBranch.data.tree : undefined;
  const locationsForTreeKey = (0,react_.useMemo)(() => {
    var _args$slug8;
    return (0,utils_542a6faa_node_esm.e)((0,utils_542a6faa_node_esm.o)(args.schema), args.dirpath, (_args$slug8 = args.slug) === null || _args$slug8 === void 0 ? void 0 : _args$slug8.slug, args.format);
  }, [args.dirpath, args.format, args.schema, (_args$slug9 = args.slug) === null || _args$slug9 === void 0 ? void 0 : _args$slug9.slug]);
  const localTreeKey = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.f)(locationsForTreeKey, rootTree !== null && rootTree !== void 0 ? rootTree : new Map()), [locationsForTreeKey, rootTree]);
  const tree = (0,react_.useMemo)(() => {
    return rootTree !== null && rootTree !== void 0 ? rootTree : new Map();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [localTreeKey, locationsForTreeKey]);
  const hasLoaded = currentBranch.kind === 'loaded';
  return (0,data_27b10ed2_node_esm.h)((0,react_.useCallback)(() => {
    var _getTreeNodeAtPath;
    if (!hasLoaded) return data_27b10ed2_node_esm.i;
    const dataFilepathSha = (_getTreeNodeAtPath = (0,utils_542a6faa_node_esm.h)(tree, (0,utils_542a6faa_node_esm.j)(args.dirpath, args.format))) === null || _getTreeNodeAtPath === void 0 ? void 0 : _getTreeNodeAtPath.entry.sha;
    if (dataFilepathSha === undefined) {
      return 'not-found';
    }
    const _args = {
      config: args.config,
      dirpath: args.dirpath,
      format: args.format,
      schema: args.schema,
      slug: args.slug
    };
    const allBlobs = locationsForTreeKey.flatMap(dir => {
      const node = (0,utils_542a6faa_node_esm.h)(tree, dir);
      if (!node) return [];
      return node.children ? getAllFilesInTree(node.children) : [node.entry];
    }).map(entry => {
      const blob = fetchBlob(args.config, entry.sha, entry.path);
      if (blob instanceof Uint8Array) {
        return [entry.path, blob];
      }
      return blob.then(blob => [entry.path, blob]);
    });
    if (allBlobs.every(x => Array.isArray(x))) {
      const {
        initialFiles,
        initialState
      } = parseEntry(_args, new Map(allBlobs));
      return {
        initialState,
        initialFiles,
        localTreeKey
      };
    }
    return Promise.all(allBlobs).then(async data => {
      const {
        initialState,
        initialFiles
      } = parseEntry(_args, new Map(data));
      return {
        initialState,
        initialFiles,
        localTreeKey
      };
    });
  }, [hasLoaded, tree, args.dirpath, args.format, args.config, args.schema, args.slug, locationsForTreeKey, localTreeKey]));
}
const blobCache = new lru_cache/* default */.Z({
  max: 200
});
async function hydrateBlobCache(contents) {
  const sha = await (0,utils_542a6faa_node_esm.k)(contents);
  blobCache.set(sha, contents);
  return sha;
}
async function fetchGitHubBlob(config, oid) {
  const auth = await (0,data_27b10ed2_node_esm.g)(config);
  return fetch(config.storage.kind === 'github' ? `https://api.github.com/repos/${(0,data_27b10ed2_node_esm.s)(config.storage.repo)}/git/blobs/${oid}` : `${utils_542a6faa_node_esm.K}/v1/github/blob/${oid}`, {
    headers: {
      Authorization: `Bearer ${auth.accessToken}`,
      Accept: 'application/vnd.github.raw',
      ...(config.storage.kind === 'cloud' ? utils_542a6faa_node_esm.l : {})
    }
  });
}
function fetchBlob(config, oid, filepath) {
  if (blobCache.has(oid)) return blobCache.get(oid);
  const promise = ((0,utils_542a6faa_node_esm.a)(config) || config.storage.kind === 'cloud' ? fetchGitHubBlob(config, oid) : fetch(`/api/keystatic/blob/${oid}/${filepath}`, {
    headers: {
      'no-cors': '1'
    }
  })).then(x => x.arrayBuffer()).then(x => {
    const array = new Uint8Array(x);
    blobCache.set(oid, array);
    return array;
  }).catch(err => {
    blobCache.delete(oid);
    throw err;
  });
  blobCache.set(oid, promise);
  return promise;
}

(0,keystar_ui_style_esm/* injectGlobal */.hi)({
  body: {
    overflow: 'hidden'
  }
});
function createUrqlClient(config) {
  const repo = config.storage.kind === 'github' ? (0,data_27b10ed2_node_esm.p)(config.storage.repo) : {
    owner: 'repo-owner',
    name: 'repo-name'
  };
  return (0,urql.createClient)({
    url: config.storage.kind === 'github' ? 'https://api.github.com/graphql' : `${utils_542a6faa_node_esm.K}/v1/github/graphql`,
    requestPolicy: 'cache-and-network',
    exchanges: [urql.dedupExchange, authExchange(async utils => {
      let authState = await (0,data_27b10ed2_node_esm.g)(config);
      return {
        addAuthToOperation(operation) {
          authState = (0,data_27b10ed2_node_esm.j)(config);
          if (!authState) {
            return operation;
          }
          return utils.appendHeaders(operation, {
            Authorization: `Bearer ${authState.accessToken}`,
            ...(config.storage.kind === 'cloud' ? utils_542a6faa_node_esm.l : {})
          });
        },
        didAuthError() {
          return false;
        },
        willAuthError(operation) {
          var _operation$query$defi;
          authState = (0,data_27b10ed2_node_esm.j)(config);
          if (operation.query.definitions[0].kind === 'OperationDefinition' && (_operation$query$defi = operation.query.definitions[0].name) !== null && _operation$query$defi !== void 0 && _operation$query$defi.value.includes('AppShell') && !authState) {
            if (config.storage.kind === 'github') {
              window.location.href = '/api/keystatic/github/login';
            } else {
              (0,utils_542a6faa_node_esm.r)('', config);
            }
            return true;
          }
          if (!authState) {
            return true;
          }
          return false;
        },
        async refreshAuth() {
          authState = await (0,data_27b10ed2_node_esm.g)(config);
        }
      };
    }), urql_exchange_graphcache_cacheExchange({
      updates: {
        Mutation: {
          createRef(result, args, cache, _info) {
            cache.updateQuery({
              query: config.storage.kind === 'github' ? data_27b10ed2_node_esm.f : data_27b10ed2_node_esm.C,
              variables: repo
            }, data => {
              var _data$repository, _data$repository$refs;
              if (data !== null && data !== void 0 && (_data$repository = data.repository) !== null && _data$repository !== void 0 && (_data$repository$refs = _data$repository.refs) !== null && _data$repository$refs !== void 0 && _data$repository$refs.nodes && result.createRef && typeof result.createRef === 'object' && 'ref' in result.createRef) {
                return {
                  ...data,
                  repository: {
                    ...data.repository,
                    refs: {
                      ...data.repository.refs,
                      nodes: [...data.repository.refs.nodes, result.createRef.ref]
                    }
                  }
                };
              }
              return data;
            });
          },
          deleteRef(result, args, cache, _info) {
            cache.updateQuery({
              query: config.storage.kind === 'github' ? data_27b10ed2_node_esm.f : data_27b10ed2_node_esm.C,
              variables: repo
            }, data => {
              var _data$repository2, _data$repository2$ref;
              if (data !== null && data !== void 0 && (_data$repository2 = data.repository) !== null && _data$repository2 !== void 0 && (_data$repository2$ref = _data$repository2.refs) !== null && _data$repository2$ref !== void 0 && _data$repository2$ref.nodes && result.deleteRef && typeof result.deleteRef === 'object' && '__typename' in result.deleteRef && typeof args.input === 'object' && args.input !== null && 'refId' in args.input && typeof args.input.refId === 'string') {
                const refId = args.input.refId;
                return {
                  ...data,
                  repository: {
                    ...data.repository,
                    refs: {
                      ...data.repository.refs,
                      nodes: data.repository.refs.nodes.filter(x => (x === null || x === void 0 ? void 0 : x.id) !== refId)
                    }
                  }
                };
              }
              return data;
            });
          }
        }
      }
    }), ...(config.storage.kind === 'github' ? [] : [persistedExchange({
      enableForMutation: true,
      enforcePersistedQueries: true
    })]), urql.fetchExchange]
  });
}
function Provider(_ref) {
  let {
    children,
    Link,
    config
  } = _ref;
  const themeContext = useTheme();
  const UniversalLink = (0,react_.useMemo)(() => (0,keystar_ui_link_esm/* makeLinkComponent */.LJ)((_ref2, ref) => {
    let {
      href,
      onClick,
      rel,
      ...props
    } = _ref2;
    const shouldUseNext = href[0] === '/';
    return shouldUseNext ? /*#__PURE__*/(0,jsx_runtime_.jsx)(Link, {
      href: href,
      ref: ref,
      ...props
    }) : /*#__PURE__*/(0,jsx_runtime_.jsx)("a", {
      ref: ref,
      href: href,
      rel: rel || 'noreferrer noopener',
      onClick: event => {
        if (href === '' || href === '#') {
          event.preventDefault();
        }
        if (typeof onClick === 'function') {
          onClick(event);
        }
      },
      ...props
    });
  }), [Link]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(ThemeProvider, {
    value: themeContext,
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_core_esm/* VoussoirProvider */.Qn, {
      linkComponent: UniversalLink,
      locale: config.locale || 'en-US',
      colorScheme: themeContext.theme === 'system' ? undefined : themeContext.theme,
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_core_esm/* ClientSideOnlyDocumentElement */.vW, {
        bodyBackground: "surface"
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)("link", {
        href: "https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap",
        rel: "stylesheet"
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(urql.Provider, {
        value: (0,react_.useMemo)(() => createUrqlClient(config), [config]),
        children: children
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(Toaster, {})]
    })
  });
}

const keystatic_core_ui_node_esm_textEncoder = new TextEncoder();
const frontmatterSplit = keystatic_core_ui_node_esm_textEncoder.encode('---\n');
function combineFrontmatterAndContents(frontmatter, contents) {
  const array = new Uint8Array(frontmatter.byteLength + contents.byteLength + frontmatterSplit.byteLength * 2);
  array.set(frontmatterSplit);
  array.set(frontmatter, frontmatterSplit.byteLength);
  array.set(frontmatterSplit, frontmatterSplit.byteLength + frontmatter.byteLength);
  array.set(contents, frontmatterSplit.byteLength * 2 + frontmatter.byteLength);
  return array;
}
function serializeEntryToFiles(args) {
  var _args$slug, _args$slug2;
  let {
    value: stateWithExtraFilesRemoved,
    extraFiles
  } = (0,index_a1f86d7d_node_esm.s)(args.state, (0,utils_542a6faa_node_esm.o)(args.schema), (_args$slug = args.slug) === null || _args$slug === void 0 ? void 0 : _args$slug.field, (_args$slug2 = args.slug) === null || _args$slug2 === void 0 ? void 0 : _args$slug2.value, true);
  const dataFormat = args.format.data;
  let dataContent = keystatic_core_ui_node_esm_textEncoder.encode(dataFormat === 'json' ? JSON.stringify(stateWithExtraFilesRemoved, null, 2) + '\n' : dump(stateWithExtraFilesRemoved));
  if (args.format.contentField) {
    const filename = `${args.format.contentField.key}${args.format.contentField.config.contentExtension}`;
    let contents;
    extraFiles = extraFiles.filter(x => {
      if (x.path !== filename) return true;
      contents = x.contents;
      return false;
    });
    (0,emery_cjs.assert)(contents !== undefined, 'Expected content field to be present');
    dataContent = combineFrontmatterAndContents(dataContent, contents);
  }
  return [{
    path: (0,utils_542a6faa_node_esm.j)(args.basePath, args.format),
    contents: dataContent
  }, ...extraFiles.map(file => ({
    path: `${file.parent ? args.slug ? `${file.parent}/${args.slug.value}` : file.parent : args.basePath}/${file.path}`,
    contents: file.contents
  }))];
}
function useUpsertItem(args) {
  const [state, setState] = (0,react_.useState)({
    kind: 'idle'
  });
  const baseCommit = (0,data_27b10ed2_node_esm.k)();
  const branchInfo = (0,react_.useContext)(data_27b10ed2_node_esm.B);
  const setTreeSha = (0,data_27b10ed2_node_esm.l)();
  const [, mutate] = (0,urql.useMutation)(createCommitMutation);
  const repoWithWriteAccess = (0,react_.useContext)(data_27b10ed2_node_esm.m);
  const appSlug = (0,react_.useContext)(AppSlugContext);
  return [state, async override => {
    try {
      if (repoWithWriteAccess === null && args.config.storage.kind === 'github' && appSlug !== null && appSlug !== void 0 && appSlug.value) {
        setState({
          kind: 'needs-fork'
        });
        return false;
      }
      setState({
        kind: 'loading'
      });
      let additions = serializeEntryToFiles({
        basePath: args.basePath,
        config: args.config,
        schema: args.schema,
        format: args.format,
        state: args.state,
        slug: args.slug
      });
      const additionPathToSha = new Map(await Promise.all(additions.map(async addition => [addition.path, await hydrateBlobCache(addition.contents)])));
      const filesToDelete = new Set(args.initialFiles);
      for (const file of additions) {
        filesToDelete.delete(file.path);
      }
      additions = additions.filter(addition => {
        const sha = additionPathToSha.get(addition.path);
        const existing = (0,utils_542a6faa_node_esm.h)(args.currentTree, addition.path);
        return (existing === null || existing === void 0 ? void 0 : existing.entry.sha) !== sha;
      });
      const deletions = [...filesToDelete].map(path => ({
        path
      }));
      const updatedTree = await (0,utils_542a6faa_node_esm.u)(args.currentTree, {
        additions,
        deletions: [...filesToDelete]
      });
      await (0,data_27b10ed2_node_esm.n)(updatedTree.entries);
      if (args.config.storage.kind === 'github' || args.config.storage.kind === 'cloud') {
        var _override$branch, _override$sha, _result$error, _result$error$graphQL, _result$data, _result$data$createCo, _result$data$createCo2;
        const branch = {
          branchName: (_override$branch = override === null || override === void 0 ? void 0 : override.branch) !== null && _override$branch !== void 0 ? _override$branch : branchInfo.currentBranch,
          repositoryNameWithOwner: `${repoWithWriteAccess.owner}/${repoWithWriteAccess.name}`
        };
        const runMutation = expectedHeadOid => mutate({
          input: {
            branch,
            expectedHeadOid,
            message: {
              headline: `Update ${args.basePath}`
            },
            fileChanges: {
              additions: additions.map(addition => ({
                ...addition,
                contents: (0,base64/* fromUint8Array */.kZ)(addition.contents)
              })),
              deletions
            }
          }
        });
        let result = await runMutation((_override$sha = override === null || override === void 0 ? void 0 : override.sha) !== null && _override$sha !== void 0 ? _override$sha : baseCommit);
        const gqlError = (_result$error = result.error) === null || _result$error === void 0 ? void 0 : (_result$error$graphQL = _result$error.graphQLErrors[0]) === null || _result$error$graphQL === void 0 ? void 0 : _result$error$graphQL.originalError;
        if (gqlError && 'type' in gqlError) {
          if (gqlError.type === 'BRANCH_PROTECTION_RULE_VIOLATION') {
            setState({
              kind: 'needs-new-branch',
              reason: 'Changes must be made via pull request to this branch. Create a new branch to save changes.'
            });
            return false;
          }
          if (gqlError.type === 'STALE_DATA') {
            var _refData$data, _refData$data$reposit, _refData$data$reposit2, _args$slug3;
            // we don't want this to go into the cache yet
            // so we create a new client just for this
            const refData = await createUrqlClient(args.config).query(FetchRef, {
              owner: repoWithWriteAccess.owner,
              name: repoWithWriteAccess.name,
              ref: `refs/heads/${branchInfo.currentBranch}`
            }).toPromise();
            if (!((_refData$data = refData.data) !== null && _refData$data !== void 0 && (_refData$data$reposit = _refData$data.repository) !== null && _refData$data$reposit !== void 0 && (_refData$data$reposit2 = _refData$data$reposit.ref) !== null && _refData$data$reposit2 !== void 0 && _refData$data$reposit2.target)) {
              throw new Error('Branch not found');
            }
            const tree = await (0,data_27b10ed2_node_esm.o)(refData.data.repository.ref.target.oid, args.config);
            const treeKey = (0,utils_542a6faa_node_esm.f)((0,utils_542a6faa_node_esm.e)((0,utils_542a6faa_node_esm.o)(args.schema), args.basePath, (_args$slug3 = args.slug) === null || _args$slug3 === void 0 ? void 0 : _args$slug3.value, args.format), tree.tree);
            if (treeKey === args.currentLocalTreeKey) {
              result = await runMutation(refData.data.repository.ref.target.oid);
            } else {
              setState({
                kind: 'needs-new-branch',
                reason: 'This entry has been updated since it was opened. Create a new branch to save changes.'
              });
              return false;
            }
          }
        }
        if (result.error) {
          throw result.error;
        }
        const target = (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$createCo = _result$data.createCommitOnBranch) === null || _result$data$createCo === void 0 ? void 0 : (_result$data$createCo2 = _result$data$createCo.ref) === null || _result$data$createCo2 === void 0 ? void 0 : _result$data$createCo2.target;
        if (target) {
          setState({
            kind: 'updated'
          });
          return true;
        }
        throw new Error('Failed to update');
      } else {
        const res = await fetch('/api/keystatic/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'no-cors': '1'
          },
          body: JSON.stringify({
            additions: additions.map(addition => ({
              ...addition,
              contents: (0,base64/* fromUint8Array */.kZ)(addition.contents)
            })),
            deletions
          })
        });
        if (!res.ok) {
          throw new Error(await res.text());
        }
        const newTree = await res.json();
        const {
          tree
        } = await (0,data_27b10ed2_node_esm.n)(newTree);
        setTreeSha(await (0,utils_542a6faa_node_esm.t)(tree));
        setState({
          kind: 'updated'
        });
        return true;
      }
    } catch (err) {
      setState({
        kind: 'error',
        error: err
      });
      return false;
    }
  }, () => {
    setState({
      kind: 'idle'
    });
  }];
}
const createCommitMutation = tag_cjs.gql`
  mutation CreateCommit($input: CreateCommitOnBranchInput!) {
    createCommitOnBranch(input: $input) {
      ref {
        id
        target {
          id
          oid
          ... on Commit {
            tree {
              id
              oid
            }
          }
        }
      }
    }
  }
`;
function useDeleteItem(args) {
  const [state, setState] = (0,react_.useState)({
    kind: 'idle'
  });
  const baseCommit = (0,data_27b10ed2_node_esm.k)();
  const branchInfo = (0,react_.useContext)(data_27b10ed2_node_esm.B);
  const [, mutate] = (0,urql.useMutation)(createCommitMutation);
  const setTreeSha = (0,data_27b10ed2_node_esm.l)();
  const repoWithWriteAccess = (0,react_.useContext)(data_27b10ed2_node_esm.m);
  const appSlug = (0,react_.useContext)(AppSlugContext);
  return [state, async () => {
    try {
      if (repoWithWriteAccess === null && args.storage.kind === 'github' && appSlug !== null && appSlug !== void 0 && appSlug.value) {
        setState({
          kind: 'needs-fork'
        });
        return false;
      }
      setState({
        kind: 'loading'
      });
      const updatedTree = await (0,utils_542a6faa_node_esm.u)(args.currentTree, {
        additions: [],
        deletions: args.initialFiles
      });
      await (0,data_27b10ed2_node_esm.n)(updatedTree.entries);
      if (args.storage.kind === 'github' || args.storage.kind === 'cloud') {
        const {
          error
        } = await mutate({
          input: {
            branch: {
              repositoryNameWithOwner: `${repoWithWriteAccess.owner}/${repoWithWriteAccess.name}`,
              branchName: branchInfo.currentBranch
            },
            message: {
              headline: `Delete ${args.basePath}`
            },
            expectedHeadOid: baseCommit,
            fileChanges: {
              deletions: args.initialFiles.map(path => ({
                path
              }))
            }
          }
        });
        if (error) {
          throw error;
        }
        setState({
          kind: 'updated'
        });
        return true;
      } else {
        const res = await fetch('/api/keystatic/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'no-cors': '1'
          },
          body: JSON.stringify({
            additions: [],
            deletions: args.initialFiles.map(path => ({
              path
            }))
          })
        });
        if (!res.ok) {
          throw new Error(await res.text());
        }
        const newTree = await res.json();
        const {
          tree
        } = await (0,data_27b10ed2_node_esm.n)(newTree);
        setTreeSha(await (0,utils_542a6faa_node_esm.t)(tree));
        setState({
          kind: 'updated'
        });
        return true;
      }
    } catch (err) {
      setState({
        kind: 'error',
        error: err
      });
    }
  }, () => {
    setState({
      kind: 'idle'
    });
  }];
}
const FetchRef = tag_cjs.gql`
  query FetchRef($owner: String!, $name: String!, $ref: String!) {
    repository(owner: $owner, name: $name) {
      id
      ref(qualifiedName: $ref) {
        id
        target {
          id
          oid
        }
      }
    }
  }
`;

function useHasChanged(args) {
  const initialFilesForUpdate = (0,react_.useMemo)(() => args.initialState === null ? null : (0,index_a1f86d7d_node_esm.s)(args.initialState, args.schema, args.slugField, args.slugField ? (0,utils_542a6faa_node_esm.m)({
    schema: args.schema.fields,
    slugField: args.slugField
  }, args.initialState) : undefined, true), [args.initialState, args.schema, args.slugField]);
  const filesForUpdate = (0,react_.useMemo)(() => (0,index_a1f86d7d_node_esm.s)(args.state, args.schema, args.slugField, args.slugField ? (0,utils_542a6faa_node_esm.m)({
    schema: args.schema.fields,
    slugField: args.slugField
  }, args.state) : undefined, true), [args.state, args.schema, args.slugField]);
  return (0,react_.useMemo)(() => {
    return !fast_deep_equal_default()(initialFilesForUpdate, filesForUpdate);
  }, [initialFilesForUpdate, filesForUpdate]);
}

function ItemPage(props) {
  const {
    collection,
    config,
    itemSlug,
    initialFiles,
    initialState,
    localTreeKey,
    currentTree
  } = props;
  const router = (0,data_27b10ed2_node_esm.u)();
  const [forceValidation, setForceValidation] = (0,react_.useState)(false);
  const collectionConfig = config.collections[collection];
  const schema = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.o)(collectionConfig.schema), [collectionConfig.schema]);
  const [{
    state,
    localTreeKey: localTreeKeyInState
  }, setState] = (0,react_.useState)({
    state: initialState,
    localTreeKey
  });
  if (localTreeKeyInState !== localTreeKey) {
    setState({
      state: initialState,
      localTreeKey
    });
  }
  const previewProps = (0,react_.useMemo)(() => (0,form_from_preview_c6d22994_node_esm.c)(schema, stateUpdater => {
    setState(state => ({
      localTreeKey: state.localTreeKey,
      state: stateUpdater(state.state)
    }));
  }, () => undefined), [schema])(state);
  const hasChanged = useHasChanged({
    initialState,
    schema,
    state,
    slugField: collectionConfig.slugField
  });
  const baseCommit = (0,data_27b10ed2_node_esm.k)();
  const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
  const formatInfo = (0,utils_542a6faa_node_esm.n)(config, collection);
  const currentBasePath = (0,utils_542a6faa_node_esm.s)(config, collection, itemSlug);
  const futureBasePath = (0,utils_542a6faa_node_esm.s)(config, collection, slug);
  const branchInfo = (0,data_27b10ed2_node_esm.r)();
  const [updateResult, _update, resetUpdateItem] = useUpsertItem({
    state,
    initialFiles,
    config,
    schema: collectionConfig.schema,
    basePath: futureBasePath,
    format: formatInfo,
    currentLocalTreeKey: localTreeKey,
    currentTree,
    slug: {
      field: collectionConfig.slugField,
      value: slug
    }
  });
  const update = (0,ui_utils_11a4fc47_node_esm.u)(_update);
  const [deleteResult, deleteItem, resetDeleteItem] = useDeleteItem({
    initialFiles,
    storage: config.storage,
    basePath: currentBasePath,
    currentTree
  });
  const onReset = () => {
    setState({
      state: initialState,
      localTreeKey
    });
  };
  const onView = () => {
    (0,emery_cjs.assert)((0,utils_542a6faa_node_esm.a)(config));
    let filePath = formatInfo.dataLocation === 'index' ? `/tree/${branchInfo.currentBranch}/${currentBasePath}` : `/blob/${branchInfo.currentBranch}/${currentBasePath}${(0,utils_542a6faa_node_esm.v)(formatInfo)}`;
    window.open(`${(0,utils_542a6faa_node_esm.g)(branchInfo)}${filePath}`, '_blank', 'noopener,noreferrer');
  };
  const onDelete = async () => {
    if (await deleteItem()) {
      router.push(`${props.basePath}/collection/${encodeURIComponent(collection)}`);
    }
  };
  const onUpdate = async () => {
    if (!(0,errors_e500af35_node_esm.c)(schema, state, props.slugInfo)) {
      setForceValidation(true);
      return;
    }
    const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
    const hasUpdated = await update();
    if (hasUpdated && slug !== itemSlug) {
      router.replace(`${props.basePath}/collection/${encodeURIComponent(collection)}/item/${encodeURIComponent(slug)}`);
    }
  };
  const formID = 'item-edit-form';
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(jsx_runtime_.Fragment, {
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(ItemPageShell, {
      headerActions: /*#__PURE__*/(0,jsx_runtime_.jsx)(HeaderActions, {
        config: config,
        formID: formID,
        isLoading: updateResult.kind === 'loading',
        hasChanged: hasChanged,
        onDelete: onDelete,
        onReset: onReset,
        onView: onView
      }),
      ...props,
      children: [updateResult.kind === 'error' && /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
        tone: "critical",
        children: updateResult.error.message
      }), deleteResult.kind === 'error' && /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
        tone: "critical",
        children: deleteResult.error.message
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
        id: formID,
        height: "100%",
        minHeight: 0,
        minWidth: 0,
        elementType: "form",
        onSubmit: event => {
          if (event.target !== event.currentTarget) return;
          event.preventDefault();
          onUpdate();
        },
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(FormForEntry, {
          previewProps: previewProps,
          forceValidation: forceValidation,
          entryLayout: collectionConfig.entryLayout,
          formatInfo: formatInfo,
          slugField: props.slugInfo
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
      // ideally this would be a popover on desktop but using a DialogTrigger wouldn't work since
      // this doesn't open on click but after doing a network request and it failing and manually wiring about a popover and modal would be a pain
      , {
        onDismiss: resetUpdateItem,
        children: updateResult.kind === 'needs-new-branch' && /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateBranchDuringUpdateDialog, {
          branchOid: baseCommit,
          onCreate: async newBranch => {
            const itemBasePath = `/keystatic/branch/${encodeURIComponent(newBranch)}/collection/${encodeURIComponent(collection)}/item/`;
            router.push(itemBasePath + encodeURIComponent(itemSlug));
            const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
            const hasUpdated = await update({
              branch: newBranch,
              sha: baseCommit
            });
            if (hasUpdated && slug !== itemSlug) {
              router.replace(itemBasePath + encodeURIComponent(slug));
            }
          },
          reason: updateResult.reason,
          onDismiss: resetUpdateItem
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
      // ideally this would be a popover on desktop but using a DialogTrigger
      // wouldn't work since this doesn't open on click but after doing a
      // network request and it failing and manually wiring about a popover
      // and modal would be a pain
      , {
        onDismiss: resetUpdateItem,
        children: updateResult.kind === 'needs-fork' && (0,utils_542a6faa_node_esm.a)(props.config) && /*#__PURE__*/(0,jsx_runtime_.jsx)(ForkRepoDialog, {
          onCreate: async () => {
            const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
            const hasUpdated = await update();
            if (hasUpdated && slug !== itemSlug) {
              router.replace(`${props.basePath}/collection/${encodeURIComponent(collection)}/item/${encodeURIComponent(slug)}`);
            }
          },
          onDismiss: resetUpdateItem,
          config: props.config
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
      // ideally this would be a popover on desktop but using a DialogTrigger
      // wouldn't work since this doesn't open on click but after doing a
      // network request and it failing and manually wiring about a popover
      // and modal would be a pain
      , {
        onDismiss: resetDeleteItem,
        children: deleteResult.kind === 'needs-fork' && (0,utils_542a6faa_node_esm.a)(props.config) && /*#__PURE__*/(0,jsx_runtime_.jsx)(ForkRepoDialog, {
          onCreate: async () => {
            await deleteItem();
            router.push(`${props.basePath}/collection/${encodeURIComponent(collection)}`);
          },
          onDismiss: resetDeleteItem,
          config: props.config
        })
      })]
    })
  });
}
function HeaderActions(props) {
  let {
    config,
    formID,
    hasChanged,
    isLoading,
    onDelete,
    onReset,
    onView
  } = props;
  const isBelowTablet = (0,keystar_ui_style_esm/* useMediaQuery */.ac)(keystar_ui_style_esm/* breakpointQueries */.l0.below.tablet);
  const isGithub = (0,utils_542a6faa_node_esm.a)(config);
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const [deleteAlertIsOpen, setDeleteAlertOpen] = (0,react_.useState)(false);
  const menuActions = (0,react_.useMemo)(() => {
    let items = [{
      key: 'reset',
      label: 'Reset changes',
      // TODO: l10n
      icon: historyIcon
    }, {
      key: 'delete',
      label: 'Delete entry…',
      // TODO: l10n
      icon: keystar_ui_icon_icons_trash2Icon_esm/* trash2Icon */.S
    }];
    if (isGithub) {
      items.push({
        key: 'view',
        label: 'View on GitHub',
        icon: keystar_ui_icon_icons_externalLinkIcon_esm/* externalLinkIcon */.K
      });
    }
    return items;
  }, [isGithub]);
  const indicatorElement = (() => {
    if (isLoading) {
      return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
        "aria-label": "Saving changes",
        isIndeterminate: true,
        size: "small",
        alignSelf: "center"
      });
    }
    if (hasChanged) {
      return isBelowTablet ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Box */.xu, {
        backgroundColor: "pendingEmphasis",
        height: "scale.75",
        width: "scale.75",
        borderRadius: "full",
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          visuallyHidden: true,
          children: "Unsaved"
        })
      }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
        tone: "pending",
        children: "Unsaved"
      });
    }
    return null;
  })();
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
    children: [indicatorElement, /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_action_group_esm/* ActionGroup */.W, {
      buttonLabelBehavior: "hide",
      overflowMode: "collapse",
      prominence: "low",
      density: "compact",
      maxWidth: isBelowTablet ? 'element.regular' : undefined // force switch to action menu on small devices
      ,
      items: menuActions,
      disabledKeys: hasChanged ? [] : ['reset'],
      onAction: key => {
        switch (key) {
          case 'reset':
            onReset();
            break;
          case 'delete':
            setDeleteAlertOpen(true);
            break;
          case 'view':
            onView();
            break;
        }
      },
      children: item => /*#__PURE__*/(0,jsx_runtime_.jsxs)(collections_dist_import/* Item */.ck, {
        textValue: item.label,
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
          src: item.icon
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          children: item.label
        })]
      }, item.key)
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
      form: formID,
      isDisabled: isLoading,
      prominence: "high",
      type: "submit",
      children: stringFormatter.format('save')
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW, {
      onDismiss: () => setDeleteAlertOpen(false),
      children: deleteAlertIsOpen && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* AlertDialog */.aR, {
        title: "Delete entry",
        tone: "critical",
        cancelLabel: "Cancel",
        primaryActionLabel: "Yes, delete",
        autoFocusButton: "cancel",
        onPrimaryAction: onDelete,
        children: "Are you sure? This action cannot be undone."
      })
    })]
  });
}
function CreateBranchDuringUpdateDialog(props) {
  var _data$createRef;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const repositoryId = (0,data_27b10ed2_node_esm.b)();
  const [branchName, setBranchName] = (0,react_.useState)('');
  const [{
    error,
    fetching,
    data
  }, createBranch] = useCreateBranchMutation();
  const isLoading = fetching || !!(data !== null && data !== void 0 && (_data$createRef = data.createRef) !== null && _data$createRef !== void 0 && _data$createRef.__typename);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* Dialog */.Vq, {
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)("form", {
      style: {
        display: 'contents'
      },
      onSubmit: async event => {
        var _result$data, _result$data$createRe;
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        const name = `refs/heads/${branchName}`;
        const result = await createBranch({
          input: {
            name,
            oid: props.branchOid,
            repositoryId
          }
        });
        if ((_result$data = result.data) !== null && _result$data !== void 0 && (_result$data$createRe = _result$data.createRef) !== null && _result$data$createRe !== void 0 && _result$data$createRe.__typename) {
          props.onCreate(branchName);
        }
      },
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        children: stringFormatter.format('newBranch')
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_slots_esm/* Content */.VY, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
          gap: "large",
          direction: "column",
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
            value: branchName,
            onChange: setBranchName,
            label: "Branch name",
            description: props.reason,
            autoFocus: true,
            errorMessage: error === null || error === void 0 ? void 0 : error.message
          })
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* ButtonGroup */.hE, {
        children: [isLoading && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
          isIndeterminate: true,
          size: "small",
          "aria-label": "Creating Branch"
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          isDisabled: isLoading,
          onPress: props.onDismiss,
          children: stringFormatter.format('cancel')
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          isDisabled: isLoading,
          prominence: "high",
          type: "submit",
          children: "Create branch and save"
        })]
      })]
    })
  });
}
function ItemPageWrapper(props) {
  var _props$config$collect;
  const collectionConfig = (_props$config$collect = props.config.collections) === null || _props$config$collect === void 0 ? void 0 : _props$config$collect[props.collection];
  if (!collectionConfig) notFound();
  const format = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.n)(props.config, props.collection), [props.config, props.collection]);
  const allSlugs = (0,useSlugsInCollection_5c98cbe0_node_esm.a)(props.collection);
  const slugInfo = (0,react_.useMemo)(() => {
    const slugs = new Set(allSlugs);
    slugs.delete(props.itemSlug);
    return {
      slug: props.itemSlug,
      field: collectionConfig.slugField,
      slugs,
      glob: (0,utils_542a6faa_node_esm.q)(props.config, props.collection)
    };
  }, [allSlugs, collectionConfig.slugField, props.collection, props.config, props.itemSlug]);
  const itemData = useItemData({
    config: props.config,
    dirpath: (0,utils_542a6faa_node_esm.s)(props.config, props.collection, props.itemSlug),
    schema: collectionConfig.schema,
    format,
    slug: slugInfo
  });
  const {
    current: tree
  } = (0,data_27b10ed2_node_esm.e)();
  const combined = (0,react_.useMemo)(() => (0,data_27b10ed2_node_esm.q)({
    item: itemData,
    tree
  }), [itemData, tree]);
  if (combined.kind === 'error') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(ItemPageShell, {
      ...props,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
          tone: "critical",
          children: combined.error.message
        })
      })
    });
  }
  if (combined.kind === 'loading') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(ItemPageShell, {
      ...props,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
        alignItems: "center",
        justifyContent: "center",
        minHeight: "scale.3000",
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
          "aria-label": "Loading Item",
          isIndeterminate: true,
          size: "large"
        })
      })
    });
  }
  if (combined.data.item === 'not-found') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(ItemPageShell, {
      ...props,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
          tone: "caution",
          children: "Entry not found."
        })
      })
    });
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(ItemPage, {
    collection: props.collection,
    basePath: props.basePath,
    config: props.config,
    itemSlug: props.itemSlug,
    initialState: combined.data.item.initialState,
    initialFiles: combined.data.item.initialFiles,
    localTreeKey: combined.data.item.localTreeKey,
    currentTree: combined.data.tree.tree,
    slugInfo: slugInfo
  });
}
const ItemPageShell = props => {
  const router = (0,data_27b10ed2_node_esm.u)();
  const collectionConfig = props.config.collections[props.collection];
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
    containerWidth: containerWidthForEntryLayout(collectionConfig),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellHeader, {
      children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(_Breadcrumbs, {
        flex: true,
        minWidth: 0,
        onAction: key => {
          if (key === 'collection') {
            router.push(`${props.basePath}/collection/${encodeURIComponent(props.collection)}`);
          }
        },
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
          children: collectionConfig.label
        }, "collection"), /*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
          children: props.itemSlug
        }, "item")]
      }), props.headerActions]
    }), props.children]
  });
};

const emptyMap = new Map();
function CreateItem(props) {
  var _props$config$collect;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const router = (0,data_27b10ed2_node_esm.u)();
  const collectionConfig = (_props$config$collect = props.config.collections) === null || _props$config$collect === void 0 ? void 0 : _props$config$collect[props.collection];
  if (!collectionConfig) notFound();
  const [forceValidation, setForceValidation] = (0,react_.useState)(false);
  const schema = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.o)(collectionConfig.schema), [collectionConfig.schema]);
  const [state, setState] = (0,react_.useState)(() => (0,initial_values_7069614f_node_esm.g)(schema));
  const previewProps = (0,react_.useMemo)(() => (0,form_from_preview_c6d22994_node_esm.c)(schema, setState, () => undefined), [schema])(state);
  const baseCommit = (0,data_27b10ed2_node_esm.k)();
  const tree = (0,data_27b10ed2_node_esm.e)();
  const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
  const formatInfo = (0,utils_542a6faa_node_esm.n)(props.config, props.collection);
  const [createResult, _createItem, resetCreateItemState] = useUpsertItem({
    state,
    basePath: (0,utils_542a6faa_node_esm.s)(props.config, props.collection, slug),
    initialFiles: undefined,
    config: props.config,
    schema: collectionConfig.schema,
    format: formatInfo,
    currentLocalTreeKey: undefined,
    currentTree: tree.current.kind === 'loaded' ? tree.current.data.tree : emptyMap,
    slug: {
      field: collectionConfig.slugField,
      value: slug
    }
  });
  const createItem = (0,ui_utils_11a4fc47_node_esm.u)(_createItem);
  let collectionPath = `${props.basePath}/collection/${encodeURIComponent(props.collection)}`;
  const slugsArr = (0,useSlugsInCollection_5c98cbe0_node_esm.a)(props.collection);
  const currentSlug = createResult.kind === 'updated' || createResult.kind === 'loading' ? slug : undefined;
  const slugInfo = (0,react_.useMemo)(() => {
    const slugs = new Set(slugsArr);
    if (currentSlug) {
      slugs.delete(currentSlug);
    }
    return {
      field: collectionConfig.slugField,
      slugs,
      glob: (0,utils_542a6faa_node_esm.q)(props.config, props.collection)
    };
  }, [slugsArr, currentSlug, collectionConfig.slugField, props.config, props.collection]);
  const onCreate = async () => {
    if (!(0,errors_e500af35_node_esm.c)(schema, state, slugInfo)) {
      setForceValidation(true);
      return;
    }
    if (await createItem()) {
      const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
      router.push(`${collectionPath}/item/${encodeURIComponent(slug)}`);
      toastQueue.positive('Entry created', {
        timeout: 5000
      }); // TODO: l10n
    }
  };

  // note we're still "loading" when it's already been created
  // since we're waiting to go to the item page
  const isLoading = createResult.kind === 'loading' || createResult.kind === 'updated';
  const formID = 'item-create-form';
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(jsx_runtime_.Fragment, {
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
      containerWidth: containerWidthForEntryLayout(collectionConfig),
      children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellHeader, {
        children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(_Breadcrumbs, {
          flex: true,
          minWidth: 0,
          onAction: key => {
            if (key === 'collection') {
              router.push(collectionPath);
            }
          },
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
            children: collectionConfig.label
          }, "collection"), /*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
            children: stringFormatter.format('add')
          }, "current")]
        }), isLoading && /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
          "aria-label": "Creating entry",
          isIndeterminate: true,
          size: "small"
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          isDisabled: isLoading,
          prominence: "high",
          type: "submit",
          form: formID,
          marginStart: "auto",
          children: stringFormatter.format('create')
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        id: formID,
        elementType: "form",
        onSubmit: event => {
          if (event.target !== event.currentTarget) return;
          event.preventDefault();
          onCreate();
        },
        direction: "column",
        gap: "xxlarge",
        height: "100%",
        minHeight: 0,
        minWidth: 0,
        children: [createResult.kind === 'error' && /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
          tone: "critical",
          children: createResult.error.message
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(FormForEntry, {
          previewProps: previewProps,
          forceValidation: forceValidation,
          entryLayout: collectionConfig.entryLayout,
          formatInfo: formatInfo,
          slugField: slugInfo
        })]
      })]
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
    // ideally this would be a popover on desktop but using a DialogTrigger
    // wouldn't work since this doesn't open on click but after doing a
    // network request and it failing and manually wiring about a popover
    // and modal would be a pain
    , {
      onDismiss: resetCreateItemState,
      children: createResult.kind === 'needs-new-branch' && /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateBranchDuringUpdateDialog, {
        branchOid: baseCommit,
        onCreate: async newBranch => {
          router.push(`/keystatic/branch/${encodeURIComponent(newBranch)}/collection/${encodeURIComponent(props.collection)}/create`);
          if (await createItem({
            branch: newBranch,
            sha: baseCommit
          })) {
            const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
            router.push(`/keystatic/branch/${encodeURIComponent(newBranch)}/collection/${encodeURIComponent(props.collection)}/item/${encodeURIComponent(slug)}`);
          }
        },
        reason: createResult.reason,
        onDismiss: resetCreateItemState
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
    // ideally this would be a popover on desktop but using a DialogTrigger
    // wouldn't work since this doesn't open on click but after doing a
    // network request and it failing and manually wiring about a popover
    // and modal would be a pain
    , {
      onDismiss: resetCreateItemState,
      children: createResult.kind === 'needs-fork' && (0,utils_542a6faa_node_esm.a)(props.config) && /*#__PURE__*/(0,jsx_runtime_.jsx)(ForkRepoDialog, {
        onCreate: async () => {
          if (await createItem()) {
            const slug = (0,utils_542a6faa_node_esm.m)(collectionConfig, state);
            router.push(`${collectionPath}/item/${encodeURIComponent(slug)}`);
          }
        },
        onDismiss: resetCreateItemState,
        config: props.config
      })
    })]
  });
}

const DashboardSection = _ref => {
  let {
    children,
    title
  } = _ref;
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
    elementType: "section",
    direction: "column",
    gap: "medium",
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      casing: "uppercase",
      color: "neutralTertiary",
      size: "small",
      weight: "bold",
      elementType: "h2",
      children: title
    }), children]
  });
};
const DashboardGrid = props => {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    className: (0,keystar_ui_style_esm/* css */.iv)({
      display: 'grid',
      gap: keystar_ui_style_esm/* tokenSchema */.iK.size.space.large,
      [keystar_ui_style_esm/* containerQueries */.bp.above.mobile]: {
        gridTemplateColumns: '1fr 1fr'
      },
      [keystar_ui_style_esm/* containerQueries */.bp.above.tablet]: {
        gridTemplateColumns: '1fr 1fr 1fr'
      }
    }),
    ...props
  });
};
const DashboardCard = props => {
  let Link = (0,keystar_ui_link_esm/* useLinkComponent */.yF)(null);
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
    position: "relative",
    border: "muted",
    borderRadius: "medium",
    backgroundColor: "canvas",
    padding: "large",
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      direction: "column",
      gap: "regular",
      flex: true,
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        elementType: "h3",
        size: "small",
        truncate: true,
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Link, {
          href: props.href,
          className: (0,keystar_ui_style_esm/* css */.iv)({
            color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutral,
            textDecoration: 'underline',
            textDecorationColor: 'transparent',
            textDecorationThickness: keystar_ui_style_esm/* tokenSchema */.iK.size.border.regular,
            textUnderlineOffset: keystar_ui_style_esm/* tokenSchema */.iK.size.border.medium,
            '&:hover': {
              color: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutralEmphasis,
              textDecorationColor: keystar_ui_style_esm/* tokenSchema */.iK.color.foreground.neutral
            },
            // fill the available space so that the card is clickable
            '::before': {
              content: '""',
              position: 'absolute',
              inset: 0
            }
          }),
          children: props.label
        })
      }), props.children]
    }), props.endElement]
  });
};

function useLocalizedString() {
  let stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  return stringFormatter;
}

function BranchSection(props) {
  let branchInfo = (0,data_27b10ed2_node_esm.r)();
  let router = (0,data_27b10ed2_node_esm.u)();
  let localizedString = useLocalizedString();
  if ((0,utils_542a6faa_node_esm.b)(props.config)) {
    return null;
  }
  let repoURL = (0,utils_542a6faa_node_esm.g)(branchInfo);
  let isDefaultBranch = branchInfo.currentBranch === branchInfo.defaultBranch;
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(DashboardSection, {
    title: localizedString.format('branches'),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      alignItems: "center",
      gap: "regular",
      border: "muted",
      borderRadius: "medium",
      backgroundColor: "canvas",
      padding: "large",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
        src: gitBranchIcon,
        color: "neutralTertiary"
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        direction: "column",
        gap: "regular",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          weight: "medium",
          children: branchInfo.currentBranch
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          size: "small",
          color: "neutralSecondary",
          children: isDefaultBranch ? localizedString.format('defaultBranch') : localizedString.format('currentBranch')
        })]
      })]
    }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      gap: "regular",
      wrap: true,
      children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_dialog_esm/* DialogTrigger */.hg, {
        children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* ActionButton */.Kk, {
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: gitBranchPlusIcon
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: localizedString.format('newBranch')
          })]
        }), close => /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateBranchDialog, {
          onDismiss: close,
          onCreate: branchName => {
            close();
            router.push(router.href.replace(/\/branch\/[^/]+/, '/branch/' + encodeURIComponent(branchName)));
          }
        })]
      }), !isDefaultBranch && /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* ActionButton */.Kk, {
        href: `${repoURL}/pull/new/${branchInfo.currentBranch}`,
        target: "_blank",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
          src: gitPullRequestIcon
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
          children: localizedString.format('createPullRequest')
        })]
      })]
    })]
  });
}

function CollectionSection(props) {
  var _props$config$collect;
  let localizedString = useLocalizedString();
  let changed = (0,data_27b10ed2_node_esm.a)();
  let collections = (0,utils_542a6faa_node_esm.w)((_props$config$collect = props.config.collections) !== null && _props$config$collect !== void 0 ? _props$config$collect : {});
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardSection, {
    title: "Collections",
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardGrid, {
      children: collections.map(collection => {
        var _counts$totalCount;
        let counts = changed.collections.get(collection.key);
        let totalCount = (_counts$totalCount = counts === null || counts === void 0 ? void 0 : counts.totalCount) !== null && _counts$totalCount !== void 0 ? _counts$totalCount : 0;
        let changes = counts ? counts.added.size + counts.changed.size + counts.removed.size : 0;
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardCard, {
          label: collection.label,
          href: `${props.basePath}/collection/${encodeURIComponent(collection.key)}`,
          endElement: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* ActionButton */.Kk, {
            "aria-label": localizedString.format('add'),
            href: `${props.basePath}/collection/${encodeURIComponent(collection.key)}/create`,
            children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
              src: keystar_ui_icon_icons_plusIcon_esm/* plusIcon */.R
            })
          }),
          children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
            gap: "regular",
            alignItems: "center",
            minHeight: "element.small",
            flex: true,
            wrap: true,
            children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
              children: (0,utils_542a6faa_node_esm.p)(totalCount, {
                singular: 'entry',
                plural: 'entries'
              })
            }), changes > 0 && /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
              tone: "accent",
              children: (0,utils_542a6faa_node_esm.p)(changes, {
                singular: 'change',
                plural: 'changes'
              })
            })]
          })
        }, collection.key);
      })
    })
  });
}

function SingletonSection(props) {
  var _props$config$singlet;
  let changed = (0,data_27b10ed2_node_esm.a)();
  let singletons = (0,utils_542a6faa_node_esm.w)((_props$config$singlet = props.config.singletons) !== null && _props$config$singlet !== void 0 ? _props$config$singlet : {});
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardSection, {
    title: "Singletons",
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardGrid, {
      children: singletons.map(singleton => {
        let changes = changed.singletons.has(singleton.key);
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardCard, {
          label: singleton.label,
          href: `${props.basePath}/singleton/${encodeURIComponent(singleton.key)}`,
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
            gap: "regular",
            alignItems: "center",
            minHeight: "element.small",
            flex: true,
            wrap: true,
            children: changes ? /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
              tone: "accent",
              children: "Changed"
            }) : /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
              children: "Unchanged"
            })
          })
        }, singleton.key);
      })
    })
  });
}

function DashboardPage(props) {
  var _user$name, _user$name2;
  const stringFormatter = (0,real_module/* useLocalizedStringFormatter */.qb)(index_2098f6c1_node_esm.l);
  const user = (0,data_27b10ed2_node_esm.c)();
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
    containerWidth: "large",
    children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellHeader, {
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(_Breadcrumbs, {
        flex: true,
        minWidth: 0,
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(collections_dist_import/* Item */.ck, {
          children: stringFormatter.format('dashboard')
        }, "dashboard")
      })
    }), /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
      isScrollable: true,
      children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        direction: "column",
        gap: "xxlarge",
        children: [user && /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
          alignItems: "center",
          gap: "medium",
          isHidden: {
            below: 'tablet'
          },
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(Avatar, {
            src: user.avatarUrl,
            name: (_user$name = user.name) !== null && _user$name !== void 0 ? _user$name : undefined,
            size: "medium"
          }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Heading, {
            size: "large",
            elementType: "p",
            children: ["Hello, ", (_user$name2 = user.name) !== null && _user$name2 !== void 0 ? _user$name2 : user.login, "!"]
          })]
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(BranchSection, {
          config: props.config
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(CollectionSection, {
          basePath: props.basePath,
          config: props.config
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(SingletonSection, {
          basePath: props.basePath,
          config: props.config
        })]
      })
    })]
  });
}

function SingletonPage(_ref) {
  let {
    singleton,
    initialFiles,
    initialState,
    localTreeKey,
    config,
    currentTree
  } = _ref;
  const [forceValidation, setForceValidation] = (0,react_.useState)(false);
  const singletonConfig = config.singletons[singleton];
  const schema = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.o)(singletonConfig.schema), [singletonConfig.schema]);
  const singletonPath = (0,utils_542a6faa_node_esm.y)(config, singleton);
  const router = (0,data_27b10ed2_node_esm.u)();
  const [{
    state,
    localTreeKey: localTreeKeyInState
  }, setState] = (0,react_.useState)(() => ({
    localTreeKey: localTreeKey,
    state: initialState === null ? (0,initial_values_7069614f_node_esm.g)(schema) : initialState
  }));
  if (localTreeKeyInState !== localTreeKey) {
    setState({
      localTreeKey: localTreeKey,
      state: initialState === null ? (0,initial_values_7069614f_node_esm.g)(schema) : initialState
    });
  }
  const isCreating = initialState === null;
  const hasChanged = useHasChanged({
    initialState,
    state,
    schema,
    slugField: undefined
  }) || isCreating;
  const previewProps = (0,react_.useMemo)(() => (0,form_from_preview_c6d22994_node_esm.c)(schema, stateUpdater => {
    setState(state => ({
      localTreeKey: state.localTreeKey,
      state: stateUpdater(state.state)
    }));
  }, () => undefined), [schema])(state);
  const baseCommit = (0,data_27b10ed2_node_esm.k)();
  const formatInfo = (0,utils_542a6faa_node_esm.x)(config, singleton);
  const [updateResult, _update, resetUpdateItem] = useUpsertItem({
    state,
    initialFiles,
    config,
    schema: singletonConfig.schema,
    basePath: singletonPath,
    format: formatInfo,
    currentLocalTreeKey: localTreeKey,
    currentTree,
    slug: undefined
  });
  const update = (0,ui_utils_11a4fc47_node_esm.u)(_update);
  const onCreate = async () => {
    if (!(0,errors_e500af35_node_esm.c)(schema, state, undefined)) {
      setForceValidation(true);
      return;
    }
    await update();
  };
  const formID = 'singleton-form';
  return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
    containerWidth: containerWidthForEntryLayout(singletonConfig),
    children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellHeader, {
      children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
        alignItems: "center",
        gap: "regular",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
          elementType: "h1",
          id: "page-title",
          size: "small",
          children: singletonConfig.label
        }), updateResult.kind === 'loading' ? /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
          "aria-label": `Updating ${singletonConfig.label}`,
          isIndeterminate: true,
          size: "small",
          alignSelf: "center"
        }) : hasChanged && /*#__PURE__*/(0,jsx_runtime_.jsx)(Badge, {
          tone: "pending",
          children: "Unsaved"
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* ButtonGroup */.hE, {
        marginStart: "auto",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* Button */.zx, {
          "aria-label": "Reset"
          // prominence="low"
          ,
          isDisabled: updateResult.kind === 'loading' || !hasChanged,
          onPress: () => {
            setState({
              localTreeKey: localTreeKey,
              state: initialState === null ? (0,initial_values_7069614f_node_esm.g)(schema) : initialState
            });
          },
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            isHidden: {
              above: 'mobile'
            },
            src: refreshCwIcon
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            isHidden: {
              below: 'tablet'
            },
            children: "Reset"
          })]
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          form: formID,
          isDisabled: updateResult.kind === 'loading',
          prominence: "high",
          type: "submit",
          children: isCreating ? 'Create' : 'Save'
        })]
      })]
    }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      elementType: "form",
      id: formID,
      onSubmit: event => {
        if (event.target !== event.currentTarget) return;
        event.preventDefault();
        onCreate();
      },
      direction: "column",
      gap: "xxlarge",
      height: "100%",
      minHeight: 0,
      minWidth: 0,
      children: [updateResult.kind === 'error' && /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
        tone: "critical",
        children: updateResult.error.message
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(FormForEntry, {
        previewProps: previewProps,
        forceValidation: forceValidation,
        entryLayout: singletonConfig.entryLayout,
        formatInfo: formatInfo,
        slugField: undefined
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
      // ideally this would be a popover on desktop but using a DialogTrigger wouldn't work since
      // this doesn't open on click but after doing a network request and it failing and manually wiring about a popover and modal would be a pain
      , {
        onDismiss: resetUpdateItem,
        children: updateResult.kind === 'needs-new-branch' && /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateBranchDuringUpdateDialog, {
          branchOid: baseCommit,
          onCreate: async newBranch => {
            router.push(`/keystatic/branch/${encodeURIComponent(newBranch)}/singleton/${encodeURIComponent(singleton)}`);
            update({
              branch: newBranch,
              sha: baseCommit
            });
          },
          reason: updateResult.reason,
          onDismiss: resetUpdateItem
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_dialog_esm/* DialogContainer */.TW
      // ideally this would be a popover on desktop but using a DialogTrigger
      // wouldn't work since this doesn't open on click but after doing a
      // network request and it failing and manually wiring about a popover
      // and modal would be a pain
      , {
        onDismiss: resetUpdateItem,
        children: updateResult.kind === 'needs-fork' && (0,utils_542a6faa_node_esm.a)(config) && /*#__PURE__*/(0,jsx_runtime_.jsx)(ForkRepoDialog, {
          onCreate: async () => {
            update();
          },
          onDismiss: resetUpdateItem,
          config: config
        })
      })]
    })]
  });
}
function SingletonPageWrapper(props) {
  var _props$config$singlet;
  const singletonConfig = (_props$config$singlet = props.config.singletons) === null || _props$config$singlet === void 0 ? void 0 : _props$config$singlet[props.singleton];
  if (!singletonConfig) notFound();
  const header = /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellHeader, {
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
      elementType: "h1",
      id: "page-title",
      size: "small",
      children: singletonConfig.label
    })
  });
  const format = (0,react_.useMemo)(() => (0,utils_542a6faa_node_esm.x)(props.config, props.singleton), [props.config, props.singleton]);
  const itemData = useItemData({
    config: props.config,
    dirpath: (0,utils_542a6faa_node_esm.y)(props.config, props.singleton),
    schema: props.config.singletons[props.singleton].schema,
    format,
    slug: undefined
  });
  const {
    current: tree
  } = (0,data_27b10ed2_node_esm.e)();
  const combined = (0,react_.useMemo)(() => (0,data_27b10ed2_node_esm.q)({
    tree,
    item: itemData
  }), [itemData, tree]);
  if (combined.kind === 'error') {
    return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
      children: [header, /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Notice, {
          margin: "xxlarge",
          tone: "critical",
          children: combined.error.message
        })
      })]
    });
  }
  if (combined.kind === 'loading') {
    return /*#__PURE__*/(0,jsx_runtime_.jsxs)(AppShellRoot, {
      children: [header, /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
          alignItems: "center",
          justifyContent: "center",
          minHeight: "scale.3000",
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
            "aria-label": `Loading ${singletonConfig.label}`,
            isIndeterminate: true,
            size: "large"
          })
        })
      })]
    });
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(SingletonPage, {
    singleton: props.singleton,
    config: props.config,
    initialState: combined.data.item === 'not-found' ? null : combined.data.item.initialState,
    initialFiles: combined.data.item === 'not-found' ? [] : combined.data.item.initialFiles,
    localTreeKey: combined.data.item === 'not-found' ? undefined : combined.data.item.localTreeKey,
    currentTree: combined.data.tree.tree
  });
}

function FromTemplateDeploy(props) {
  (0,react_.useEffect)(() => {
    const parsedCookies = cookie.parse(document.cookie);
    const repo = (0,data_27b10ed2_node_esm.s)(props.config.storage.repo);
    const cookieName = 'ks-template';
    if (parsedCookies[cookieName] !== repo) {
      document.cookie = cookie.serialize(cookieName, repo, {
        path: '/',
        maxAge: 60 * 60 * 24 * 30,
        expires: new Date(Date.now() + 60 * 60 * 24 * 30 * 1000),
        secure: true,
        sameSite: 'lax'
      });
    }
  }, [props.config.storage.repo]);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    justifyContent: "center",
    margin: "xxlarge",
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      backgroundColor: "surface",
      padding: "large",
      border: "color.alias.borderIdle",
      borderRadius: "medium",
      direction: "column",
      justifyContent: "center",
      gap: "xlarge",
      maxWidth: "scale.4600",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        children: "You've deployed Keystatic! \uD83C\uDF89"
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "To start using Keystatic, you need to install the GitHub app you've created."
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
        children: ["Make sure to add the App to the", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
          children: (0,data_27b10ed2_node_esm.s)(props.config.storage.repo)
        }), ' ', "repository."]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(InstallGitHubApp, {
        config: props.config
      })]
    })
  });
}

function CreatedGitHubApp(props) {
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    justifyContent: "center",
    margin: "xxlarge",
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      backgroundColor: "surface",
      padding: "large",
      border: "color.alias.borderIdle",
      borderRadius: "medium",
      direction: "column",
      justifyContent: "center",
      gap: "xlarge",
      maxWidth: "scale.4600",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
        children: "You've installed Keystatic! \uD83C\uDF89"
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "To start using Keystatic, you need to install the GitHub app you've created."
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
        children: ["Make sure to add the App to the", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
          children: (0,data_27b10ed2_node_esm.s)(props.config.storage.repo)
        }), ' ', "repository."]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(InstallGitHubApp, {
        config: props.config
      })]
    })
  });
}

function KeystaticSetup(props) {
  const [deployedURL, setDeployedURL] = (0,react_.useState)('');
  const [organization, setOrganization] = (0,react_.useState)('');
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    justifyContent: "center",
    margin: "xxlarge",
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      backgroundColor: "surface",
      padding: "large",
      border: "color.alias.borderIdle",
      borderRadius: "medium",
      direction: "column",
      justifyContent: "center",
      gap: "xlarge",
      maxWidth: "scale.4600",
      elementType: "form",
      action: `https://github.com${organization ? `/organizations/${organization}` : ''}/settings/apps/new`,
      method: "post",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
        justifyContent: "center",
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
          children: "Keystatic Setup"
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "Keystatic doesn't have the required config."
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "If you've already created your GitHub app, make sure to add the following environment variables:"
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Box */.xu, {
        elementType: "ul",
        children: [/*#__PURE__*/(0,jsx_runtime_.jsx)("li", {
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
            children: "KEYSTATIC_GITHUB_CLIENT_ID"
          })
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)("li", {
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
            children: "KEYSTATIC_GITHUB_CLIENT_SECRET"
          })
        }), /*#__PURE__*/(0,jsx_runtime_.jsx)("li", {
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
            children: "KEYSTATIC_SECRET"
          })
        })]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "If you haven't created your GitHub app for Keystatic, you can create one below."
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
        label: "Deployed App URL",
        description: "This should the root of your domain. If you're not sure where Keystatic will be deployed, leave this blank and you can update the GitHub app later.",
        value: deployedURL,
        onChange: setDeployedURL
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_text_field_esm/* TextField */.nv, {
        label: "GitHub organization (if any)",
        description: "You must be an owner or GitHub App manager in the organization to create the GitHub App. Leave this blank to create the app in your personal account.",
        value: organization,
        onChange: setOrganization
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
        children: ["After visiting GitHub to create the GitHub app, you'll be redirected back here and secrets generated from GitHub will be written to your", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)("code", {
          children: ".env"
        }), " file."]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)("input", {
        type: "text",
        name: "manifest",
        className: (0,keystar_ui_style_esm/* css */.iv)({
          display: 'none'
        }),
        value: JSON.stringify({
          name: `${(0,data_27b10ed2_node_esm.p)(props.config.storage.repo).owner} Keystatic`,
          url: deployedURL ? `${deployedURL}/keystatic` : `${window.location.origin}/keystatic`,
          public: true,
          redirect_url: `${window.location.origin}/api/keystatic/github/created-app`,
          callback_urls: [`${window.location.origin}/api/keystatic/github/oauth/callback`, `http://127.0.0.1/api/keystatic/github/oauth/callback`, ...(deployedURL ? [`${deployedURL}/api/keystatic/github/oauth/callback`] : [])],
          request_oauth_on_install: true,
          default_permissions: {
            contents: 'write',
            metadata: 'read',
            pull_requests: 'read'
          }
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
        prominence: "high",
        type: "submit",
        children: "Create GitHub App"
      })]
    })
  });
}

function RepoNotFound(props) {
  const repo = (0,data_27b10ed2_node_esm.s)(props.config.storage.repo);
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
    alignItems: "center",
    justifyContent: "center",
    margin: "xxlarge",
    children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_layout_esm/* Flex */.kC, {
      backgroundColor: "surface",
      padding: "large",
      border: "color.alias.borderIdle",
      borderRadius: "medium",
      direction: "column",
      justifyContent: "center",
      gap: "xlarge",
      maxWidth: "scale.4600",
      children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
        justifyContent: "center",
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Heading, {
          children: "Repo not found"
        })
      }), /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_typography_esm.Text, {
        children: ["Keystatic is configured for the", ' ', /*#__PURE__*/(0,jsx_runtime_.jsx)("a", {
          href: `https://github.com/${repo}`,
          children: repo
        }), " GitHub repo but Keystatic isn't able to access this repo. This is either because you don't have access to this repo or you haven't added the GitHub app to it."]
      }), /*#__PURE__*/(0,jsx_runtime_.jsx)(InstallGitHubApp, {
        config: props.config
      })]
    })
  });
}

const storedStateSchema = lib.z.object({
  state: lib.z.string(),
  from: lib.z.string(),
  code_verifier: lib.z.string()
});
const tokenResponseSchema = lib.z.object({
  access_token: lib.z.string(),
  token_type: lib.z.string(),
  expires_in: lib.z.number()
});
function KeystaticCloudAuthCallback(props) {
  const router = (0,data_27b10ed2_node_esm.u)();
  const url = new URL(window.location.href);
  const code = url.searchParams.get('code');
  const state = url.searchParams.get('state');
  const storedState = (0,react_.useMemo)(() => {
    const _storedState = localStorage.getItem('keystatic-cloud-state');
    const storedState = storedStateSchema.safeParse((() => {
      try {
        return JSON.parse(_storedState || '');
      } catch {
        return null;
      }
    })());
    return storedState;
  }, []);
  const [error, setError] = (0,react_.useState)(null);
  (0,react_.useEffect)(() => {
    const {
      storage
    } = props.config;
    if (code && state && storedState.success && storage.kind === 'cloud') {
      (async () => {
        const res = await fetch(`${utils_542a6faa_node_esm.K}/oauth/token`, {
          method: 'POST',
          body: new URLSearchParams({
            code,
            client_id: storage.project,
            redirect_uri: `${window.location.origin}/keystatic/cloud/oauth/callback`,
            code_verifier: storedState.data.code_verifier,
            grant_type: 'authorization_code'
          }).toString(),
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...utils_542a6faa_node_esm.l
          }
        });
        if (!res.ok) {
          throw new Error(`Bad response: ${res.status} ${res.statusText}\n\n${await res.text()}`);
        }
        const data = await res.json();
        const parsed = tokenResponseSchema.parse(data);
        localStorage.setItem('keystatic-cloud-access-token', JSON.stringify({
          token: parsed.access_token,
          validUntil: Date.now() + parsed.expires_in * 1000
        }));
        router.push(`/keystatic/${storedState.data.from}`);
      })().catch(error => {
        setError(error);
      });
    }
  }, [code, state, router, storedState, props.config]);
  if (props.config.storage.kind !== 'cloud') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      children: "Missing Keystatic Cloud config"
    });
  }
  if (!code || !state) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      children: "Missing code or state"
    });
  }
  if (storedState.success === false || state !== storedState.data.state) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      children: "Invalid state"
    });
  }
  if (error) {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
      children: error.message
    });
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)("div", {
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_progress_esm/* ProgressCircle */._3, {
      isIndeterminate: true,
      "aria-label": "Authenticating"
    })
  });
}

function parseParamsWithoutBranch(params) {
  if (params.length === 0) {
    return {};
  }
  if (params.length === 2 && params[0] === 'singleton') {
    return {
      singleton: params[1]
    };
  }
  if (params.length < 2 || params[0] !== 'collection') return null;
  const collection = params[1];
  if (params.length === 2) {
    return {
      collection
    };
  }
  if (params.length === 3 && params[2] === 'create') {
    return {
      collection,
      kind: 'create'
    };
  }
  if (params.length === 4 && params[2] === 'item') {
    const slug = params[3];
    return {
      collection,
      kind: 'edit',
      slug
    };
  }
  return null;
}
function RedirectToBranch(props) {
  const {
    push
  } = (0,data_27b10ed2_node_esm.u)();
  const {
    data,
    error
  } = (0,react_.useContext)(data_27b10ed2_node_esm.G);
  (0,react_.useEffect)(() => {
    var _error$response, _data$repository, _data$repository2, _error$graphQLErrors, _error$graphQLErrors$, _error$graphQLErrors$2, _error$graphQLErrors2, _error$graphQLErrors3, _error$graphQLErrors4;
    if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {
      if (props.config.storage.kind === 'github') {
        window.location.href = '/api/keystatic/github/login';
      } else {
        (0,utils_542a6faa_node_esm.r)('', props.config);
      }
    }
    if (data !== null && data !== void 0 && (_data$repository = data.repository) !== null && _data$repository !== void 0 && _data$repository.defaultBranchRef) {
      push(`/keystatic/branch/${encodeURIComponent(data.repository.defaultBranchRef.name)}`);
    }
    if (props.config.storage.kind === 'github' && !(data !== null && data !== void 0 && (_data$repository2 = data.repository) !== null && _data$repository2 !== void 0 && _data$repository2.id) && (error === null || error === void 0 ? void 0 : (_error$graphQLErrors = error.graphQLErrors) === null || _error$graphQLErrors === void 0 ? void 0 : (_error$graphQLErrors$ = _error$graphQLErrors[0]) === null || _error$graphQLErrors$ === void 0 ? void 0 : (_error$graphQLErrors$2 = _error$graphQLErrors$.originalError) === null || _error$graphQLErrors$2 === void 0 ? void 0 : _error$graphQLErrors$2.type) === 'NOT_FOUND' || (error === null || error === void 0 ? void 0 : (_error$graphQLErrors2 = error.graphQLErrors) === null || _error$graphQLErrors2 === void 0 ? void 0 : (_error$graphQLErrors3 = _error$graphQLErrors2[0]) === null || _error$graphQLErrors3 === void 0 ? void 0 : (_error$graphQLErrors4 = _error$graphQLErrors3.originalError) === null || _error$graphQLErrors4 === void 0 ? void 0 : _error$graphQLErrors4.type) === 'FORBIDDEN') {
      window.location.href = '/api/keystatic/github/repo-not-found';
    }
  }, [data, error, push, props.config]);
  return null;
}
function PageInner(_ref) {
  let {
    config
  } = _ref;
  const {
    params
  } = (0,data_27b10ed2_node_esm.u)();
  let branch = null,
    parsedParams,
    basePath;
  if (config.storage.kind === 'cloud' && params.join('/') === 'cloud/oauth/callback') {
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(KeystaticCloudAuthCallback, {
      config: config
    });
  }
  let wrapper = x => x;
  if ((0,utils_542a6faa_node_esm.a)(config) || (0,utils_542a6faa_node_esm.i)(config)) {
    wrapper = element => /*#__PURE__*/(0,jsx_runtime_.jsx)(AuthWrapper, {
      config: config,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(data_27b10ed2_node_esm.w, {
        config: config,
        children: element
      })
    });
    if (params.length === 0) {
      return wrapper( /*#__PURE__*/(0,jsx_runtime_.jsx)(RedirectToBranch, {
        config: config
      }));
    }
    if (params.length === 1 && (0,utils_542a6faa_node_esm.a)(config)) {
      if (params[0] === 'setup') return /*#__PURE__*/(0,jsx_runtime_.jsx)(KeystaticSetup, {
        config: config
      });
      if (params[0] === 'repo-not-found') {
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(RepoNotFound, {
          config: config
        });
      }
      if (params[0] === 'from-template-deploy') {
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(FromTemplateDeploy, {
          config: config
        });
      }
      if (params[0] === 'created-github-app') {
        return /*#__PURE__*/(0,jsx_runtime_.jsx)(CreatedGitHubApp, {
          config: config
        });
      }
    }
    if (params[0] !== 'branch' || params.length < 2) {
      return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
        children: "Not found"
      });
    }
    branch = params[1];
    basePath = `/keystatic/branch/${encodeURIComponent(branch)}`;
    parsedParams = parseParamsWithoutBranch(params.slice(2));
  } else {
    parsedParams = parseParamsWithoutBranch(params);
    basePath = '/keystatic';
  }
  return wrapper( /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShell, {
    config: config,
    currentBranch: branch || '',
    basePath: basePath,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(NotFoundBoundary, {
      fallback: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellRoot, {
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(AppShellBody, {
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(EmptyState, {
            icon: fileX2Icon,
            title: "Not found",
            message: "This page could not be found."
          })
        })
      }),
      children: parsedParams === null ? /*#__PURE__*/(0,jsx_runtime_.jsx)(AlwaysNotFound, {}) : parsedParams.collection ? parsedParams.kind === 'create' ? /*#__PURE__*/(0,jsx_runtime_.jsx)(CreateItem, {
        collection: parsedParams.collection,
        config: config,
        basePath: basePath
      }, parsedParams.collection) : parsedParams.kind === 'edit' ? /*#__PURE__*/(0,jsx_runtime_.jsx)(ItemPageWrapper, {
        collection: parsedParams.collection,
        basePath: basePath,
        config: config,
        itemSlug: parsedParams.slug
      }, parsedParams.collection) : /*#__PURE__*/(0,jsx_runtime_.jsx)(CollectionPage, {
        basePath: basePath,
        collection: parsedParams.collection,
        config: config
      }, parsedParams.collection) : parsedParams.singleton ? /*#__PURE__*/(0,jsx_runtime_.jsx)(SingletonPageWrapper, {
        config: config,
        singleton: parsedParams.singleton
      }, parsedParams.singleton) : /*#__PURE__*/(0,jsx_runtime_.jsx)(DashboardPage, {
        config: config,
        basePath: basePath
      })
    })
  }));
}
function AlwaysNotFound() {
  notFound();
}
function AuthWrapper(props) {
  const [state, setState] = (0,react_.useState)('unknown');
  const router = (0,data_27b10ed2_node_esm.u)();
  (0,react_.useEffect)(() => {
    (0,data_27b10ed2_node_esm.g)(props.config).then(auth => {
      if (auth) {
        setState('valid');
        return;
      }
      setState('explicit-auth');
    });
  }, [props.config]);
  if (state === 'valid') {
    return props.children;
  }
  if (state === 'explicit-auth') {
    if (props.config.storage.kind === 'github') {
      return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        children: /*#__PURE__*/(0,jsx_runtime_.jsxs)(keystar_ui_button_esm/* Button */.zx, {
          href: `/api/keystatic/github/login${router.params.length ? `?${new URLSearchParams({
            from: router.params.join('/')
          })}` : ''}`,
          children: [/*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_icon_esm/* Icon */.J, {
            src: githubIcon
          }), /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: "Log in with GitHub"
          })]
        })
      });
    }
    if (props.config.storage.kind === 'cloud') {
      return /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_layout_esm/* Flex */.kC, {
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_button_esm/* Button */.zx, {
          onPress: () => {
            (0,utils_542a6faa_node_esm.r)(router.params.join('/'), props.config);
          },
          children: /*#__PURE__*/(0,jsx_runtime_.jsx)(keystar_ui_typography_esm.Text, {
            children: "Log in with Keystatic Cloud"
          })
        })
      });
    }
  }
  return null;
}
function Keystatic(props) {
  if (props.config.storage.kind === 'github') {
    (0,data_27b10ed2_node_esm.t)(props.config.storage.repo);
  }
  (0,react_.useEffect)(() => {
    if (window.location.hostname === 'localhost') {
      window.location.href = window.location.href.replace('localhost', '127.0.0.1');
    }
  }, []);
  if (window.location.hostname === 'localhost') {
    return null;
  }
  return /*#__PURE__*/(0,jsx_runtime_.jsx)(AppSlugProvider, {
    value: props.appSlug,
    children: /*#__PURE__*/(0,jsx_runtime_.jsx)(data_27b10ed2_node_esm.v, {
      router: props.router,
      children: /*#__PURE__*/(0,jsx_runtime_.jsx)(Provider, {
        config: props.config,
        Link: props.link,
        children: /*#__PURE__*/(0,jsx_runtime_.jsx)(PageInner, {
          config: props.config
        })
      })
    })
  });
}



;// CONCATENATED MODULE: ../node_modules/@keystatic/next/ui/app/dist/keystatic-next-ui-app.esm.js






let _isClient = false;
function useIsClient() {
  const [isClient, setIsClient] = (0,react_.useState)(_isClient);
  (0,react_.useEffect)(() => {
    _isClient = true;
    setIsClient(true);
  }, []);
  return isClient;
}
function makePage(config) {
  return function Page() {
    const isClient = useIsClient();
    const router = (0,navigation.useRouter)();
    const pathname = (0,navigation.usePathname)();
    let href = pathname;
    const searchParams = (0,navigation.useSearchParams)().toString();
    if (searchParams) {
      href += `?${searchParams}`;
    }
    const keystaticRouter = (0,react_.useMemo)(() => {
      const replaced = pathname.replace(/^\/keystatic\/?/, '');
      const params = replaced === '' ? [] : replaced.split('/').map(decodeURIComponent);
      return {
        href,
        params,
        push: async path => {
          router.push(path, {
            forceOptimisticNavigation: true
          });
        },
        replace: async path => {
          router.replace(path, {
            forceOptimisticNavigation: true
          });
        }
      };
    }, [href, router, pathname]);
    if (!isClient) return null;
    return /*#__PURE__*/(0,jsx_runtime_.jsx)(Keystatic, {
      router: keystaticRouter,
      config: config,
      link: (link_default()),
      appSlug: appSlug
    });
  };
}
const appSlug = {
  envName: 'NEXT_PUBLIC_KEYSTATIC_GITHUB_APP_SLUG',
  value: process.env.NEXT_PUBLIC_KEYSTATIC_GITHUB_APP_SLUG
};




/***/ }),

/***/ 33048:
/***/ ((__unused_webpack_module, exports) => {

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/grammar/tag.js
var require_tag = __commonJS({
  "src/grammar/tag.js"(exports, module2) {
    "use strict";
    function peg$subclass(child, parent) {
      function C() {
        this.constructor = child;
      }
      C.prototype = parent.prototype;
      child.prototype = new C();
    }
    function peg$SyntaxError(message, expected, found, location) {
      this.message = message;
      this.expected = expected;
      this.found = found;
      this.location = location;
      this.name = "SyntaxError";
      if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(this, peg$SyntaxError);
      }
    }
    peg$subclass(peg$SyntaxError, Error);
    peg$SyntaxError.buildMessage = function(expected, found, location) {
      var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return '"' + literalEscape(expectation.text) + '"';
        },
        class: function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part) ? classEscape(part[0]) + "-" + classEscape(part[1]) : classEscape(part);
          });
          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },
        any: function() {
          return "any character";
        },
        end: function() {
          return "end of input";
        },
        other: function(expectation) {
          return expectation.description;
        },
        not: function(expectation) {
          return "not " + describeExpectation(expectation.expected);
        }
      };
      function hex(ch) {
        return ch.charCodeAt(0).toString(16).toUpperCase();
      }
      function literalEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function classEscape(s2) {
        return s2.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function(ch) {
          return "\\x0" + hex(ch);
        }).replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) {
          return "\\x" + hex(ch);
        });
      }
      function describeExpectation(expectation) {
        return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
      }
      function describeExpected(expected2) {
        var descriptions = expected2.map(describeExpectation);
        var i, j;
        descriptions.sort();
        if (descriptions.length > 0) {
          for (i = 1, j = 1; i < descriptions.length; i++) {
            if (descriptions[i - 1] !== descriptions[i]) {
              descriptions[j] = descriptions[i];
              j++;
            }
          }
          descriptions.length = j;
        }
        switch (descriptions.length) {
          case 1:
            return descriptions[0];
          case 2:
            return descriptions[0] + " or " + descriptions[1];
          default:
            return descriptions.slice(0, -1).join(", ") + ", or " + descriptions[descriptions.length - 1];
        }
      }
      function describeFound(found2) {
        return found2 ? '"' + literalEscape(found2) + '"' : "end of input";
      }
      return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    function peg$parse(input, options) {
      options = options !== void 0 ? options : {};
      var peg$FAILED = {};
      var peg$startRuleFunctions = { Top: peg$parseTop };
      var peg$startRuleFunction = peg$parseTop;
      var peg$c0 = "/";
      var peg$c1 = ".";
      var peg$c2 = "#";
      var peg$c3 = "=";
      var peg$c4 = "(";
      var peg$c5 = ")";
      var peg$c6 = ",";
      var peg$c7 = "[";
      var peg$c8 = "]";
      var peg$c9 = "null";
      var peg$c10 = "true";
      var peg$c11 = "false";
      var peg$c12 = "{";
      var peg$c13 = "}";
      var peg$c14 = ":";
      var peg$c15 = "-";
      var peg$c16 = '"';
      var peg$c17 = "\\";
      var peg$r0 = /^[$@]/;
      var peg$r1 = /^[0-9]/;
      var peg$r2 = /^[^\0-\x1F"\\]/;
      var peg$r3 = /^[a-zA-Z0-9_\-]/;
      var peg$r4 = /^[ \n\t]/;
      var peg$e0 = peg$literalExpectation("/", false);
      var peg$e1 = peg$otherExpectation("tag name");
      var peg$e2 = peg$otherExpectation("class");
      var peg$e3 = peg$otherExpectation("id");
      var peg$e4 = peg$literalExpectation("=", false);
      var peg$e5 = peg$literalExpectation("(", false);
      var peg$e6 = peg$literalExpectation(")", false);
      var peg$e7 = peg$literalExpectation(",", false);
      var peg$e8 = peg$otherExpectation("variable");
      var peg$e9 = peg$otherExpectation("null");
      var peg$e10 = peg$otherExpectation("boolean");
      var peg$e11 = peg$literalExpectation("[", false);
      var peg$e12 = peg$literalExpectation("]", false);
      var peg$e13 = peg$literalExpectation("{", false);
      var peg$e14 = peg$literalExpectation("}", false);
      var peg$e15 = peg$literalExpectation(":", false);
      var peg$e16 = peg$otherExpectation("number");
      var peg$e17 = peg$otherExpectation("string");
      var peg$e18 = peg$otherExpectation("identifier");
      var peg$e19 = peg$otherExpectation("whitespace");
      var peg$f0 = function(variable) {
        return { type: "variable", meta: { variable } };
      };
      var peg$f1 = function(attributes) {
        return { type: "annotation", meta: { attributes } };
      };
      var peg$f2 = function(tag, value) {
        return value;
      };
      var peg$f3 = function(tag, primary, attributes, close) {
        if (primary) {
          attributes = attributes || [];
          attributes.unshift({
            type: "attribute",
            name: "primary",
            value: primary
          });
        }
        const [type, nesting] = close ? ["tag", 0] : ["tag_open", 1];
        return { type, nesting, meta: { tag, attributes } };
      };
      var peg$f4 = function(tag) {
        return { type: "tag_close", nesting: -1, meta: { tag } };
      };
      var peg$f5 = function(head, tail) {
        return !head ? [] : [head, ...tail];
      };
      var peg$f6 = function(item2) {
        return item2;
      };
      var peg$f7 = function(ids) {
        return ids;
      };
      var peg$f8 = function(classes) {
        return classes;
      };
      var peg$f9 = function(attribute) {
        return attribute;
      };
      var peg$f10 = function(name) {
        return { type: "class", name, value: true };
      };
      var peg$f11 = function(value) {
        return { type: "attribute", name: "id", value };
      };
      var peg$f12 = function(name, value) {
        return { type: "attribute", name, value };
      };
      var peg$f13 = function(name, head, tail) {
        return head ? [head, ...tail] : [];
      };
      var peg$f14 = function(name, params) {
        let parameters = {};
        for (let [index, { name: name2, value }] of params.entries())
          parameters[name2 || index] = value;
        return new Function3(name, parameters);
      };
      var peg$f15 = function(name) {
        return name;
      };
      var peg$f16 = function(name, value) {
        return { name, value };
      };
      var peg$f17 = function(value) {
        return value;
      };
      var peg$f18 = function(prefix, head, tail) {
        if (prefix === "@")
          return [head, ...tail];
        return new Variable2([head, ...tail]);
      };
      var peg$f19 = function() {
        return null;
      };
      var peg$f20 = function() {
        return true;
      };
      var peg$f21 = function() {
        return false;
      };
      var peg$f22 = function(head, tail) {
        return [head, ...tail];
      };
      var peg$f23 = function(value) {
        return value || [];
      };
      var peg$f24 = function(head, tail) {
        return Object.assign(head, ...tail);
      };
      var peg$f25 = function(value) {
        return value || {};
      };
      var peg$f26 = function(key, value) {
        return key === "$$mdtype" ? {} : { [key]: value };
      };
      var peg$f27 = function() {
        return parseFloat(text2());
      };
      var peg$f28 = function(value) {
        return value.join("");
      };
      var peg$f29 = function(sequence) {
        return sequence;
      };
      var peg$currPos = 0;
      var peg$savedPos = 0;
      var peg$posDetailsCache = [{ line: 1, column: 1 }];
      var peg$expected = [];
      var peg$silentFails = 0;
      var peg$result;
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error(`Can't start parsing from rule "` + options.startRule + '".');
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
      function text2() {
        return input.substring(peg$savedPos, peg$currPos);
      }
      function offset() {
        return peg$savedPos;
      }
      function range() {
        return [peg$savedPos, peg$currPos];
      }
      function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
      }
      function expected(description, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location2);
      }
      function error2(message, location2) {
        location2 = location2 !== void 0 ? location2 : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location2);
      }
      function peg$literalExpectation(text3, ignoreCase) {
        return { type: "literal", text: text3, ignoreCase };
      }
      function peg$classExpectation(parts, inverted, ignoreCase) {
        return {
          type: "class",
          parts,
          inverted,
          ignoreCase
        };
      }
      function peg$anyExpectation() {
        return { type: "any" };
      }
      function peg$endExpectation() {
        return { type: "end" };
      }
      function peg$otherExpectation(description) {
        return { type: "other", description };
      }
      function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
          return details;
        } else {
          p = pos - 1;
          while (!peg$posDetailsCache[p]) {
            p--;
          }
          details = peg$posDetailsCache[p];
          details = {
            line: details.line,
            column: details.column
          };
          while (p < pos) {
            if (input.charCodeAt(p) === 10) {
              details.line++;
              details.column = 1;
            } else {
              details.column++;
            }
            p++;
          }
          peg$posDetailsCache[pos] = details;
          return details;
        }
      }
      var peg$VALIDFILENAME = typeof options.filename === "string" && options.filename.length > 0;
      function peg$computeLocation(startPos, endPos) {
        var loc = {};
        if (peg$VALIDFILENAME)
          loc.filename = options.filename;
        var startPosDetails = peg$computePosDetails(startPos);
        loc.start = {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        };
        var endPosDetails = peg$computePosDetails(endPos);
        loc.end = {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        };
        return loc;
      }
      function peg$begin() {
        peg$expected.push({ pos: peg$currPos, variants: [] });
      }
      function peg$expect(expected2) {
        var top = peg$expected[peg$expected.length - 1];
        if (peg$currPos < top.pos) {
          return;
        }
        if (peg$currPos > top.pos) {
          top.pos = peg$currPos;
          top.variants = [];
        }
        top.variants.push(expected2);
      }
      function peg$end(invert) {
        var expected2 = peg$expected.pop();
        var top = peg$expected[peg$expected.length - 1];
        var variants = expected2.variants;
        if (top.pos !== expected2.pos) {
          return;
        }
        if (invert) {
          variants = variants.map(function(e) {
            return e.type === "not" ? e.expected : { type: "not", expected: e };
          });
        }
        Array.prototype.push.apply(top.variants, variants);
      }
      function peg$buildSimpleError(message, location2) {
        return new peg$SyntaxError(message, null, null, location2);
      }
      function peg$buildStructuredError(expected2, found, location2) {
        return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected2, found, location2), expected2, found, location2);
      }
      function peg$buildError() {
        var expected2 = peg$expected[0];
        var failPos = expected2.pos;
        return peg$buildStructuredError(expected2.variants, failPos < input.length ? input.charAt(failPos) : null, failPos < input.length ? peg$computeLocation(failPos, failPos + 1) : peg$computeLocation(failPos, failPos));
      }
      function peg$parseTop() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$parseTopLevelValue();
        if (s0 === peg$FAILED) {
          s0 = peg$parseAnnotation();
          if (s0 === peg$FAILED) {
            s0 = peg$parseTagOpen();
            if (s0 === peg$FAILED) {
              s0 = peg$parseTagClose();
            }
          }
        }
        return s0;
      }
      function peg$parseTopLevelValue() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseVariable();
        if (s1 === peg$FAILED) {
          s1 = peg$parseFunction();
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f0(s1);
        }
        s0 = s1;
        return s0;
      }
      function peg$parseAnnotation() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagAttributes();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          peg$savedPos = s0;
          s0 = peg$f1(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagOpen() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagName();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            peg$savedPos = s3;
            s3 = peg$f2(s1, s4);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parseTagAttributes();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = [];
          s6 = peg$parse_();
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            s6 = peg$parse_();
          }
          rule$expects(peg$e0);
          if (input.charCodeAt(peg$currPos) === 47) {
            s6 = peg$c0;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f3(s1, s3, s4, s6);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagClose() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e0);
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c0;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTagName();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagName() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e1);
        peg$silentFails++;
        s0 = peg$parseIdentifier();
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagAttributes() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagAttributesItem();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseTagAttributesTail();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseTagAttributesTail();
          }
          peg$savedPos = s0;
          s0 = peg$f5(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagAttributesTail() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parse_();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseTagAttributesItem();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTagAttributesItem() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseTagShortcutId();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f7(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseTagShortcutClass();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f8(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseTagAttribute();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f9(s1);
            }
            s0 = s1;
          }
        }
        return s0;
      }
      function peg$parseTagShortcutClass() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e2);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagShortcutId() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e3);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c2;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f11(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseTagAttribute() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c3;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseValue();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f12(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunction() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e5);
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c4;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$currPos;
            s5 = peg$parseFunctionParameter();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            s6 = [];
            s7 = peg$parseFunctionParameterTail();
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parseFunctionParameterTail();
            }
            peg$savedPos = s4;
            s4 = peg$f13(s1, s5, s6);
            rule$expects(peg$e6);
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f14(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunctionParameter() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseIdentifier();
        if (s2 !== peg$FAILED) {
          rule$expects(peg$e4);
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c3;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s1;
            s1 = peg$f15(s2);
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = peg$parseValue();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f16(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseFunctionParameterTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseFunctionParameter();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseTrailingComma() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = null;
        }
        return s0;
      }
      function peg$parseVariable() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e8);
        peg$silentFails++;
        s0 = peg$currPos;
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parseVariableTail();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseVariableTail();
            }
            peg$savedPos = s0;
            s0 = peg$f18(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseVariableTail() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c1;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseIdentifier();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c7;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseValueNumber();
            if (s2 === peg$FAILED) {
              s2 = peg$parseValueString();
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c8;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f17(s2);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
        return s0;
      }
      function peg$parseValue() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$parseValueNull();
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueBoolean();
          if (s0 === peg$FAILED) {
            s0 = peg$parseValueString();
            if (s0 === peg$FAILED) {
              s0 = peg$parseValueNumber();
              if (s0 === peg$FAILED) {
                s0 = peg$parseValueArray();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseValueHash();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseFunction();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseVariable();
                    }
                  }
                }
              }
            }
          }
        }
        return s0;
      }
      function peg$parseValueNull() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e9);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c9) {
          s1 = peg$c9;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f19();
        }
        s0 = s1;
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueBoolean() {
        var s0, s1;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e10);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c10) {
          s1 = peg$c10;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f20();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 5) === peg$c11) {
            s1 = peg$c11;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f21();
          }
          s0 = s1;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueArray() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e11);
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c7;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseValueArrayTail();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseValueArrayTail();
            }
            s6 = peg$parseTrailingComma();
            peg$savedPos = s3;
            s3 = peg$f22(s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          rule$expects(peg$e12);
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c8;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f23(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueArrayTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseValue();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHash() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        rule$expects(peg$e13);
        if (input.charCodeAt(peg$currPos) === 123) {
          s1 = peg$c12;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parse_();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parse_();
          }
          s3 = peg$currPos;
          s4 = peg$parseValueHashItem();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseValueHashTail();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseValueHashTail();
            }
            s6 = peg$parseTrailingComma();
            peg$savedPos = s3;
            s3 = peg$f24(s4, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = [];
          s5 = peg$parse_();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parse_();
          }
          rule$expects(peg$e14);
          if (input.charCodeAt(peg$currPos) === 125) {
            s5 = peg$c13;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f25(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHashTail() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parse_();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parse_();
        }
        rule$expects(peg$e7);
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c6;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_();
          }
          s4 = peg$parseValueHashItem();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueHashItem() {
        var s0, s1, s2, s3, s4;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 === peg$FAILED) {
          s1 = peg$parseValueString();
        }
        if (s1 !== peg$FAILED) {
          rule$expects(peg$e15);
          if (input.charCodeAt(peg$currPos) === 58) {
            s2 = peg$c14;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$parse_();
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parse_();
            }
            s4 = peg$parseValue();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f26(s1, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseValueNumber() {
        var s0, s1, s2, s3, s4, s5, s6;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e16);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c15;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = [];
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s4 = peg$c1;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$r1.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$r1.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f27();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueString() {
        var s0, s1, s2, s3;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e17);
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
          s1 = peg$c16;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseValueStringChars();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseValueStringChars();
          }
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c16;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f28(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parseValueStringChars() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseValueStringEscapes();
        }
        return s0;
      }
      function peg$parseValueStringEscapes() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c17;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s2 = peg$c16;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 92) {
              s2 = peg$c17;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f29(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        return s0;
      }
      function peg$parseIdentifier() {
        var s0, s1, s2;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e18);
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
        peg$silentFails--;
        return s0;
      }
      function peg$parse_() {
        var s0;
        var rule$expects = function(expected2) {
          if (peg$silentFails === 0)
            peg$expect(expected2);
        };
        rule$expects(peg$e19);
        peg$silentFails++;
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
        }
        peg$silentFails--;
        return s0;
      }
      const { Variable: Variable2, Function: Function3 } = options;
      peg$begin();
      peg$result = peg$startRuleFunction();
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$expect(peg$endExpectation());
        }
        throw peg$buildError();
      }
    }
    module2.exports = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    };
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/markdown-it/lib/common/entities.js
var require_entities2 = __commonJS({
  "node_modules/markdown-it/lib/common/entities.js"(exports, module2) {
    "use strict";
    module2.exports = require_entities();
  }
});

// node_modules/uc.micro/categories/P/regex.js
var require_regex = __commonJS({
  "node_modules/uc.micro/categories/P/regex.js"(exports, module2) {
    module2.exports = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
  }
});

// node_modules/mdurl/encode.js
var require_encode = __commonJS({
  "node_modules/mdurl/encode.js"(exports, module2) {
    "use strict";
    var encodeCache = {};
    function getEncodeCache(exclude) {
      var i, ch, cache = encodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = encodeCache[exclude] = [];
      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
        if (/^[0-9a-z]$/i.test(ch)) {
          cache.push(ch);
        } else {
          cache.push("%" + ("0" + i.toString(16).toUpperCase()).slice(-2));
        }
      }
      for (i = 0; i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }
      return cache;
    }
    function encode(string, exclude, keepEscaped) {
      var i, l, code2, nextCode, cache, result = "";
      if (typeof exclude !== "string") {
        keepEscaped = exclude;
        exclude = encode.defaultChars;
      }
      if (typeof keepEscaped === "undefined") {
        keepEscaped = true;
      }
      cache = getEncodeCache(exclude);
      for (i = 0, l = string.length; i < l; i++) {
        code2 = string.charCodeAt(i);
        if (keepEscaped && code2 === 37 && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }
        if (code2 < 128) {
          result += cache[code2];
          continue;
        }
        if (code2 >= 55296 && code2 <= 57343) {
          if (code2 >= 55296 && code2 <= 56319 && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);
            if (nextCode >= 56320 && nextCode <= 57343) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }
          result += "%EF%BF%BD";
          continue;
        }
        result += encodeURIComponent(string[i]);
      }
      return result;
    }
    encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
    encode.componentChars = "-_.!~*'()";
    module2.exports = encode;
  }
});

// node_modules/mdurl/decode.js
var require_decode = __commonJS({
  "node_modules/mdurl/decode.js"(exports, module2) {
    "use strict";
    var decodeCache = {};
    function getDecodeCache(exclude) {
      var i, ch, cache = decodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = decodeCache[exclude] = [];
      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
        cache.push(ch);
      }
      for (i = 0; i < exclude.length; i++) {
        ch = exclude.charCodeAt(i);
        cache[ch] = "%" + ("0" + ch.toString(16).toUpperCase()).slice(-2);
      }
      return cache;
    }
    function decode(string, exclude) {
      var cache;
      if (typeof exclude !== "string") {
        exclude = decode.defaultChars;
      }
      cache = getDecodeCache(exclude);
      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        var i, l, b1, b2, b3, b4, chr, result = "";
        for (i = 0, l = seq.length; i < l; i += 3) {
          b1 = parseInt(seq.slice(i + 1, i + 3), 16);
          if (b1 < 128) {
            result += cache[b1];
            continue;
          }
          if ((b1 & 224) === 192 && i + 3 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            if ((b2 & 192) === 128) {
              chr = b1 << 6 & 1984 | b2 & 63;
              if (chr < 128) {
                result += "\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }
              i += 3;
              continue;
            }
          }
          if ((b1 & 240) === 224 && i + 6 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128) {
              chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
              if (chr < 2048 || chr >= 55296 && chr <= 57343) {
                result += "\uFFFD\uFFFD\uFFFD";
              } else {
                result += String.fromCharCode(chr);
              }
              i += 6;
              continue;
            }
          }
          if ((b1 & 248) === 240 && i + 9 < l) {
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            b4 = parseInt(seq.slice(i + 10, i + 12), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
              chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
              if (chr < 65536 || chr > 1114111) {
                result += "\uFFFD\uFFFD\uFFFD\uFFFD";
              } else {
                chr -= 65536;
                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
              }
              i += 9;
              continue;
            }
          }
          result += "\uFFFD";
        }
        return result;
      });
    }
    decode.defaultChars = ";/?:@&=+$,#";
    decode.componentChars = "";
    module2.exports = decode;
  }
});

// node_modules/mdurl/format.js
var require_format = __commonJS({
  "node_modules/mdurl/format.js"(exports, module2) {
    "use strict";
    module2.exports = function format2(url) {
      var result = "";
      result += url.protocol || "";
      result += url.slashes ? "//" : "";
      result += url.auth ? url.auth + "@" : "";
      if (url.hostname && url.hostname.indexOf(":") !== -1) {
        result += "[" + url.hostname + "]";
      } else {
        result += url.hostname || "";
      }
      result += url.port ? ":" + url.port : "";
      result += url.pathname || "";
      result += url.search || "";
      result += url.hash || "";
      return result;
    };
  }
});

// node_modules/mdurl/parse.js
var require_parse = __commonJS({
  "node_modules/mdurl/parse.js"(exports, module2) {
    "use strict";
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    }
    var protocolPattern = /^([a-z0-9.+-]+:)/i;
    var portPattern = /:[0-9]*$/;
    var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    var autoEscape = ["'"].concat(unwise);
    var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    var hostEndingChars = ["/", "?", "#"];
    var hostnameMaxLen = 255;
    var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    var hostlessProtocol = {
      "javascript": true,
      "javascript:": true
    };
    var slashedProtocol = {
      "http": true,
      "https": true,
      "ftp": true,
      "gopher": true,
      "file": true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) {
        return url;
      }
      var u = new Url();
      u.parse(url, slashesDenoteHost);
      return u;
    }
    Url.prototype.parse = function(url, slashesDenoteHost) {
      var i, l, lowerProto, hec, slashes, rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
          }
          return this;
        }
      }
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        var auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        }
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        if (rest[hostEnd - 1] === ":") {
          hostEnd--;
        }
        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost(host);
        this.hostname = this.hostname || "";
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              var newpart = "";
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        }
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      }
      var hash = rest.indexOf("#");
      if (hash !== -1) {
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "";
      }
      return this;
    };
    Url.prototype.parseHost = function(host) {
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    module2.exports = urlParse;
  }
});

// node_modules/mdurl/index.js
var require_mdurl = __commonJS({
  "node_modules/mdurl/index.js"(exports, module2) {
    "use strict";
    module2.exports.encode = require_encode();
    module2.exports.decode = require_decode();
    module2.exports.format = require_format();
    module2.exports.parse = require_parse();
  }
});

// node_modules/uc.micro/properties/Any/regex.js
var require_regex2 = __commonJS({
  "node_modules/uc.micro/properties/Any/regex.js"(exports, module2) {
    module2.exports = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
  }
});

// node_modules/uc.micro/categories/Cc/regex.js
var require_regex3 = __commonJS({
  "node_modules/uc.micro/categories/Cc/regex.js"(exports, module2) {
    module2.exports = /[\0-\x1F\x7F-\x9F]/;
  }
});

// node_modules/uc.micro/categories/Cf/regex.js
var require_regex4 = __commonJS({
  "node_modules/uc.micro/categories/Cf/regex.js"(exports, module2) {
    module2.exports = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
  }
});

// node_modules/uc.micro/categories/Z/regex.js
var require_regex5 = __commonJS({
  "node_modules/uc.micro/categories/Z/regex.js"(exports, module2) {
    module2.exports = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
  }
});

// node_modules/uc.micro/index.js
var require_uc = __commonJS({
  "node_modules/uc.micro/index.js"(exports) {
    "use strict";
    exports.Any = require_regex2();
    exports.Cc = require_regex3();
    exports.Cf = require_regex4();
    exports.P = require_regex();
    exports.Z = require_regex5();
  }
});

// node_modules/markdown-it/lib/common/utils.js
var require_utils = __commonJS({
  "node_modules/markdown-it/lib/common/utils.js"(exports) {
    "use strict";
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString(obj) {
      return _class(obj) === "[object String]";
    }
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    function has(object, key) {
      return _hasOwnProperty.call(object, key);
    }
    function assign(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source) {
        if (!source) {
          return;
        }
        if (typeof source !== "object") {
          throw new TypeError(source + "must be object");
        }
        Object.keys(source).forEach(function(key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }
    function arrayReplaceAt(src, pos, newElements) {
      return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
    }
    function isValidEntityCode(c) {
      if (c >= 55296 && c <= 57343) {
        return false;
      }
      if (c >= 64976 && c <= 65007) {
        return false;
      }
      if ((c & 65535) === 65535 || (c & 65535) === 65534) {
        return false;
      }
      if (c >= 0 && c <= 8) {
        return false;
      }
      if (c === 11) {
        return false;
      }
      if (c >= 14 && c <= 31) {
        return false;
      }
      if (c >= 127 && c <= 159) {
        return false;
      }
      if (c > 1114111) {
        return false;
      }
      return true;
    }
    function fromCodePoint(c) {
      if (c > 65535) {
        c -= 65536;
        var surrogate1 = 55296 + (c >> 10), surrogate2 = 56320 + (c & 1023);
        return String.fromCharCode(surrogate1, surrogate2);
      }
      return String.fromCharCode(c);
    }
    var UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
    var ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
    var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
    var entities = require_entities2();
    function replaceEntityPattern(match, name) {
      var code2 = 0;
      if (has(entities, name)) {
        return entities[name];
      }
      if (name.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name)) {
        code2 = name[1].toLowerCase() === "x" ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
        if (isValidEntityCode(code2)) {
          return fromCodePoint(code2);
        }
      }
      return match;
    }
    function unescapeMd(str) {
      if (str.indexOf("\\") < 0) {
        return str;
      }
      return str.replace(UNESCAPE_MD_RE, "$1");
    }
    function unescapeAll(str) {
      if (str.indexOf("\\") < 0 && str.indexOf("&") < 0) {
        return str;
      }
      return str.replace(UNESCAPE_ALL_RE, function(match, escaped, entity) {
        if (escaped) {
          return escaped;
        }
        return replaceEntityPattern(match, entity);
      });
    }
    var HTML_ESCAPE_TEST_RE = /[&<>"]/;
    var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    var HTML_REPLACEMENTS = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    function replaceUnsafeChar(ch) {
      return HTML_REPLACEMENTS[ch];
    }
    function escapeHtml2(str) {
      if (HTML_ESCAPE_TEST_RE.test(str)) {
        return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }
      return str;
    }
    var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
    function escapeRE(str) {
      return str.replace(REGEXP_ESCAPE_RE, "\\$&");
    }
    function isSpace(code2) {
      switch (code2) {
        case 9:
        case 32:
          return true;
      }
      return false;
    }
    function isWhiteSpace(code2) {
      if (code2 >= 8192 && code2 <= 8202) {
        return true;
      }
      switch (code2) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
        case 160:
        case 5760:
        case 8239:
        case 8287:
        case 12288:
          return true;
      }
      return false;
    }
    var UNICODE_PUNCT_RE = require_regex();
    function isPunctChar(ch) {
      return UNICODE_PUNCT_RE.test(ch);
    }
    function isMdAsciiPunct(ch) {
      switch (ch) {
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 124:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    function normalizeReference(str) {
      str = str.trim().replace(/\s+/g, " ");
      if ("\u1E9E".toLowerCase() === "\u1E7E") {
        str = str.replace(/ẞ/g, "\xDF");
      }
      return str.toLowerCase().toUpperCase();
    }
    exports.lib = {};
    exports.lib.mdurl = require_mdurl();
    exports.lib.ucmicro = require_uc();
    exports.assign = assign;
    exports.isString = isString;
    exports.has = has;
    exports.unescapeMd = unescapeMd;
    exports.unescapeAll = unescapeAll;
    exports.isValidEntityCode = isValidEntityCode;
    exports.fromCodePoint = fromCodePoint;
    exports.escapeHtml = escapeHtml2;
    exports.arrayReplaceAt = arrayReplaceAt;
    exports.isSpace = isSpace;
    exports.isWhiteSpace = isWhiteSpace;
    exports.isMdAsciiPunct = isMdAsciiPunct;
    exports.isPunctChar = isPunctChar;
    exports.escapeRE = escapeRE;
    exports.normalizeReference = normalizeReference;
  }
});

// node_modules/markdown-it/lib/helpers/parse_link_label.js
var require_parse_link_label = __commonJS({
  "node_modules/markdown-it/lib/helpers/parse_link_label.js"(exports, module2) {
    "use strict";
    module2.exports = function parseLinkLabel(state, start, disableNested) {
      var level, found, marker, prevPos, labelEnd = -1, max2 = state.posMax, oldPos = state.pos;
      state.pos = start + 1;
      level = 1;
      while (state.pos < max2) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 93) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }
        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 91) {
          if (prevPos === state.pos - 1) {
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
      }
      if (found) {
        labelEnd = state.pos;
      }
      state.pos = oldPos;
      return labelEnd;
    };
  }
});

// node_modules/markdown-it/lib/helpers/parse_link_destination.js
var require_parse_link_destination = __commonJS({
  "node_modules/markdown-it/lib/helpers/parse_link_destination.js"(exports, module2) {
    "use strict";
    var unescapeAll = require_utils().unescapeAll;
    module2.exports = function parseLinkDestination(str, pos, max2) {
      var code2, level, lines = 0, start = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
      };
      if (str.charCodeAt(pos) === 60) {
        pos++;
        while (pos < max2) {
          code2 = str.charCodeAt(pos);
          if (code2 === 10) {
            return result;
          }
          if (code2 === 60) {
            return result;
          }
          if (code2 === 62) {
            result.pos = pos + 1;
            result.str = unescapeAll(str.slice(start + 1, pos));
            result.ok = true;
            return result;
          }
          if (code2 === 92 && pos + 1 < max2) {
            pos += 2;
            continue;
          }
          pos++;
        }
        return result;
      }
      level = 0;
      while (pos < max2) {
        code2 = str.charCodeAt(pos);
        if (code2 === 32) {
          break;
        }
        if (code2 < 32 || code2 === 127) {
          break;
        }
        if (code2 === 92 && pos + 1 < max2) {
          if (str.charCodeAt(pos + 1) === 32) {
            break;
          }
          pos += 2;
          continue;
        }
        if (code2 === 40) {
          level++;
          if (level > 32) {
            return result;
          }
        }
        if (code2 === 41) {
          if (level === 0) {
            break;
          }
          level--;
        }
        pos++;
      }
      if (start === pos) {
        return result;
      }
      if (level !== 0) {
        return result;
      }
      result.str = unescapeAll(str.slice(start, pos));
      result.lines = lines;
      result.pos = pos;
      result.ok = true;
      return result;
    };
  }
});

// node_modules/markdown-it/lib/helpers/parse_link_title.js
var require_parse_link_title = __commonJS({
  "node_modules/markdown-it/lib/helpers/parse_link_title.js"(exports, module2) {
    "use strict";
    var unescapeAll = require_utils().unescapeAll;
    module2.exports = function parseLinkTitle(str, pos, max2) {
      var code2, marker, lines = 0, start = pos, result = {
        ok: false,
        pos: 0,
        lines: 0,
        str: ""
      };
      if (pos >= max2) {
        return result;
      }
      marker = str.charCodeAt(pos);
      if (marker !== 34 && marker !== 39 && marker !== 40) {
        return result;
      }
      pos++;
      if (marker === 40) {
        marker = 41;
      }
      while (pos < max2) {
        code2 = str.charCodeAt(pos);
        if (code2 === marker) {
          result.pos = pos + 1;
          result.lines = lines;
          result.str = unescapeAll(str.slice(start + 1, pos));
          result.ok = true;
          return result;
        } else if (code2 === 40 && marker === 41) {
          return result;
        } else if (code2 === 10) {
          lines++;
        } else if (code2 === 92 && pos + 1 < max2) {
          pos++;
          if (str.charCodeAt(pos) === 10) {
            lines++;
          }
        }
        pos++;
      }
      return result;
    };
  }
});

// node_modules/markdown-it/lib/helpers/index.js
var require_helpers = __commonJS({
  "node_modules/markdown-it/lib/helpers/index.js"(exports) {
    "use strict";
    exports.parseLinkLabel = require_parse_link_label();
    exports.parseLinkDestination = require_parse_link_destination();
    exports.parseLinkTitle = require_parse_link_title();
  }
});

// node_modules/markdown-it/lib/renderer.js
var require_renderer = __commonJS({
  "node_modules/markdown-it/lib/renderer.js"(exports, module2) {
    "use strict";
    var assign = require_utils().assign;
    var unescapeAll = require_utils().unescapeAll;
    var escapeHtml2 = require_utils().escapeHtml;
    var default_rules = {};
    default_rules.code_inline = function(tokens, idx, options, env, slf) {
      var token = tokens[idx];
      return "<code" + slf.renderAttrs(token) + ">" + escapeHtml2(tokens[idx].content) + "</code>";
    };
    default_rules.code_block = function(tokens, idx, options, env, slf) {
      var token = tokens[idx];
      return "<pre" + slf.renderAttrs(token) + "><code>" + escapeHtml2(tokens[idx].content) + "</code></pre>\n";
    };
    default_rules.fence = function(tokens, idx, options, env, slf) {
      var token = tokens[idx], info = token.info ? unescapeAll(token.info).trim() : "", langName = "", langAttrs = "", highlighted, i, arr, tmpAttrs, tmpToken;
      if (info) {
        arr = info.split(/(\s+)/g);
        langName = arr[0];
        langAttrs = arr.slice(2).join("");
      }
      if (options.highlight) {
        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml2(token.content);
      } else {
        highlighted = escapeHtml2(token.content);
      }
      if (highlighted.indexOf("<pre") === 0) {
        return highlighted + "\n";
      }
      if (info) {
        i = token.attrIndex("class");
        tmpAttrs = token.attrs ? token.attrs.slice() : [];
        if (i < 0) {
          tmpAttrs.push(["class", options.langPrefix + langName]);
        } else {
          tmpAttrs[i] = tmpAttrs[i].slice();
          tmpAttrs[i][1] += " " + options.langPrefix + langName;
        }
        tmpToken = {
          attrs: tmpAttrs
        };
        return "<pre><code" + slf.renderAttrs(tmpToken) + ">" + highlighted + "</code></pre>\n";
      }
      return "<pre><code" + slf.renderAttrs(token) + ">" + highlighted + "</code></pre>\n";
    };
    default_rules.image = function(tokens, idx, options, env, slf) {
      var token = tokens[idx];
      token.attrs[token.attrIndex("alt")][1] = slf.renderInlineAsText(token.children, options, env);
      return slf.renderToken(tokens, idx, options);
    };
    default_rules.hardbreak = function(tokens, idx, options) {
      return options.xhtmlOut ? "<br />\n" : "<br>\n";
    };
    default_rules.softbreak = function(tokens, idx, options) {
      return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
    };
    default_rules.text = function(tokens, idx) {
      return escapeHtml2(tokens[idx].content);
    };
    default_rules.html_block = function(tokens, idx) {
      return tokens[idx].content;
    };
    default_rules.html_inline = function(tokens, idx) {
      return tokens[idx].content;
    };
    function Renderer() {
      this.rules = assign({}, default_rules);
    }
    Renderer.prototype.renderAttrs = function renderAttrs(token) {
      var i, l, result;
      if (!token.attrs) {
        return "";
      }
      result = "";
      for (i = 0, l = token.attrs.length; i < l; i++) {
        result += " " + escapeHtml2(token.attrs[i][0]) + '="' + escapeHtml2(token.attrs[i][1]) + '"';
      }
      return result;
    };
    Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
      var nextToken, result = "", needLf = false, token = tokens[idx];
      if (token.hidden) {
        return "";
      }
      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
        result += "\n";
      }
      result += (token.nesting === -1 ? "</" : "<") + token.tag;
      result += this.renderAttrs(token);
      if (token.nesting === 0 && options.xhtmlOut) {
        result += " /";
      }
      if (token.block) {
        needLf = true;
        if (token.nesting === 1) {
          if (idx + 1 < tokens.length) {
            nextToken = tokens[idx + 1];
            if (nextToken.type === "inline" || nextToken.hidden) {
              needLf = false;
            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
              needLf = false;
            }
          }
        }
      }
      result += needLf ? ">\n" : ">";
      return result;
    };
    Renderer.prototype.renderInline = function(tokens, options, env) {
      var type, result = "", rules = this.rules;
      for (var i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;
        if (typeof rules[type] !== "undefined") {
          result += rules[type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options);
        }
      }
      return result;
    };
    Renderer.prototype.renderInlineAsText = function(tokens, options, env) {
      var result = "";
      for (var i = 0, len = tokens.length; i < len; i++) {
        if (tokens[i].type === "text") {
          result += tokens[i].content;
        } else if (tokens[i].type === "image") {
          result += this.renderInlineAsText(tokens[i].children, options, env);
        } else if (tokens[i].type === "softbreak") {
          result += "\n";
        }
      }
      return result;
    };
    Renderer.prototype.render = function(tokens, options, env) {
      var i, len, type, result = "", rules = this.rules;
      for (i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;
        if (type === "inline") {
          result += this.renderInline(tokens[i].children, options, env);
        } else if (typeof rules[type] !== "undefined") {
          result += rules[tokens[i].type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options, env);
        }
      }
      return result;
    };
    module2.exports = Renderer;
  }
});

// node_modules/markdown-it/lib/ruler.js
var require_ruler = __commonJS({
  "node_modules/markdown-it/lib/ruler.js"(exports, module2) {
    "use strict";
    function Ruler() {
      this.__rules__ = [];
      this.__cache__ = null;
    }
    Ruler.prototype.__find__ = function(name) {
      for (var i = 0; i < this.__rules__.length; i++) {
        if (this.__rules__[i].name === name) {
          return i;
        }
      }
      return -1;
    };
    Ruler.prototype.__compile__ = function() {
      var self = this;
      var chains = [""];
      self.__rules__.forEach(function(rule) {
        if (!rule.enabled) {
          return;
        }
        rule.alt.forEach(function(altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });
      self.__cache__ = {};
      chains.forEach(function(chain) {
        self.__cache__[chain] = [];
        self.__rules__.forEach(function(rule) {
          if (!rule.enabled) {
            return;
          }
          if (chain && rule.alt.indexOf(chain) < 0) {
            return;
          }
          self.__cache__[chain].push(rule.fn);
        });
      });
    };
    Ruler.prototype.at = function(name, fn, options) {
      var index = this.__find__(name);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + name);
      }
      this.__rules__[index].fn = fn;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };
    Ruler.prototype.before = function(beforeName, ruleName, fn, options) {
      var index = this.__find__(beforeName);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + beforeName);
      }
      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.after = function(afterName, ruleName, fn, options) {
      var index = this.__find__(afterName);
      var opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + afterName);
      }
      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.push = function(ruleName, fn, options) {
      var opt = options || {};
      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.enable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      var result = [];
      list2.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = true;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      this.__rules__.forEach(function(rule) {
        rule.enabled = false;
      });
      this.enable(list2, ignoreInvalid);
    };
    Ruler.prototype.disable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      var result = [];
      list2.forEach(function(name) {
        var idx = this.__find__(name);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name);
        }
        this.__rules__[idx].enabled = false;
        result.push(name);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.getRules = function(chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }
      return this.__cache__[chainName] || [];
    };
    module2.exports = Ruler;
  }
});

// node_modules/markdown-it/lib/rules_core/normalize.js
var require_normalize = __commonJS({
  "node_modules/markdown-it/lib/rules_core/normalize.js"(exports, module2) {
    "use strict";
    var NEWLINES_RE = /\r\n?|\n/g;
    var NULL_RE = /\0/g;
    module2.exports = function normalize(state) {
      var str;
      str = state.src.replace(NEWLINES_RE, "\n");
      str = str.replace(NULL_RE, "\uFFFD");
      state.src = str;
    };
  }
});

// node_modules/markdown-it/lib/rules_core/block.js
var require_block = __commonJS({
  "node_modules/markdown-it/lib/rules_core/block.js"(exports, module2) {
    "use strict";
    module2.exports = function block4(state) {
      var token;
      if (state.inlineMode) {
        token = new state.Token("inline", "", 0);
        token.content = state.src;
        token.map = [0, 1];
        token.children = [];
        state.tokens.push(token);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_core/inline.js
var require_inline = __commonJS({
  "node_modules/markdown-it/lib/rules_core/inline.js"(exports, module2) {
    "use strict";
    module2.exports = function inline4(state) {
      var tokens = state.tokens, tok, i, l;
      for (i = 0, l = tokens.length; i < l; i++) {
        tok = tokens[i];
        if (tok.type === "inline") {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_core/linkify.js
var require_linkify = __commonJS({
  "node_modules/markdown-it/lib/rules_core/linkify.js"(exports, module2) {
    "use strict";
    var arrayReplaceAt = require_utils().arrayReplaceAt;
    function isLinkOpen(str) {
      return /^<a[>\s]/i.test(str);
    }
    function isLinkClose(str) {
      return /^<\/a\s*>/i.test(str);
    }
    module2.exports = function linkify(state) {
      var i, j, l, tokens, token, currentToken, nodes, ln, text2, pos, lastPos, level, htmlLinkLevel, url, fullUrl, urlText, blockTokens = state.tokens, links;
      if (!state.md.options.linkify) {
        return;
      }
      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== "inline" || !state.md.linkify.pretest(blockTokens[j].content)) {
          continue;
        }
        tokens = blockTokens[j].children;
        htmlLinkLevel = 0;
        for (i = tokens.length - 1; i >= 0; i--) {
          currentToken = tokens[i];
          if (currentToken.type === "link_close") {
            i--;
            while (tokens[i].level !== currentToken.level && tokens[i].type !== "link_open") {
              i--;
            }
            continue;
          }
          if (currentToken.type === "html_inline") {
            if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }
            if (isLinkClose(currentToken.content)) {
              htmlLinkLevel++;
            }
          }
          if (htmlLinkLevel > 0) {
            continue;
          }
          if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
            text2 = currentToken.content;
            links = state.md.linkify.match(text2);
            nodes = [];
            level = currentToken.level;
            lastPos = 0;
            for (ln = 0; ln < links.length; ln++) {
              url = links[ln].url;
              fullUrl = state.md.normalizeLink(url);
              if (!state.md.validateLink(fullUrl)) {
                continue;
              }
              urlText = links[ln].text;
              if (!links[ln].schema) {
                urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
              } else if (links[ln].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }
              pos = links[ln].index;
              if (pos > lastPos) {
                token = new state.Token("text", "", 0);
                token.content = text2.slice(lastPos, pos);
                token.level = level;
                nodes.push(token);
              }
              token = new state.Token("link_open", "a", 1);
              token.attrs = [["href", fullUrl]];
              token.level = level++;
              token.markup = "linkify";
              token.info = "auto";
              nodes.push(token);
              token = new state.Token("text", "", 0);
              token.content = urlText;
              token.level = level;
              nodes.push(token);
              token = new state.Token("link_close", "a", -1);
              token.level = --level;
              token.markup = "linkify";
              token.info = "auto";
              nodes.push(token);
              lastPos = links[ln].lastIndex;
            }
            if (lastPos < text2.length) {
              token = new state.Token("text", "", 0);
              token.content = text2.slice(lastPos);
              token.level = level;
              nodes.push(token);
            }
            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
          }
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_core/replacements.js
var require_replacements = __commonJS({
  "node_modules/markdown-it/lib/rules_core/replacements.js"(exports, module2) {
    "use strict";
    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
    var SCOPED_ABBR_TEST_RE = /\((c|tm|r|p)\)/i;
    var SCOPED_ABBR_RE = /\((c|tm|r|p)\)/ig;
    var SCOPED_ABBR = {
      c: "\xA9",
      r: "\xAE",
      p: "\xA7",
      tm: "\u2122"
    };
    function replaceFn(match, name) {
      return SCOPED_ABBR[name.toLowerCase()];
    }
    function replace_scoped(inlineTokens) {
      var i, token, inside_autolink = 0;
      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) {
          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        }
        if (token.type === "link_open" && token.info === "auto") {
          inside_autolink--;
        }
        if (token.type === "link_close" && token.info === "auto") {
          inside_autolink++;
        }
      }
    }
    function replace_rare(inlineTokens) {
      var i, token, inside_autolink = 0;
      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];
        if (token.type === "text" && !inside_autolink) {
          if (RARE_RE.test(token.content)) {
            token.content = token.content.replace(/\+-/g, "\xB1").replace(/\.{2,}/g, "\u2026").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1\u2014").replace(/(^|\s)--(?=\s|$)/mg, "$1\u2013").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1\u2013");
          }
        }
        if (token.type === "link_open" && token.info === "auto") {
          inside_autolink--;
        }
        if (token.type === "link_close" && token.info === "auto") {
          inside_autolink++;
        }
      }
    }
    module2.exports = function replace(state) {
      var blkIdx;
      if (!state.md.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") {
          continue;
        }
        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }
        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_core/smartquotes.js
var require_smartquotes = __commonJS({
  "node_modules/markdown-it/lib/rules_core/smartquotes.js"(exports, module2) {
    "use strict";
    var isWhiteSpace = require_utils().isWhiteSpace;
    var isPunctChar = require_utils().isPunctChar;
    var isMdAsciiPunct = require_utils().isMdAsciiPunct;
    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var APOSTROPHE = "\u2019";
    function replaceAt(str, index, ch) {
      return str.substr(0, index) + ch + str.substr(index + 1);
    }
    function process_inlines(tokens, state) {
      var i, token, text2, t, pos, max2, thisLevel, item2, lastChar, nextChar, isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace, canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
      stack = [];
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        thisLevel = tokens[i].level;
        for (j = stack.length - 1; j >= 0; j--) {
          if (stack[j].level <= thisLevel) {
            break;
          }
        }
        stack.length = j + 1;
        if (token.type !== "text") {
          continue;
        }
        text2 = token.content;
        pos = 0;
        max2 = text2.length;
        OUTER:
          while (pos < max2) {
            QUOTE_RE.lastIndex = pos;
            t = QUOTE_RE.exec(text2);
            if (!t) {
              break;
            }
            canOpen = canClose = true;
            pos = t.index + 1;
            isSingle = t[0] === "'";
            lastChar = 32;
            if (t.index - 1 >= 0) {
              lastChar = text2.charCodeAt(t.index - 1);
            } else {
              for (j = i - 1; j >= 0; j--) {
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
                  break;
                if (!tokens[j].content)
                  continue;
                lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
                break;
              }
            }
            nextChar = 32;
            if (pos < max2) {
              nextChar = text2.charCodeAt(pos);
            } else {
              for (j = i + 1; j < tokens.length; j++) {
                if (tokens[j].type === "softbreak" || tokens[j].type === "hardbreak")
                  break;
                if (!tokens[j].content)
                  continue;
                nextChar = tokens[j].content.charCodeAt(0);
                break;
              }
            }
            isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
            isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
            isLastWhiteSpace = isWhiteSpace(lastChar);
            isNextWhiteSpace = isWhiteSpace(nextChar);
            if (isNextWhiteSpace) {
              canOpen = false;
            } else if (isNextPunctChar) {
              if (!(isLastWhiteSpace || isLastPunctChar)) {
                canOpen = false;
              }
            }
            if (isLastWhiteSpace) {
              canClose = false;
            } else if (isLastPunctChar) {
              if (!(isNextWhiteSpace || isNextPunctChar)) {
                canClose = false;
              }
            }
            if (nextChar === 34 && t[0] === '"') {
              if (lastChar >= 48 && lastChar <= 57) {
                canClose = canOpen = false;
              }
            }
            if (canOpen && canClose) {
              canOpen = isLastPunctChar;
              canClose = isNextPunctChar;
            }
            if (!canOpen && !canClose) {
              if (isSingle) {
                token.content = replaceAt(token.content, t.index, APOSTROPHE);
              }
              continue;
            }
            if (canClose) {
              for (j = stack.length - 1; j >= 0; j--) {
                item2 = stack[j];
                if (stack[j].level < thisLevel) {
                  break;
                }
                if (item2.single === isSingle && stack[j].level === thisLevel) {
                  item2 = stack[j];
                  if (isSingle) {
                    openQuote = state.md.options.quotes[2];
                    closeQuote = state.md.options.quotes[3];
                  } else {
                    openQuote = state.md.options.quotes[0];
                    closeQuote = state.md.options.quotes[1];
                  }
                  token.content = replaceAt(token.content, t.index, closeQuote);
                  tokens[item2.token].content = replaceAt(tokens[item2.token].content, item2.pos, openQuote);
                  pos += closeQuote.length - 1;
                  if (item2.token === i) {
                    pos += openQuote.length - 1;
                  }
                  text2 = token.content;
                  max2 = text2.length;
                  stack.length = j;
                  continue OUTER;
                }
              }
            }
            if (canOpen) {
              stack.push({
                token: i,
                pos: t.index,
                single: isSingle,
                level: thisLevel
              });
            } else if (canClose && isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }
          }
      }
    }
    module2.exports = function smartquotes(state) {
      var blkIdx;
      if (!state.md.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }
        process_inlines(state.tokens[blkIdx].children, state);
      }
    };
  }
});

// node_modules/markdown-it/lib/token.js
var require_token = __commonJS({
  "node_modules/markdown-it/lib/token.js"(exports, module2) {
    "use strict";
    function Token(type, tag, nesting) {
      this.type = type;
      this.tag = tag;
      this.attrs = null;
      this.map = null;
      this.nesting = nesting;
      this.level = 0;
      this.children = null;
      this.content = "";
      this.markup = "";
      this.info = "";
      this.meta = null;
      this.block = false;
      this.hidden = false;
    }
    Token.prototype.attrIndex = function attrIndex(name) {
      var attrs, i, len;
      if (!this.attrs) {
        return -1;
      }
      attrs = this.attrs;
      for (i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i][0] === name) {
          return i;
        }
      }
      return -1;
    };
    Token.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [attrData];
      }
    };
    Token.prototype.attrSet = function attrSet(name, value) {
      var idx = this.attrIndex(name), attrData = [name, value];
      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };
    Token.prototype.attrGet = function attrGet(name) {
      var idx = this.attrIndex(name), value = null;
      if (idx >= 0) {
        value = this.attrs[idx][1];
      }
      return value;
    };
    Token.prototype.attrJoin = function attrJoin(name, value) {
      var idx = this.attrIndex(name);
      if (idx < 0) {
        this.attrPush([name, value]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
      }
    };
    module2.exports = Token;
  }
});

// node_modules/markdown-it/lib/rules_core/state_core.js
var require_state_core = __commonJS({
  "node_modules/markdown-it/lib/rules_core/state_core.js"(exports, module2) {
    "use strict";
    var Token = require_token();
    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md;
    }
    StateCore.prototype.Token = Token;
    module2.exports = StateCore;
  }
});

// node_modules/markdown-it/lib/parser_core.js
var require_parser_core = __commonJS({
  "node_modules/markdown-it/lib/parser_core.js"(exports, module2) {
    "use strict";
    var Ruler = require_ruler();
    var _rules = [
      ["normalize", require_normalize()],
      ["block", require_block()],
      ["inline", require_inline()],
      ["linkify", require_linkify()],
      ["replacements", require_replacements()],
      ["smartquotes", require_smartquotes()]
    ];
    function Core() {
      this.ruler = new Ruler();
      for (var i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
    }
    Core.prototype.process = function(state) {
      var i, l, rules;
      rules = this.ruler.getRules("");
      for (i = 0, l = rules.length; i < l; i++) {
        rules[i](state);
      }
    };
    Core.prototype.State = require_state_core();
    module2.exports = Core;
  }
});

// node_modules/markdown-it/lib/rules_block/table.js
var require_table = __commonJS({
  "node_modules/markdown-it/lib/rules_block/table.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    function getLine2(state, line) {
      var pos = state.bMarks[line] + state.tShift[line], max2 = state.eMarks[line];
      return state.src.substr(pos, max2 - pos);
    }
    function escapedSplit(str) {
      var result = [], pos = 0, max2 = str.length, ch, isEscaped = false, lastPos = 0, current = "";
      ch = str.charCodeAt(pos);
      while (pos < max2) {
        if (ch === 124) {
          if (!isEscaped) {
            result.push(current + str.substring(lastPos, pos));
            current = "";
            lastPos = pos + 1;
          } else {
            current += str.substring(lastPos, pos - 1);
            lastPos = pos;
          }
        }
        isEscaped = ch === 92;
        pos++;
        ch = str.charCodeAt(pos);
      }
      result.push(current + str.substring(lastPos));
      return result;
    }
    module2.exports = function table3(state, startLine, endLine, silent) {
      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines, oldParentType, terminate, terminatorRules, firstCh, secondCh;
      if (startLine + 2 > endLine) {
        return false;
      }
      nextLine = startLine + 1;
      if (state.sCount[nextLine] < state.blkIndent) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
        return false;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos >= state.eMarks[nextLine]) {
        return false;
      }
      firstCh = state.src.charCodeAt(pos++);
      if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
        return false;
      }
      if (pos >= state.eMarks[nextLine]) {
        return false;
      }
      secondCh = state.src.charCodeAt(pos++);
      if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
        return false;
      }
      if (firstCh === 45 && isSpace(secondCh)) {
        return false;
      }
      while (pos < state.eMarks[nextLine]) {
        ch = state.src.charCodeAt(pos);
        if (ch !== 124 && ch !== 45 && ch !== 58 && !isSpace(ch)) {
          return false;
        }
        pos++;
      }
      lineText = getLine2(state, startLine + 1);
      columns = lineText.split("|");
      aligns = [];
      for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
          if (i === 0 || i === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }
        if (!/^:?-+:?$/.test(t)) {
          return false;
        }
        if (t.charCodeAt(t.length - 1) === 58) {
          aligns.push(t.charCodeAt(0) === 58 ? "center" : "right");
        } else if (t.charCodeAt(0) === 58) {
          aligns.push("left");
        } else {
          aligns.push("");
        }
      }
      lineText = getLine2(state, startLine).trim();
      if (lineText.indexOf("|") === -1) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === "")
        columns.shift();
      if (columns.length && columns[columns.length - 1] === "")
        columns.pop();
      columnCount = columns.length;
      if (columnCount === 0 || columnCount !== aligns.length) {
        return false;
      }
      if (silent) {
        return true;
      }
      oldParentType = state.parentType;
      state.parentType = "table";
      terminatorRules = state.md.block.ruler.getRules("blockquote");
      token = state.push("table_open", "table", 1);
      token.map = tableLines = [startLine, 0];
      token = state.push("thead_open", "thead", 1);
      token.map = [startLine, startLine + 1];
      token = state.push("tr_open", "tr", 1);
      token.map = [startLine, startLine + 1];
      for (i = 0; i < columns.length; i++) {
        token = state.push("th_open", "th", 1);
        if (aligns[i]) {
          token.attrs = [["style", "text-align:" + aligns[i]]];
        }
        token = state.push("inline", "", 0);
        token.content = columns[i].trim();
        token.children = [];
        token = state.push("th_close", "th", -1);
      }
      token = state.push("tr_close", "tr", -1);
      token = state.push("thead_close", "thead", -1);
      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        lineText = getLine2(state, nextLine).trim();
        if (!lineText) {
          break;
        }
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
          break;
        }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === "")
          columns.shift();
        if (columns.length && columns[columns.length - 1] === "")
          columns.pop();
        if (nextLine === startLine + 2) {
          token = state.push("tbody_open", "tbody", 1);
          token.map = tbodyLines = [startLine + 2, 0];
        }
        token = state.push("tr_open", "tr", 1);
        token.map = [nextLine, nextLine + 1];
        for (i = 0; i < columnCount; i++) {
          token = state.push("td_open", "td", 1);
          if (aligns[i]) {
            token.attrs = [["style", "text-align:" + aligns[i]]];
          }
          token = state.push("inline", "", 0);
          token.content = columns[i] ? columns[i].trim() : "";
          token.children = [];
          token = state.push("td_close", "td", -1);
        }
        token = state.push("tr_close", "tr", -1);
      }
      if (tbodyLines) {
        token = state.push("tbody_close", "tbody", -1);
        tbodyLines[1] = nextLine;
      }
      token = state.push("table_close", "table", -1);
      tableLines[1] = nextLine;
      state.parentType = oldParentType;
      state.line = nextLine;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/code.js
var require_code = __commonJS({
  "node_modules/markdown-it/lib/rules_block/code.js"(exports, module2) {
    "use strict";
    module2.exports = function code2(state, startLine, endLine) {
      if (state.md.options.allowIndentation) {
        return false;
      }
      var nextLine, last, token;
      if (state.sCount[startLine] - state.blkIndent < 4) {
        return false;
      }
      last = nextLine = startLine + 1;
      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }
        break;
      }
      state.line = last;
      token = state.push("code_block", "code", 0);
      token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
      token.map = [startLine, state.line];
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/fence.js
var require_fence = __commonJS({
  "node_modules/markdown-it/lib/rules_block/fence.js"(exports, module2) {
    "use strict";
    module2.exports = function fence3(state, startLine, endLine, silent) {
      var marker, len, params, nextLine, mem, token, markup, haveEndMarker = false, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (pos + 3 > max2) {
        return false;
      }
      marker = state.src.charCodeAt(pos);
      if (marker !== 126 && marker !== 96) {
        return false;
      }
      mem = pos;
      pos = state.skipChars(pos, marker);
      len = pos - mem;
      if (len < 3) {
        return false;
      }
      markup = state.src.slice(mem, pos);
      params = state.src.slice(pos, max2);
      if (marker === 96) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      }
      if (silent) {
        return true;
      }
      nextLine = startLine;
      for (; ; ) {
        nextLine++;
        if (nextLine >= endLine) {
          break;
        }
        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos < max2 && state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (state.src.charCodeAt(pos) !== marker) {
          continue;
        }
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent >= 4) {
          continue;
        }
        pos = state.skipChars(pos, marker);
        if (pos - mem < len) {
          continue;
        }
        pos = state.skipSpaces(pos);
        if (pos < max2) {
          continue;
        }
        haveEndMarker = true;
        break;
      }
      len = state.sCount[startLine];
      state.line = nextLine + (haveEndMarker ? 1 : 0);
      token = state.push("fence", "code", 0);
      token.info = params;
      token.content = state.getLines(startLine + 1, nextLine, len, true);
      token.markup = markup;
      token.map = [startLine, state.line];
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/blockquote.js
var require_blockquote = __commonJS({
  "node_modules/markdown-it/lib/rules_block/blockquote.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    module2.exports = function blockquote2(state, startLine, endLine, silent) {
      var adjustTab, ch, i, initial, l, lastLineEmpty, lines, nextLine, offset, oldBMarks, oldBSCount, oldIndent, oldParentType, oldSCount, oldTShift, spaceAfterMarker, terminate, terminatorRules, token, isOutdented, oldLineMax = state.lineMax, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos++) !== 62) {
        return false;
      }
      if (silent) {
        return true;
      }
      initial = offset = state.sCount[startLine] + 1;
      if (state.src.charCodeAt(pos) === 32) {
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 9) {
        spaceAfterMarker = true;
        if ((state.bsCount[startLine] + offset) % 4 === 3) {
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
      oldBMarks = [state.bMarks[startLine]];
      state.bMarks[startLine] = pos;
      while (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (isSpace(ch)) {
          if (ch === 9) {
            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }
        pos++;
      }
      oldBSCount = [state.bsCount[startLine]];
      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
      lastLineEmpty = pos >= max2;
      oldSCount = [state.sCount[startLine]];
      state.sCount[startLine] = offset - initial;
      oldTShift = [state.tShift[startLine]];
      state.tShift[startLine] = pos - state.bMarks[startLine];
      terminatorRules = state.md.block.ruler.getRules("blockquote");
      oldParentType = state.parentType;
      state.parentType = "blockquote";
      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
        isOutdented = state.sCount[nextLine] < state.blkIndent;
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos >= max2) {
          break;
        }
        if (state.src.charCodeAt(pos++) === 62 && !isOutdented) {
          initial = offset = state.sCount[nextLine] + 1;
          if (state.src.charCodeAt(pos) === 32) {
            pos++;
            initial++;
            offset++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 9) {
            spaceAfterMarker = true;
            if ((state.bsCount[nextLine] + offset) % 4 === 3) {
              pos++;
              initial++;
              offset++;
              adjustTab = false;
            } else {
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }
          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (isSpace(ch)) {
              if (ch === 9) {
                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset++;
              }
            } else {
              break;
            }
            pos++;
          }
          lastLineEmpty = pos >= max2;
          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset - initial;
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        }
        if (lastLineEmpty) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          state.lineMax = nextLine;
          if (state.blkIndent !== 0) {
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }
          break;
        }
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] = -1;
      }
      oldIndent = state.blkIndent;
      state.blkIndent = 0;
      token = state.push("blockquote_open", "blockquote", 1);
      token.markup = ">";
      token.map = lines = [startLine, 0];
      state.md.block.tokenize(state, startLine, nextLine);
      token = state.push("blockquote_close", "blockquote", -1);
      token.markup = ">";
      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line;
      for (i = 0; i < oldTShift.length; i++) {
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
      }
      state.blkIndent = oldIndent;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/hr.js
var require_hr = __commonJS({
  "node_modules/markdown-it/lib/rules_block/hr.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    module2.exports = function hr2(state, startLine, endLine, silent) {
      var marker, cnt, ch, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 95) {
        return false;
      }
      cnt = 1;
      while (pos < max2) {
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && !isSpace(ch)) {
          return false;
        }
        if (ch === marker) {
          cnt++;
        }
      }
      if (cnt < 3) {
        return false;
      }
      if (silent) {
        return true;
      }
      state.line = startLine + 1;
      token = state.push("hr", "hr", 0);
      token.map = [startLine, state.line];
      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/list.js
var require_list = __commonJS({
  "node_modules/markdown-it/lib/rules_block/list.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    function skipBulletListMarker(state, startLine) {
      var marker, pos, max2, ch;
      pos = state.bMarks[startLine] + state.tShift[startLine];
      max2 = state.eMarks[startLine];
      marker = state.src.charCodeAt(pos++);
      if (marker !== 42 && marker !== 45 && marker !== 43) {
        return -1;
      }
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          return -1;
        }
      }
      return pos;
    }
    function skipOrderedListMarker(state, startLine) {
      var ch, start = state.bMarks[startLine] + state.tShift[startLine], pos = start, max2 = state.eMarks[startLine];
      if (pos + 1 >= max2) {
        return -1;
      }
      ch = state.src.charCodeAt(pos++);
      if (ch < 48 || ch > 57) {
        return -1;
      }
      for (; ; ) {
        if (pos >= max2) {
          return -1;
        }
        ch = state.src.charCodeAt(pos++);
        if (ch >= 48 && ch <= 57) {
          if (pos - start >= 10) {
            return -1;
          }
          continue;
        }
        if (ch === 41 || ch === 46) {
          break;
        }
        return -1;
      }
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          return -1;
        }
      }
      return pos;
    }
    function markTightParagraphs(state, idx) {
      var i, l, level = state.level + 2;
      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
        if (state.tokens[i].level === level && state.tokens[i].type === "paragraph_open") {
          state.tokens[i + 2].hidden = true;
          state.tokens[i].hidden = true;
          i += 2;
        }
      }
    }
    module2.exports = function list2(state, startLine, endLine, silent) {
      var ch, contentStart, i, indent, indentAfterMarker, initial, isOrdered, itemLines, l, listLines, listTokIdx, markerCharCode, markerValue, max2, nextLine, offset, oldListIndent, oldParentType, oldSCount, oldTShift, oldTight, pos, posAfterMarker, prevEmptyEnd, start, terminate, terminatorRules, token, isTerminatingParagraph = false, tight = true;
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (!state.md.options.allowIndentation && state.listIndent >= 0 && state.sCount[startLine] - state.listIndent >= 4 && state.sCount[startLine] < state.blkIndent) {
        return false;
      }
      if (silent && state.parentType === "paragraph") {
        if (state.sCount[startLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      }
      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.slice(start, posAfterMarker - 1));
        if (isTerminatingParagraph && markerValue !== 1)
          return false;
      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;
      } else {
        return false;
      }
      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine])
          return false;
      }
      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
      if (silent) {
        return true;
      }
      listTokIdx = state.tokens.length;
      if (isOrdered) {
        token = state.push("ordered_list_open", "ol", 1);
        if (markerValue !== 1) {
          token.attrs = [["start", markerValue]];
        }
      } else {
        token = state.push("bullet_list_open", "ul", 1);
      }
      token.map = listLines = [startLine, 0];
      token.markup = String.fromCharCode(markerCharCode);
      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.md.block.ruler.getRules("list");
      oldParentType = state.parentType;
      state.parentType = "list";
      while (nextLine < endLine) {
        pos = posAfterMarker;
        max2 = state.eMarks[nextLine];
        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
        while (pos < max2) {
          ch = state.src.charCodeAt(pos);
          if (ch === 9) {
            offset += 4 - (offset + state.bsCount[nextLine]) % 4;
          } else if (ch === 32) {
            offset++;
          } else {
            break;
          }
          pos++;
        }
        contentStart = pos;
        if (contentStart >= max2) {
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset - initial;
        }
        if (!state.md.options.allowIndentation && indentAfterMarker > 4) {
          indentAfterMarker = 1;
        }
        indent = initial + indentAfterMarker;
        token = state.push("list_item_open", "li", 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map = itemLines = [startLine, 0];
        if (isOrdered) {
          token.info = state.src.slice(start, posAfterMarker - 1);
        }
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];
        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset;
        if (contentStart >= max2 && state.isEmpty(startLine + 1)) {
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, startLine, endLine, true);
        }
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        prevEmptyEnd = state.line - startLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;
        token = state.push("list_item_close", "li", -1);
        token.markup = String.fromCharCode(markerCharCode);
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];
        if (nextLine >= endLine) {
          break;
        }
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
          break;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
          start = state.bMarks[nextLine] + state.tShift[nextLine];
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
        }
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
          break;
        }
      }
      if (isOrdered) {
        token = state.push("ordered_list_close", "ol", -1);
      } else {
        token = state.push("bullet_list_close", "ul", -1);
      }
      token.markup = String.fromCharCode(markerCharCode);
      listLines[1] = nextLine;
      state.line = nextLine;
      state.parentType = oldParentType;
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/reference.js
var require_reference = __commonJS({
  "node_modules/markdown-it/lib/rules_block/reference.js"(exports, module2) {
    "use strict";
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module2.exports = function reference(state, startLine, _endLine, silent) {
      var ch, destEndPos, destEndLineNo, endLine, href, i, l, label, labelEnd, oldParentType, res, start, str, terminate, terminatorRules, title, lines = 0, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine], nextLine = startLine + 1;
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos) !== 91) {
        return false;
      }
      while (++pos < max2) {
        if (state.src.charCodeAt(pos) === 93 && state.src.charCodeAt(pos - 1) !== 92) {
          if (pos + 1 === max2) {
            return false;
          }
          if (state.src.charCodeAt(pos + 1) !== 58) {
            return false;
          }
          break;
        }
      }
      endLine = state.lineMax;
      terminatorRules = state.md.block.ruler.getRules("reference");
      oldParentType = state.parentType;
      state.parentType = "reference";
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      max2 = str.length;
      for (pos = 1; pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 91) {
          return false;
        } else if (ch === 93) {
          labelEnd = pos;
          break;
        } else if (ch === 10) {
          lines++;
        } else if (ch === 92) {
          pos++;
          if (pos < max2 && str.charCodeAt(pos) === 10) {
            lines++;
          }
        }
      }
      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 58) {
        return false;
      }
      for (pos = labelEnd + 2; pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 10) {
          lines++;
        } else if (isSpace(ch)) {
        } else {
          break;
        }
      }
      res = state.md.helpers.parseLinkDestination(str, pos, max2);
      if (!res.ok) {
        return false;
      }
      href = state.md.normalizeLink(res.str);
      if (!state.md.validateLink(href)) {
        return false;
      }
      pos = res.pos;
      lines += res.lines;
      destEndPos = pos;
      destEndLineNo = lines;
      start = pos;
      for (; pos < max2; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 10) {
          lines++;
        } else if (isSpace(ch)) {
        } else {
          break;
        }
      }
      res = state.md.helpers.parseLinkTitle(str, pos, max2);
      if (pos < max2 && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
      } else {
        title = "";
        pos = destEndPos;
        lines = destEndLineNo;
      }
      while (pos < max2) {
        ch = str.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
        pos++;
      }
      if (pos < max2 && str.charCodeAt(pos) !== 10) {
        if (title) {
          title = "";
          pos = destEndPos;
          lines = destEndLineNo;
          while (pos < max2) {
            ch = str.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
            pos++;
          }
        }
      }
      if (pos < max2 && str.charCodeAt(pos) !== 10) {
        return false;
      }
      label = normalizeReference(str.slice(1, labelEnd));
      if (!label) {
        return false;
      }
      if (silent) {
        return true;
      }
      if (typeof state.env.references === "undefined") {
        state.env.references = {};
      }
      if (typeof state.env.references[label] === "undefined") {
        state.env.references[label] = { title, href };
      }
      state.parentType = oldParentType;
      state.line = startLine + lines + 1;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/common/html_blocks.js
var require_html_blocks = __commonJS({
  "node_modules/markdown-it/lib/common/html_blocks.js"(exports, module2) {
    "use strict";
    module2.exports = [
      "address",
      "article",
      "aside",
      "base",
      "basefont",
      "blockquote",
      "body",
      "caption",
      "center",
      "col",
      "colgroup",
      "dd",
      "details",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "legend",
      "li",
      "link",
      "main",
      "menu",
      "menuitem",
      "nav",
      "noframes",
      "ol",
      "optgroup",
      "option",
      "p",
      "param",
      "section",
      "source",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "title",
      "tr",
      "track",
      "ul"
    ];
  }
});

// node_modules/markdown-it/lib/common/html_re.js
var require_html_re = __commonJS({
  "node_modules/markdown-it/lib/common/html_re.js"(exports, module2) {
    "use strict";
    var attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
    var unquoted = "[^\"'=<>`\\x00-\\x20]+";
    var single_quoted = "'[^']*'";
    var double_quoted = '"[^"]*"';
    var attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
    var attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
    var open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
    var close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
    var comment2 = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->";
    var processing = "<[?][\\s\\S]*?[?]>";
    var declaration = "<![A-Z]+\\s+[^>]*>";
    var cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
    var HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment2 + "|" + processing + "|" + declaration + "|" + cdata + ")");
    var HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
    module2.exports.HTML_TAG_RE = HTML_TAG_RE;
    module2.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;
  }
});

// node_modules/markdown-it/lib/rules_block/html_block.js
var require_html_block = __commonJS({
  "node_modules/markdown-it/lib/rules_block/html_block.js"(exports, module2) {
    "use strict";
    var block_names = require_html_blocks();
    var HTML_OPEN_CLOSE_TAG_RE = require_html_re().HTML_OPEN_CLOSE_TAG_RE;
    var HTML_SEQUENCES = [
      [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
      [/^<!--/, /-->/, true],
      [/^<\?/, /\?>/, true],
      [/^<![A-Z]/, />/, true],
      [/^<!\[CDATA\[/, /\]\]>/, true],
      [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
      [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
    ];
    module2.exports = function html_block(state, startLine, endLine, silent) {
      var i, nextLine, token, lineText, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (!state.md.options.html) {
        return false;
      }
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      lineText = state.src.slice(pos, max2);
      for (i = 0; i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) {
          break;
        }
      }
      if (i === HTML_SEQUENCES.length) {
        return false;
      }
      if (silent) {
        return HTML_SEQUENCES[i][2];
      }
      nextLine = startLine + 1;
      if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          lineText = state.src.slice(pos, max2);
          if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) {
              nextLine++;
            }
            break;
          }
        }
      }
      state.line = nextLine;
      token = state.push("html_block", "", 0);
      token.map = [startLine, nextLine];
      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/heading.js
var require_heading = __commonJS({
  "node_modules/markdown-it/lib/rules_block/heading.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    module2.exports = function heading2(state, startLine, endLine, silent) {
      var ch, level, tmp, token, pos = state.bMarks[startLine] + state.tShift[startLine], max2 = state.eMarks[startLine];
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      ch = state.src.charCodeAt(pos);
      if (ch !== 35 || pos >= max2) {
        return false;
      }
      level = 1;
      ch = state.src.charCodeAt(++pos);
      while (ch === 35 && pos < max2 && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }
      if (level > 6 || pos < max2 && !isSpace(ch)) {
        return false;
      }
      if (silent) {
        return true;
      }
      max2 = state.skipSpacesBack(max2, pos);
      tmp = state.skipCharsBack(max2, 35, pos);
      if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
        max2 = tmp;
      }
      state.line = startLine + 1;
      token = state.push("heading_open", "h" + String(level), 1);
      token.markup = "########".slice(0, level);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = state.src.slice(pos, max2).trim();
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push("heading_close", "h" + String(level), -1);
      token.markup = "########".slice(0, level);
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/lheading.js
var require_lheading = __commonJS({
  "node_modules/markdown-it/lib/rules_block/lheading.js"(exports, module2) {
    "use strict";
    module2.exports = function lheading(state, startLine, endLine) {
      var content, terminate, i, l, token, pos, max2, level, marker, nextLine = startLine + 1, oldParentType, terminatorRules = state.md.block.ruler.getRules("paragraph");
      if (!state.md.options.allowIndentation && state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      oldParentType = state.parentType;
      state.parentType = "paragraph";
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] >= state.blkIndent) {
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          if (pos < max2) {
            marker = state.src.charCodeAt(pos);
            if (marker === 45 || marker === 61) {
              pos = state.skipChars(pos, marker);
              pos = state.skipSpaces(pos);
              if (pos >= max2) {
                level = marker === 61 ? 1 : 2;
                break;
              }
            }
          }
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      if (!level) {
        return false;
      }
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine + 1;
      token = state.push("heading_open", "h" + String(level), 1);
      token.markup = String.fromCharCode(marker);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = content;
      token.map = [startLine, state.line - 1];
      token.children = [];
      token = state.push("heading_close", "h" + String(level), -1);
      token.markup = String.fromCharCode(marker);
      state.parentType = oldParentType;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/paragraph.js
var require_paragraph = __commonJS({
  "node_modules/markdown-it/lib/rules_block/paragraph.js"(exports, module2) {
    "use strict";
    module2.exports = function paragraph2(state, startLine) {
      var content, terminate, i, l, token, oldParentType, nextLine = startLine + 1, terminatorRules = state.md.block.ruler.getRules("paragraph"), endLine = state.lineMax;
      oldParentType = state.parentType;
      state.parentType = "paragraph";
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (!state.md.options.allowIndentation && state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine;
      token = state.push("paragraph_open", "p", 1);
      token.map = [startLine, state.line];
      token = state.push("inline", "", 0);
      token.content = content;
      token.map = [startLine, state.line];
      token.children = [];
      token = state.push("paragraph_close", "p", -1);
      state.parentType = oldParentType;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_block/state_block.js
var require_state_block = __commonJS({
  "node_modules/markdown-it/lib/rules_block/state_block.js"(exports, module2) {
    "use strict";
    var Token = require_token();
    var isSpace = require_utils().isSpace;
    function StateBlock(src, md, env, tokens) {
      var ch, s2, start, pos, len, indent, offset, indent_found;
      this.src = src;
      this.md = md;
      this.env = env;
      this.tokens = tokens;
      this.bMarks = [];
      this.eMarks = [];
      this.tShift = [];
      this.sCount = [];
      this.bsCount = [];
      this.blkIndent = 0;
      this.line = 0;
      this.lineMax = 0;
      this.tight = false;
      this.ddIndent = -1;
      this.listIndent = -1;
      this.parentType = "root";
      this.level = 0;
      this.result = "";
      s2 = this.src;
      indent_found = false;
      for (start = pos = indent = offset = 0, len = s2.length; pos < len; pos++) {
        ch = s2.charCodeAt(pos);
        if (!indent_found) {
          if (isSpace(ch)) {
            indent++;
            if (ch === 9) {
              offset += 4 - offset % 4;
            } else {
              offset++;
            }
            continue;
          } else {
            indent_found = true;
          }
        }
        if (ch === 10 || pos === len - 1) {
          if (ch !== 10) {
            pos++;
          }
          this.bMarks.push(start);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          this.sCount.push(offset);
          this.bsCount.push(0);
          indent_found = false;
          indent = 0;
          offset = 0;
          start = pos + 1;
        }
      }
      this.bMarks.push(s2.length);
      this.eMarks.push(s2.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);
      this.lineMax = this.bMarks.length - 1;
    }
    StateBlock.prototype.push = function(type, tag, nesting) {
      var token = new Token(type, tag, nesting);
      token.block = true;
      if (nesting < 0)
        this.level--;
      token.level = this.level;
      if (nesting > 0)
        this.level++;
      this.tokens.push(token);
      return token;
    };
    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };
    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max2 = this.lineMax; from < max2; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };
    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      var ch;
      for (var max2 = this.src.length; pos < max2; pos++) {
        ch = this.src.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
      if (pos <= min) {
        return pos;
      }
      while (pos > min) {
        if (!isSpace(this.src.charCodeAt(--pos))) {
          return pos + 1;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipChars = function skipChars(pos, code2) {
      for (var max2 = this.src.length; pos < max2; pos++) {
        if (this.src.charCodeAt(pos) !== code2) {
          break;
        }
      }
      return pos;
    };
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code2, min) {
      if (pos <= min) {
        return pos;
      }
      while (pos > min) {
        if (code2 !== this.src.charCodeAt(--pos)) {
          return pos + 1;
        }
      }
      return pos;
    };
    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
      var i, lineIndent, ch, first, last, queue, lineStart, line = begin;
      if (begin >= end) {
        return "";
      }
      queue = new Array(end - begin);
      for (i = 0; line < end; line++, i++) {
        lineIndent = 0;
        lineStart = first = this.bMarks[line];
        if (line + 1 < end || keepLastLF) {
          last = this.eMarks[line] + 1;
        } else {
          last = this.eMarks[line];
        }
        while (first < last && lineIndent < indent) {
          ch = this.src.charCodeAt(first);
          if (isSpace(ch)) {
            if (ch === 9) {
              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line]) {
            lineIndent++;
          } else {
            break;
          }
          first++;
        }
        if (lineIndent > indent) {
          queue[i] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
        } else {
          queue[i] = this.src.slice(first, last);
        }
      }
      return queue.join("");
    };
    StateBlock.prototype.Token = Token;
    module2.exports = StateBlock;
  }
});

// node_modules/markdown-it/lib/parser_block.js
var require_parser_block = __commonJS({
  "node_modules/markdown-it/lib/parser_block.js"(exports, module2) {
    "use strict";
    var Ruler = require_ruler();
    var _rules = [
      ["table", require_table(), ["paragraph", "reference"]],
      ["code", require_code()],
      ["fence", require_fence(), ["paragraph", "reference", "blockquote", "list"]],
      ["blockquote", require_blockquote(), ["paragraph", "reference", "blockquote", "list"]],
      ["hr", require_hr(), ["paragraph", "reference", "blockquote", "list"]],
      ["list", require_list(), ["paragraph", "reference", "blockquote"]],
      ["reference", require_reference()],
      ["html_block", require_html_block(), ["paragraph", "reference", "blockquote"]],
      ["heading", require_heading(), ["paragraph", "reference", "blockquote"]],
      ["lheading", require_lheading()],
      ["paragraph", require_paragraph()]
    ];
    function ParserBlock() {
      this.ruler = new Ruler();
      for (var i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });
      }
    }
    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
      var ok, i, rules = this.ruler.getRules(""), len = rules.length, line = startLine, hasEmptyLines = false, maxNesting = state.md.options.maxNesting;
      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) {
          break;
        }
        if (state.sCount[line] < state.blkIndent) {
          break;
        }
        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        }
        for (i = 0; i < len; i++) {
          ok = rules[i](state, line, endLine, false);
          if (ok) {
            break;
          }
        }
        state.tight = !hasEmptyLines;
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }
        line = state.line;
        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          state.line = line;
        }
      }
    };
    ParserBlock.prototype.parse = function(src, md, env, outTokens) {
      var state;
      if (!src) {
        return;
      }
      state = new this.State(src, md, env, outTokens);
      this.tokenize(state, state.line, state.lineMax);
    };
    ParserBlock.prototype.State = require_state_block();
    module2.exports = ParserBlock;
  }
});

// node_modules/markdown-it/lib/rules_inline/text.js
var require_text = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/text.js"(exports, module2) {
    "use strict";
    function isTerminatorChar(ch) {
      switch (ch) {
        case 10:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 58:
        case 60:
        case 61:
        case 62:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    module2.exports = function text2(state, silent) {
      var pos = state.pos;
      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }
      if (pos === state.pos) {
        return false;
      }
      if (!silent) {
        state.pending += state.src.slice(state.pos, pos);
      }
      state.pos = pos;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/newline.js
var require_newline = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/newline.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    module2.exports = function newline(state, silent) {
      var pmax, max2, ws, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 10) {
        return false;
      }
      pmax = state.pending.length - 1;
      max2 = state.posMax;
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
            ws = pmax - 1;
            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32)
              ws--;
            state.pending = state.pending.slice(0, ws);
            state.push("hardbreak", "br", 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push("softbreak", "br", 0);
          }
        } else {
          state.push("softbreak", "br", 0);
        }
      }
      pos++;
      while (pos < max2 && isSpace(state.src.charCodeAt(pos))) {
        pos++;
      }
      state.pos = pos;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/escape.js
var require_escape = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/escape.js"(exports, module2) {
    "use strict";
    var isSpace = require_utils().isSpace;
    var ESCAPED = [];
    for (i = 0; i < 256; i++) {
      ESCAPED.push(0);
    }
    var i;
    "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch) {
      ESCAPED[ch.charCodeAt(0)] = 1;
    });
    module2.exports = function escape(state, silent) {
      var ch, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 92) {
        return false;
      }
      pos++;
      if (pos < max2) {
        ch = state.src.charCodeAt(pos);
        if (ch < 256 && ESCAPED[ch] !== 0) {
          if (!silent) {
            state.pending += state.src[pos];
          }
          state.pos += 2;
          return true;
        }
        if (ch === 10) {
          if (!silent) {
            state.push("hardbreak", "br", 0);
          }
          pos++;
          while (pos < max2) {
            ch = state.src.charCodeAt(pos);
            if (!isSpace(ch)) {
              break;
            }
            pos++;
          }
          state.pos = pos;
          return true;
        }
      }
      if (!silent) {
        state.pending += "\\";
      }
      state.pos++;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/backticks.js
var require_backticks = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/backticks.js"(exports, module2) {
    "use strict";
    module2.exports = function backtick(state, silent) {
      var start, max2, marker, token, matchStart, matchEnd, openerLength, closerLength, pos = state.pos, ch = state.src.charCodeAt(pos);
      if (ch !== 96) {
        return false;
      }
      start = pos;
      pos++;
      max2 = state.posMax;
      while (pos < max2 && state.src.charCodeAt(pos) === 96) {
        pos++;
      }
      marker = state.src.slice(start, pos);
      openerLength = marker.length;
      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
        if (!silent)
          state.pending += marker;
        state.pos += openerLength;
        return true;
      }
      matchStart = matchEnd = pos;
      while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
        matchEnd = matchStart + 1;
        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
          matchEnd++;
        }
        closerLength = matchEnd - matchStart;
        if (closerLength === openerLength) {
          if (!silent) {
            token = state.push("code_inline", "code", 0);
            token.markup = marker;
            token.content = state.src.slice(pos, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
          }
          state.pos = matchEnd;
          return true;
        }
        state.backticks[closerLength] = matchStart;
      }
      state.backticksScanned = true;
      if (!silent)
        state.pending += marker;
      state.pos += openerLength;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/strikethrough.js
var require_strikethrough = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/strikethrough.js"(exports, module2) {
    "use strict";
    module2.exports.tokenize = function strikethrough(state, silent) {
      var i, scanned, token, len, ch, start = state.pos, marker = state.src.charCodeAt(start);
      if (silent) {
        return false;
      }
      if (marker !== 126) {
        return false;
      }
      scanned = state.scanDelims(state.pos, true);
      len = scanned.length;
      ch = String.fromCharCode(marker);
      if (len < 2) {
        return false;
      }
      if (len % 2) {
        token = state.push("text", "", 0);
        token.content = ch;
        len--;
      }
      for (i = 0; i < len; i += 2) {
        token = state.push("text", "", 0);
        token.content = ch + ch;
        state.delimiters.push({
          marker,
          length: 0,
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    };
    function postProcess(state, delimiters) {
      var i, j, startDelim, endDelim, token, loneMarkers = [], max2 = delimiters.length;
      for (i = 0; i < max2; i++) {
        startDelim = delimiters[i];
        if (startDelim.marker !== 126) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        endDelim = delimiters[startDelim.end];
        token = state.tokens[startDelim.token];
        token.type = "s_open";
        token.tag = "s";
        token.nesting = 1;
        token.markup = "~~";
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = "s_close";
        token.tag = "s";
        token.nesting = -1;
        token.markup = "~~";
        token.content = "";
        if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
          loneMarkers.push(endDelim.token - 1);
        }
      }
      while (loneMarkers.length) {
        i = loneMarkers.pop();
        j = i + 1;
        while (j < state.tokens.length && state.tokens[j].type === "s_close") {
          j++;
        }
        j--;
        if (i !== j) {
          token = state.tokens[j];
          state.tokens[j] = state.tokens[i];
          state.tokens[i] = token;
        }
      }
    }
    module2.exports.postProcess = function strikethrough(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      postProcess(state, state.delimiters);
      for (curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/emphasis.js
var require_emphasis = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/emphasis.js"(exports, module2) {
    "use strict";
    module2.exports.tokenize = function emphasis(state, silent) {
      var i, scanned, token, start = state.pos, marker = state.src.charCodeAt(start);
      if (silent) {
        return false;
      }
      if (marker !== 95 && marker !== 42) {
        return false;
      }
      scanned = state.scanDelims(state.pos, marker === 42);
      for (i = 0; i < scanned.length; i++) {
        token = state.push("text", "", 0);
        token.content = String.fromCharCode(marker);
        state.delimiters.push({
          marker,
          length: scanned.length,
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    };
    function postProcess(state, delimiters) {
      var i, startDelim, endDelim, token, ch, isStrong, max2 = delimiters.length;
      for (i = max2 - 1; i >= 0; i--) {
        startDelim = delimiters[i];
        if (startDelim.marker !== 95 && startDelim.marker !== 42) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        endDelim = delimiters[startDelim.end];
        isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 && delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 && delimiters[startDelim.end + 1].token === endDelim.token + 1;
        ch = String.fromCharCode(startDelim.marker);
        token = state.tokens[startDelim.token];
        token.type = isStrong ? "strong_open" : "em_open";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = 1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        token = state.tokens[endDelim.token];
        token.type = isStrong ? "strong_close" : "em_close";
        token.tag = isStrong ? "strong" : "em";
        token.nesting = -1;
        token.markup = isStrong ? ch + ch : ch;
        token.content = "";
        if (isStrong) {
          state.tokens[delimiters[i - 1].token].content = "";
          state.tokens[delimiters[startDelim.end + 1].token].content = "";
          i--;
        }
      }
    }
    module2.exports.postProcess = function emphasis(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      postProcess(state, state.delimiters);
      for (curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/link.js
var require_link = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/link.js"(exports, module2) {
    "use strict";
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module2.exports = function link2(state, silent) {
      var attrs, code2, label, labelEnd, labelStart, pos, res, ref, token, href = "", title = "", oldPos = state.pos, max2 = state.posMax, start = state.pos, parseReference = true;
      if (state.src.charCodeAt(state.pos) !== 91) {
        return false;
      }
      labelStart = state.pos + 1;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
      if (labelEnd < 0) {
        return false;
      }
      pos = labelEnd + 1;
      if (pos < max2 && state.src.charCodeAt(pos) === 40) {
        parseReference = false;
        pos++;
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos >= max2) {
          return false;
        }
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = "";
          }
          start = pos;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
          if (pos < max2 && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
            for (; pos < max2; pos++) {
              code2 = state.src.charCodeAt(pos);
              if (!isSpace(code2) && code2 !== 10) {
                break;
              }
            }
          }
        }
        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
          parseReference = true;
        }
        pos++;
      }
      if (parseReference) {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos < max2 && state.src.charCodeAt(pos) === 91) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        token = state.push("link_open", "a", 1);
        token.attrs = attrs = [["href", href]];
        if (title) {
          attrs.push(["title", title]);
        }
        state.md.inline.tokenize(state);
        token = state.push("link_close", "a", -1);
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/image.js
var require_image = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/image.js"(exports, module2) {
    "use strict";
    var normalizeReference = require_utils().normalizeReference;
    var isSpace = require_utils().isSpace;
    module2.exports = function image2(state, silent) {
      var attrs, code2, content, label, labelEnd, labelStart, pos, ref, res, title, token, tokens, start, href = "", oldPos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(state.pos) !== 33) {
        return false;
      }
      if (state.src.charCodeAt(state.pos + 1) !== 91) {
        return false;
      }
      labelStart = state.pos + 2;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
      if (labelEnd < 0) {
        return false;
      }
      pos = labelEnd + 1;
      if (pos < max2 && state.src.charCodeAt(pos) === 40) {
        pos++;
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos >= max2) {
          return false;
        }
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = "";
          }
        }
        start = pos;
        for (; pos < max2; pos++) {
          code2 = state.src.charCodeAt(pos);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max2 && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos;
          for (; pos < max2; pos++) {
            code2 = state.src.charCodeAt(pos);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
        } else {
          title = "";
        }
        if (pos >= max2 || state.src.charCodeAt(pos) !== 41) {
          state.pos = oldPos;
          return false;
        }
        pos++;
      } else {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos < max2 && state.src.charCodeAt(pos) === 91) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        content = state.src.slice(labelStart, labelEnd);
        state.md.inline.parse(content, state.md, state.env, tokens = []);
        token = state.push("image", "img", 0);
        token.attrs = attrs = [["src", href], ["alt", ""]];
        token.children = tokens;
        token.content = content;
        if (title) {
          attrs.push(["title", title]);
        }
      }
      state.pos = pos;
      state.posMax = max2;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/autolink.js
var require_autolink = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/autolink.js"(exports, module2) {
    "use strict";
    var EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
    module2.exports = function autolink(state, silent) {
      var url, fullUrl, token, ch, start, max2, pos = state.pos;
      if (state.src.charCodeAt(pos) !== 60) {
        return false;
      }
      start = state.pos;
      max2 = state.posMax;
      for (; ; ) {
        if (++pos >= max2)
          return false;
        ch = state.src.charCodeAt(pos);
        if (ch === 60)
          return false;
        if (ch === 62)
          break;
      }
      url = state.src.slice(start + 1, pos);
      if (AUTOLINK_RE.test(url)) {
        fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          token = state.push("link_open", "a", 1);
          token.attrs = [["href", fullUrl]];
          token.markup = "autolink";
          token.info = "auto";
          token = state.push("text", "", 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push("link_close", "a", -1);
          token.markup = "autolink";
          token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      if (EMAIL_RE.test(url)) {
        fullUrl = state.md.normalizeLink("mailto:" + url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          token = state.push("link_open", "a", 1);
          token.attrs = [["href", fullUrl]];
          token.markup = "autolink";
          token.info = "auto";
          token = state.push("text", "", 0);
          token.content = state.md.normalizeLinkText(url);
          token = state.push("link_close", "a", -1);
          token.markup = "autolink";
          token.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      return false;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/html_inline.js
var require_html_inline = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/html_inline.js"(exports, module2) {
    "use strict";
    var HTML_TAG_RE = require_html_re().HTML_TAG_RE;
    function isLetter(ch) {
      var lc = ch | 32;
      return lc >= 97 && lc <= 122;
    }
    module2.exports = function html_inline(state, silent) {
      var ch, match, max2, token, pos = state.pos;
      if (!state.md.options.html) {
        return false;
      }
      max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 60 || pos + 2 >= max2) {
        return false;
      }
      ch = state.src.charCodeAt(pos + 1);
      if (ch !== 33 && ch !== 63 && ch !== 47 && !isLetter(ch)) {
        return false;
      }
      match = state.src.slice(pos).match(HTML_TAG_RE);
      if (!match) {
        return false;
      }
      if (!silent) {
        token = state.push("html_inline", "", 0);
        token.content = state.src.slice(pos, pos + match[0].length);
      }
      state.pos += match[0].length;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/entity.js
var require_entity = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/entity.js"(exports, module2) {
    "use strict";
    var entities = require_entities2();
    var has = require_utils().has;
    var isValidEntityCode = require_utils().isValidEntityCode;
    var fromCodePoint = require_utils().fromCodePoint;
    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
    module2.exports = function entity(state, silent) {
      var ch, code2, match, pos = state.pos, max2 = state.posMax;
      if (state.src.charCodeAt(pos) !== 38) {
        return false;
      }
      if (pos + 1 < max2) {
        ch = state.src.charCodeAt(pos + 1);
        if (ch === 35) {
          match = state.src.slice(pos).match(DIGITAL_RE);
          if (match) {
            if (!silent) {
              code2 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
              state.pending += isValidEntityCode(code2) ? fromCodePoint(code2) : fromCodePoint(65533);
            }
            state.pos += match[0].length;
            return true;
          }
        } else {
          match = state.src.slice(pos).match(NAMED_RE);
          if (match) {
            if (has(entities, match[1])) {
              if (!silent) {
                state.pending += entities[match[1]];
              }
              state.pos += match[0].length;
              return true;
            }
          }
        }
      }
      if (!silent) {
        state.pending += "&";
      }
      state.pos++;
      return true;
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/balance_pairs.js
var require_balance_pairs = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/balance_pairs.js"(exports, module2) {
    "use strict";
    function processDelimiters(state, delimiters) {
      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx, isOddMatch, lastJump, openersBottom = {}, max2 = delimiters.length;
      if (!max2)
        return;
      var headerIdx = 0;
      var lastTokenIdx = -2;
      var jumps = [];
      for (closerIdx = 0; closerIdx < max2; closerIdx++) {
        closer = delimiters[closerIdx];
        jumps.push(0);
        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
          headerIdx = closerIdx;
        }
        lastTokenIdx = closer.token;
        closer.length = closer.length || 0;
        if (!closer.close)
          continue;
        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
        }
        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
        openerIdx = headerIdx - jumps[headerIdx] - 1;
        newMinOpenerIdx = openerIdx;
        for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
          opener = delimiters[openerIdx];
          if (opener.marker !== closer.marker)
            continue;
          if (opener.open && opener.end < 0) {
            isOddMatch = false;
            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }
            if (!isOddMatch) {
              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
              jumps[closerIdx] = closerIdx - openerIdx + lastJump;
              jumps[openerIdx] = lastJump;
              closer.open = false;
              opener.end = closerIdx;
              opener.close = false;
              newMinOpenerIdx = -1;
              lastTokenIdx = -2;
              break;
            }
          }
        }
        if (newMinOpenerIdx !== -1) {
          openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
        }
      }
    }
    module2.exports = function link_pairs(state) {
      var curr, tokens_meta = state.tokens_meta, max2 = state.tokens_meta.length;
      processDelimiters(state, state.delimiters);
      for (curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(state, tokens_meta[curr].delimiters);
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/text_collapse.js
var require_text_collapse = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/text_collapse.js"(exports, module2) {
    "use strict";
    module2.exports = function text_collapse(state) {
      var curr, last, level = 0, tokens = state.tokens, max2 = state.tokens.length;
      for (curr = last = 0; curr < max2; curr++) {
        if (tokens[curr].nesting < 0)
          level--;
        tokens[curr].level = level;
        if (tokens[curr].nesting > 0)
          level++;
        if (tokens[curr].type === "text" && curr + 1 < max2 && tokens[curr + 1].type === "text") {
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) {
            tokens[last] = tokens[curr];
          }
          last++;
        }
      }
      if (curr !== last) {
        tokens.length = last;
      }
    };
  }
});

// node_modules/markdown-it/lib/rules_inline/state_inline.js
var require_state_inline = __commonJS({
  "node_modules/markdown-it/lib/rules_inline/state_inline.js"(exports, module2) {
    "use strict";
    var Token = require_token();
    var isWhiteSpace = require_utils().isWhiteSpace;
    var isPunctChar = require_utils().isPunctChar;
    var isMdAsciiPunct = require_utils().isMdAsciiPunct;
    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = "";
      this.pendingLevel = 0;
      this.cache = {};
      this.delimiters = [];
      this._prev_delimiters = [];
      this.backticks = {};
      this.backticksScanned = false;
    }
    StateInline.prototype.pushPending = function() {
      var token = new Token("text", "", 0);
      token.content = this.pending;
      token.level = this.pendingLevel;
      this.tokens.push(token);
      this.pending = "";
      return token;
    };
    StateInline.prototype.push = function(type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }
      var token = new Token(type, tag, nesting);
      var token_meta = null;
      if (nesting < 0) {
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }
      token.level = this.level;
      if (nesting > 0) {
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = { delimiters: this.delimiters };
      }
      this.pendingLevel = this.level;
      this.tokens.push(token);
      this.tokens_meta.push(token_meta);
      return token;
    };
    StateInline.prototype.scanDelims = function(start, canSplitWord) {
      var pos = start, lastChar, nextChar, count, can_open, can_close, isLastWhiteSpace, isLastPunctChar, isNextWhiteSpace, isNextPunctChar, left_flanking = true, right_flanking = true, max2 = this.posMax, marker = this.src.charCodeAt(start);
      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 32;
      while (pos < max2 && this.src.charCodeAt(pos) === marker) {
        pos++;
      }
      count = pos - start;
      nextChar = pos < max2 ? this.src.charCodeAt(pos) : 32;
      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);
      if (isNextWhiteSpace) {
        left_flanking = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          left_flanking = false;
        }
      }
      if (isLastWhiteSpace) {
        right_flanking = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          right_flanking = false;
        }
      }
      if (!canSplitWord) {
        can_open = left_flanking && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking || isNextPunctChar);
      } else {
        can_open = left_flanking;
        can_close = right_flanking;
      }
      return {
        can_open,
        can_close,
        length: count
      };
    };
    StateInline.prototype.Token = Token;
    module2.exports = StateInline;
  }
});

// node_modules/markdown-it/lib/parser_inline.js
var require_parser_inline = __commonJS({
  "node_modules/markdown-it/lib/parser_inline.js"(exports, module2) {
    "use strict";
    var Ruler = require_ruler();
    var _rules = [
      ["text", require_text()],
      ["newline", require_newline()],
      ["escape", require_escape()],
      ["backticks", require_backticks()],
      ["strikethrough", require_strikethrough().tokenize],
      ["emphasis", require_emphasis().tokenize],
      ["link", require_link()],
      ["image", require_image()],
      ["autolink", require_autolink()],
      ["html_inline", require_html_inline()],
      ["entity", require_entity()]
    ];
    var _rules2 = [
      ["balance_pairs", require_balance_pairs()],
      ["strikethrough", require_strikethrough().postProcess],
      ["emphasis", require_emphasis().postProcess],
      ["text_collapse", require_text_collapse()]
    ];
    function ParserInline() {
      var i;
      this.ruler = new Ruler();
      for (i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
      this.ruler2 = new Ruler();
      for (i = 0; i < _rules2.length; i++) {
        this.ruler2.push(_rules2[i][0], _rules2[i][1]);
      }
    }
    ParserInline.prototype.skipToken = function(state) {
      var ok, i, pos = state.pos, rules = this.ruler.getRules(""), len = rules.length, maxNesting = state.md.options.maxNesting, cache = state.cache;
      if (typeof cache[pos] !== "undefined") {
        state.pos = cache[pos];
        return;
      }
      if (state.level < maxNesting) {
        for (i = 0; i < len; i++) {
          state.level++;
          ok = rules[i](state, true);
          state.level--;
          if (ok) {
            break;
          }
        }
      } else {
        state.pos = state.posMax;
      }
      if (!ok) {
        state.pos++;
      }
      cache[pos] = state.pos;
    };
    ParserInline.prototype.tokenize = function(state) {
      var ok, i, rules = this.ruler.getRules(""), len = rules.length, end = state.posMax, maxNesting = state.md.options.maxNesting;
      while (state.pos < end) {
        if (state.level < maxNesting) {
          for (i = 0; i < len; i++) {
            ok = rules[i](state, false);
            if (ok) {
              break;
            }
          }
        }
        if (ok) {
          if (state.pos >= end) {
            break;
          }
          continue;
        }
        state.pending += state.src[state.pos++];
      }
      if (state.pending) {
        state.pushPending();
      }
    };
    ParserInline.prototype.parse = function(str, md, env, outTokens) {
      var i, rules, len;
      var state = new this.State(str, md, env, outTokens);
      this.tokenize(state);
      rules = this.ruler2.getRules("");
      len = rules.length;
      for (i = 0; i < len; i++) {
        rules[i](state);
      }
    };
    ParserInline.prototype.State = require_state_inline();
    module2.exports = ParserInline;
  }
});

// node_modules/linkify-it/lib/re.js
var require_re = __commonJS({
  "node_modules/linkify-it/lib/re.js"(exports, module2) {
    "use strict";
    module2.exports = function(opts) {
      var re = {};
      re.src_Any = require_regex2().source;
      re.src_Cc = require_regex3().source;
      re.src_Z = require_regex5().source;
      re.src_P = require_regex().source;
      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
      re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
      var text_separators = "[><\uFF5C]";
      re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
      re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
      re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
      re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
      re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!-|_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
      re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-]).|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]).|" + (opts && opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + re.src_ZCc + ").|;(?!" + re.src_ZCc + ").|\\!+(?!" + re.src_ZCc + "|[!]).|\\?(?!" + re.src_ZCc + "|[?]).)+|\\/)?";
      re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
      re.src_xn = "xn--[a-z0-9\\-]{1,59}";
      re.src_domain_root = "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
      re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
      re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
      re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
      re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
      re.src_host_strict = re.src_host + re.src_host_terminator;
      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
      re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
      re.tpl_link_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
      re.tpl_link_no_ip_fuzzy = "(^|(?![.:/\\-_@])(?:[$+<=>^`|\uFF5C]|" + re.src_ZPCc + "))((?![$+<=>^`|\uFF5C])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
      return re;
    };
  }
});

// node_modules/linkify-it/index.js
var require_linkify_it = __commonJS({
  "node_modules/linkify-it/index.js"(exports, module2) {
    "use strict";
    function assign(obj) {
      var sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source) {
        if (!source) {
          return;
        }
        Object.keys(source).forEach(function(key) {
          obj[key] = source[key];
        });
      });
      return obj;
    }
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString(obj) {
      return _class(obj) === "[object String]";
    }
    function isObject(obj) {
      return _class(obj) === "[object Object]";
    }
    function isRegExp(obj) {
      return _class(obj) === "[object RegExp]";
    }
    function isFunction2(obj) {
      return _class(obj) === "[object Function]";
    }
    function escapeRE(str) {
      return str.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    var defaultOptions = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };
    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function(acc, k) {
        return acc || defaultOptions.hasOwnProperty(k);
      }, false);
    }
    var defaultSchemas = {
      "http:": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.http) {
            self.re.http = new RegExp("^\\/\\/" + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, "i");
          }
          if (self.re.http.test(tail)) {
            return tail.match(self.re.http)[0].length;
          }
          return 0;
        }
      },
      "https:": "http:",
      "ftp:": "http:",
      "//": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.no_http) {
            self.re.no_http = new RegExp("^" + self.re.src_auth + "(?:localhost|(?:(?:" + self.re.src_domain + ")\\.)+" + self.re.src_domain_root + ")" + self.re.src_port + self.re.src_host_terminator + self.re.src_path, "i");
          }
          if (self.re.no_http.test(tail)) {
            if (pos >= 3 && text2[pos - 3] === ":") {
              return 0;
            }
            if (pos >= 3 && text2[pos - 3] === "/") {
              return 0;
            }
            return tail.match(self.re.no_http)[0].length;
          }
          return 0;
        }
      },
      "mailto:": {
        validate: function(text2, pos, self) {
          var tail = text2.slice(pos);
          if (!self.re.mailto) {
            self.re.mailto = new RegExp("^" + self.re.src_email_name + "@" + self.re.src_host_strict, "i");
          }
          if (self.re.mailto.test(tail)) {
            return tail.match(self.re.mailto)[0].length;
          }
          return 0;
        }
      }
    };
    var tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
    var tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|\u0440\u0444".split("|");
    function resetScanCache(self) {
      self.__index__ = -1;
      self.__text_cache__ = "";
    }
    function createValidator(re) {
      return function(text2, pos) {
        var tail = text2.slice(pos);
        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }
        return 0;
      };
    }
    function createNormalizer() {
      return function(match, self) {
        self.normalize(match);
      };
    }
    function compile(self) {
      var re = self.re = require_re()(self.__opts__);
      var tlds = self.__tlds__.slice();
      self.onCompile();
      if (!self.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }
      tlds.push(re.src_xn);
      re.src_tlds = tlds.join("|");
      function untpl(tpl) {
        return tpl.replace("%TLDS%", re.src_tlds);
      }
      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
      var aliases = [];
      self.__compiled__ = {};
      function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
      }
      Object.keys(self.__schemas__).forEach(function(name) {
        var val = self.__schemas__[name];
        if (val === null) {
          return;
        }
        var compiled = { validate: null, link: null };
        self.__compiled__[name] = compiled;
        if (isObject(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction2(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name, val);
          }
          if (isFunction2(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name, val);
          }
          return;
        }
        if (isString(val)) {
          aliases.push(name);
          return;
        }
        schemaError(name, val);
      });
      aliases.forEach(function(alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) {
          return;
        }
        self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
      });
      self.__compiled__[""] = { validate: null, normalize: createNormalizer() };
      var slist = Object.keys(self.__compiled__).filter(function(name) {
        return name.length > 0 && self.__compiled__[name];
      }).map(escapeRE).join("|");
      self.re.schema_test = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "i");
      self.re.schema_search = RegExp("(^|(?!_)(?:[><\uFF5C]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
      self.re.pretest = RegExp("(" + self.re.schema_test.source + ")|(" + self.re.host_fuzzy_test.source + ")|@", "i");
      resetScanCache(self);
    }
    function Match(self, shift) {
      var start = self.__index__, end = self.__last_index__, text2 = self.__text_cache__.slice(start, end);
      this.schema = self.__schema__.toLowerCase();
      this.index = start + shift;
      this.lastIndex = end + shift;
      this.raw = text2;
      this.text = text2;
      this.url = text2;
    }
    function createMatch(self, shift) {
      var match = new Match(self, shift);
      self.__compiled__[match.schema].normalize(match, self);
      return match;
    }
    function LinkifyIt(schemas, options) {
      if (!(this instanceof LinkifyIt)) {
        return new LinkifyIt(schemas, options);
      }
      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }
      this.__opts__ = assign({}, defaultOptions, options);
      this.__index__ = -1;
      this.__last_index__ = -1;
      this.__schema__ = "";
      this.__text_cache__ = "";
      this.__schemas__ = assign({}, defaultSchemas, schemas);
      this.__compiled__ = {};
      this.__tlds__ = tlds_default;
      this.__tlds_replaced__ = false;
      this.re = {};
      compile(this);
    }
    LinkifyIt.prototype.add = function add(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };
    LinkifyIt.prototype.set = function set(options) {
      this.__opts__ = assign(this.__opts__, options);
      return this;
    };
    LinkifyIt.prototype.test = function test(text2) {
      this.__text_cache__ = text2;
      this.__index__ = -1;
      if (!text2.length) {
        return false;
      }
      var m, ml, me, len, shift, next, re, tld_pos, at_pos;
      if (this.re.schema_test.test(text2)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while ((m = re.exec(text2)) !== null) {
          len = this.testSchemaAt(text2, m[2], re.lastIndex);
          if (len) {
            this.__schema__ = m[2];
            this.__index__ = m.index + m[1].length;
            this.__last_index__ = m.index + m[0].length + len;
            break;
          }
        }
      }
      if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
        tld_pos = text2.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
              shift = ml.index + ml[1].length;
              if (this.__index__ < 0 || shift < this.__index__) {
                this.__schema__ = "";
                this.__index__ = shift;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }
      if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
        at_pos = text2.indexOf("@");
        if (at_pos >= 0) {
          if ((me = text2.match(this.re.email_fuzzy)) !== null) {
            shift = me.index + me[1].length;
            next = me.index + me[0].length;
            if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
              this.__schema__ = "mailto:";
              this.__index__ = shift;
              this.__last_index__ = next;
            }
          }
        }
      }
      return this.__index__ >= 0;
    };
    LinkifyIt.prototype.pretest = function pretest(text2) {
      return this.re.pretest.test(text2);
    };
    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos) {
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }
      return this.__compiled__[schema.toLowerCase()].validate(text2, pos, this);
    };
    LinkifyIt.prototype.match = function match(text2) {
      var shift = 0, result = [];
      if (this.__index__ >= 0 && this.__text_cache__ === text2) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
      }
      var tail = shift ? text2.slice(shift) : text2;
      while (this.test(tail)) {
        result.push(createMatch(this, shift));
        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
      }
      if (result.length) {
        return result;
      }
      return null;
    };
    LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {
      list2 = Array.isArray(list2) ? list2 : [list2];
      if (!keepOld) {
        this.__tlds__ = list2.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }
      this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr) {
        return el !== arr[idx - 1];
      }).reverse();
      compile(this);
      return this;
    };
    LinkifyIt.prototype.normalize = function normalize(match) {
      if (!match.schema) {
        match.url = "http://" + match.url;
      }
      if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) {
        match.url = "mailto:" + match.url;
      }
    };
    LinkifyIt.prototype.onCompile = function onCompile() {
    };
    module2.exports = LinkifyIt;
  }
});

// node_modules/punycode/punycode.js
var require_punycode = __commonJS({
  "node_modules/punycode/punycode.js"(exports, module2) {
    "use strict";
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/;
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    var errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    function error2(type) {
      throw new RangeError(errors[type]);
    }
    function map(array, fn) {
      const result = [];
      let length = array.length;
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }
    function mapDomain(string, fn) {
      const parts = string.split("@");
      let result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string = parts[1];
      }
      string = string.replace(regexSeparators, ".");
      const labels = string.split(".");
      const encoded = map(labels, fn).join(".");
      return result + encoded;
    }
    function ucs2decode(string) {
      const output = [];
      let counter = 0;
      const length = string.length;
      while (counter < length) {
        const value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          const extra = string.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    var ucs2encode = (array) => String.fromCodePoint(...array);
    var basicToDigit = function(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    };
    var digitToBasic = function(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    var adapt = function(delta, numPoints, firstTime) {
      let k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var decode = function(input) {
      const output = [];
      const inputLength = input.length;
      let i = 0;
      let n = initialN;
      let bias = initialBias;
      let basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (let j = 0; j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error2("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        let oldi = i;
        for (let w = 1, k = base; ; k += base) {
          if (index >= inputLength) {
            error2("invalid-input");
          }
          const digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error2("overflow");
          }
          i += digit * w;
          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          const baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error2("overflow");
          }
          w *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error2("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return String.fromCodePoint(...output);
    };
    var encode = function(input) {
      const output = [];
      input = ucs2decode(input);
      let inputLength = input.length;
      let n = initialN;
      let delta = 0;
      let bias = initialBias;
      for (const currentValue of input) {
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      let basicLength = output.length;
      let handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        let m = maxInt;
        for (const currentValue of input) {
          if (currentValue >= n && currentValue < m) {
            m = currentValue;
          }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error2("overflow");
        }
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        for (const currentValue of input) {
          if (currentValue < n && ++delta > maxInt) {
            error2("overflow");
          }
          if (currentValue == n) {
            let q = delta;
            for (let k = base; ; k += base) {
              const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
              if (q < t) {
                break;
              }
              const qMinusT = q - t;
              const baseMinusT = base - t;
              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
              q = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    };
    var toUnicode = function(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    var toASCII = function(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    var punycode = {
      "version": "2.1.0",
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode,
      "encode": encode,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    module2.exports = punycode;
  }
});

// node_modules/markdown-it/lib/presets/default.js
var require_default = __commonJS({
  "node_modules/markdown-it/lib/presets/default.js"(exports, module2) {
    "use strict";
    module2.exports = {
      options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 100
      },
      components: {
        core: {},
        block: {},
        inline: {}
      }
    };
  }
});

// node_modules/markdown-it/lib/presets/zero.js
var require_zero = __commonJS({
  "node_modules/markdown-it/lib/presets/zero.js"(exports, module2) {
    "use strict";
    module2.exports = {
      options: {
        html: false,
        xhtmlOut: false,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline"
          ]
        },
        block: {
          rules: [
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "text"
          ],
          rules2: [
            "balance_pairs",
            "text_collapse"
          ]
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/presets/commonmark.js
var require_commonmark = __commonJS({
  "node_modules/markdown-it/lib/presets/commonmark.js"(exports, module2) {
    "use strict";
    module2.exports = {
      options: {
        html: true,
        xhtmlOut: true,
        breaks: false,
        langPrefix: "language-",
        linkify: false,
        typographer: false,
        quotes: "\u201C\u201D\u2018\u2019",
        highlight: null,
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline"
          ]
        },
        block: {
          rules: [
            "blockquote",
            "code",
            "fence",
            "heading",
            "hr",
            "html_block",
            "lheading",
            "list",
            "reference",
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "autolink",
            "backticks",
            "emphasis",
            "entity",
            "escape",
            "html_inline",
            "image",
            "link",
            "newline",
            "text"
          ],
          rules2: [
            "balance_pairs",
            "emphasis",
            "text_collapse"
          ]
        }
      }
    };
  }
});

// node_modules/markdown-it/lib/index.js
var require_lib = __commonJS({
  "node_modules/markdown-it/lib/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var helpers = require_helpers();
    var Renderer = require_renderer();
    var ParserCore = require_parser_core();
    var ParserBlock = require_parser_block();
    var ParserInline = require_parser_inline();
    var LinkifyIt = require_linkify_it();
    var mdurl = require_mdurl();
    var punycode = require_punycode();
    var config = {
      default: require_default(),
      zero: require_zero(),
      commonmark: require_commonmark()
    };
    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
    function validateLink(url) {
      var str = url.trim().toLowerCase();
      return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) ? true : false : true;
    }
    var RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
    function normalizeLink(url) {
      var parsed = mdurl.parse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return mdurl.encode(mdurl.format(parsed));
    }
    function normalizeLinkText(url) {
      var parsed = mdurl.parse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + "%");
    }
    function MarkdownIt3(presetName, options) {
      if (!(this instanceof MarkdownIt3)) {
        return new MarkdownIt3(presetName, options);
      }
      if (!options) {
        if (!utils.isString(presetName)) {
          options = presetName || {};
          presetName = "default";
        }
      }
      this.inline = new ParserInline();
      this.block = new ParserBlock();
      this.core = new ParserCore();
      this.renderer = new Renderer();
      this.linkify = new LinkifyIt();
      this.validateLink = validateLink;
      this.normalizeLink = normalizeLink;
      this.normalizeLinkText = normalizeLinkText;
      this.utils = utils;
      this.helpers = utils.assign({}, helpers);
      this.options = {};
      this.configure(presetName);
      if (options) {
        this.set(options);
      }
    }
    MarkdownIt3.prototype.set = function(options) {
      utils.assign(this.options, options);
      return this;
    };
    MarkdownIt3.prototype.configure = function(presets) {
      var self = this, presetName;
      if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];
        if (!presets) {
          throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
        }
      }
      if (!presets) {
        throw new Error("Wrong `markdown-it` preset, can't be empty");
      }
      if (presets.options) {
        self.set(presets.options);
      }
      if (presets.components) {
        Object.keys(presets.components).forEach(function(name) {
          if (presets.components[name].rules) {
            self[name].ruler.enableOnly(presets.components[name].rules);
          }
          if (presets.components[name].rules2) {
            self[name].ruler2.enableOnly(presets.components[name].rules2);
          }
        });
      }
      return this;
    };
    MarkdownIt3.prototype.enable = function(list2, ignoreInvalid) {
      var result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.enable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.enable(list2, true));
      var missed = list2.filter(function(name) {
        return result.indexOf(name) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt3.prototype.disable = function(list2, ignoreInvalid) {
      var result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.disable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.disable(list2, true));
      var missed = list2.filter(function(name) {
        return result.indexOf(name) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt3.prototype.use = function(plugin4) {
      var args = [this].concat(Array.prototype.slice.call(arguments, 1));
      plugin4.apply(plugin4, args);
      return this;
    };
    MarkdownIt3.prototype.parse = function(src, env) {
      if (typeof src !== "string") {
        throw new Error("Input data should be a String");
      }
      var state = new this.core.State(src, this, env);
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt3.prototype.render = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parse(src, env), this.options, env);
    };
    MarkdownIt3.prototype.parseInline = function(src, env) {
      var state = new this.core.State(src, this, env);
      state.inlineMode = true;
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt3.prototype.renderInline = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };
    module2.exports = MarkdownIt3;
  }
});

// node_modules/markdown-it/index.js
var require_markdown_it = __commonJS({
  "node_modules/markdown-it/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_lib();
  }
});

// index.ts
__export(exports, {
  Ast: () => ast_default,
  Tag: () => Tag,
  Tokenizer: () => Tokenizer,
  createElement: () => createElement,
  default: () => Markdoc,
  format: () => format,
  functions: () => functions_default,
  globalAttributes: () => globalAttributes,
  nodes: () => schema_exports,
  parse: () => parse3,
  parseTags: () => parseTags,
  renderers: () => renderers_default,
  resolve: () => resolve2,
  tags: () => tags_default,
  transform: () => transform2,
  transformer: () => transformer_default,
  transforms: () => transforms_default,
  truthy: () => truthy,
  validate: () => validate,
  validator: () => validator
});

// src/ast/base.ts
var base_exports = {};
__export(base_exports, {
  getAstValues: () => getAstValues,
  isAst: () => isAst,
  isFunction: () => isFunction,
  isVariable: () => isVariable,
  resolve: () => resolve
});
function isAst(value) {
  return !!value?.$$mdtype;
}
function isFunction(value) {
  return !!(value?.$$mdtype === "Function");
}
function isVariable(value) {
  return !!(value?.$$mdtype === "Variable");
}
function* getAstValues(value) {
  if (value == null || typeof value !== "object")
    return;
  if (Array.isArray(value))
    for (const v of value)
      yield* getAstValues(v);
  if (isAst(value))
    yield value;
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return;
  for (const v of Object.values(value))
    yield* getAstValues(v);
}
function resolve(value, config = {}) {
  if (value == null || typeof value !== "object")
    return value;
  if (Array.isArray(value))
    return value.map((item2) => resolve(item2, config));
  if (isAst(value) && value?.resolve instanceof Function)
    return value.resolve(config);
  if (Object.getPrototypeOf(value) !== Object.prototype)
    return value;
  const output = {};
  for (const [k, v] of Object.entries(value))
    output[k] = resolve(v, config);
  return output;
}

// src/tag.ts
var Tag = class {
  constructor(name = "div", attributes = {}, children = []) {
    this.$$mdtype = "Tag";
    this.name = name;
    this.attributes = attributes;
    this.children = children;
  }
};
Tag.isTag = (tag) => {
  return !!(tag?.$$mdtype === "Tag");
};

// src/schema-types/class.ts
var Class = class {
  validate(value) {
    if (typeof value === "string" || typeof value === "object")
      return [];
    return [
      {
        id: "attribute-type-invalid",
        level: "error",
        message: `Attribute 'class' must be type 'string | object'`
      }
    ];
  }
  transform(value) {
    if (!value || typeof value === "string")
      return value;
    const classes = [];
    for (const [k, v] of Object.entries(value ?? {}))
      if (v)
        classes.push(k);
    return classes.join(" ");
  }
};

// src/schema-types/id.ts
var Id = class {
  validate(value) {
    if (typeof value === "string" && value.match(/^[a-zA-Z]/))
      return [];
    return [
      {
        id: "attribute-value-invalid",
        level: "error",
        message: "The 'id' attribute must start with a letter"
      }
    ];
  }
};

// src/utils.ts
var import_tag = __toModule(require_tag());

// src/ast/variable.ts
var Variable = class {
  constructor(path = []) {
    this.$$mdtype = "Variable";
    this.path = path;
  }
  resolve({ variables } = {}) {
    return variables instanceof Function ? variables(this.path) : this.path.reduce((obj = {}, key) => obj[key], variables);
  }
};

// src/ast/function.ts
var Function2 = class {
  constructor(name, parameters) {
    this.$$mdtype = "Function";
    this.name = name;
    this.parameters = parameters;
  }
  resolve(config = {}) {
    const fn = config?.functions?.[this.name];
    if (!fn)
      return null;
    const parameters = resolve(this.parameters, config);
    return fn.transform?.(parameters, config);
  }
};

// src/utils.ts
var STATES;
(function(STATES2) {
  STATES2[STATES2["normal"] = 0] = "normal";
  STATES2[STATES2["string"] = 1] = "string";
  STATES2[STATES2["escape"] = 2] = "escape";
})(STATES || (STATES = {}));
var OPEN = "{%";
var CLOSE = "%}";
var IDENTIFIER_REGEX = /^[a-zA-Z0-9_-]+$/;
function isIdentifier(s2) {
  return typeof s2 === "string" && IDENTIFIER_REGEX.test(s2);
}
function isPromise(a) {
  return a && typeof a === "object" && typeof a.then === "function";
}
function findTagEnd(content, start = 0) {
  let state = 0;
  for (let pos = start; pos < content.length; pos++) {
    const char = content[pos];
    switch (state) {
      case 1:
        switch (char) {
          case '"':
            state = 0;
            break;
          case "\\":
            state = 2;
            break;
        }
        break;
      case 2:
        state = 1;
        break;
      case 0:
        if (char === '"')
          state = 1;
        else if (content.startsWith(CLOSE, pos))
          return pos;
    }
  }
  return null;
}
function parseTag(content, line, contentStart) {
  try {
    return (0, import_tag.parse)(content, { Variable, Function: Function2 });
  } catch (error2) {
    if (!(error2 instanceof import_tag.SyntaxError))
      throw error2;
    const {
      message,
      location: { start, end }
    } = error2;
    const location = {
      start: { line, character: start.offset + contentStart },
      end: { line: line + 1, character: end.offset + contentStart }
    };
    return { type: "error", meta: { error: { message, location } } };
  }
}
function parseTags(content, firstLine = 0) {
  let line = firstLine + 1;
  const output = [];
  let start = 0;
  for (let pos = 0; pos < content.length; pos++) {
    if (content[pos] === "\n") {
      line++;
      continue;
    }
    if (!content.startsWith(OPEN, pos))
      continue;
    const end = findTagEnd(content, pos);
    if (end == null) {
      pos = pos + OPEN.length;
      continue;
    }
    const text2 = content.slice(pos, end + CLOSE.length);
    const inner = content.slice(pos + OPEN.length, end);
    const lineStart = content.lastIndexOf("\n", pos);
    const lineEnd = content.indexOf("\n", end);
    const lineContent = content.slice(lineStart, lineEnd);
    const tag = parseTag(inner.trim(), line, pos - lineStart);
    const precedingTextEnd = lineContent.trim() === text2 ? lineStart : pos;
    const precedingText = content.slice(start, precedingTextEnd);
    output.push({
      type: "text",
      start,
      end: pos - 1,
      content: precedingText
    });
    output.push({
      map: [line, line + 1],
      position: {
        start: pos - lineStart,
        end: pos - lineStart + text2.length
      },
      start: pos,
      end: pos + text2.length - 1,
      info: text2,
      ...tag
    });
    start = end + CLOSE.length;
    pos = start - 1;
  }
  output.push({
    type: "text",
    start,
    end: content.length - 1,
    content: content.slice(start)
  });
  return output;
}

// src/transformer.ts
var globalAttributes = {
  class: { type: Class, render: true },
  id: { type: Id, render: true }
};
var transformer_default = {
  findSchema(node2, { nodes = {}, tags = {} } = {}) {
    return node2.tag ? tags[node2.tag] : nodes[node2.type];
  },
  attributes(node2, config = {}) {
    const schema = this.findSchema(node2, config) ?? {};
    const output = {};
    const attrs = { ...globalAttributes, ...schema.attributes };
    for (const [key, attr] of Object.entries(attrs)) {
      if (attr.render == false)
        continue;
      const name = typeof attr.render === "string" ? attr.render : key;
      let value = node2.attributes[key];
      if (typeof attr.type === "function") {
        const instance = new attr.type();
        if (instance.transform) {
          value = instance.transform(value, config);
        }
      }
      value = value === void 0 ? attr.default : value;
      if (value === void 0)
        continue;
      output[name] = value;
    }
    if (schema.slots) {
      for (const [key, slot2] of Object.entries(schema.slots)) {
        const name = typeof slot2.render === "string" ? slot2.render : key;
        if (node2.slots[key])
          output[name] = this.node(node2.slots[key], config);
      }
    }
    return output;
  },
  children(node2, config = {}) {
    const children = node2.children.flatMap((child) => this.node(child, config));
    if (children.some(isPromise)) {
      return Promise.all(children);
    }
    return children;
  },
  node(node2, config = {}) {
    const schema = this.findSchema(node2, config) ?? {};
    if (schema && schema.transform instanceof Function)
      return schema.transform(node2, config);
    const children = this.children(node2, config);
    if (!schema || !schema.render)
      return children;
    const attributes = this.attributes(node2, config);
    if (isPromise(attributes) || isPromise(children)) {
      return Promise.all([attributes, children]).then((values) => new Tag(schema.render, ...values));
    }
    return new Tag(schema.render, attributes, children);
  }
};

// src/ast/node.ts
var Node = class {
  constructor(type = "node", attributes = {}, children = [], tag) {
    this.$$mdtype = "Node";
    this.errors = [];
    this.lines = [];
    this.inline = false;
    this.attributes = attributes;
    this.children = children;
    this.type = type;
    this.tag = tag;
    this.annotations = [];
    this.slots = {};
  }
  *walk() {
    for (const child of [...Object.values(this.slots), ...this.children]) {
      yield child;
      yield* child.walk();
    }
  }
  push(node2) {
    this.children.push(node2);
  }
  resolve(config = {}) {
    return Object.assign(new Node(), this, {
      children: this.children.map((child) => child.resolve(config)),
      attributes: resolve(this.attributes, config)
    });
  }
  findSchema(config = {}) {
    return transformer_default.findSchema(this, config);
  }
  transformAttributes(config = {}) {
    return transformer_default.attributes(this, config);
  }
  transformChildren(config) {
    return transformer_default.children(this, config);
  }
  transform(config) {
    return transformer_default.node(this, config);
  }
};

// src/ast/index.ts
var AstTypes = {
  Function: Function2,
  Node,
  Variable
};
function reviver(_, value) {
  if (!value)
    return value;
  const klass = AstTypes[value.$$mdtype];
  return klass ? Object.assign(new klass(), value) : value;
}
function fromJSON(text2) {
  return JSON.parse(text2, reviver);
}
var ast_default = {
  ...AstTypes,
  ...base_exports,
  fromJSON
};

// src/formatter.ts
var SPACE = " ";
var SEP = ", ";
var NL = "\n";
var OL = ".";
var UL = "-";
var MAX_TAG_OPENING_WIDTH = 80;
var WRAPPING_TYPES = ["strong", "em", "s"];
var max = (a, b) => Math.max(a, b);
var increment = (o, n = 2) => ({
  ...o,
  indent: (o.indent || 0) + n
});
function* formatChildren(a, options) {
  for (const child of a.children) {
    yield* formatValue(child, options);
  }
}
function* formatInline(g) {
  yield [...g].join("").trim();
}
function* formatTableRow(items) {
  yield `| ${items.join(" | ")} |`;
}
function formatScalar(v) {
  if (ast_default.isAst(v)) {
    return format(v);
  }
  if (v === null) {
    return "null";
  }
  if (Array.isArray(v)) {
    return "[" + v.map(formatScalar).join(SEP) + "]";
  }
  if (typeof v === "object") {
    return "{" + Object.entries(v).map(([key, value]) => `${isIdentifier(key) ? key : `"${key}"`}: ${formatScalar(value)}`).join(SEP) + "}";
  }
  return JSON.stringify(v);
}
function formatAnnotationValue(a) {
  if (a.name === "primary")
    return formatScalar(a.value);
  if (a.name === "id" && typeof a.value === "string" && isIdentifier(a.value))
    return "#" + a.value;
  if (a.type === "class" && isIdentifier(a.name))
    return "." + a.name;
  return `${a.name}=${formatScalar(a.value)}`;
}
function* formatAttributes(n) {
  for (const [key, value] of Object.entries(n.attributes)) {
    if (key === "class" && typeof value === "object" && !ast_default.isAst(value))
      for (const name of Object.keys(value)) {
        yield formatAnnotationValue({ type: "class", name, value });
      }
    else
      yield formatAnnotationValue({ type: "attribute", name: key, value });
  }
}
function* formatAnnotations(n) {
  if (n.annotations.length) {
    yield OPEN + SPACE;
    yield n.annotations.map(formatAnnotationValue).join(SPACE);
    yield SPACE + CLOSE;
  }
}
function* formatVariable(v) {
  yield "$";
  yield v.path.map((p, i) => {
    if (i === 0)
      return p;
    if (isIdentifier(p))
      return "." + p;
    if (typeof p === "number")
      return `[${p}]`;
    return `["${p}"]`;
  }).join("");
}
function* formatFunction(f) {
  yield f.name;
  yield "(";
  yield Object.values(f.parameters).map(formatScalar).join(SEP);
  yield ")";
}
function* trimStart(g) {
  let n;
  do {
    const { value, done } = g.next();
    if (done)
      return;
    n = value.trimStart();
  } while (!n.length);
  yield n;
  yield* g;
}
function* escapeMarkdownCharacters(s2, characters) {
  yield s2.replace(characters, "\\$&").replace(new RegExp("\xA0", "g"), "&nbsp;");
}
function* formatNode(n, o = {}) {
  const no = { ...o, parent: n };
  const indent = SPACE.repeat(no.indent || 0);
  switch (n.type) {
    case "document": {
      if (n.attributes.frontmatter && n.attributes.frontmatter.length) {
        yield "---" + NL + n.attributes.frontmatter + NL + "---" + NL + NL;
      }
      yield* trimStart(formatChildren(n, no));
      break;
    }
    case "heading": {
      yield NL;
      yield indent;
      yield "#".repeat(n.attributes.level || 1);
      yield SPACE;
      yield* trimStart(formatChildren(n, no));
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "paragraph": {
      yield NL;
      yield* formatChildren(n, no);
      yield* formatAnnotations(n);
      yield NL;
      break;
    }
    case "inline": {
      yield indent;
      yield* formatChildren(n, no);
      break;
    }
    case "image": {
      yield "!";
      yield "[";
      yield* formatValue(n.attributes.alt, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.src === "string" ? escapeMarkdownCharacters(n.attributes.src, /[()]/) : formatValue(n.attributes.src, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "link": {
      yield "[";
      yield* formatChildren(n, no);
      yield "]";
      yield "(";
      yield* typeof n.attributes.href === "string" ? escapeMarkdownCharacters(n.attributes.href, /[()]/g) : formatValue(n.attributes.href, no);
      if (n.attributes.title) {
        yield SPACE + `"${n.attributes.title}"`;
      }
      yield ")";
      break;
    }
    case "text": {
      const { content } = n.attributes;
      if (ast_default.isAst(content)) {
        yield OPEN + SPACE;
        yield* formatValue(content, no);
        yield SPACE + CLOSE;
      } else {
        if (o.parent && WRAPPING_TYPES.includes(o.parent.type)) {
          yield* escapeMarkdownCharacters(content, /[*_~]/g);
        } else {
          yield* escapeMarkdownCharacters(content, /^[*>#]/);
        }
      }
      break;
    }
    case "blockquote": {
      const prefix = ">" + SPACE;
      yield n.children.map((child) => format(child, no).trimStart()).map((d) => NL + indent + prefix + d).join(indent + prefix);
      break;
    }
    case "hr": {
      yield NL;
      yield indent;
      yield "---";
      yield NL;
      break;
    }
    case "fence": {
      yield NL;
      yield indent;
      const innerFence = n.attributes.content.match(/`{3,}/g) || [];
      const innerFenceLength = innerFence.map((s2) => s2.length).reduce(max, 0);
      const boundary = "`".repeat(innerFenceLength ? innerFenceLength + 1 : 3);
      yield boundary;
      if (n.attributes.language)
        yield n.attributes.language;
      if (n.annotations.length)
        yield SPACE;
      yield* formatAnnotations(n);
      yield NL;
      yield indent;
      yield n.attributes.content.split(NL).join(NL + indent);
      yield boundary;
      yield NL;
      break;
    }
    case "tag": {
      if (!n.inline) {
        yield NL;
        yield indent;
      }
      const open = OPEN + SPACE;
      const tag = [open + n.tag, ...formatAttributes(n)];
      const inlineTag = tag.join(SPACE);
      const isLongTagOpening = inlineTag.length + open.length * 2 > (o.maxTagOpeningWidth || MAX_TAG_OPENING_WIDTH);
      yield (!n.inline && isLongTagOpening ? tag.join(NL + SPACE.repeat(open.length) + indent) : inlineTag) + SPACE + (n.children.length ? "" : "/") + CLOSE;
      if (n.children.length) {
        yield* formatChildren(n, no.allowIndentation ? increment(no) : no);
        if (!n.inline) {
          yield indent;
        }
        yield OPEN + SPACE + "/" + n.tag + SPACE + CLOSE;
      }
      if (!n.inline) {
        yield NL;
      }
      break;
    }
    case "list": {
      for (let i = 0; i < n.children.length; i++) {
        const prefix = n.attributes.ordered ? `${i === 0 ? n.attributes.start ?? "1" : "1"}${n.attributes.marker ?? OL}` : n.attributes.marker ?? UL;
        const d = format(n.children[i], increment(no, prefix.length + 1)).trim();
        yield NL + indent + prefix + " " + d;
      }
      yield NL;
      break;
    }
    case "item": {
      for (let i = 0; i < n.children.length; i++) {
        yield* formatValue(n.children[i], no);
        if (i === 0)
          yield* formatAnnotations(n);
      }
      break;
    }
    case "strong": {
      yield n.attributes.marker ?? "**";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "**";
      break;
    }
    case "em": {
      yield n.attributes.marker ?? "*";
      yield* formatInline(formatChildren(n, no));
      yield n.attributes.marker ?? "*";
      break;
    }
    case "code": {
      yield "`";
      yield* formatInline(formatValue(n.attributes.content, no));
      yield "`";
      break;
    }
    case "s": {
      yield "~~";
      yield* formatInline(formatChildren(n, no));
      yield "~~";
      break;
    }
    case "hardbreak": {
      yield "\\" + NL;
      yield indent;
      break;
    }
    case "softbreak": {
      yield NL;
      yield indent;
      break;
    }
    case "table": {
      const table3 = [...formatChildren(n, increment(no))];
      if (o.parent && o.parent.type === "tag" && o.parent.tag === "table") {
        for (let i = 0; i < table3.length; i++) {
          const row = table3[i];
          if (typeof row === "string") {
            if (row.trim().length) {
              yield NL;
              yield row;
            }
          } else {
            if (i !== 0) {
              yield NL;
              yield indent + "---";
            }
            for (const d of row) {
              yield NL + indent + UL + " " + d;
            }
          }
        }
        yield NL;
      } else {
        yield NL;
        const [head, ...rows] = table3;
        const ml = table3.map((arr) => arr.map((s2) => s2.length).reduce(max)).reduce(max);
        yield* formatTableRow(head.map((h) => h + SPACE.repeat(ml - h.length)));
        yield NL;
        yield* formatTableRow(head.map(() => "-".repeat(ml)));
        yield NL;
        for (const row of rows) {
          yield* formatTableRow(row.map((r) => r + SPACE.repeat(ml - r.length)));
          yield NL;
        }
      }
      break;
    }
    case "thead": {
      const [head] = [...formatChildren(n, no)];
      yield head || [];
      break;
    }
    case "tr": {
      yield [...formatChildren(n, no)];
      break;
    }
    case "td":
    case "th": {
      yield [...formatChildren(n, no), ...formatAnnotations(n)].join("").trim();
      break;
    }
    case "tbody": {
      yield* formatChildren(n, no);
      break;
    }
    case "comment": {
      yield "<!-- " + n.attributes.content + " -->\n";
      break;
    }
    case "error":
    case "node":
      break;
  }
}
function* formatValue(v, o = {}) {
  switch (typeof v) {
    case "undefined":
      break;
    case "boolean":
    case "number":
    case "string": {
      yield v.toString();
      break;
    }
    case "object": {
      if (v === null)
        break;
      if (Array.isArray(v)) {
        for (const n of v)
          yield* formatValue(n, o);
        break;
      }
      switch (v.$$mdtype) {
        case "Function": {
          yield* formatFunction(v);
          break;
        }
        case "Node":
          yield* formatNode(v, o);
          break;
        case "Variable": {
          yield* formatVariable(v);
          break;
        }
        default:
          throw new Error(`Unimplemented: "${v.$$mdtype}"`);
      }
      break;
    }
  }
}
function format(v, options) {
  let doc = "";
  for (const s2 of formatValue(v, options))
    doc += s2;
  return doc.trimStart();
}

// src/tags/conditional.ts
function truthy(value) {
  return value !== false && value !== void 0 && value !== null;
}
function renderConditions(node2) {
  const conditions = [
    { condition: node2.attributes.primary, children: [] }
  ];
  for (const child of node2.children) {
    if (child.type === "tag" && child.tag === "else")
      conditions.push({
        condition: "primary" in child.attributes ? child.attributes.primary : true,
        children: []
      });
    else
      conditions[conditions.length - 1].children.push(child);
  }
  return conditions;
}
var tagIf = {
  attributes: {
    primary: { type: Object, render: false }
  },
  transform(node2, config) {
    const conditions = renderConditions(node2);
    for (const { condition, children } of conditions)
      if (truthy(condition)) {
        const nodes = children.flatMap((child) => child.transform(config));
        if (nodes.some(isPromise)) {
          return Promise.all(nodes).then((nodes2) => nodes2.flat());
        }
        return nodes;
      }
    return [];
  }
};
var tagElse = {
  selfClosing: true,
  attributes: {
    primary: { type: Object, render: false }
  }
};

// src/functions/index.ts
var and = {
  transform(parameters) {
    return Object.values(parameters).every((x) => truthy(x));
  }
};
var or = {
  transform(parameters) {
    return Object.values(parameters).find((x) => truthy(x)) !== void 0;
  }
};
var not = {
  parameters: {
    0: { required: true }
  },
  transform(parameters) {
    return !truthy(parameters[0]);
  }
};
var equals = {
  transform(parameters) {
    const values = Object.values(parameters);
    return values.every((v) => v === values[0]);
  }
};
var debug = {
  transform(parameters) {
    return JSON.stringify(parameters[0], null, 2);
  }
};
var defaultFn = {
  transform(parameters) {
    return parameters[0] === void 0 ? parameters[1] : parameters[0];
  }
};
var functions_default = { and, or, not, equals, default: defaultFn, debug };

// src/transforms/table.ts
function convertToRow(node2, cellType = "td") {
  node2.type = "tr";
  node2.attributes = {};
  for (const cell of node2.children)
    cell.type = cellType;
  return node2;
}
function transform(document2) {
  for (const node2 of document2.walk()) {
    if (node2.type !== "tag" || node2.tag !== "table")
      continue;
    const [first, ...rest] = node2.children;
    if (!first || first.type === "table")
      continue;
    const table3 = new ast_default.Node("table", node2.attributes, [
      new ast_default.Node("thead"),
      new ast_default.Node("tbody")
    ]);
    const [thead2, tbody2] = table3.children;
    if (first.type === "list")
      thead2.push(convertToRow(first, "th"));
    for (const row of rest) {
      if (row.type === "list")
        convertToRow(row);
      else if (row.type === "tag" && row.tag === "if") {
        const children = [];
        for (const child of row.children) {
          if (child.type === "hr")
            continue;
          if (child.type === "list")
            convertToRow(child);
          children.push(child);
        }
        row.children = children;
      } else
        continue;
      tbody2.push(row);
    }
    node2.children = [table3];
  }
}

// src/transforms/index.ts
var transforms_default = [transform];

// src/parser.ts
var mappings = {
  ordered_list: "list",
  bullet_list: "list",
  code_inline: "code",
  list_item: "item",
  variable: "text"
};
function annotate(node2, attributes) {
  for (const attribute of attributes) {
    node2.annotations.push(attribute);
    const { name, value, type } = attribute;
    if (type === "attribute")
      node2.attributes[name] = value;
    else if (type === "class")
      if (node2.attributes.class)
        node2.attributes.class[name] = value;
      else
        node2.attributes.class = { [name]: value };
  }
}
function handleAttrs(token, type) {
  switch (type) {
    case "heading":
      return { level: Number(token.tag.replace("h", "")) };
    case "list": {
      const attrs = token.attrs ? Object.fromEntries(token.attrs) : void 0;
      const ordered = token.type.startsWith("ordered");
      return ordered && attrs?.start ? { ordered: true, start: attrs.start, marker: token.markup } : { ordered, marker: token.markup };
    }
    case "link": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { href: attrs.href, title: attrs.title } : { href: attrs.href };
    }
    case "image": {
      const attrs = Object.fromEntries(token.attrs);
      return attrs.title ? { alt: token.content, src: attrs.src, title: attrs.title } : { alt: token.content, src: attrs.src };
    }
    case "em":
    case "strong":
      return { marker: token.markup };
    case "text":
    case "code":
    case "comment":
      return { content: (token.meta || {}).variable || token.content };
    case "fence": {
      const [language] = token.info.split(" ", 1);
      return language === "" || language === OPEN ? { content: token.content } : { content: token.content, language };
    }
    case "td":
    case "th": {
      if (token.attrs) {
        const attrs = Object.fromEntries(token.attrs);
        let align;
        if (attrs.style) {
          if (attrs.style.includes("left")) {
            align = "left";
          } else if (attrs.style.includes("center")) {
            align = "center";
          } else if (attrs.style.includes("right")) {
            align = "right";
          }
        }
        if (align) {
          return { align };
        }
      }
      return {};
    }
    default:
      return {};
  }
}
function handleToken(token, nodes, file, handleSlots, inlineParent) {
  if (token.type === "frontmatter") {
    nodes[0].attributes.frontmatter = token.content;
    return;
  }
  if (token.hidden || token.type === "text" && token.content === "")
    return;
  const errors = token.errors || [];
  const parent = nodes[nodes.length - 1];
  const { tag, attributes, error: error2 } = token.meta || {};
  if (token.type === "annotation") {
    if (inlineParent)
      return annotate(inlineParent, attributes);
    return parent.errors.push({
      id: "no-inline-annotations",
      level: "error",
      message: `Can't apply inline annotations to '${parent.type}'`
    });
  }
  let typeName = token.type.replace(/_(open|close)$/, "");
  if (mappings[typeName])
    typeName = mappings[typeName];
  if (typeName === "error") {
    const { message, location } = error2;
    errors.push({ id: "parse-error", level: "critical", message, location });
  }
  if (token.nesting < 0) {
    if (parent.type === typeName && parent.tag === tag) {
      if (parent.lines && token.map)
        parent.lines.push(...token.map);
      return nodes.pop();
    }
    errors.push({
      id: "missing-opening",
      level: "critical",
      message: `Node '${typeName}' is missing opening`
    });
  }
  const attrs = handleAttrs(token, typeName);
  const node2 = new Node(typeName, attrs, void 0, tag || void 0);
  const { position = {} } = token;
  node2.errors = errors;
  node2.lines = token.map || parent.lines || [];
  node2.location = {
    file,
    start: {
      line: node2.lines[0],
      character: position.start
    },
    end: {
      line: node2.lines[1],
      character: position.end
    }
  };
  if (inlineParent)
    node2.inline = true;
  if (attributes && ["tag", "fence", "image"].includes(typeName))
    annotate(node2, attributes);
  if (handleSlots && tag === "slot" && typeof node2.attributes.primary === "string")
    parent.slots[node2.attributes.primary] = node2;
  else
    parent.push(node2);
  if (token.nesting > 0)
    nodes.push(node2);
  if (!Array.isArray(token.children))
    return;
  inlineParent = parent;
  nodes.push(node2);
  const isLeafNode = typeName === "image";
  if (!isLeafNode) {
    for (const child of token.children)
      handleToken(child, nodes, file, handleSlots, inlineParent);
  }
  nodes.pop();
}
function parser(tokens, args) {
  const doc = new Node("document");
  const nodes = [doc];
  if (typeof args === "string")
    args = { file: args };
  for (const token of tokens)
    handleToken(token, nodes, args?.file, args?.slots);
  if (nodes.length > 1)
    for (const node2 of nodes.slice(1))
      node2.errors.push({
        id: "missing-closing",
        level: "critical",
        message: `Node '${node2.tag || node2.type}' is missing closing`
      });
  for (const transform3 of transforms_default)
    transform3(doc);
  return doc;
}

// src/schema.ts
var schema_exports = {};
__export(schema_exports, {
  blockquote: () => blockquote,
  code: () => code,
  comment: () => comment,
  document: () => document,
  em: () => em,
  error: () => error,
  fence: () => fence,
  hardbreak: () => hardbreak,
  heading: () => heading,
  hr: () => hr,
  image: () => image,
  inline: () => inline,
  item: () => item,
  link: () => link,
  list: () => list,
  node: () => node,
  paragraph: () => paragraph,
  s: () => s,
  softbreak: () => softbreak,
  strong: () => strong,
  table: () => table,
  tbody: () => tbody,
  td: () => td,
  text: () => text,
  th: () => th,
  thead: () => thead,
  tr: () => tr
});
var document = {
  render: "article",
  children: [
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "comment",
    "list",
    "hr"
  ],
  attributes: {
    frontmatter: { render: false }
  }
};
var heading = {
  children: ["inline"],
  attributes: {
    level: { type: Number, render: false, required: true }
  },
  transform(node2, config) {
    return new Tag(`h${node2.attributes["level"]}`, node2.transformAttributes(config), node2.transformChildren(config));
  }
};
var paragraph = {
  render: "p",
  children: ["inline"]
};
var image = {
  render: "img",
  attributes: {
    src: { type: String, required: true },
    alt: { type: String },
    title: { type: String }
  }
};
var fence = {
  render: "pre",
  attributes: {
    content: { type: String, render: false, required: true },
    language: { type: String, render: "data-language" },
    process: { type: Boolean, render: false, default: true }
  },
  transform(node2, config) {
    const attributes = node2.transformAttributes(config);
    const children = node2.children.length ? node2.transformChildren(config) : [node2.attributes.content];
    return new Tag("pre", attributes, children);
  }
};
var blockquote = {
  render: "blockquote",
  children: [
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ]
};
var item = {
  render: "li",
  children: [
    "inline",
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ]
};
var list = {
  children: ["item"],
  attributes: {
    ordered: { type: Boolean, render: false, required: true },
    start: { type: Number },
    marker: { type: String, render: false }
  },
  transform(node2, config) {
    return new Tag(node2.attributes.ordered ? "ol" : "ul", node2.transformAttributes(config), node2.transformChildren(config));
  }
};
var hr = {
  render: "hr"
};
var table = {
  render: "table"
};
var td = {
  render: "td",
  children: [
    "inline",
    "heading",
    "paragraph",
    "image",
    "table",
    "tag",
    "fence",
    "blockquote",
    "list",
    "hr"
  ],
  attributes: {
    colspan: { type: Number },
    rowspan: { type: Number },
    align: { type: String }
  }
};
var th = {
  render: "th",
  attributes: {
    width: { type: Number },
    align: { type: String }
  }
};
var tr = {
  render: "tr",
  children: ["th", "td"]
};
var tbody = {
  render: "tbody",
  children: ["tr", "tag"]
};
var thead = {
  render: "thead",
  children: ["tr"]
};
var strong = {
  render: "strong",
  children: ["em", "s", "link", "code", "text", "tag"],
  attributes: {
    marker: { type: String, render: false }
  }
};
var em = {
  render: "em",
  children: ["strong", "s", "link", "code", "text", "tag"],
  attributes: {
    marker: { type: String, render: false }
  }
};
var s = {
  render: "s",
  children: ["strong", "em", "link", "code", "text", "tag"]
};
var inline = {
  children: [
    "strong",
    "em",
    "s",
    "code",
    "text",
    "tag",
    "link",
    "image",
    "hardbreak",
    "softbreak",
    "comment"
  ]
};
var link = {
  render: "a",
  children: ["strong", "em", "s", "code", "text", "tag"],
  attributes: {
    href: { type: String, required: true },
    title: { type: String }
  }
};
var code = {
  render: "code",
  attributes: {
    content: { type: String, render: false, required: true }
  },
  transform(node2, config) {
    const attributes = node2.transformAttributes(config);
    return new Tag("code", attributes, [node2.attributes.content]);
  }
};
var text = {
  attributes: {
    content: { type: String, required: true }
  },
  transform(node2) {
    return node2.attributes.content;
  }
};
var hardbreak = {
  render: "br"
};
var softbreak = {
  transform() {
    return " ";
  }
};
var comment = {
  attributes: {
    content: { type: String, required: true }
  }
};
var error = {};
var node = {};

// src/renderers/html.ts
var import_markdown_it = __toModule(require_markdown_it());
var { escapeHtml } = (0, import_markdown_it.default)().utils;
var voidElements = new Set([
  "area",
  "base",
  "br",
  "col",
  "embed",
  "hr",
  "img",
  "input",
  "link",
  "meta",
  "param",
  "source",
  "track",
  "wbr"
]);
function render(node2) {
  if (typeof node2 === "string" || typeof node2 === "number")
    return escapeHtml(String(node2));
  if (Array.isArray(node2))
    return node2.map(render).join("");
  if (node2 === null || typeof node2 !== "object" || !Tag.isTag(node2))
    return "";
  const { name, attributes, children = [] } = node2;
  if (!name)
    return render(children);
  let output = `<${name}`;
  for (const [k, v] of Object.entries(attributes ?? {}))
    output += ` ${k}="${escapeHtml(String(v))}"`;
  output += ">";
  if (voidElements.has(name))
    return output;
  if (children.length)
    output += render(children);
  output += `</${name}>`;
  return output;
}

// src/renderers/react/react.ts
function tagName(name, components) {
  return typeof name !== "string" ? name : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
}
function dynamic(node2, React, { components = {} } = {}) {
  function deepRender2(value) {
    if (value == null || typeof value !== "object")
      return value;
    if (Array.isArray(value))
      return value.map((item2) => deepRender2(item2));
    if (value.$$mdtype === "Tag")
      return render3(value);
    if (typeof value !== "object")
      return value;
    const output = {};
    for (const [k, v] of Object.entries(value))
      output[k] = deepRender2(v);
    return output;
  }
  function render3(node3) {
    if (Array.isArray(node3))
      return React.createElement(React.Fragment, null, ...node3.map(render3));
    if (node3 === null || typeof node3 !== "object" || !Tag.isTag(node3))
      return node3;
    const {
      name,
      attributes: { class: className, ...attrs } = {},
      children = []
    } = node3;
    if (className)
      attrs.className = className;
    return React.createElement(tagName(name, components), Object.keys(attrs).length == 0 ? null : deepRender2(attrs), ...children.map(render3));
  }
  return render3(node2);
}

// src/renderers/react/static.ts
function tagName2(name, components) {
  return typeof name !== "string" ? "Fragment" : name[0] !== name[0].toUpperCase() ? name : components instanceof Function ? components(name) : components[name];
}
function renderArray(children) {
  return children.map(render2).join(", ");
}
function deepRender(value) {
  if (value == null || typeof value !== "object")
    return JSON.stringify(value);
  if (Array.isArray(value))
    return `[${value.map((item2) => deepRender(item2)).join(", ")}]`;
  if (value.$$mdtype === "Tag")
    return render2(value);
  if (typeof value !== "object")
    return JSON.stringify(value);
  const object = Object.entries(value).map(([k, v]) => [JSON.stringify(k), deepRender(v)].join(": ")).join(", ");
  return `{${object}}`;
}
function render2(node2) {
  if (Array.isArray(node2))
    return `React.createElement(React.Fragment, null, ${renderArray(node2)})`;
  if (node2 === null || typeof node2 !== "object" || !Tag.isTag(node2))
    return JSON.stringify(node2);
  const {
    name,
    attributes: { class: className, ...attrs } = {},
    children = []
  } = node2;
  if (className)
    attrs.className = className;
  return `React.createElement(
    tagName(${JSON.stringify(name)}, components),
    ${Object.keys(attrs).length == 0 ? "null" : deepRender(attrs)},
    ${renderArray(children)})`;
}
function reactStatic(node2) {
  return `
  (({components = {}} = {}) => {
    ${tagName2}
    return ${render2(node2)};
  })
`;
}

// src/renderers/index.ts
var renderers_default = { html: render, react: dynamic, reactStatic };

// src/tags/partial.ts
var PartialFile = class {
  validate(file, config) {
    const { partials = {} } = config;
    const partial2 = partials[file];
    if (!partial2)
      return [
        {
          id: "attribute-value-invalid",
          level: "error",
          message: `Partial \`${file}\` not found. The 'file' attribute must be set in \`config.partials\``
        }
      ];
    return [];
  }
};
var partial = {
  inline: false,
  selfClosing: true,
  attributes: {
    file: { type: PartialFile, render: false, required: true },
    variables: { type: Object, render: false }
  },
  transform(node2, config) {
    const { partials = {} } = config;
    const { file, variables } = node2.attributes;
    const partial2 = partials[file];
    if (!partial2)
      return null;
    const scopedConfig = {
      ...config,
      variables: {
        ...config.variables,
        ...variables,
        ["$$partial:filename"]: file
      }
    };
    const transformChildren = (part) => part.resolve(scopedConfig).transformChildren(scopedConfig);
    return Array.isArray(partial2) ? partial2.flatMap(transformChildren) : transformChildren(partial2);
  }
};

// src/tags/table.ts
var table2 = {
  children: ["table"],
  inline: false
};

// src/tags/slot.ts
var slot = {
  attributes: {
    primary: { type: String, required: true }
  }
};

// src/tags/index.ts
var tags_default = {
  else: tagElse,
  if: tagIf,
  partial,
  slot,
  table: table2
};

// src/tokenizer/index.ts
var import_lib = __toModule(require_lib());

// src/tokenizer/plugins/annotations.ts
var import_tag7 = __toModule(require_tag());
function createToken(state, content, contentStart) {
  try {
    const { type, meta, nesting = 0 } = (0, import_tag7.parse)(content, { Variable, Function: Function2 });
    const token = state.push(type, "", nesting);
    token.info = content;
    token.meta = meta;
    if (!state.delimiters) {
      state.delimiters = [];
    }
    return token;
  } catch (error2) {
    if (!(error2 instanceof import_tag7.SyntaxError))
      throw error2;
    const {
      message,
      location: { start, end }
    } = error2;
    const location = contentStart ? {
      start: { offset: start.offset + contentStart },
      end: { offset: end.offset + contentStart }
    } : null;
    const token = state.push("error", "", 0);
    token.meta = { error: { message, location } };
    return token;
  }
}
function block(state, startLine, endLine, silent) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  const finish = state.eMarks[startLine];
  if (!state.src.startsWith(OPEN, start))
    return false;
  const tagEnd = findTagEnd(state.src, start);
  const lastPossible = state.src.slice(0, finish).trim().length;
  if (!tagEnd || tagEnd < lastPossible - CLOSE.length)
    return false;
  const contentStart = start + OPEN.length;
  const content = state.src.slice(contentStart, tagEnd).trim();
  const lines = content.split("\n").length;
  if (content[0] === "$")
    return false;
  if (silent)
    return true;
  const token = createToken(state, content, contentStart);
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
}
function inline2(state, silent) {
  if (!state.src.startsWith(OPEN, state.pos))
    return false;
  const tagEnd = findTagEnd(state.src, state.pos);
  if (!tagEnd)
    return false;
  const content = state.src.slice(state.pos + OPEN.length, tagEnd);
  if (!silent)
    createToken(state, content.trim());
  state.pos = tagEnd + CLOSE.length;
  return true;
}
function core(state) {
  let token;
  for (token of state.tokens) {
    if (token.type !== "fence")
      continue;
    if (token.info.includes(OPEN)) {
      const start = token.info.indexOf(OPEN);
      const end = findTagEnd(token.info, start);
      const content = token.info.slice(start + OPEN.length, end);
      try {
        const { meta } = (0, import_tag7.parse)(content.trim(), { Variable, Function: Function2 });
        token.meta = meta;
      } catch (error2) {
        if (!(error2 instanceof import_tag7.SyntaxError))
          throw error2;
        if (!token.errors)
          token.errors = [];
        token.errors.push({
          id: "fence-tag-error",
          level: "error",
          message: `Syntax error in fence tag: ${error2.message}`
        });
      }
    }
    if (token?.meta?.attributes?.find((attr) => attr.name === "process" && !attr.value))
      continue;
    token.children = parseTags(token.content, token.map[0]);
  }
}
function plugin(md) {
  md.block.ruler.before("paragraph", "annotations", block, {
    alt: ["paragraph", "blockquote"]
  });
  md.inline.ruler.push("containers", inline2);
  md.core.ruler.push("annotations", core);
}

// src/tokenizer/plugins/frontmatter.ts
var fence2 = "---";
function getLine(state, n) {
  return state.src.slice(state.bMarks[n], state.eMarks[n]).trim();
}
function findClose(state, endLine) {
  for (let line = 1; line < endLine; line++)
    if (getLine(state, line) === fence2)
      return line;
}
function block2(state, startLine, endLine, silent) {
  if (startLine != 0 || getLine(state, 0) != fence2)
    return false;
  const close = findClose(state, endLine);
  if (!close)
    return false;
  if (silent)
    return true;
  const token = state.push("frontmatter", "", 0);
  token.content = state.src.slice(state.eMarks[0], state.bMarks[close]).trim();
  token.map = [0, close];
  token.hidden = true;
  state.line = close + 1;
  return true;
}
function plugin2(md) {
  md.block.ruler.before("hr", "frontmatter", block2);
}

// src/tokenizer/plugins/comments.ts
var OPEN2 = "<!--";
var CLOSE2 = "-->";
function block3(state, startLine, endLine, silent) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  if (!state.src.startsWith(OPEN2, start))
    return false;
  const close = state.src.indexOf(CLOSE2, start);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(start + OPEN2.length, close);
  const lines = content.split("\n").length;
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  token.map = [startLine, startLine + lines];
  state.line += lines;
  return true;
}
function inline3(state, silent) {
  if (!state.src.startsWith(OPEN2, state.pos))
    return false;
  const close = state.src.indexOf(CLOSE2, state.pos);
  if (!close)
    return false;
  if (silent)
    return true;
  const content = state.src.slice(state.pos + OPEN2.length, close);
  const token = state.push("comment", "", 0);
  token.content = content.trim();
  state.pos = close + CLOSE2.length;
  return true;
}
function plugin3(md) {
  md.block.ruler.before("table", "comment", block3, { alt: ["paragraph"] });
  md.inline.ruler.push("comment", inline3);
}

// src/tokenizer/index.ts
var Tokenizer = class {
  constructor(config = {}) {
    this.parser = new import_lib.default(config);
    this.parser.use(plugin, "annotations", {});
    this.parser.use(plugin2, "frontmatter", {});
    this.parser.disable([
      "lheading",
      "code"
    ]);
    if (config.allowComments)
      this.parser.use(plugin3, "comments", {});
  }
  tokenize(content) {
    return this.parser.parse(content.toString(), {});
  }
};

// src/validator.ts
var TypeMappings = {
  String,
  Number,
  Array,
  Object,
  Boolean
};
function validateType(type, value, config) {
  if (!type)
    return true;
  if (ast_default.isFunction(value) && config.validation?.validateFunctions) {
    const schema = config.functions?.[value.name];
    return !schema?.returns ? true : Array.isArray(schema.returns) ? schema.returns.find((t) => t === type) !== void 0 : schema.returns === type;
  }
  if (ast_default.isAst(value))
    return true;
  if (Array.isArray(type))
    return type.some((t) => validateType(t, value, config));
  if (typeof type === "string")
    type = TypeMappings[type];
  if (typeof type === "function") {
    const instance = new type();
    if (instance.validate) {
      return instance.validate(value, config);
    }
  }
  return value != null && value.constructor === type;
}
function typeToString(type) {
  if (typeof type === "string")
    return type;
  if (Array.isArray(type))
    return type.map(typeToString).join(" | ");
  return type.name;
}
function validateFunction(fn, config) {
  const schema = config.functions?.[fn.name];
  const errors = [];
  if (!schema)
    return [
      {
        id: "function-undefined",
        level: "critical",
        message: `Undefined function: '${fn.name}'`
      }
    ];
  if (schema.validate)
    errors.push(...schema.validate(fn, config));
  if (schema.parameters) {
    for (const [key, value] of Object.entries(fn.parameters)) {
      const param = schema.parameters?.[key];
      if (!param) {
        errors.push({
          id: "parameter-undefined",
          level: "error",
          message: `Invalid parameter: '${key}'`
        });
        continue;
      }
      if (ast_default.isAst(value) && !ast_default.isFunction(value))
        continue;
      if (param.type) {
        const valid = validateType(param.type, value, config);
        if (valid === false) {
          errors.push({
            id: "parameter-type-invalid",
            level: "error",
            message: `Parameter '${key}' of '${fn.name}' must be type of '${typeToString(param.type)}'`
          });
        } else if (Array.isArray(valid)) {
          errors.push(...valid);
        }
      }
    }
  }
  for (const [key, { required }] of Object.entries(schema.parameters ?? {}))
    if (required && fn.parameters[key] === void 0)
      errors.push({
        id: "parameter-missing-required",
        level: "error",
        message: `Missing required parameter: '${key}'`
      });
  return errors;
}
function displayMatches(matches, n) {
  if (matches.length <= n)
    return JSON.stringify(matches);
  const items = matches.slice(0, n).map((item2) => JSON.stringify(item2));
  return `[${items.join(",")}, ... ${matches.length - n} more]`;
}
function validator(node2, config) {
  const schema = node2.findSchema(config);
  const errors = [...node2.errors || []];
  if (!schema) {
    errors.push({
      id: node2.tag ? "tag-undefined" : "node-undefined",
      level: "critical",
      message: node2.tag ? `Undefined tag: '${node2.tag}'` : `Undefined node: '${node2.type}'`
    });
    return errors;
  }
  if (schema.inline != void 0 && node2.inline !== schema.inline)
    errors.push({
      id: "tag-placement-invalid",
      level: "critical",
      message: `'${node2.tag}' tag should be ${schema.inline ? "inline" : "block"}`
    });
  if (schema.selfClosing && node2.children.length > 0)
    errors.push({
      id: "tag-selfclosing-has-children",
      level: "critical",
      message: `'${node2.tag}' tag should be self-closing`
    });
  const attributes = {
    ...globalAttributes,
    ...schema.attributes
  };
  for (const key of Object.keys(node2.slots)) {
    const slot2 = schema.slots?.[key];
    if (!slot2)
      errors.push({
        id: "slot-undefined",
        level: "error",
        message: `Invalid slot: '${key}'`
      });
  }
  for (let [key, value] of Object.entries(node2.attributes)) {
    const attrib = attributes[key];
    if (!attrib) {
      errors.push({
        id: "attribute-undefined",
        level: "error",
        message: `Invalid attribute: '${key}'`
      });
      continue;
    }
    let { type, matches, errorLevel } = attrib;
    if (ast_default.isAst(value)) {
      if (ast_default.isFunction(value) && config.validation?.validateFunctions)
        errors.push(...validateFunction(value, config));
      else if (ast_default.isVariable(value) && config.variables) {
        let missing = false;
        let variables = config.variables;
        for (const key2 of value.path) {
          if (!Object.prototype.hasOwnProperty.call(variables, key2)) {
            missing = true;
            break;
          }
          variables = variables[key2];
        }
        if (missing) {
          errors.push({
            id: "variable-undefined",
            level: "error",
            message: `Undefined variable: '${value.path.join(".")}'`
          });
        }
      } else
        continue;
    }
    value = value;
    if (type) {
      const valid = validateType(type, value, config);
      if (valid === false) {
        errors.push({
          id: "attribute-type-invalid",
          level: errorLevel || "error",
          message: `Attribute '${key}' must be type of '${typeToString(type)}'`
        });
      }
      if (Array.isArray(valid)) {
        errors.push(...valid);
      }
    }
    if (typeof matches === "function")
      matches = matches(config);
    if (Array.isArray(matches) && !matches.includes(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match one of ${displayMatches(matches, 8)}. Got '${value}' instead.`
      });
    if (matches instanceof RegExp && !matches.test(value))
      errors.push({
        id: "attribute-value-invalid",
        level: errorLevel || "error",
        message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`
      });
    if (typeof attrib.validate === "function") {
      const attribErrors = attrib.validate(value, config);
      if (Array.isArray(attribErrors))
        errors.push(...attribErrors);
    }
  }
  for (const [key, { required }] of Object.entries(attributes))
    if (required && node2.attributes[key] === void 0)
      errors.push({
        id: "attribute-missing-required",
        level: "error",
        message: `Missing required attribute: '${key}'`
      });
  if (schema.slots) {
    for (const [key, { required }] of Object.entries(schema.slots))
      if (required && node2.slots[key] === void 0)
        errors.push({
          id: "slot-missing-required",
          level: "error",
          message: `Missing required slot: '${key}'`
        });
  }
  for (const { type } of node2.children) {
    if (schema.children && type !== "error" && !schema.children.includes(type))
      errors.push({
        id: "child-invalid",
        level: "warning",
        message: `Can't nest '${type}' in '${node2.tag || node2.type}'`
      });
  }
  if (schema.validate) {
    const schemaErrors = schema.validate(node2, config);
    if (isPromise(schemaErrors)) {
      return schemaErrors.then((e) => errors.concat(e));
    }
    errors.push(...schemaErrors);
  }
  return errors;
}

// index.ts
var tokenizer = new Tokenizer();
function mergeConfig(config = {}) {
  return {
    ...config,
    tags: {
      ...tags_default,
      ...config.tags
    },
    nodes: {
      ...schema_exports,
      ...config.nodes
    },
    functions: {
      ...functions_default,
      ...config.functions
    }
  };
}
function parse3(content, args) {
  if (typeof content === "string")
    content = tokenizer.tokenize(content);
  return parser(content, args);
}
function resolve2(content, config) {
  if (Array.isArray(content))
    return content.flatMap((child) => child.resolve(config));
  return content.resolve(config);
}
function transform2(nodes, options) {
  const config = mergeConfig(options);
  const content = resolve2(nodes, config);
  if (Array.isArray(content))
    return content.flatMap((child) => child.transform(config));
  return content.transform(config);
}
function validate(content, options) {
  const config = mergeConfig(options);
  const output = [content, ...content.walk()].map((node2) => {
    const { type, lines, location } = node2;
    const errors = validator(node2, config);
    if (isPromise(errors)) {
      return errors.then((e) => e.map((error2) => ({ type, lines, location, error: error2 })));
    }
    return errors.map((error2) => ({ type, lines, location, error: error2 }));
  });
  if (output.some(isPromise)) {
    return Promise.all(output).then((o) => o.flat());
  }
  return output.flat();
}
function createElement(name, attributes = {}, ...children) {
  return { name, attributes, children };
}
var Markdoc = class {
  constructor(config) {
    this.parse = parse3;
    this.resolve = (content) => resolve2(content, this.config);
    this.transform = (content) => transform2(content, this.config);
    this.validate = (content) => validate(content, this.config);
    this.config = config;
  }
};
Markdoc.nodes = schema_exports;
Markdoc.tags = tags_default;
Markdoc.functions = functions_default;
Markdoc.globalAttributes = globalAttributes;
Markdoc.renderers = renderers_default;
Markdoc.transforms = transforms_default;
Markdoc.Ast = ast_default;
Markdoc.Tag = Tag;
Markdoc.Tokenizer = Tokenizer;
Markdoc.parseTags = parseTags;
Markdoc.transformer = transformer_default;
Markdoc.validator = validator;
Markdoc.parse = parse3;
Markdoc.transform = transform2;
Markdoc.validate = validate;
Markdoc.createElement = createElement;
Markdoc.truthy = truthy;
Markdoc.format = format;


/***/ }),

/***/ 49356:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var graphql_web = __webpack_require__(96219);
var wonka = __webpack_require__(78069);

var generateErrorMessage = (networkErr, graphQlErrs) => {
  var error = '';
  if (networkErr) return `[Network] ${networkErr.message}`;
  if (graphQlErrs) {
    for (var err of graphQlErrs) {
      if (error) error += '\n';
      error += `[GraphQL] ${err.message}`;
    }
  }
  return error;
};
var rehydrateGraphQlError = error => {
  if (error && error.message && (error.extensions || error.name === 'GraphQLError')) {
    return error;
  } else if (typeof error === 'object' && error.message) {
    return new graphql_web.GraphQLError(error.message, error.nodes, error.source, error.positions, error.path, error, error.extensions || {});
  } else {
    return new graphql_web.GraphQLError(error);
  }
};

/** An abstracted `Error` that provides either a `networkError` or `graphQLErrors`.
 *
 * @remarks
 * During a GraphQL request, either the request can fail entirely, causing a network error,
 * or the GraphQL execution or fields can fail, which will cause an {@link ExecutionResult}
 * to contain an array of GraphQL errors.
 *
 * The `CombinedError` abstracts and normalizes both failure cases. When {@link OperationResult.error}
 * is set to this error, the `CombinedError` abstracts all errors, making it easier to handle only
 * a subset of error cases.
 *
 * @see {@link https://urql.dev/goto/docs/basics/errors} for more information on handling
 * GraphQL errors and the `CombinedError`.
 */
class CombinedError extends Error {
  /** A list of GraphQL errors rehydrated from a {@link ExecutionResult}.
   *
   * @remarks
   * If an {@link ExecutionResult} received from the API contains a list of errors,
   * the `CombinedError` will rehydrate them, normalize them to
   * {@link GraphQLError | GraphQLErrors} and list them here.
   * An empty list indicates that no GraphQL error has been sent by the API.
   */

  /** Set to an error, if a GraphQL request has failed outright.
   *
   * @remarks
   * A GraphQL over HTTP request may fail and not reach the API. Any error that
   * prevents a GraphQl request outright, will be considered a “network error” and
   * set here.
   */

  /** Set to the {@link Response} object a fetch exchange received.
   *
   * @remarks
   * If a built-in fetch {@link Exchange} is used in `urql`, this may
   * be set to the {@link Response} object of the Fetch API response.
   * However, since `urql` doesn’t assume that all users will use HTTP
   * as the only or exclusive transport for GraphQL this property is
   * neither typed nor guaranteed and may be re-used for other purposes
   * by non-fetch exchanges.
   *
   * Hint: It can be useful to use `response.status` here, however, if
   * you plan on relying on this being a {@link Response} in your app,
   * which it is by default, then make sure you add some extra checks
   * before blindly assuming so!
   */

  constructor(input) {
    var normalizedGraphQLErrors = (input.graphQLErrors || []).map(rehydrateGraphQlError);
    var message = generateErrorMessage(input.networkError, normalizedGraphQLErrors);
    super(message);
    this.name = 'CombinedError';
    this.message = message;
    this.graphQLErrors = normalizedGraphQLErrors;
    this.networkError = input.networkError;
    this.response = input.response;
  }
  toString() {
    return this.message;
  }
}

/** A hash value as computed by {@link phash}.
 *
 * @remarks
 * Typically `HashValue`s are used as hashes and keys of GraphQL documents,
 * variables, and combined, for GraphQL requests.
 */

/** Computes a djb2 hash of the given string.
 *
 * @param x - the string to be hashed
 * @param seed - optionally a prior hash for progressive hashing
 * @returns a hash value, i.e. a number
 *
 * @remark
 * This is the hashing function used throughout `urql`, primarily to compute
 * {@link Operation.key}.
 *
 * @see {@link http://www.cse.yorku.ca/~oz/hash.html#djb2} for a further description of djb2.
 */
var phash = (x, seed) => {
  var h = (seed || 5381) | 0;
  for (var i = 0, l = x.length | 0; i < l; i++) h = (h << 5) + h + x.charCodeAt(i);
  return h;
};

var seen = new Set();
var cache = new WeakMap();
var stringify = x => {
  if (x === null || seen.has(x)) {
    return 'null';
  } else if (typeof x !== 'object') {
    return JSON.stringify(x) || '';
  } else if (x.toJSON) {
    return stringify(x.toJSON());
  } else if (Array.isArray(x)) {
    var _out = '[';
    for (var value of x) {
      if (_out.length > 1) _out += ',';
      _out += stringify(value) || 'null';
    }
    _out += ']';
    return _out;
  } else if (FileConstructor !== NoopConstructor && x instanceof FileConstructor || BlobConstructor !== NoopConstructor && x instanceof BlobConstructor) {
    return 'null';
  }
  var keys = Object.keys(x).sort();
  if (!keys.length && x.constructor && x.constructor !== Object) {
    var key = cache.get(x) || Math.random().toString(36).slice(2);
    cache.set(x, key);
    return stringify({
      __key: key
    });
  }
  seen.add(x);
  var out = '{';
  for (var _key of keys) {
    var _value = stringify(x[_key]);
    if (_value) {
      if (out.length > 1) out += ',';
      out += stringify(_key) + ':' + _value;
    }
  }
  seen.delete(x);
  out += '}';
  return out;
};
var extract = (map, path, x) => {
  if (x == null || typeof x !== 'object' || x.toJSON || seen.has(x)) ; else if (Array.isArray(x)) {
    for (var i = 0, l = x.length; i < l; i++) extract(map, `${path}.${i}`, x[i]);
  } else if (x instanceof FileConstructor || x instanceof BlobConstructor) {
    map.set(path, x);
  } else {
    seen.add(x);
    for (var key of Object.keys(x)) extract(map, `${path}.${key}`, x[key]);
  }
};

/** A stable stringifier for GraphQL variables objects.
 *
 * @param x - any JSON-like data.
 * @return A JSON string.
 *
 * @remarks
 * This utility creates a stable JSON string from any passed data,
 * and protects itself from throwing.
 *
 * The JSON string is stable insofar as objects’ keys are sorted,
 * and instances of non-plain objects are replaced with random keys
 * replacing their values, which remain stable for the objects’
 * instance.
 */
var stringifyVariables = x => {
  seen.clear();
  return stringify(x);
};
class NoopConstructor {}
var FileConstructor = typeof File !== 'undefined' ? File : NoopConstructor;
var BlobConstructor = typeof Blob !== 'undefined' ? Blob : NoopConstructor;
var extractFiles = x => {
  var map = new Map();
  if (FileConstructor !== NoopConstructor || BlobConstructor !== NoopConstructor) {
    seen.clear();
    extract(map, 'variables', x);
  }
  return map;
};

/** A `DocumentNode` annotated with its hashed key.
 * @internal
 */

var SOURCE_NAME = 'gql';
var GRAPHQL_STRING_RE = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;
var REPLACE_CHAR_RE = /(?:#[^\n\r]+)?(?:[\r\n]+|$)/g;
var replaceOutsideStrings = (str, idx) => idx % 2 === 0 ? str.replace(REPLACE_CHAR_RE, '\n') : str;

/** Sanitizes a GraphQL document string by replacing comments and redundant newlines in it. */
var sanitizeDocument = node => node.split(GRAPHQL_STRING_RE).map(replaceOutsideStrings).join('').trim();
var prints = new Map();
var docs = new Map();

/** A cached printing function for GraphQL documents.
 *
 * @param node - A string of a document or a {@link DocumentNode}
 * @returns A normalized printed string of the passed GraphQL document.
 *
 * @remarks
 * This function accepts a GraphQL query string or {@link DocumentNode},
 * then prints and sanitizes it. The sanitizer takes care of removing
 * comments, which otherwise alter the key of the document although the
 * document is otherwise equivalent to another.
 *
 * When a {@link DocumentNode} is passed to this function, it caches its
 * output by modifying the `loc.source.body` property on the GraphQL node.
 */
var stringifyDocument = node => {
  var printed;
  if (typeof node === 'string') {
    printed = sanitizeDocument(node);
  } else if (node.loc && docs.get(node.__key) === node) {
    printed = node.loc.source.body;
  } else {
    printed = prints.get(node) || sanitizeDocument(graphql_web.print(node));
    prints.set(node, printed);
  }
  if (typeof node !== 'string' && !node.loc) {
    node.loc = {
      start: 0,
      end: printed.length,
      source: {
        body: printed,
        name: SOURCE_NAME,
        locationOffset: {
          line: 1,
          column: 1
        }
      }
    };
  }
  return printed;
};

/** Computes the hash for a document's string using {@link stringifyDocument}'s output.
 *
 * @param node - A string of a document or a {@link DocumentNode}
 * @returns A {@link HashValue}
 *
 * @privateRemarks
 * This function adds the operation name of the document to the hash, since sometimes
 * a merged document with multiple operations may be used. Although `urql` requires a
 * `DocumentNode` to only contain a single operation, when the cached `loc.source.body`
 * of a `DocumentNode` is used, this string may still contain multiple operations and
 * the resulting hash should account for only one at a time.
 */
var hashDocument = node => {
  var key = phash(stringifyDocument(node));
  // Add the operation name to the produced hash
  if (node.definitions) {
    var operationName = getOperationName(node);
    if (operationName) key = phash(`\n# ${operationName}`, key);
  }
  return key;
};

/** Returns a canonical version of the passed `DocumentNode` with an added hash key.
 *
 * @param node - A string of a document or a {@link DocumentNode}
 * @returns A {@link KeyedDocumentNode}
 *
 * @remarks
 * `urql` will always avoid unnecessary work, no matter whether a user passes `DocumentNode`s
 * or strings of GraphQL documents to its APIs.
 *
 * This function will return a canonical version of a {@link KeyedDocumentNode} no matter
 * which kind of input is passed, avoiding parsing or hashing of passed data as needed.
 */
var keyDocument = node => {
  var key;
  var query;
  if (typeof node === 'string') {
    key = hashDocument(node);
    query = docs.get(key) || graphql_web.parse(node, {
      noLocation: true
    });
  } else {
    key = node.__key || hashDocument(node);
    query = docs.get(key) || node;
  }

  // Add location information if it's missing
  if (!query.loc) stringifyDocument(query);
  query.__key = key;
  docs.set(key, query);
  return query;
};

/** Creates a `GraphQLRequest` from the passed parameters.
 *
 * @param q - A string of a document or a {@link DocumentNode}
 * @param variables - A variables object for the defined GraphQL operation.
 * @returns A {@link GraphQLRequest}
 *
 * @remarks
 * `createRequest` creates a {@link GraphQLRequest} from the passed parameters,
 * while replacing the document as needed with a canonical version of itself,
 * to avoid parsing, printing, or hashing the same input multiple times.
 *
 * If no variables are passed, canonically it'll default to an empty object,
 * which is removed from the resulting hash key.
 */
var createRequest = (_query, _variables, extensions) => {
  var variables = _variables || {};
  var query = keyDocument(_query);
  var printedVars = stringifyVariables(variables);
  var key = query.__key;
  if (printedVars !== '{}') key = phash(printedVars, key);
  return {
    key,
    query,
    variables,
    extensions
  };
};

/** Returns the name of the `DocumentNode`'s operation, if any.
 * @param query - A {@link DocumentNode}
 * @returns the operation's name contained within the document, or `undefined`
 */
var getOperationName = query => {
  for (var node of query.definitions) {
    if (node.kind === graphql_web.Kind.OPERATION_DEFINITION) {
      return node.name ? node.name.value : undefined;
    }
  }
};

/** Returns the type of the `DocumentNode`'s operation, if any.
 * @param query - A {@link DocumentNode}
 * @returns the operation's type contained within the document, or `undefined`
 */
var getOperationType = query => {
  for (var node of query.definitions) {
    if (node.kind === graphql_web.Kind.OPERATION_DEFINITION) {
      return node.operation;
    }
  }
};

/** Converts the `ExecutionResult` received for a given `Operation` to an `OperationResult`.
 *
 * @param operation - The {@link Operation} for which the API’s result is for.
 * @param result - The GraphQL API’s {@link ExecutionResult}.
 * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).
 * @returns An {@link OperationResult}.
 *
 * @remarks
 * This utility can be used to create {@link OperationResult | OperationResults} in the shape
 * that `urql` expects and defines, and should be used rather than creating the results manually.
 *
 * @throws
 * If no data, or errors are contained within the result, or the result is instead an incremental
 * response containing a `path` property, a “No Content” error is thrown.
 *
 * @see {@link ExecutionResult} for the type definition of GraphQL API results.
 */
var makeResult = (operation, result, response) => {
  if (!('data' in result) && !('errors' in result)) {
    throw new Error('No Content');
  }
  var defaultHasNext = operation.kind === 'subscription';
  return {
    operation,
    data: result.data,
    error: Array.isArray(result.errors) ? new CombinedError({
      graphQLErrors: result.errors,
      response
    }) : undefined,
    extensions: result.extensions ? {
      ...result.extensions
    } : undefined,
    hasNext: result.hasNext == null ? defaultHasNext : result.hasNext,
    stale: false
  };
};
var deepMerge = (target, source) => {
  if (typeof target === 'object' && target != null) {
    if (!target.constructor || target.constructor === Object || Array.isArray(target)) {
      target = Array.isArray(target) ? [...target] : {
        ...target
      };
      for (var key of Object.keys(source)) target[key] = deepMerge(target[key], source[key]);
      return target;
    }
  }
  return source;
};

/** Merges an incrementally delivered `ExecutionResult` into a previous `OperationResult`.
 *
 * @param prevResult - The {@link OperationResult} that preceded this result.
 * @param path - The GraphQL API’s {@link ExecutionResult} that should be patching the `prevResult`.
 * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).
 * @returns A new {@link OperationResult} patched with the incremental result.
 *
 * @remarks
 * This utility should be used to merge subsequent {@link ExecutionResult | ExecutionResults} of
 * incremental responses into a prior {@link OperationResult}.
 *
 * When directives like `@defer`, `@stream`, and `@live` are used, GraphQL may deliver new
 * results that modify previous results. In these cases, it'll set a `path` property to modify
 * the result it sent last. This utility is built to handle these cases and merge these payloads
 * into existing {@link OperationResult | OperationResults}.
 *
 * @see {@link ExecutionResult} for the type definition of GraphQL API results.
 */
var mergeResultPatch = (prevResult, nextResult, response) => {
  var errors = prevResult.error ? prevResult.error.graphQLErrors : [];
  var hasExtensions = !!prevResult.extensions || !!nextResult.extensions;
  var extensions = {
    ...prevResult.extensions,
    ...nextResult.extensions
  };
  var incremental = nextResult.incremental;

  // NOTE: We handle the old version of the incremental delivery payloads as well
  if ('path' in nextResult) {
    incremental = [nextResult];
  }
  var withData = {
    data: prevResult.data
  };
  if (incremental) {
    for (var patch of incremental) {
      if (Array.isArray(patch.errors)) {
        errors.push(...patch.errors);
      }
      if (patch.extensions) {
        Object.assign(extensions, patch.extensions);
        hasExtensions = true;
      }
      var prop = 'data';
      var part = withData;
      for (var i = 0, l = patch.path.length; i < l; prop = patch.path[i++]) {
        part = part[prop] = Array.isArray(part[prop]) ? [...part[prop]] : {
          ...part[prop]
        };
      }
      if (patch.items) {
        var startIndex = +prop >= 0 ? prop : 0;
        for (var _i = 0, _l = patch.items.length; _i < _l; _i++) part[startIndex + _i] = deepMerge(part[startIndex + _i], patch.items[_i]);
      } else if (patch.data !== undefined) {
        part[prop] = deepMerge(part[prop], patch.data);
      }
    }
  } else {
    withData.data = nextResult.data || prevResult.data;
    errors = nextResult.errors || errors;
  }
  return {
    operation: prevResult.operation,
    data: withData.data,
    error: errors.length ? new CombinedError({
      graphQLErrors: errors,
      response
    }) : undefined,
    extensions: hasExtensions ? extensions : undefined,
    hasNext: nextResult.hasNext != null ? nextResult.hasNext : prevResult.hasNext,
    stale: false
  };
};

/** Creates an `OperationResult` containing a network error for requests that encountered unexpected errors.
 *
 * @param operation - The {@link Operation} for which the API’s result is for.
 * @param error - The network-like error that prevented an API result from being delivered.
 * @param response - Optionally, a raw object representing the API’s result (Typically a {@link Response}).
 * @returns An {@link OperationResult} containing only a {@link CombinedError}.
 *
 * @remarks
 * This utility can be used to create {@link OperationResult | OperationResults} in the shape
 * that `urql` expects and defines, and should be used rather than creating the results manually.
 * This function should be used for when the {@link CombinedError.networkError} property is
 * populated and no GraphQL execution actually occurred.
 */
var makeErrorResult = (operation, error, response) => ({
  operation,
  data: undefined,
  error: new CombinedError({
    networkError: error,
    response
  }),
  extensions: undefined,
  hasNext: false,
  stale: false
});

/** Abstract definition of the JSON data sent during GraphQL HTTP POST requests. */

/** Creates a GraphQL over HTTP compliant JSON request body.
 * @param request - An object containing a `query` document and `variables`.
 * @returns A {@link FetchBody}
 * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.
 */
function makeFetchBody(request) {
  var isAPQ = request.extensions && request.extensions.persistedQuery && !request.extensions.persistedQuery.miss;
  return {
    query: isAPQ ? undefined : stringifyDocument(request.query),
    operationName: getOperationName(request.query),
    variables: request.variables || undefined,
    extensions: request.extensions
  };
}

/** Creates a URL that will be called for a GraphQL HTTP request.
 *
 * @param operation - An {@link Operation} for which to make the request.
 * @param body - A {@link FetchBody} which may be replaced with a URL.
 *
 * @remarks
 * Creates the URL that’ll be called as part of a GraphQL HTTP request.
 * Built-in fetch exchanges support sending GET requests, even for
 * non-persisted full requests, which this function supports by being
 * able to serialize GraphQL requests into the URL.
 */
var makeFetchURL = (operation, body) => {
  var useGETMethod = operation.kind === 'query' && operation.context.preferGetMethod;
  if (!useGETMethod || !body) return operation.context.url;
  var url = new URL(operation.context.url);
  for (var key in body) {
    var value = body[key];
    if (value) {
      url.searchParams.set(key, typeof value === 'object' ? stringifyVariables(value) : value);
    }
  }
  var finalUrl = url.toString();
  if (finalUrl.length > 2047 && useGETMethod !== 'force') {
    operation.context.preferGetMethod = false;
    return operation.context.url;
  }
  return finalUrl;
};

/** Serializes a {@link FetchBody} into a {@link RequestInit.body} format. */
var serializeBody = (operation, body) => {
  var omitBody = operation.kind === 'query' && !!operation.context.preferGetMethod;
  if (body && !omitBody) {
    var json = stringifyVariables(body);
    var files = extractFiles(body.variables);
    if (files.size) {
      var form = new FormData();
      form.append('operations', json);
      form.append('map', stringifyVariables({
        ...[...files.keys()].map(value => [value])
      }));
      var index = 0;
      for (var file of files.values()) form.append(`${index++}`, file);
      return form;
    }
    return json;
  }
};

/** Creates a `RequestInit` object for a given `Operation`.
 *
 * @param operation - An {@link Operation} for which to make the request.
 * @param body - A {@link FetchBody} which is added to the options, if the request isn’t a GET request.
 *
 * @remarks
 * Creates the fetch options {@link RequestInit} object that’ll be passed to the Fetch API
 * as part of a GraphQL over HTTP request. It automatically sets a default `Content-Type`
 * header.
 *
 * @see {@link https://github.com/graphql/graphql-over-http} for the GraphQL over HTTP spec.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.
 */
var makeFetchOptions = (operation, body) => {
  var headers = {
    accept: operation.kind === 'subscription' ? 'text/event-stream, multipart/mixed' : 'application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed'
  };
  var extraOptions = (typeof operation.context.fetchOptions === 'function' ? operation.context.fetchOptions() : operation.context.fetchOptions) || {};
  if (extraOptions.headers) for (var key in extraOptions.headers) headers[key.toLowerCase()] = extraOptions.headers[key];
  var serializedBody = serializeBody(operation, body);
  if (typeof serializedBody === 'string' && !headers['content-type']) headers['content-type'] = 'application/json';
  return {
    ...extraOptions,
    method: serializedBody ? 'POST' : 'GET',
    body: serializedBody,
    headers
  };
};

/* Summary: This file handles the HTTP transport via GraphQL over HTTP
 * See: https://graphql.github.io/graphql-over-http/draft/
 *
 * `@urql/core`, by default, implements several RFC'd protocol extensions
 * on top of this. As such, this implementation supports:
 * - [Incremental Delivery](https://github.com/graphql/graphql-over-http/blob/main/rfcs/IncrementalDelivery.md)
 * - [GraphQL over SSE](https://github.com/graphql/graphql-over-http/blob/main/rfcs/GraphQLOverSSE.md)
 *
 * This also supports the "Defer Stream" payload format.
 * See: https://github.com/graphql/graphql-wg/blob/main/rfcs/DeferStream.md
 * Implementation for this is located in `../utils/result.ts` in `mergeResultPatch`
 *
 * And; this also supports the GraphQL Multipart spec for file uploads.
 * See: https://github.com/jaydenseric/graphql-multipart-request-spec
 * Implementation for this is located in `../utils/variables.ts` in `extractFiles`,
 * and `./fetchOptions.ts` in `serializeBody`.
 *
 * And; this also supports GET requests (and hence; automatic persisted queries)
 * via the `@urql/exchange-persisted` package.
 *
 * This implementation DOES NOT support Batching.
 * See: https://github.com/graphql/graphql-over-http/blob/main/rfcs/Batching.md
 * Which is deemed out-of-scope, as it's sufficiently unnecessary given
 * modern handling of HTTP requests being in parallel.
 *
 * The implementation in this file needs to make certain accommodations for:
 * - The Web Fetch API
 * - Non-browser or polyfill Fetch APIs
 * - Node.js-like Fetch implementations (see `toString` below)
 *
 * GraphQL over SSE has a reference implementation, which supports non-HTTP/2
 * modes and is a faithful implementation of the spec.
 * See: https://github.com/enisdenjo/graphql-sse
 *
 * GraphQL Inremental Delivery (aka “GraphQL Multipart Responses”) has a
 * reference implementation, which a prior implementation of this file heavily
 * leaned on (See prior attribution comments)
 * See: https://github.com/maraisr/meros
 *
 * This file merges support for all three GraphQL over HTTP response formats
 * via async generators and Wonka’s `fromAsyncIterable`. As part of this, `streamBody`
 * and `split` are the common, cross-compatible base implementations.
 */
var decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder() : null;
var boundaryHeaderRe = /boundary="?([^=";]+)"?/i;
var eventStreamRe = /data: ?([^\n]+)/;
// NOTE: We're avoiding referencing the `Buffer` global here to prevent
// auto-polyfilling in Webpack
var toString = input => input.constructor.name === 'Buffer' ? input.toString() : decoder.decode(input);
async function* streamBody(response) {
  if (response.body[Symbol.asyncIterator]) {
    for await (var chunk of response.body) yield toString(chunk);
  } else {
    var reader = response.body.getReader();
    var result;
    try {
      while (!(result = await reader.read()).done) yield toString(result.value);
    } finally {
      reader.cancel();
    }
  }
}
async function* split(chunks, boundary) {
  var buffer = '';
  var boundaryIndex;
  for await (var chunk of chunks) {
    buffer += chunk;
    while ((boundaryIndex = buffer.indexOf(boundary)) > -1) {
      yield buffer.slice(0, boundaryIndex);
      buffer = buffer.slice(boundaryIndex + boundary.length);
    }
  }
}
async function* parseJSON(response) {
  yield JSON.parse(await response.text());
}
async function* parseEventStream(response) {
  var payload;
  for await (var chunk of split(streamBody(response), '\n\n')) {
    var match = chunk.match(eventStreamRe);
    if (match) {
      var _chunk = match[1];
      try {
        yield payload = JSON.parse(_chunk);
      } catch (error) {
        if (!payload) throw error;
      }
      if (payload && payload.hasNext === false) break;
    }
  }
  if (payload && payload.hasNext !== false) {
    yield {
      hasNext: false
    };
  }
}
async function* parseMultipartMixed(contentType, response) {
  var boundaryHeader = contentType.match(boundaryHeaderRe);
  var boundary = '--' + (boundaryHeader ? boundaryHeader[1] : '-');
  var isPreamble = true;
  var payload;
  for await (var chunk of split(streamBody(response), '\r\n' + boundary)) {
    if (isPreamble) {
      isPreamble = false;
      var preambleIndex = chunk.indexOf(boundary);
      if (preambleIndex > -1) {
        chunk = chunk.slice(preambleIndex + boundary.length);
      } else {
        continue;
      }
    }
    try {
      yield payload = JSON.parse(chunk.slice(chunk.indexOf('\r\n\r\n') + 4));
    } catch (error) {
      if (!payload) throw error;
    }
    if (payload && payload.hasNext === false) break;
  }
  if (payload && payload.hasNext !== false) {
    yield {
      hasNext: false
    };
  }
}
async function* fetchOperation(operation, url, fetchOptions) {
  var networkMode = true;
  var result = null;
  var response;
  try {
    // Delay for a tick to give the Client a chance to cancel the request
    // if a teardown comes in immediately
    yield await Promise.resolve();
    response = await (operation.context.fetch || fetch)(url, fetchOptions);
    var contentType = response.headers.get('Content-Type') || '';
    var results;
    if (/multipart\/mixed/i.test(contentType)) {
      results = parseMultipartMixed(contentType, response);
    } else if (/text\/event-stream/i.test(contentType)) {
      results = parseEventStream(response);
    } else if (!/text\//i.test(contentType)) {
      results = parseJSON(response);
    } else {
      throw new Error(await response.text());
    }
    for await (var payload of results) {
      result = result ? mergeResultPatch(result, payload, response) : makeResult(operation, payload, response);
      networkMode = false;
      yield result;
      networkMode = true;
    }
    if (!result) {
      yield result = makeResult(operation, {}, response);
    }
  } catch (error) {
    if (!networkMode) {
      throw error;
    }
    yield makeErrorResult(operation, response && (response.status < 200 || response.status >= 300) && response.statusText ? new Error(response.statusText) : error, response);
  }
}

/** Makes a GraphQL HTTP request to a given API by wrapping around the Fetch API.
 *
 * @param operation - The {@link Operation} that should be sent via GraphQL over HTTP.
 * @param url - The endpoint URL for the GraphQL HTTP API.
 * @param fetchOptions - The {@link RequestInit} fetch options for the request.
 * @returns A Wonka {@link Source} of {@link OperationResult | OperationResults}.
 *
 * @remarks
 * This utility defines how all built-in fetch exchanges make GraphQL HTTP requests,
 * supporting multipart incremental responses, cancellation and other smaller
 * implementation details.
 *
 * If you’re implementing a modified fetch exchange for a GraphQL over HTTP API
 * it’s recommended you use this utility.
 *
 * Hint: This function does not use the passed `operation` to create or modify the
 * `fetchOptions` and instead expects that the options have already been created
 * using {@link makeFetchOptions} and modified as needed.
 *
 * @throws
 * If the `fetch` polyfill or globally available `fetch` function doesn’t support
 * streamed multipart responses while trying to handle a `multipart/mixed` GraphQL response,
 * the source will throw “Streaming requests unsupported”.
 * This shouldn’t happen in modern browsers and Node.js.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API} for the Fetch API spec.
 */
function makeFetchSource(operation, url, fetchOptions) {
  var abortController;
  if (typeof AbortController !== 'undefined') {
    fetchOptions.signal = (abortController = new AbortController()).signal;
  }
  return wonka.onEnd(() => {
    if (abortController) abortController.abort();
  })(wonka.filter(result => !!result)(wonka.fromAsyncIterable(fetchOperation(operation, url, fetchOptions))));
}

exports.CombinedError = CombinedError;
exports.createRequest = createRequest;
exports.getOperationType = getOperationType;
exports.keyDocument = keyDocument;
exports.makeErrorResult = makeErrorResult;
exports.makeFetchBody = makeFetchBody;
exports.makeFetchOptions = makeFetchOptions;
exports.makeFetchSource = makeFetchSource;
exports.makeFetchURL = makeFetchURL;
exports.makeResult = makeResult;
exports.mergeResultPatch = mergeResultPatch;
exports.stringifyDocument = stringifyDocument;
exports.stringifyVariables = stringifyVariables;
//# sourceMappingURL=urql-core-chunk.js.map


/***/ }),

/***/ 77686:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({ value: true }));

var graphql_web = __webpack_require__(96219);
var fetchSource = __webpack_require__(49356);
var wonka = __webpack_require__(78069);

var collectTypes = (obj, types) => {
  if (Array.isArray(obj)) {
    for (var item of obj) collectTypes(item, types);
  } else if (typeof obj === 'object' && obj !== null) {
    for (var _key in obj) {
      if (_key === '__typename' && typeof obj[_key] === 'string') {
        types.add(obj[_key]);
      } else {
        collectTypes(obj[_key], types);
      }
    }
  }
  return types;
};

/** Finds and returns a list of `__typename` fields found in response data.
 *
 * @privateRemarks
 * This is used by `@urql/core`’s document `cacheExchange` to find typenames
 * in a given GraphQL response’s data.
 */
var collectTypesFromResponse = response => [...collectTypes(response, new Set())];
var formatNode = node => {
  var hasChanged = false;
  if ('definitions' in node) {
    var definitions = [];
    for (var definition of node.definitions) {
      var newDefinition = formatNode(definition);
      hasChanged = hasChanged || newDefinition !== definition;
      definitions.push(newDefinition);
    }
    if (hasChanged) return {
      ...node,
      definitions
    };
  } else if ('selectionSet' in node) {
    var selections = [];
    var hasTypename = node.kind === graphql_web.Kind.OPERATION_DEFINITION;
    if (node.selectionSet) {
      for (var selection of node.selectionSet.selections || []) {
        hasTypename = hasTypename || selection.kind === graphql_web.Kind.FIELD && selection.name.value === '__typename' && !selection.alias;
        var newSelection = formatNode(selection);
        hasChanged = hasChanged || newSelection !== selection;
        selections.push(newSelection);
      }
      if (!hasTypename) {
        hasChanged = true;
        selections.push({
          kind: graphql_web.Kind.FIELD,
          name: {
            kind: graphql_web.Kind.NAME,
            value: '__typename'
          }
        });
      }
      if (hasChanged) return {
        ...node,
        selectionSet: {
          ...node.selectionSet,
          selections
        }
      };
    }
  }
  return node;
};
var formattedDocs = new Map();

/** Adds `__typename` fields to a GraphQL `DocumentNode`.
 *
 * @param node - a {@link DocumentNode}.
 * @returns a copy of the passed {@link DocumentNode} with added `__typename` introspection fields.
 *
 * @remarks
 * Cache {@link Exchange | Exchanges} will require typename introspection to
 * recognize types in a GraphQL response. To retrieve these typenames,
 * this function is used to add the `__typename` fields to non-root
 * selection sets of a GraphQL document.
 *
 * This utility also preserves the internally computed key of the
 * document as created by {@link createRequest} to avoid any
 * formatting from being duplicated.
 *
 * @see {@link https://spec.graphql.org/October2021/#sec-Type-Name-Introspection} for more information
 * on typename introspection via the `__typename` field.
 */
var formatDocument = node => {
  var query = fetchSource.keyDocument(node);
  var result = formattedDocs.get(query.__key);
  if (!result) {
    formattedDocs.set(query.__key, result = formatNode(query));
    // Ensure that the hash of the resulting document won't suddenly change
    // we are marking __key as non-enumerable so when external exchanges use visit
    // to manipulate a document we won't restore the previous query due to the __key
    // property.
    Object.defineProperty(result, '__key', {
      value: query.__key,
      enumerable: false
    });
  }
  return result;
};

/** Used to recursively mark `__typename` fields in data as non-enumerable.
 *
 * @deprecated Not recommended over modelling inputs manually (See #3299)
 *
 * @remarks
 * This utility can be used to recursively copy GraphQl response data and hide
 * all `__typename` fields present on it.
 *
 * Hint: It’s not recommended to do this, unless it's absolutely necessary as
 * cloning and modifying all data of a response can be unnecessarily slow, when
 * a manual and more specific copy/mask is more efficient.
 *
 * @see {@link ClientOptions.maskTypename} for a description of how the `Client` uses this utility.
 */
var maskTypename = (data, isRoot) => {
  if (!data || typeof data !== 'object') {
    return data;
  } else if (Array.isArray(data)) {
    return data.map(d => maskTypename(d));
  } else if (data && typeof data === 'object' && (isRoot || '__typename' in data)) {
    var acc = {};
    for (var key in data) {
      if (key === '__typename') {
        Object.defineProperty(acc, '__typename', {
          enumerable: false,
          value: data.__typename
        });
      } else {
        acc[key] = maskTypename(data[key]);
      }
    }
    return acc;
  } else {
    return data;
  }
};

/** Patches a `toPromise` method onto the `Source` passed to it.
 * @param source$ - the Wonka {@link Source} to patch.
 * @returns The passed `source$` with a patched `toPromise` method as a {@link PromisifiedSource}.
 * @internal
 */
function withPromise(_source$) {
  var source$ = sink => _source$(sink);
  source$.toPromise = () => wonka.toPromise(wonka.take(1)(wonka.filter(result => !result.stale && !result.hasNext)(source$)));
  source$.then = (onResolve, onReject) => source$.toPromise().then(onResolve, onReject);
  source$.subscribe = onResult => wonka.subscribe(onResult)(source$);
  return source$;
}

/** Creates a {@link Operation} from the given parameters.
 *
 * @param kind - The {@link OperationType} of GraphQL operation, i.e. `query`, `mutation`, or `subscription`.
 * @param request - The {@link GraphQLRequest} or {@link Operation} used as a template for the new `Operation`.
 * @param context - The {@link OperationContext} `context` data for the `Operation`.
 * @returns A new {@link Operation}.
 *
 * @remarks
 * This method is both used to create new {@link Operation | Operations} as well as copy and modify existing
 * operations. While it’s not required to use this function to copy an `Operation`, it is recommended, in case
 * additional dynamic logic is added to them in the future.
 *
 * Hint: When an {@link Operation} is passed to the `request` argument, the `context` argument does not have to be
 * a complete {@link OperationContext} and will instead be combined with passed {@link Operation.context}.
 *
 * @example
 * An example of copying an existing `Operation` to modify its `context`:
 *
 * ```ts
 * makeOperation(
 *   operation.kind,
 *   operation,
 *   { requestPolicy: 'cache-first' },
 * );
 * ```
 */

function makeOperation(kind, request, context) {
  return {
    ...request,
    kind,
    context: request.context ? {
      ...request.context,
      ...context
    } : context || request.context
  };
}

/** Adds additional metadata to an `Operation`'s `context.meta` property while copying it.
 * @see {@link OperationDebugMeta} for more information on the {@link OperationContext.meta} property.
 */
var addMetadata = (operation, meta) => {
  return makeOperation(operation.kind, operation, {
    meta: {
      ...operation.context.meta,
      ...meta
    }
  });
};

var noop = () => {
  /* noop */
};

/* eslint-disable prefer-rest-params */

/** A GraphQL parse function, which may be called as a tagged template literal, returning a parsed {@link DocumentNode}.
 *
 * @remarks
 * The `gql` tag or function is used to parse a GraphQL query document into a {@link DocumentNode}.
 *
 * When used as a tagged template, `gql` will automatically merge fragment definitions into the resulting
 * document and deduplicate them.
 *
 * It enforces that all fragments have a unique name. When fragments with different definitions share a name,
 * it will log a warning in development.
 *
 * Hint: It’s recommended to use this `gql` function over other GraphQL parse functions, since it puts the parsed
 * results directly into `@urql/core`’s internal caches and prevents further unnecessary work.
 *
 * @example
 * ```ts
 * const AuthorFragment = gql`
 *   fragment AuthorDisplayComponent on Author {
 *     id
 *     name
 *   }
 * `;
 *
 * const BookFragment = gql`
 *   fragment ListBookComponent on Book {
 *     id
 *     title
 *     author {
 *       ...AuthorDisplayComponent
 *     }
 *   }
 *
 *   ${AuthorFragment}
 * `;
 *
 * const BookQuery = gql`
 *   query Book($id: ID!) {
 *     book(id: $id) {
 *       ...BookFragment
 *     }
 *   }
 *
 *   ${BookFragment}
 * `;
 * ```
 */

function gql(parts) {
  var fragmentNames = new Map();
  var definitions = [];
  var source = [];

  // Apply the entire tagged template body's definitions
  var body = Array.isArray(parts) ? parts[0] : parts || '';
  for (var i = 1; i < arguments.length; i++) {
    var value = arguments[i];
    if (value && value.definitions) {
      source.push(value);
    } else {
      body += value;
    }
    body += arguments[0][i];
  }
  source.unshift(fetchSource.keyDocument(body));
  for (var document of source) {
    for (var definition of document.definitions) {
      if (definition.kind === graphql_web.Kind.FRAGMENT_DEFINITION) {
        var name = definition.name.value;
        var _value = fetchSource.stringifyDocument(definition);
        // Fragments will be deduplicated according to this Map
        if (!fragmentNames.has(name)) {
          fragmentNames.set(name, _value);
          definitions.push(definition);
        } else if (false) {}
      } else {
        definitions.push(definition);
      }
    }
  }
  return fetchSource.keyDocument({
    kind: graphql_web.Kind.DOCUMENT,
    definitions
  });
}

/* eslint-disable @typescript-eslint/no-use-before-define */
var shouldSkip = ({
  kind
}) => kind !== 'mutation' && kind !== 'query';

/** Adds unique typenames to query (for invalidating cache entries) */
var mapTypeNames = operation => {
  var query = formatDocument(operation.query);
  if (query !== operation.query) {
    var formattedOperation = makeOperation(operation.kind, operation);
    formattedOperation.query = query;
    return formattedOperation;
  } else {
    return operation;
  }
};

/** Default document cache exchange.
 *
 * @remarks
 * The default document cache in `urql` avoids sending the same GraphQL request
 * multiple times by caching it using the {@link Operation.key}. It will invalidate
 * query results automatically whenever it sees a mutation responses with matching
 * `__typename`s in their responses.
 *
 * The document cache will get the introspected `__typename` fields by modifying
 * your GraphQL operation documents using the {@link formatDocument} utility.
 *
 * This automatic invalidation strategy can fail if your query or mutation don’t
 * contain matching typenames, for instance, because the query contained an
 * empty list.
 * You can manually add hints for this exchange by specifying a list of
 * {@link OperationContext.additionalTypenames} for queries and mutations that
 * should invalidate one another.
 *
 * @see {@link https://urql.dev/goto/docs/basics/document-caching} for more information on this cache.
 */
var cacheExchange = ({
  forward,
  client,
  dispatchDebug
}) => {
  var resultCache = new Map();
  var operationCache = new Map();
  var isOperationCached = operation => operation.kind === 'query' && operation.context.requestPolicy !== 'network-only' && (operation.context.requestPolicy === 'cache-only' || resultCache.has(operation.key));
  return ops$ => {
    var cachedOps$ = wonka.map(operation => {
      var cachedResult = resultCache.get(operation.key);
       false ? 0 : undefined;
      var result = cachedResult;
      if (false) {}
      if (operation.context.requestPolicy === 'cache-and-network') {
        result.stale = true;
        reexecuteOperation(client, operation);
      }
      return result;
    })(wonka.filter(op => !shouldSkip(op) && isOperationCached(op))(ops$));
    var forwardedOps$ = wonka.tap(response => {
      var {
        operation
      } = response;
      if (!operation) return;
      var typenames = operation.context.additionalTypenames || [];
      // NOTE: For now, we only respect `additionalTypenames` from subscriptions to
      // avoid unexpected breaking changes
      // We'd expect live queries or other update mechanisms to be more suitable rather
      // than using subscriptions as “signals” to reexecute queries. However, if they’re
      // just used as signals, it’s intuitive to hook them up using `additionalTypenames`
      if (response.operation.kind !== 'subscription') {
        typenames = collectTypesFromResponse(response.data).concat(typenames);
      }

      // Invalidates the cache given a mutation's response
      if (response.operation.kind === 'mutation' || response.operation.kind === 'subscription') {
        var pendingOperations = new Set();
         false ? 0 : undefined;
        for (var i = 0; i < typenames.length; i++) {
          var typeName = typenames[i];
          var operations = operationCache.get(typeName);
          if (!operations) operationCache.set(typeName, operations = new Set());
          for (var key of operations.values()) pendingOperations.add(key);
          operations.clear();
        }
        for (var _key of pendingOperations.values()) {
          if (resultCache.has(_key)) {
            operation = resultCache.get(_key).operation;
            resultCache.delete(_key);
            reexecuteOperation(client, operation);
          }
        }
      } else if (operation.kind === 'query' && response.data) {
        resultCache.set(operation.key, response);
        for (var _i = 0; _i < typenames.length; _i++) {
          var _typeName = typenames[_i];
          var _operations = operationCache.get(_typeName);
          if (!_operations) operationCache.set(_typeName, _operations = new Set());
          _operations.add(operation.key);
        }
      }
    })(forward(wonka.filter(op => op.kind !== 'query' || op.context.requestPolicy !== 'cache-only')(wonka.map(op =>  false ? 0 : op)(wonka.merge([wonka.map(mapTypeNames)(wonka.filter(op => !shouldSkip(op) && !isOperationCached(op))(ops$)), wonka.filter(op => shouldSkip(op))(ops$)])))));
    return wonka.merge([cachedOps$, forwardedOps$]);
  };
};

/** Reexecutes an `Operation` with the `network-only` request policy.
 * @internal
 */
var reexecuteOperation = (client, operation) => {
  return client.reexecuteOperation(makeOperation(operation.kind, operation, {
    requestPolicy: 'network-only'
  }));
};

/** A serialized version of an {@link OperationResult}.
 *
 * @remarks
 * All properties are serialized separately as JSON strings, except for the
 * {@link CombinedError} to speed up JS parsing speed, even if a result doesn’t
 * end up being used.
 *
 * @internal
 */

/** A dictionary of {@link Operation.key} keys to serializable {@link SerializedResult} objects.
 *
 * @remarks
 * It’s not recommended to modify the serialized data manually, however, multiple payloads of
 * this dictionary may safely be merged and combined.
 */

/** Options for the `ssrExchange` allowing it to either operate on the server- or client-side. */

/** An `SSRExchange` either in server-side mode, serializing results, or client-side mode, deserializing and replaying results..
 *
 * @remarks
 * This same {@link Exchange} is used in your code both for the client-side and server-side as it’s “universal”
 * and can be put into either client-side or server-side mode using the {@link SSRExchangeParams.isClient} flag.
 *
 * In server-side mode, the `ssrExchange` will “record” results it sees from your API and provide them for you
 * to send to the client-side using the {@link SSRExchange.extractData} method.
 *
 * In client-side mode, the `ssrExchange` will use these serialized results, rehydrated either using
 * {@link SSRExchange.restoreData} or {@link SSRexchangeParams.initialState}, to replay results the
 * server-side has seen and sent before.
 *
 * Each serialized result will only be replayed once, as it’s assumed that your cache exchange will have the
 * results cached afterwards.
 */

/** Serialize an OperationResult to plain JSON */
var serializeResult = (result, includeExtensions) => {
  var serialized = {
    data: JSON.stringify(result.data),
    hasNext: result.hasNext
  };
  if (result.data !== undefined) {
    serialized.data = JSON.stringify(result.data);
  }
  if (includeExtensions && result.extensions !== undefined) {
    serialized.extensions = JSON.stringify(result.extensions);
  }
  if (result.error) {
    serialized.error = {
      graphQLErrors: result.error.graphQLErrors.map(error => {
        if (!error.path && !error.extensions) return error.message;
        return {
          message: error.message,
          path: error.path,
          extensions: error.extensions
        };
      })
    };
    if (result.error.networkError) {
      serialized.error.networkError = '' + result.error.networkError;
    }
  }
  return serialized;
};

/** Deserialize plain JSON to an OperationResult
 * @internal
 */
var deserializeResult = (operation, result, includeExtensions) => ({
  operation,
  data: result.data ? JSON.parse(result.data) : undefined,
  extensions: includeExtensions && result.extensions ? JSON.parse(result.extensions) : undefined,
  error: result.error ? new fetchSource.CombinedError({
    networkError: result.error.networkError ? new Error(result.error.networkError) : undefined,
    graphQLErrors: result.error.graphQLErrors
  }) : undefined,
  stale: false,
  hasNext: !!result.hasNext
});
var revalidated = new Set();

/** Creates a server-side rendering `Exchange` that either captures responses on the server-side or replays them on the client-side.
 *
 * @param params - An {@link SSRExchangeParams} configuration object.
 * @returns the created {@link SSRExchange}
 *
 * @remarks
 * When dealing with server-side rendering, we essentially have two {@link Client | Clients} making requests,
 * the server-side client, and the client-side one. The `ssrExchange` helps implementing a tiny cache on both
 * sides that:
 *
 * - captures results on the server-side which it can serialize,
 * - replays results on the client-side that it deserialized from the server-side.
 *
 * Hint: The `ssrExchange` is basically an exchange that acts like a replacement for any fetch exchange
 * temporarily. As such, you should place it after your cache exchange but in front of any fetch exchange.
 */
var ssrExchange = (params = {}) => {
  var staleWhileRevalidate = !!params.staleWhileRevalidate;
  var includeExtensions = !!params.includeExtensions;
  var data = {};

  // On the client-side, we delete results from the cache as they're resolved
  // this is delayed so that concurrent queries don't delete each other's data
  var invalidateQueue = [];
  var invalidate = result => {
    invalidateQueue.push(result.operation.key);
    if (invalidateQueue.length === 1) {
      Promise.resolve().then(() => {
        var key;
        while (key = invalidateQueue.shift()) {
          data[key] = null;
        }
      });
    }
  };

  // The SSR Exchange is a temporary cache that can populate results into data for suspense
  // On the client it can be used to retrieve these temporary results from a rehydrated cache
  var ssr = ({
    client,
    forward
  }) => ops$ => {
    // params.isClient tells us whether we're on the client-side
    // By default we assume that we're on the client if suspense-mode is disabled
    var isClient = params && typeof params.isClient === 'boolean' ? !!params.isClient : !client.suspense;
    var forwardedOps$ = forward(wonka.map(mapTypeNames)(wonka.filter(operation => !data[operation.key] || !!data[operation.key].hasNext || operation.context.requestPolicy === 'network-only')(ops$)));

    // NOTE: Since below we might delete the cached entry after accessing
    // it once, cachedOps$ needs to be merged after forwardedOps$
    var cachedOps$ = wonka.map(op => {
      var serialized = data[op.key];
      var cachedResult = deserializeResult(op, serialized, includeExtensions);
      if (staleWhileRevalidate && !revalidated.has(op.key)) {
        cachedResult.stale = true;
        revalidated.add(op.key);
        reexecuteOperation(client, op);
      }
      var result = {
        ...cachedResult,
        operation:  false ? 0 : op
      };
      return result;
    })(wonka.filter(operation => !!data[operation.key] && operation.context.requestPolicy !== 'network-only')(ops$));
    if (!isClient) {
      // On the server we cache results in the cache as they're resolved
      forwardedOps$ = wonka.tap(result => {
        var {
          operation
        } = result;
        if (operation.kind !== 'mutation') {
          var serialized = serializeResult(result, includeExtensions);
          data[operation.key] = serialized;
        }
      })(forwardedOps$);
    } else {
      // On the client we delete results from the cache as they're resolved
      cachedOps$ = wonka.tap(invalidate)(cachedOps$);
    }
    return wonka.merge([forwardedOps$, cachedOps$]);
  };
  ssr.restoreData = restore => {
    for (var _key in restore) {
      // We only restore data that hasn't been previously invalidated
      if (data[_key] !== null) {
        data[_key] = restore[_key];
      }
    }
  };
  ssr.extractData = () => {
    var result = {};
    for (var _key2 in data) if (data[_key2] != null) result[_key2] = data[_key2];
    return result;
  };
  if (params && params.initialState) {
    ssr.restoreData(params.initialState);
  }
  return ssr;
};

/** An abstract observer-like interface.
 *
 * @remarks
 * Observer-like interfaces are passed to {@link ObservableLike.subscribe} to provide them
 * with callbacks for their events.
 *
 * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.
 */

/** An abstract observable-like interface.
 *
 * @remarks
 * Observable, or Observable-like interfaces, are often used by GraphQL transports to abstract
 * how they send {@link ExecutionResult | ExecutionResults} to consumers. These generally contain
 * a `subscribe` method accepting an {@link ObserverLike} structure.
 *
 * @see {@link https://github.com/tc39/proposal-observable} for the full TC39 Observable proposal.
 */

/** A more cross-compatible version of the {@link GraphQLRequest} structure.
 * {@link FetchBody} for more details
 */

/** A subscription forwarding function, which must accept a {@link SubscriptionOperation}.
 *
 * @param operation - A {@link SubscriptionOperation}
 * @returns An {@link ObservableLike} object issuing {@link ExecutionResult | ExecutionResults}.
 */

/** This is called to create a subscription and needs to be hooked up to a transport client. */

/** Generic subscription exchange factory used to either create an exchange handling just subscriptions or all operation kinds.
 *
 * @remarks
 * `subscriptionExchange` can be used to create an {@link Exchange} that either
 * handles just GraphQL subscription operations, or optionally all operations,
 * when the {@link SubscriptionExchangeOpts.enableAllOperations} flag is passed.
 *
 * The {@link SubscriptionExchangeOpts.forwardSubscription} function must
 * be provided and provides a generic input that's based on {@link Operation}
 * but is compatible with many libraries implementing GraphQL request or
 * subscription interfaces.
 */
var subscriptionExchange = ({
  forwardSubscription,
  enableAllOperations,
  isSubscriptionOperation
}) => ({
  client,
  forward
}) => {
  var createSubscriptionSource = operation => {
    var observableish = forwardSubscription(fetchSource.makeFetchBody(operation), operation);
    return wonka.make(({
      next,
      complete
    }) => {
      var isComplete = false;
      var sub;
      var result;
      Promise.resolve().then(() => {
        if (isComplete) return;
        sub = observableish.subscribe({
          next(nextResult) {
            next(result = result ? fetchSource.mergeResultPatch(result, nextResult) : fetchSource.makeResult(operation, nextResult));
          },
          error(error) {
            next(fetchSource.makeErrorResult(operation, error));
          },
          complete() {
            if (!isComplete) {
              isComplete = true;
              if (operation.kind === 'subscription') {
                client.reexecuteOperation(makeOperation('teardown', operation, operation.context));
              }
              if (result && result.hasNext) next(fetchSource.mergeResultPatch(result, {
                hasNext: false
              }));
              complete();
            }
          }
        });
      });
      return () => {
        isComplete = true;
        if (sub) sub.unsubscribe();
      };
    });
  };
  var isSubscriptionOperationFn = isSubscriptionOperation || (operation => operation.kind === 'subscription' || !!enableAllOperations && (operation.kind === 'query' || operation.kind === 'mutation'));
  return ops$ => {
    var subscriptionResults$ = wonka.mergeMap(operation => {
      var {
        key
      } = operation;
      var teardown$ = wonka.filter(op => op.kind === 'teardown' && op.key === key)(ops$);
      return wonka.takeUntil(teardown$)(createSubscriptionSource(operation));
    })(wonka.filter(operation => operation.kind !== 'teardown' && isSubscriptionOperationFn(operation))(ops$));
    var forward$ = forward(wonka.filter(operation => operation.kind === 'teardown' || !isSubscriptionOperationFn(operation))(ops$));
    return wonka.merge([subscriptionResults$, forward$]);
  };
};

/** Simple log debugger exchange.
 *
 * @remarks
 * An exchange that logs incoming {@link Operation | Operations} and
 * {@link OperationResult | OperationResults} in development.
 *
 * This exchange is a no-op in production and often used in issue reporting
 * to understand certain usage patterns of `urql` without having access to
 * the original source code.
 *
 * Hint: When you report an issue you’re having with `urql`, adding
 * this as your first exchange and posting its output can speed up
 * issue triaging a lot!
 */
var debugExchange = ({
  forward
}) => {
  if (true) {
    return ops$ => forward(ops$);
  } else {}
};

/** Default deduplication exchange.
 * @deprecated
 * This exchange's functionality is now built into the {@link Client}.
 */
var dedupExchange = ({
  forward
}) => ops$ => forward(ops$);

/* eslint-disable @typescript-eslint/no-use-before-define */

/** Default GraphQL over HTTP fetch exchange.
 *
 * @remarks
 * The default fetch exchange in `urql` supports sending GraphQL over HTTP
 * requests, can optionally send GraphQL queries as GET requests, and
 * handles incremental multipart responses.
 *
 * This exchange does not handle persisted queries or multipart uploads.
 * Support for the former can be added using `@urql/exchange-persisted-fetch`
 * and the latter using `@urql/exchange-multipart-fetch`.
 *
 * Hint: The `fetchExchange` and the two other exchanges all use the built-in fetch
 * utilities in `@urql/core/internal`, which you can also use to implement
 * a customized fetch exchange.
 *
 * @see {@link makeFetchSource} for the shared utility calling the Fetch API.
 */
var fetchExchange = ({
  forward,
  dispatchDebug
}) => {
  return ops$ => {
    var fetchResults$ = wonka.mergeMap(operation => {
      var body = fetchSource.makeFetchBody(operation);
      var url = fetchSource.makeFetchURL(operation, body);
      var fetchOptions = fetchSource.makeFetchOptions(operation, body);
       false ? 0 : undefined;
      var source = wonka.takeUntil(wonka.filter(op => op.kind === 'teardown' && op.key === operation.key)(ops$))(fetchSource.makeFetchSource(operation, url, fetchOptions));
      if (false) {}
      return source;
    })(wonka.filter(operation => {
      return operation.kind !== 'teardown' && (operation.kind !== 'subscription' || !!operation.context.fetchSubscriptions);
    })(ops$));
    var forward$ = forward(wonka.filter(operation => {
      return operation.kind === 'teardown' || operation.kind === 'subscription' && !operation.context.fetchSubscriptions;
    })(ops$));
    return wonka.merge([fetchResults$, forward$]);
  };
};

/** Composes an array of Exchanges into a single one.
 *
 * @param exchanges - An array of {@link Exchange | Exchanges}.
 * @returns - A composed {@link Exchange}.
 *
 * @remarks
 * `composeExchanges` returns an {@link Exchange} that when instantiated
 * composes the array of passed `Exchange`s into one, calling them from
 * right to left, with the prior `Exchange`’s {@link ExchangeIO} function
 * as the {@link ExchangeInput.forward} input.
 *
 * This simply merges all exchanges into one and is used by the {@link Client}
 * to merge the `exchanges` option it receives.
 *
 * @throws
 * In development, if {@link ExchangeInput.forward} is called repeatedly
 * by an {@link Exchange} an error is thrown, since `forward()` must only
 * be called once per `Exchange`.
 */
var composeExchanges = exchanges => ({
  client,
  forward,
  dispatchDebug
}) => exchanges.reduceRight((forward, exchange) => {
  var forwarded = false;
  return exchange({
    client,
    forward(operations$) {
      if (false) {}
      return wonka.share(forward(wonka.share(operations$)));
    },
    dispatchDebug(event) {
       false ? 0 : undefined;
    }
  });
}, forward);

/** Options for the `mapExchange` allowing it to react to incoming operations, results, or errors. */

/** Creates an `Exchange` mapping over incoming operations, results, and/or errors.
 *
 * @param opts - A {@link MapExchangeOpts} configuration object, containing the callbacks the `mapExchange` will use.
 * @returns the created {@link Exchange}
 *
 * @remarks
 * The `mapExchange` may be used to react to or modify incoming {@link Operation | Operations}
 * and {@link OperationResult | OperationResults}. Optionally, it can also modify these
 * asynchronously, when a promise is returned from the callbacks.
 *
 * This is useful to, for instance, add an authentication token to a given request, when
 * the `@urql/exchange-auth` package would be overkill.
 *
 * It can also accept an `onError` callback, which can be used to react to incoming
 * {@link CombinedError | CombinedErrors} on results, and trigger side-effects.
 *
 */
var mapExchange = ({
  onOperation,
  onResult,
  onError
}) => {
  return ({
    forward
  }) => ops$ => {
    return wonka.mergeMap(result => {
      if (onError && result.error) onError(result.error, result.operation);
      var newResult = onResult && onResult(result) || result;
      return 'then' in newResult ? wonka.fromPromise(newResult) : wonka.fromValue(newResult);
    })(forward(wonka.mergeMap(operation => {
      var newOperation = onOperation && onOperation(operation) || operation;
      return 'then' in newOperation ? wonka.fromPromise(newOperation) : wonka.fromValue(newOperation);
    })(ops$)));
  };
};

/** Used by the `Client` as the last exchange to warn about unhandled operations.
 *
 * @remarks
 * In a normal setup, some operations may go unhandled when a {@link Client} isn’t set up
 * with the right exchanges.
 * For instance, a `Client` may be missing a fetch exchange, or an exchange handling subscriptions.
 * This {@link Exchange} is added by the `Client` automatically to log warnings about unhandled
 * {@link Operaiton | Operations} in development.
 */
var fallbackExchange = ({
  dispatchDebug
}) => ops$ => {
  if (false) {}

  // All operations that skipped through the entire exchange chain should be filtered from the output
  return wonka.filter(_x => false)(ops$);
};

/* eslint-disable @typescript-eslint/no-use-before-define */

/** Configuration options passed when creating a new {@link Client}.
 *
 * @remarks
 * The `ClientOptions` are passed when creating a new {@link Client}, and
 * are used to instantiate the pipeline of {@link Exchange | Exchanges}, configure
 * options used to initialize {@link OperationContext | OperationContexts}, or to
 * change the general behaviour of the {@link Client}.
 */

/** The `Client` is the central hub for your GraphQL operations and holds `urql`'s state.
 *
 * @remarks
 * The `Client` manages your active GraphQL operations and their state, and contains the
 * {@link Exchange} pipeline to execute your GraphQL operations.
 *
 * It contains methods that allow you to execute GraphQL operations manually, but the `Client`
 * is also interacted with by bindings (for React, Preact, Vue, Svelte, etc) to execute GraphQL
 * operations.
 *
 * While {@link Exchange | Exchanges} are ultimately responsible for the control flow of operations,
 * sending API requests, and caching, the `Client` still has the important responsibility for
 * creating operations, managing consumers of active operations, sharing results for operations,
 * and more tasks as a “central hub”.
 *
 * @see {@link https://urql.dev/goto/docs/architecture/#requests-and-operations-on-the-client} for more information
 * on what the `Client` is and does.
 */

var Client = function Client(opts) {
  if (false) {}
  var ids = 0;
  var replays = new Map();
  var active = new Map();
  var dispatched = new Set();
  var queue = [];
  var baseOpts = {
    url: opts.url,
    fetchSubscriptions: opts.fetchSubscriptions,
    fetchOptions: opts.fetchOptions,
    fetch: opts.fetch,
    preferGetMethod: !!opts.preferGetMethod,
    requestPolicy: opts.requestPolicy || 'cache-first'
  };

  // This subject forms the input of operations; executeOperation may be
  // called to dispatch a new operation on the subject
  var operations = wonka.makeSubject();
  function nextOperation(operation) {
    if (operation.kind === 'mutation' || operation.kind === 'teardown' || !dispatched.has(operation.key)) {
      if (operation.kind === 'teardown') {
        dispatched.delete(operation.key);
      } else if (operation.kind !== 'mutation') {
        dispatched.add(operation.key);
      }
      operations.next(operation);
    }
  }

  // We define a queued dispatcher on the subject, which empties the queue when it's
  // activated to allow `reexecuteOperation` to be trampoline-scheduled
  var isOperationBatchActive = false;
  function dispatchOperation(operation) {
    if (operation) nextOperation(operation);
    if (!isOperationBatchActive) {
      isOperationBatchActive = true;
      while (isOperationBatchActive && (operation = queue.shift())) nextOperation(operation);
      isOperationBatchActive = false;
    }
  }

  /** Defines how result streams are created */
  var makeResultSource = operation => {
    var result$ =
    // End the results stream when an active teardown event is sent
    wonka.takeUntil(wonka.filter(op => op.kind === 'teardown' && op.key === operation.key)(operations.source))(
    // Filter by matching key (or _instance if it’s set)
    wonka.filter(res => res.operation.kind === operation.kind && res.operation.key === operation.key && (!res.operation.context._instance || res.operation.context._instance === operation.context._instance))(results$));

    // Mask typename properties if the option for it is turned on
    if (opts.maskTypename) {
      result$ = wonka.map(res => ({
        ...res,
        data: maskTypename(res.data, true)
      }))(result$);
    }
    if (operation.kind !== 'query') {
      // Interrupt subscriptions and mutations when they have no more results
      result$ = wonka.takeWhile(result => !!result.hasNext, true)(result$);
    } else {
      result$ =
      // Add `stale: true` flag when a new operation is sent for queries
      wonka.switchMap(result => {
        var value$ = wonka.fromValue(result);
        return result.stale || result.hasNext ? value$ : wonka.merge([value$, wonka.map(() => {
          result.stale = true;
          return result;
        })(wonka.take(1)(wonka.filter(op => op.key === operation.key)(operations.source)))]);
      })(result$);
    }
    if (operation.kind !== 'mutation') {
      result$ =
      // Cleanup active states on end of source
      wonka.onEnd(() => {
        // Delete the active operation handle
        dispatched.delete(operation.key);
        replays.delete(operation.key);
        active.delete(operation.key);
        // Interrupt active queue
        isOperationBatchActive = false;
        // Delete all queued up operations of the same key on end
        for (var i = queue.length - 1; i >= 0; i--) if (queue[i].key === operation.key) queue.splice(i, 1);
        // Dispatch a teardown signal for the stopped operation
        nextOperation(makeOperation('teardown', operation, operation.context));
      })(
      // Store replay result
      wonka.onPush(result => {
        if (result.stale) {
          // If the current result has queued up an operation of the same
          // key, then `stale` refers to it
          for (var _operation of queue) {
            if (_operation.key === result.operation.key) {
              dispatched.delete(_operation.key);
              break;
            }
          }
        } else if (!result.hasNext) {
          dispatched.delete(operation.key);
        }
        replays.set(operation.key, result);
      })(result$));
    } else {
      result$ =
      // Send mutation operation on start
      wonka.onStart(() => {
        nextOperation(operation);
      })(result$);
    }
    return wonka.share(result$);
  };
  var instance = this instanceof Client ? this : Object.create(Client.prototype);
  var client = Object.assign(instance, {
    suspense: !!opts.suspense,
    operations$: operations.source,
    reexecuteOperation(operation) {
      // Reexecute operation only if any subscribers are still subscribed to the
      // operation's exchange results
      if (operation.kind === 'teardown') {
        dispatchOperation(operation);
      } else if (operation.kind === 'mutation' || active.has(operation.key)) {
        queue.push(operation);
        Promise.resolve().then(dispatchOperation);
      }
    },
    createRequestOperation(kind, request, opts) {
      if (!opts) opts = {};
      var requestOperationType;
      if (false) {}
      return makeOperation(kind, request, {
        _instance: kind === 'mutation' ? ids = ids + 1 | 0 : undefined,
        ...baseOpts,
        ...opts,
        requestPolicy: opts.requestPolicy || baseOpts.requestPolicy,
        suspense: opts.suspense || opts.suspense !== false && client.suspense
      });
    },
    executeRequestOperation(operation) {
      if (operation.kind === 'mutation') {
        return withPromise(makeResultSource(operation));
      }
      return withPromise(wonka.lazy(() => {
        var source = active.get(operation.key);
        if (!source) {
          active.set(operation.key, source = makeResultSource(operation));
        }
        source = wonka.onStart(() => {
          dispatchOperation(operation);
        })(source);
        var replay = replays.get(operation.key);
        if (operation.kind === 'query' && replay && (replay.stale || replay.hasNext)) {
          return wonka.switchMap(wonka.fromValue)(wonka.merge([source, wonka.filter(replay => replay === replays.get(operation.key))(wonka.fromValue(replay))]));
        } else {
          return source;
        }
      }));
    },
    executeQuery(query, opts) {
      var operation = client.createRequestOperation('query', query, opts);
      return client.executeRequestOperation(operation);
    },
    executeSubscription(query, opts) {
      var operation = client.createRequestOperation('subscription', query, opts);
      return client.executeRequestOperation(operation);
    },
    executeMutation(query, opts) {
      var operation = client.createRequestOperation('mutation', query, opts);
      return client.executeRequestOperation(operation);
    },
    readQuery(query, variables, context) {
      var result = null;
      wonka.subscribe(res => {
        result = res;
      })(client.query(query, variables, context)).unsubscribe();
      return result;
    },
    query(query, variables, context) {
      return client.executeQuery(fetchSource.createRequest(query, variables), context);
    },
    subscription(query, variables, context) {
      return client.executeSubscription(fetchSource.createRequest(query, variables), context);
    },
    mutation(query, variables, context) {
      return client.executeMutation(fetchSource.createRequest(query, variables), context);
    }
  });
  var dispatchDebug = noop;
  if (false) { var source, next; }

  // All exchange are composed into a single one and are called using the constructed client
  // and the fallback exchange stream
  var composedExchange = composeExchanges(opts.exchanges);

  // All exchanges receive inputs using which they can forward operations to the next exchange
  // and receive a stream of results in return, access the client, or dispatch debugging events
  // All operations then run through the Exchange IOs in a pipeline-like fashion
  var results$ = wonka.share(composedExchange({
    client,
    dispatchDebug,
    forward: fallbackExchange({
      dispatchDebug
    })
  })(operations.source));

  // Prevent the `results$` exchange pipeline from being closed by active
  // cancellations cascading up from components
  wonka.publish(results$);
  return client;
};

/** Accepts `ClientOptions` and creates a `Client`.
 * @param opts - A {@link ClientOptions} objects with options for the `Client`.
 * @returns A {@link Client} instantiated with `opts`.
 */
var createClient = Client;

exports.CombinedError = fetchSource.CombinedError;
exports.createRequest = fetchSource.createRequest;
exports.makeErrorResult = fetchSource.makeErrorResult;
exports.makeResult = fetchSource.makeResult;
exports.mergeResultPatch = fetchSource.mergeResultPatch;
exports.stringifyDocument = fetchSource.stringifyDocument;
exports.stringifyVariables = fetchSource.stringifyVariables;
exports.Client = Client;
exports.cacheExchange = cacheExchange;
exports.composeExchanges = composeExchanges;
exports.createClient = createClient;
exports.debugExchange = debugExchange;
exports.dedupExchange = dedupExchange;
exports.errorExchange = mapExchange;
exports.fetchExchange = fetchExchange;
exports.formatDocument = formatDocument;
exports.gql = gql;
exports.makeOperation = makeOperation;
exports.mapExchange = mapExchange;
exports.maskTypename = maskTypename;
exports.ssrExchange = ssrExchange;
exports.subscriptionExchange = subscriptionExchange;
//# sourceMappingURL=urql-core.js.map


/***/ }),

/***/ 39954:
/***/ ((module) => {

"use strict";


// do not edit .js files directly - edit src/index.jst



module.exports = function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    if (a.constructor !== b.constructor) return false;

    var length, i, keys;
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length) return false;
      for (i = length; i-- !== 0;)
        if (!equal(a[i], b[i])) return false;
      return true;
    }



    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) return false;

    for (i = length; i-- !== 0;)
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

    for (i = length; i-- !== 0;) {
      var key = keys[i];

      if (!equal(a[key], b[key])) return false;
    }

    return true;
  }

  // true if both NaN, false otherwise
  return a!==a && b!==b;
};


/***/ }),

/***/ 33533:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(8510)


/***/ }),

/***/ 52865:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(14837)


/***/ }),

/***/ 40450:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

Object.defineProperty(exports, "__esModule", ({ value: true }));

var core = __webpack_require__(77686);
var React = __webpack_require__(18038);
var wonka = __webpack_require__(78069);

var OBJ = {};

/** `urql`'s React Context.
 *
 * @remarks
 * The React Context that `urql`’s {@link Client} will be provided with.
 * You may use the reexported {@link Provider} to provide a `Client` as well.
 */
var Context = React.createContext(OBJ);

/** Provider for `urql`'s {@link Client} to GraphQL hooks.
 *
 * @remarks
 * `Provider` accepts a {@link Client} and provides it to all GraphQL hooks,
 * and {@link useClient}.
 *
 * You should make sure to create a {@link Client} and provide it with the
 * `Provider` to parts of your component tree that use GraphQL hooks.
 *
 * @example
 * ```tsx
 * import { Provider } from 'urql';
 * // All of `@urql/core` is also re-exported by `urql`:
 * import { Client, cacheExchange, fetchExchange } from '@urql/core';
 *
 * const client = new Client({
 *   url: 'https://API',
 *   exchanges: [cacheExchange, fetchExchange],
 * });
 *
 * const App = () => (
 *   <Provider value={client}>
 *     <Component />
 *   </Provider>
 * );
 * ```
 */
var Provider = Context.Provider;

/** React Consumer component, providing the {@link Client} provided on a parent component.
 * @remarks
 * This is an alias for {@link Context.Consumer}.
 */
var Consumer = Context.Consumer;
Context.displayName = 'UrqlContext';

/** Hook returning a {@link Client} from {@link Context}.
 *
 * @remarks
 * `useClient` is a convenience hook, which accesses `urql`'s {@link Context}
 * and returns the {@link Client} defined on it.
 *
 * This will be the {@link Client} you passed to a {@link Provider}
 * you wrapped your elements containing this hook with.
 *
 * @throws
 * In development, if the component you call `useClient()` in is
 * not wrapped in a {@link Provider}, an error is thrown.
 */
var useClient = () => {
  var client = React.useContext(Context);
  if (client === OBJ && "production" !== 'production') { var error; }
  return client;
};

var initialState = {
  fetching: false,
  stale: false,
  error: undefined,
  data: undefined,
  extensions: undefined,
  operation: undefined
};

// Two operations are considered equal if they have the same key
var areOperationsEqual = (a, b) => {
  return a === b || !!(a && b && a.key === b.key);
};

/**
 * Checks if two objects are shallowly different with a special case for
 * 'operation' where it compares the key if they are not the otherwise equal
 */
var isShallowDifferent = (a, b) => {
  for (var key in a) if (!(key in b)) return true;
  for (var _key in b) {
    if (_key === 'operation' ? !areOperationsEqual(a[_key], b[_key]) : a[_key] !== b[_key]) {
      return true;
    }
  }
  return false;
};
var computeNextState = (prevState, result) => {
  var newState = {
    ...prevState,
    ...result,
    data: result.data !== undefined || result.error ? result.data : prevState.data,
    fetching: !!result.fetching,
    stale: !!result.stale
  };
  return isShallowDifferent(prevState, newState) ? newState : prevState;
};
var hasDepsChanged = (a, b) => {
  for (var i = 0, l = b.length; i < l; i++) if (a[i] !== b[i]) return true;
  return false;
};
var reactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
function deferDispatch(setState, value) {
  if (false) {} else {
    setState(value);
  }
}

/** State of the last mutation executed by your {@link useMutation} hook.
 *
 * @remarks
 * `UseMutationState` is returned (in a tuple) by {@link useMutation} and
 * gives you the {@link OperationResult} of the last mutation executed
 * with {@link UseMutationExecute}.
 *
 * Even if the mutation document passed to {@link useMutation} changes,
 * the state isn’t reset, so you can keep displaying the previous result.
 */

/** Triggers {@link useMutation} to execute its GraphQL mutation operation.
 *
 * @param variables - variables using which the mutation will be executed.
 * @param context - optionally, context options that will be merged with the hook's
 * {@link UseQueryArgs.context} options and the `Client`’s options.
 * @returns the {@link OperationResult} of the mutation.
 *
 * @remarks
 * When called, {@link useMutation} will start the GraphQL mutation
 * it currently holds and use the `variables` passed to it.
 *
 * Once the mutation response comes back from the API, its
 * returned promise will resolve to the mutation’s {@link OperationResult}
 * and the {@link UseMutationState} will be updated with the result.
 *
 * @example
 * ```ts
 * const [result, executeMutation] = useMutation(UpdateTodo);
 * const start = async ({ id, title }) => {
 *   const result = await executeMutation({ id, title });
 * };
 */

/** Result tuple returned by the {@link useMutation} hook.
 *
 * @remarks
 * Similarly to a `useState` hook’s return value,
 * the first element is the {@link useMutation}’s state, updated
 * as mutations are executed with the second value, which is
 * used to start mutations and is a {@link UseMutationExecute}
 * function.
 */

/** Hook to create a GraphQL mutation, run by passing variables to the returned execute function.
 *
 * @param query - a GraphQL mutation document which `useMutation` will execute.
 * @returns a {@link UseMutationResponse} tuple of a {@link UseMutationState} result,
 * and an execute function to start the mutation.
 *
 * @remarks
 * `useMutation` allows GraphQL mutations to be defined and keeps its state
 * after the mutation is started with the returned execute function.
 *
 * Given a GraphQL mutation document it returns state to keep track of the
 * mutation state and a {@link UseMutationExecute} function, which accepts
 * variables for the mutation to be executed.
 * Once called, the mutation executes and the state will be updated with
 * the mutation’s result.
 *
 * @see {@link https://urql.dev/goto/urql/docs/basics/react-preact/#mutations} for `useMutation` docs.
 *
 * @example
 * ```ts
 * import { gql, useMutation } from 'urql';
 *
 * const UpdateTodo = gql`
 *   mutation ($id: ID!, $title: String!) {
 *     updateTodo(id: $id, title: $title) {
 *       id, title
 *     }
 *   }
 * `;
 *
 * const UpdateTodo = () => {
 *   const [result, executeMutation] = useMutation(UpdateTodo);
 *   const start = async ({ id, title }) => {
 *     const result = await executeMutation({ id, title });
 *   };
 *   // ...
 * };
 * ```
 */
function useMutation(query) {
  var isMounted = React.useRef(true);
  var client = useClient();
  var [state, setState] = React.useState(initialState);
  var executeMutation = React.useCallback((variables, context) => {
    deferDispatch(setState, {
      ...initialState,
      fetching: true
    });
    return wonka.toPromise(wonka.take(1)(wonka.filter(result => !result.hasNext)(wonka.onPush(result => {
      if (isMounted.current) {
        deferDispatch(setState, {
          fetching: false,
          stale: result.stale,
          data: result.data,
          error: result.error,
          extensions: result.extensions,
          operation: result.operation
        });
      }
    })(client.executeMutation(core.createRequest(query, variables), context || {})))));
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [client, query, setState]);
  React.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return [state, executeMutation];
}

/** Creates a request from a query and variables but preserves reference equality if the key isn't changing
 * @internal
 */
function useRequest(query, variables) {
  var prev = React.useRef(undefined);
  return React.useMemo(() => {
    var request = core.createRequest(query, variables);
    // We manually ensure reference equality if the key hasn't changed
    if (prev.current !== undefined && prev.current.key === request.key) {
      return prev.current;
    } else {
      prev.current = request;
      return request;
    }
  }, [query, variables]);
}

var getCacheForClient = client => {
  if (!client._react) {
    var reclaim = new Set();
    var map = new Map();
    if (client.operations$ /* not available in mocks */) {
      wonka.subscribe(operation => {
        if (operation.kind === 'teardown' && reclaim.has(operation.key)) {
          reclaim.delete(operation.key);
          map.delete(operation.key);
        }
      })(client.operations$);
    }
    client._react = {
      get(key) {
        return map.get(key);
      },
      set(key, value) {
        reclaim.delete(key);
        map.set(key, value);
      },
      dispose(key) {
        reclaim.add(key);
      }
    };
  }
  return client._react;
};

/* eslint-disable react-hooks/exhaustive-deps */

/** Input arguments for the {@link useQuery} hook.
 *
 * @param query - The GraphQL query that `useQuery` executes.
 * @param variables - The variables for the GraphQL query that `useQuery` executes.
 */

/** State of the current query, your {@link useQuery} hook is executing.
 *
 * @remarks
 * `UseQueryState` is returned (in a tuple) by {@link useQuery} and
 * gives you the updating {@link OperationResult} of GraphQL queries.
 *
 * Even when the query and variables passed to {@link useQuery} change,
 * this state preserves the prior state and sets the `fetching` flag to
 * `true`.
 * This allows you to display the previous state, while implementing
 * a separate loading indicator separately.
 */

/** Triggers {@link useQuery} to execute a new GraphQL query operation.
 *
 * @param opts - optionally, context options that will be merged with the hook's
 * {@link UseQueryArgs.context} options and the `Client`’s options.
 *
 * @remarks
 * When called, {@link useQuery} will re-execute the GraphQL query operation
 * it currently holds, even if {@link UseQueryArgs.pause} is set to `true`.
 *
 * This is useful for executing a paused query or re-executing a query
 * and get a new network result, by passing a new request policy.
 *
 * ```ts
 * const [result, reexecuteQuery] = useQuery({ query });
 *
 * const refresh = () => {
 *   // Re-execute the query with a network-only policy, skipping the cache
 *   reexecuteQuery({ requestPolicy: 'network-only' });
 * };
 * ```
 */

/** Result tuple returned by the {@link useQuery} hook.
 *
 * @remarks
 * Similarly to a `useState` hook’s return value,
 * the first element is the {@link useQuery}’s result and state,
 * a {@link UseQueryState} object,
 * and the second is used to imperatively re-execute the query
 * via a {@link UseQueryExecute} function.
 */

var isSuspense = (client, context) => client.suspense && (!context || context.suspense !== false);

/** Hook to run a GraphQL query and get updated GraphQL results.
 *
 * @param args - a {@link UseQueryArgs} object, to pass a `query`, `variables`, and options.
 * @returns a {@link UseQueryResponse} tuple of a {@link UseQueryState} result, and re-execute function.
 *
 * @remarks
 * `useQuery` allows GraphQL queries to be defined and executed.
 * Given {@link UseQueryArgs.query}, it executes the GraphQL query with the
 * context’s {@link Client}.
 *
 * The returned result updates when the `Client` has new results
 * for the query, and changes when your input `args` change.
 *
 * Additionally, if the `suspense` option is enabled on the `Client`,
 * the `useQuery` hook will suspend instead of indicating that it’s
 * waiting for a result via {@link UseQueryState.fetching}.
 *
 * @see {@link https://urql.dev/goto/urql/docs/basics/react-preact/#queries} for `useQuery` docs.
 *
 * @example
 * ```ts
 * import { gql, useQuery } from 'urql';
 *
 * const TodosQuery = gql`
 *   query { todos { id, title } }
 * `;
 *
 * const Todos = () => {
 *   const [result, reexecuteQuery] = useQuery({
 *     query: TodosQuery,
 *     variables: {},
 *   });
 *   // ...
 * };
 * ```
 */
function useQuery(args) {
  var client = useClient();
  var cache = getCacheForClient(client);
  var suspense = isSuspense(client, args.context);
  var request = useRequest(args.query, args.variables);
  var source = React.useMemo(() => {
    if (args.pause) return null;
    var source = client.executeQuery(request, {
      requestPolicy: args.requestPolicy,
      ...args.context
    });
    return suspense ? wonka.onPush(result => {
      cache.set(request.key, result);
    })(source) : source;
  }, [cache, client, request, suspense, args.pause, args.requestPolicy, args.context]);
  var getSnapshot = React.useCallback((source, suspense) => {
    if (!source) return {
      fetching: false
    };
    var result = cache.get(request.key);
    if (!result) {
      var resolve;
      var subscription = wonka.subscribe(_result => {
        result = _result;
        if (resolve) resolve(result);
      })(wonka.takeWhile(() => suspense && !resolve || !result)(source));
      if (result == null && suspense) {
        var promise = new Promise(_resolve => {
          resolve = _resolve;
        });
        cache.set(request.key, promise);
        throw promise;
      } else {
        subscription.unsubscribe();
      }
    } else if (suspense && result != null && 'then' in result) {
      throw result;
    }
    return result || {
      fetching: true
    };
  }, [cache, request]);
  var deps = [client, request, args.requestPolicy, args.context, args.pause];
  var [state, setState] = React.useState(() => [source, computeNextState(initialState, getSnapshot(source, suspense)), deps]);
  var currentResult = state[1];
  if (source !== state[0] && hasDepsChanged(state[2], deps)) {
    setState([source, currentResult = computeNextState(state[1], getSnapshot(source, suspense)), deps]);
  }
  React.useEffect(() => {
    var source = state[0];
    var request = state[2][1];
    var hasResult = false;
    var updateResult = result => {
      hasResult = true;
      deferDispatch(setState, state => {
        var nextResult = computeNextState(state[1], result);
        return state[1] !== nextResult ? [state[0], nextResult, state[2]] : state;
      });
    };
    if (source) {
      var subscription = wonka.subscribe(updateResult)(wonka.onEnd(() => {
        updateResult({
          fetching: false
        });
      })(source));
      if (!hasResult) updateResult({
        fetching: true
      });
      return () => {
        cache.dispose(request.key);
        subscription.unsubscribe();
      };
    } else {
      updateResult({
        fetching: false
      });
    }
  }, [cache, state[0], state[2][1]]);
  var executeQuery = React.useCallback(opts => {
    var context = {
      requestPolicy: args.requestPolicy,
      ...args.context,
      ...opts
    };
    deferDispatch(setState, state => {
      var source = suspense ? wonka.onPush(result => {
        cache.set(request.key, result);
      })(client.executeQuery(request, context)) : client.executeQuery(request, context);
      return [source, state[1], deps];
    });
  }, [client, cache, request, suspense, getSnapshot, args.requestPolicy, args.context]);
  return [currentResult, executeQuery];
}

/* eslint-disable react-hooks/exhaustive-deps */

/** Input arguments for the {@link useSubscription} hook.
 *
 * @param query - The GraphQL subscription document that `useSubscription` executes.
 * @param variables - The variables for the GraphQL subscription that `useSubscription` executes.
 */

/** Combines previous data with an incoming subscription result’s data.
 *
 * @remarks
 * A `SubscriptionHandler` may be passed to {@link useSubscription} to
 * aggregate subscription results into a combined {@link UseSubscriptionState.data}
 * value.
 *
 * This is useful when a subscription event delivers a single item, while
 * you’d like to display a list of events.
 *
 * @example
 * ```ts
 * const NotificationsSubscription = gql`
 *   subscription { newNotification { id, text } }
 * `;
 *
 * const combineNotifications = (notifications = [], data) => {
 *   return [...notifications, data.newNotification];
 * };
 *
 * const [result, executeSubscription] = useSubscription(
 *   { query: NotificationsSubscription },
 *   combineNotifications,
 * );
 * ```
 */

/** State of the current subscription, your {@link useSubscription} hook is executing.
 *
 * @remarks
 * `UseSubscriptionState` is returned (in a tuple) by {@link useSubscription} and
 * gives you the updating {@link OperationResult} of GraphQL subscriptions.
 *
 * If a {@link SubscriptionHandler} has been passed to `useSubscription` then
 * {@link UseSubscriptionState.data} is instead the updated data as returned
 * by the handler, otherwise it’s the latest result’s data.
 *
 * Hint: Even when the query and variables passed to {@link useSubscription} change,
 * this state preserves the prior state.
 */

/** Triggers {@link useSubscription} to reexecute a GraphQL subscription operation.
 *
 * @param opts - optionally, context options that will be merged with the hook's
 * {@link UseSubscriptionArgs.context} options and the `Client`’s options.
 *
 * @remarks
 * When called, {@link useSubscription} will restart the GraphQL subscription
 * operation it currently holds. If {@link UseSubscriptionArgs.pause} is set
 * to `true`, it will start executing the subscription.
 *
 * ```ts
 * const [result, executeSubscription] = useSubscription({
 *   query,
 *   pause: true,
 * });
 *
 * const start = () => {
 *   executeSubscription();
 * };
 * ```
 */

/** Result tuple returned by the {@link useSubscription} hook.
 *
 * @remarks
 * Similarly to a `useState` hook’s return value,
 * the first element is the {@link useSubscription}’s state,
 * a {@link UseSubscriptionState} object,
 * and the second is used to imperatively re-execute or start the subscription
 * via a {@link UseMutationExecute} function.
 */

/** Hook to run a GraphQL subscription and get updated GraphQL results.
 *
 * @param args - a {@link UseSubscriptionArgs} object, to pass a `query`, `variables`, and options.
 * @param handler - optionally, a {@link SubscriptionHandler} function to combine multiple subscription results.
 * @returns a {@link UseSubscriptionResponse} tuple of a {@link UseSubscriptionState} result, and an execute function.
 *
 * @remarks
 * `useSubscription` allows GraphQL subscriptions to be defined and executed.
 * Given {@link UseSubscriptionArgs.query}, it executes the GraphQL subscription with the
 * context’s {@link Client}.
 *
 * The returned result updates when the `Client` has new results
 * for the subscription, and `data` is updated with the result’s data
 * or with the `data` that a `handler` returns.
 *
 * @example
 * ```ts
 * import { gql, useSubscription } from 'urql';
 *
 * const NotificationsSubscription = gql`
 *   subscription { newNotification { id, text } }
 * `;
 *
 * const combineNotifications = (notifications = [], data) => {
 *   return [...notifications, data.newNotification];
 * };
 *
 * const Notifications = () => {
 *   const [result, executeSubscription] = useSubscription(
 *     { query: NotificationsSubscription },
 *     combineNotifications,
 *   );
 *   // ...
 * };
 * ```
 */
function useSubscription(args, handler) {
  var client = useClient();
  var request = useRequest(args.query, args.variables);
  var handlerRef = React.useRef(handler);
  handlerRef.current = handler;
  var source = React.useMemo(() => !args.pause ? client.executeSubscription(request, args.context) : null, [client, request, args.pause, args.context]);
  var deps = [client, request, args.context, args.pause];
  var [state, setState] = React.useState(() => [source, {
    ...initialState,
    fetching: !!source
  }, deps]);
  var currentResult = state[1];
  if (source !== state[0] && hasDepsChanged(state[2], deps)) {
    setState([source, currentResult = computeNextState(state[1], {
      fetching: !!source
    }), deps]);
  }
  React.useEffect(() => {
    var updateResult = result => {
      deferDispatch(setState, state => {
        var nextResult = computeNextState(state[1], result);
        if (state[1] === nextResult) return state;
        if (handlerRef.current && state[1].data !== nextResult.data) {
          nextResult.data = handlerRef.current(state[1].data, nextResult.data);
        }
        return [state[0], nextResult, state[2]];
      });
    };
    if (state[0]) {
      return wonka.subscribe(updateResult)(wonka.onEnd(() => {
        updateResult({
          fetching: !!source
        });
      })(state[0])).unsubscribe;
    } else {
      updateResult({
        fetching: false
      });
    }
  }, [state[0]]);

  // This is the imperative execute function passed to the user
  var executeSubscription = React.useCallback(opts => {
    var source = client.executeSubscription(request, {
      ...args.context,
      ...opts
    });
    deferDispatch(setState, state => [source, state[1], deps]);
  }, [client, args.context, request]);
  return [currentResult, executeSubscription];
}

/** Props accepted by {@link Mutation}.
 *
 * @remarks
 * `MutationProps` are the props accepted by the {@link Mutation} component.
 *
 * The result, the {@link MutationState} object, will be passed to
 * a {@link MutationProps.children} function, passed as children
 * to the `Mutation` component.
 */

/** Object that {@link MutationProps.children} is called with.
 *
 * @remarks
 * This is an extented {@link UseMutationstate} with an added
 * {@link MutationState.executeMutation} method, which is usually
 * part of a tuple returned by {@link useMutation}.
 */

/** Component Wrapper around {@link useMutation} to run a GraphQL query.
 *
 * @remarks
 * `Mutation` is a component wrapper around the {@link useMutation} hook
 * that calls the {@link MutationProps.children} prop, as a function,
 * with the {@link MutationState} object.
 */
function Mutation(props) {
  var mutation = useMutation(props.query);
  return props.children({
    ...mutation[0],
    executeMutation: mutation[1]
  });
}

/** Props accepted by {@link Query}.
 *
 * @remarks
 * `QueryProps` are the props accepted by the {@link Query} component,
 * which is identical to {@link UseQueryArgs}.
 *
 * The result, the {@link QueryState} object, will be passed to
 * a {@link QueryProps.children} function, passed as children
 * to the `Query` component.
 */

/** Object that {@link QueryProps.children} is called with.
 *
 * @remarks
 * This is an extented {@link UseQueryState} with an added
 * {@link QueryState.executeQuery} method, which is usually
 * part of a tuple returned by {@link useQuery}.
 */

/** Component Wrapper around {@link useQuery} to run a GraphQL query.
 *
 * @remarks
 * `Query` is a component wrapper around the {@link useQuery} hook
 * that calls the {@link QueryProps.children} prop, as a function,
 * with the {@link QueryState} object.
 */
function Query(props) {
  var query = useQuery(props);
  return props.children({
    ...query[0],
    executeQuery: query[1]
  });
}

/** Props accepted by {@link Subscription}.
 *
 * @remarks
 * `SubscriptionProps` are the props accepted by the {@link Subscription} component,
 * which is identical to {@link UseSubscriptionArgs} with an added
 * {@link SubscriptionProps.handler} prop, which {@link useSubscription} usually
 * accepts as an additional argument.
 *
 * The result, the {@link SubscriptionState} object, will be passed to
 * a {@link SubscriptionProps.children} function, passed as children
 * to the `Subscription` component.
 */

/** Object that {@link SubscriptionProps.children} is called with.
 *
 * @remarks
 * This is an extented {@link UseSubscriptionState} with an added
 * {@link SubscriptionState.executeSubscription} method, which is usually
 * part of a tuple returned by {@link useSubscription}.
 */

/** Component Wrapper around {@link useSubscription} to run a GraphQL subscription.
 *
 * @remarks
 * `Subscription` is a component wrapper around the {@link useSubscription} hook
 * that calls the {@link SubscriptionProps.children} prop, as a function,
 * with the {@link SubscriptionState} object.
 */
function Subscription(props) {
  var subscription = useSubscription(props, props.handler);
  return props.children({
    ...subscription[0],
    executeSubscription: subscription[1]
  });
}

exports.Consumer = Consumer;
exports.Context = Context;
exports.Mutation = Mutation;
exports.Provider = Provider;
exports.Query = Query;
exports.Subscription = Subscription;
exports.useClient = useClient;
exports.useMutation = useMutation;
exports.useQuery = useQuery;
exports.useSubscription = useSubscription;
Object.keys(core).forEach(function (k) {
if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
enumerable: true,
get: function () { return core[k]; }
});
});
//# sourceMappingURL=urql.js.map


/***/ }),

/***/ 63804:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var e=__webpack_require__(18038);function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k="function"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}
function r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;


/***/ }),

/***/ 80800:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (true) {
  module.exports = __webpack_require__(63804);
} else {}


/***/ }),

/***/ 78069:
/***/ ((__unused_webpack_module, exports) => {

Object.defineProperty(exports, "__esModule", ({
  value: !0
}));

var teardownPlaceholder = () => {};

var e = teardownPlaceholder;

function start(e) {
  return {
    tag: 0,
    0: e
  };
}

function push(e) {
  return {
    tag: 1,
    0: e
  };
}

var identity = e => e;

function concatMap(r) {
  return t => i => {
    var s = [];
    var a = e;
    var f = e;
    var n = !1;
    var l = !1;
    var o = !1;
    var u = !1;
    function applyInnerSource(e) {
      o = !0;
      e((e => {
        if (0 === e) {
          if (o) {
            o = !1;
            if (s.length) {
              applyInnerSource(r(s.shift()));
            } else if (u) {
              i(0);
            } else if (!n) {
              n = !0;
              a(0);
            }
          }
        } else if (0 === e.tag) {
          l = !1;
          (f = e[0])(0);
        } else if (o) {
          i(e);
          if (l) {
            l = !1;
          } else {
            f(0);
          }
        }
      }));
    }
    t((e => {
      if (u) {} else if (0 === e) {
        u = !0;
        if (!o && !s.length) {
          i(0);
        }
      } else if (0 === e.tag) {
        a = e[0];
      } else {
        n = !1;
        if (o) {
          s.push(e[0]);
        } else {
          applyInnerSource(r(e[0]));
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!u) {
          u = !0;
          a(1);
        }
        if (o) {
          o = !1;
          f(1);
        }
      } else {
        if (!u && !n) {
          n = !0;
          a(0);
        }
        if (o && !l) {
          l = !0;
          f(0);
        }
      }
    })));
  };
}

function concatAll(e) {
  return concatMap(identity)(e);
}

function mergeMap(r) {
  return t => i => {
    var s = [];
    var a = e;
    var f = !1;
    var n = !1;
    t((t => {
      if (n) {} else if (0 === t) {
        n = !0;
        if (!s.length) {
          i(0);
        }
      } else if (0 === t.tag) {
        a = t[0];
      } else {
        f = !1;
        !function applyInnerSource(r) {
          var t = e;
          r((e => {
            if (0 === e) {
              if (s.length) {
                var r = s.indexOf(t);
                if (r > -1) {
                  (s = s.slice()).splice(r, 1);
                }
                if (!s.length) {
                  if (n) {
                    i(0);
                  } else if (!f) {
                    f = !0;
                    a(0);
                  }
                }
              }
            } else if (0 === e.tag) {
              s.push(t = e[0]);
              t(0);
            } else if (s.length) {
              i(e);
              t(0);
            }
          }));
        }(r(t[0]));
        if (!f) {
          f = !0;
          a(0);
        }
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!n) {
          n = !0;
          a(1);
        }
        for (var r = 0, t = s, i = s.length; r < i; r++) {
          t[r](1);
        }
        s.length = 0;
      } else {
        if (!n && !f) {
          f = !0;
          a(0);
        } else {
          f = !1;
        }
        for (var l = 0, o = s, u = s.length; l < u; l++) {
          o[l](0);
        }
      }
    })));
  };
}

function mergeAll(e) {
  return mergeMap(identity)(e);
}

function onPush(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
      } else if (0 === r.tag) {
        var s = r[0];
        t(start((e => {
          if (1 === e) {
            i = !0;
          }
          s(e);
        })));
      } else {
        e(r[0]);
        t(r);
      }
    }));
  };
}

function share(r) {
  var t = [];
  var i = e;
  var s = !1;
  return e => {
    t.push(e);
    if (1 === t.length) {
      r((e => {
        if (0 === e) {
          for (var r = 0, a = t, f = t.length; r < f; r++) {
            a[r](0);
          }
          t.length = 0;
        } else if (0 === e.tag) {
          i = e[0];
        } else {
          s = !1;
          for (var n = 0, l = t, o = t.length; n < o; n++) {
            l[n](e);
          }
        }
      }));
    }
    e(start((r => {
      if (1 === r) {
        var a = t.indexOf(e);
        if (a > -1) {
          (t = t.slice()).splice(a, 1);
        }
        if (!t.length) {
          i(1);
        }
      } else if (!s) {
        s = !0;
        i(0);
      }
    })));
  };
}

function switchMap(r) {
  return t => i => {
    var s = e;
    var a = e;
    var f = !1;
    var n = !1;
    var l = !1;
    var o = !1;
    t((t => {
      if (o) {} else if (0 === t) {
        o = !0;
        if (!l) {
          i(0);
        }
      } else if (0 === t.tag) {
        s = t[0];
      } else {
        if (l) {
          a(1);
          a = e;
        }
        if (!f) {
          f = !0;
          s(0);
        } else {
          f = !1;
        }
        !function applyInnerSource(e) {
          l = !0;
          e((e => {
            if (!l) {} else if (0 === e) {
              l = !1;
              if (o) {
                i(0);
              } else if (!f) {
                f = !0;
                s(0);
              }
            } else if (0 === e.tag) {
              n = !1;
              (a = e[0])(0);
            } else {
              i(e);
              if (!n) {
                a(0);
              } else {
                n = !1;
              }
            }
          }));
        }(r(t[0]));
      }
    }));
    i(start((e => {
      if (1 === e) {
        if (!o) {
          o = !0;
          s(1);
        }
        if (l) {
          l = !1;
          a(1);
        }
      } else {
        if (!o && !f) {
          f = !0;
          s(0);
        }
        if (l && !n) {
          n = !0;
          a(0);
        }
      }
    })));
  };
}

function fromAsyncIterable(e) {
  return r => {
    var t = e[Symbol.asyncIterator]();
    var i = !1;
    var s = !1;
    var a = !1;
    var f;
    r(start((async e => {
      if (1 === e) {
        i = !0;
        if (t.return) {
          t.return();
        }
      } else if (s) {
        a = !0;
      } else {
        for (a = s = !0; a && !i; ) {
          if ((f = await t.next()).done) {
            i = !0;
            if (t.return) {
              await t.return();
            }
            r(0);
          } else {
            try {
              a = !1;
              r(push(f.value));
            } catch (e) {
              if (t.throw) {
                if (i = !!(await t.throw(e)).done) {
                  r(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        s = !1;
      }
    })));
  };
}

function fromIterable(e) {
  if (e[Symbol.asyncIterator]) {
    return fromAsyncIterable(e);
  }
  return r => {
    var t = e[Symbol.iterator]();
    var i = !1;
    var s = !1;
    var a = !1;
    var f;
    r(start((e => {
      if (1 === e) {
        i = !0;
        if (t.return) {
          t.return();
        }
      } else if (s) {
        a = !0;
      } else {
        for (a = s = !0; a && !i; ) {
          if ((f = t.next()).done) {
            i = !0;
            if (t.return) {
              t.return();
            }
            r(0);
          } else {
            try {
              a = !1;
              r(push(f.value));
            } catch (e) {
              if (t.throw) {
                if (i = !!t.throw(e).done) {
                  r(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        s = !1;
      }
    })));
  };
}

var r = fromIterable;

function make(e) {
  return r => {
    var t = !1;
    var i = e({
      next(e) {
        if (!t) {
          r(push(e));
        }
      },
      complete() {
        if (!t) {
          t = !0;
          r(0);
        }
      }
    });
    r(start((e => {
      if (1 === e && !t) {
        t = !0;
        i();
      }
    })));
  };
}

function subscribe(r) {
  return t => {
    var i = e;
    var s = !1;
    t((e => {
      if (0 === e) {
        s = !0;
      } else if (0 === e.tag) {
        (i = e[0])(0);
      } else if (!s) {
        r(e[0]);
        i(0);
      }
    }));
    return {
      unsubscribe() {
        if (!s) {
          s = !0;
          i(1);
        }
      }
    };
  };
}

var t = {
  done: !0
};

function zip(r) {
  var t = Object.keys(r).length;
  return i => {
    var s = new Set;
    var a = Array.isArray(r) ? new Array(t).fill(e) : {};
    var f = Array.isArray(r) ? new Array(t) : {};
    var n = !1;
    var l = !1;
    var o = !1;
    var u = 0;
    var loop = function(v) {
      r[v]((c => {
        if (0 === c) {
          if (u >= t - 1) {
            o = !0;
            i(0);
          } else {
            u++;
          }
        } else if (0 === c.tag) {
          a[v] = c[0];
        } else if (!o) {
          f[v] = c[0];
          s.add(v);
          if (!n && s.size < t) {
            if (!l) {
              for (var p in r) {
                if (!s.has(p)) {
                  (a[p] || e)(0);
                }
              }
            } else {
              l = !1;
            }
          } else {
            n = !0;
            l = !1;
            i(push(Array.isArray(f) ? f.slice() : {
              ...f
            }));
          }
        }
      }));
    };
    for (var v in r) {
      loop(v);
    }
    i(start((e => {
      if (o) {} else if (1 === e) {
        o = !0;
        for (var r in a) {
          a[r](1);
        }
      } else if (!l) {
        l = !0;
        for (var t in a) {
          a[t](0);
        }
      }
    })));
  };
}

var observableSymbol = () => Symbol.observable || "@@observable";

exports.buffer = function buffer(r) {
  return t => i => {
    var s = [];
    var a = e;
    var f = e;
    var n = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        f(1);
        if (s.length) {
          i(push(s));
        }
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
        r((e => {
          if (l) {} else if (0 === e) {
            l = !0;
            a(1);
            if (s.length) {
              i(push(s));
            }
            i(0);
          } else if (0 === e.tag) {
            f = e[0];
          } else if (s.length) {
            var r = push(s);
            s = [];
            i(r);
          }
        }));
      } else {
        s.push(e[0]);
        if (!n) {
          n = !0;
          a(0);
          f(0);
        } else {
          n = !1;
        }
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        a(1);
        f(1);
      } else if (!l && !n) {
        n = !0;
        a(0);
        f(0);
      }
    })));
  };
};

exports.combine = function combine(...e) {
  return zip(e);
};

exports.concat = function concat(e) {
  return concatAll(r(e));
};

exports.concatAll = concatAll;

exports.concatMap = concatMap;

exports.debounce = function debounce(e) {
  return r => t => {
    var i;
    var s = !1;
    var a = !1;
    r((r => {
      if (a) {} else if (0 === r) {
        a = !0;
        if (i) {
          s = !0;
        } else {
          t(0);
        }
      } else if (0 === r.tag) {
        var f = r[0];
        t(start((e => {
          if (1 === e && !a) {
            a = !0;
            s = !1;
            if (i) {
              clearTimeout(i);
            }
            f(1);
          } else if (!a) {
            f(0);
          }
        })));
      } else {
        if (i) {
          clearTimeout(i);
        }
        i = setTimeout((() => {
          i = void 0;
          t(r);
          if (s) {
            t(0);
          }
        }), e(r[0]));
      }
    }));
  };
};

exports.delay = function delay(e) {
  return r => t => {
    var i = 0;
    r((r => {
      if (0 !== r && 0 === r.tag) {
        t(r);
      } else {
        i++;
        setTimeout((() => {
          if (i) {
            i--;
            t(r);
          }
        }), e);
      }
    }));
  };
};

exports.empty = e => {
  var r = !1;
  e(start((t => {
    if (1 === t) {
      r = !0;
    } else if (!r) {
      r = !0;
      e(0);
    }
  })));
};

exports.filter = function filter(r) {
  return t => i => {
    var s = e;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
        i(e);
      } else if (!r(e[0])) {
        s(0);
      } else {
        i(e);
      }
    }));
  };
};

exports.flatten = mergeAll;

exports.forEach = function forEach(e) {
  return r => {
    subscribe(e)(r);
  };
};

exports.fromArray = r;

exports.fromAsyncIterable = fromAsyncIterable;

exports.fromCallbag = function fromCallbag(e) {
  return r => {
    e(0, ((e, t) => {
      if (0 === e) {
        r(start((e => {
          t(e + 1);
        })));
      } else if (1 === e) {
        r(push(t));
      } else {
        r(0);
      }
    }));
  };
};

exports.fromDomEvent = function fromDomEvent(e, r) {
  return make((t => {
    e.addEventListener(r, t.next);
    return () => e.removeEventListener(r, t.next);
  }));
};

exports.fromIterable = fromIterable;

exports.fromObservable = function fromObservable(e) {
  return r => {
    var t = (e[observableSymbol()] ? e[observableSymbol()]() : e).subscribe({
      next(e) {
        r(push(e));
      },
      complete() {
        r(0);
      },
      error(e) {
        throw e;
      }
    });
    r(start((e => {
      if (1 === e) {
        t.unsubscribe();
      }
    })));
  };
};

exports.fromPromise = function fromPromise(e) {
  return make((r => {
    e.then((e => {
      Promise.resolve(e).then((() => {
        r.next(e);
        r.complete();
      }));
    }));
    return teardownPlaceholder;
  }));
};

exports.fromValue = function fromValue(e) {
  return r => {
    var t = !1;
    r(start((i => {
      if (1 === i) {
        t = !0;
      } else if (!t) {
        t = !0;
        r(push(e));
        r(0);
      }
    })));
  };
};

exports.interval = function interval(e) {
  return make((r => {
    var t = 0;
    var i = setInterval((() => r.next(t++)), e);
    return () => clearInterval(i);
  }));
};

exports.lazy = function lazy(e) {
  return r => e()(r);
};

exports.make = make;

exports.makeSubject = function makeSubject() {
  var e;
  var r;
  return {
    source: share(make((t => {
      e = t.next;
      r = t.complete;
      return teardownPlaceholder;
    }))),
    next(r) {
      if (e) {
        e(r);
      }
    },
    complete() {
      if (r) {
        r();
      }
    }
  };
};

exports.map = function map(e) {
  return r => t => r((r => {
    if (0 === r || 0 === r.tag) {
      t(r);
    } else {
      t(push(e(r[0])));
    }
  }));
};

exports.merge = function merge(e) {
  return mergeAll(r(e));
};

exports.mergeAll = mergeAll;

exports.mergeMap = mergeMap;

exports.never = r => {
  r(start(e));
};

exports.onEnd = function onEnd(e) {
  return r => t => {
    var i = !1;
    r((r => {
      if (i) {} else if (0 === r) {
        i = !0;
        t(0);
        e();
      } else if (0 === r.tag) {
        var s = r[0];
        t(start((r => {
          if (1 === r) {
            i = !0;
            s(1);
            e();
          } else {
            s(r);
          }
        })));
      } else {
        t(r);
      }
    }));
  };
};

exports.onPush = onPush;

exports.onStart = function onStart(e) {
  return r => t => r((r => {
    if (0 === r) {
      t(0);
    } else if (0 === r.tag) {
      t(r);
      e();
    } else {
      t(r);
    }
  }));
};

exports.pipe = (...e) => {
  var r = e[0];
  for (var t = 1, i = e.length; t < i; t++) {
    r = e[t](r);
  }
  return r;
};

exports.publish = function publish(e) {
  subscribe((e => {}))(e);
};

exports.sample = function sample(r) {
  return t => i => {
    var s = e;
    var a = e;
    var f;
    var n = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        a(1);
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
      } else {
        f = e[0];
        if (!n) {
          n = !0;
          a(0);
          s(0);
        } else {
          n = !1;
        }
      }
    }));
    r((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        s(1);
        i(0);
      } else if (0 === e.tag) {
        a = e[0];
      } else if (void 0 !== f) {
        var r = push(f);
        f = void 0;
        i(r);
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        s(1);
        a(1);
      } else if (!l && !n) {
        n = !0;
        s(0);
        a(0);
      }
    })));
  };
};

exports.scan = function scan(e, r) {
  return t => i => {
    var s = r;
    t((r => {
      if (0 === r) {
        i(0);
      } else if (0 === r.tag) {
        i(r);
      } else {
        i(push(s = e(s, r[0])));
      }
    }));
  };
};

exports.share = share;

exports.skip = function skip(r) {
  return t => i => {
    var s = e;
    var a = r;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
        i(e);
      } else if (a-- > 0) {
        s(0);
      } else {
        i(e);
      }
    }));
  };
};

exports.skipUntil = function skipUntil(r) {
  return t => i => {
    var s = e;
    var a = e;
    var f = !0;
    var n = !1;
    var l = !1;
    t((e => {
      if (l) {} else if (0 === e) {
        l = !0;
        if (f) {
          a(1);
        }
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
        r((e => {
          if (0 === e) {
            if (f) {
              l = !0;
              s(1);
            }
          } else if (0 === e.tag) {
            (a = e[0])(0);
          } else {
            f = !1;
            a(1);
          }
        }));
      } else if (!f) {
        n = !1;
        i(e);
      } else if (!n) {
        n = !0;
        s(0);
        a(0);
      } else {
        n = !1;
      }
    }));
    i(start((e => {
      if (1 === e && !l) {
        l = !0;
        s(1);
        if (f) {
          a(1);
        }
      } else if (!l && !n) {
        n = !0;
        if (f) {
          a(0);
        }
        s(0);
      }
    })));
  };
};

exports.skipWhile = function skipWhile(r) {
  return t => i => {
    var s = e;
    var a = !0;
    t((e => {
      if (0 === e) {
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
        i(e);
      } else if (a) {
        if (r(e[0])) {
          s(0);
        } else {
          a = !1;
          i(e);
        }
      } else {
        i(e);
      }
    }));
  };
};

exports.subscribe = subscribe;

exports.switchAll = function switchAll(e) {
  return switchMap(identity)(e);
};

exports.switchMap = switchMap;

exports.take = function take(r) {
  return t => i => {
    var s = e;
    var a = !1;
    var f = 0;
    t((e => {
      if (a) {} else if (0 === e) {
        a = !0;
        i(0);
      } else if (0 === e.tag) {
        if (r <= 0) {
          a = !0;
          i(0);
          e[0](1);
        } else {
          s = e[0];
        }
      } else if (f++ < r) {
        i(e);
        if (!a && f >= r) {
          a = !0;
          i(0);
          s(1);
        }
      } else {
        i(e);
      }
    }));
    i(start((e => {
      if (1 === e && !a) {
        a = !0;
        s(1);
      } else if (0 === e && !a && f < r) {
        s(0);
      }
    })));
  };
};

exports.takeLast = function takeLast(t) {
  return i => s => {
    var a = [];
    var f = e;
    i((e => {
      if (0 === e) {
        r(a)(s);
      } else if (0 === e.tag) {
        if (t <= 0) {
          e[0](1);
          r(a)(s);
        } else {
          (f = e[0])(0);
        }
      } else {
        if (a.length >= t && t) {
          a.shift();
        }
        a.push(e[0]);
        f(0);
      }
    }));
  };
};

exports.takeUntil = function takeUntil(r) {
  return t => i => {
    var s = e;
    var a = e;
    var f = !1;
    t((e => {
      if (f) {} else if (0 === e) {
        f = !0;
        a(1);
        i(0);
      } else if (0 === e.tag) {
        s = e[0];
        r((e => {
          if (0 === e) {} else if (0 === e.tag) {
            (a = e[0])(0);
          } else {
            f = !0;
            a(1);
            s(1);
            i(0);
          }
        }));
      } else {
        i(e);
      }
    }));
    i(start((e => {
      if (1 === e && !f) {
        f = !0;
        s(1);
        a(1);
      } else if (!f) {
        s(0);
      }
    })));
  };
};

exports.takeWhile = function takeWhile(r, t) {
  return i => s => {
    var a = e;
    var f = !1;
    i((e => {
      if (f) {} else if (0 === e) {
        f = !0;
        s(0);
      } else if (0 === e.tag) {
        a = e[0];
        s(e);
      } else if (!r(e[0])) {
        f = !0;
        if (t) {
          s(e);
        }
        s(0);
        a(1);
      } else {
        s(e);
      }
    }));
  };
};

exports.tap = onPush;

exports.throttle = function throttle(e) {
  return r => t => {
    var i = !1;
    var s;
    r((r => {
      if (0 === r) {
        if (s) {
          clearTimeout(s);
        }
        t(0);
      } else if (0 === r.tag) {
        var a = r[0];
        t(start((e => {
          if (1 === e) {
            if (s) {
              clearTimeout(s);
            }
            a(1);
          } else {
            a(0);
          }
        })));
      } else if (!i) {
        i = !0;
        if (s) {
          clearTimeout(s);
        }
        s = setTimeout((() => {
          s = void 0;
          i = !1;
        }), e(r[0]));
        t(r);
      }
    }));
  };
};

exports.toArray = function toArray(r) {
  var t = [];
  var i = e;
  var s = !1;
  r((e => {
    if (0 === e) {
      s = !0;
    } else if (0 === e.tag) {
      (i = e[0])(0);
    } else {
      t.push(e[0]);
      i(0);
    }
  }));
  if (!s) {
    i(1);
  }
  return t;
};

exports.toAsyncIterable = r => ({
  [Symbol.asyncIterator]() {
    var i = [];
    var s = !1;
    var a = e;
    var f;
    r((e => {
      if (s) {} else if (0 === e) {
        if (f) {
          f = f(t);
        }
        s = !0;
      } else if (0 === e.tag) {
        (a = e[0])(0);
      } else if (f) {
        f = f({
          value: e[0],
          done: !1
        });
      } else {
        i.push(e[0]);
      }
    }));
    return {
      async next() {
        if (s && !i.length) {
          return t;
        } else if (!s && i.length <= 1) {
          a(0);
        }
        return i.length ? {
          value: i.shift(),
          done: !1
        } : new Promise((e => f = e));
      },
      async return() {
        if (!s) {
          f = a(1);
        }
        s = !0;
        return t;
      }
    };
  }
});

exports.toCallbag = function toCallbag(e) {
  return (r, t) => {
    if (0 === r) {
      e((e => {
        if (0 === e) {
          t(2);
        } else if (0 === e.tag) {
          t(0, (r => {
            if (r < 3) {
              e[0](r - 1);
            }
          }));
        } else {
          t(1, e[0]);
        }
      }));
    }
  };
};

exports.toObservable = function toObservable(r) {
  return {
    subscribe(t, i, s) {
      var a = "object" == typeof t ? t : {
        next: t,
        error: i,
        complete: s
      };
      var f = e;
      var n = !1;
      r((e => {
        if (n) {} else if (0 === e) {
          n = !0;
          if (a.complete) {
            a.complete();
          }
        } else if (0 === e.tag) {
          (f = e[0])(0);
        } else {
          a.next(e[0]);
          f(0);
        }
      }));
      var l = {
        closed: !1,
        unsubscribe() {
          l.closed = !0;
          n = !0;
          f(1);
        }
      };
      return l;
    },
    [observableSymbol()]() {
      return this;
    }
  };
};

exports.toPromise = function toPromise(r) {
  return new Promise((t => {
    var i = e;
    var s;
    r((e => {
      if (0 === e) {
        Promise.resolve(s).then(t);
      } else if (0 === e.tag) {
        (i = e[0])(0);
      } else {
        s = e[0];
        i(0);
      }
    }));
  }));
};

exports.zip = zip;
//# sourceMappingURL=wonka.js.map


/***/ })

};
;