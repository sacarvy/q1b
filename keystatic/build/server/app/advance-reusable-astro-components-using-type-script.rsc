0:["Ar27atYfT9xGNafBUMlSN",[[["",{"children":[["slug","advance-reusable-astro-components-using-type-script","d"],{"children":["__PAGE__?{\"slug\":\"advance-reusable-astro-components-using-type-script\"}",{}]}]},"$undefined","$undefined",true],"$L1",[[],"$L2"]]]]
3:HL["/_next/static/css/5c3b7f8d83f9d33e.css",{"as":"style"}]
4:I{"id":63710,"chunks":["272:static/chunks/webpack-f7788c1e16bdaa78.js","648:static/chunks/d4618404-9177480d2b24e392.js","800:static/chunks/800-1aa97794a3790120.js"],"name":"default","async":false}
5:I{"id":95453,"chunks":["272:static/chunks/webpack-f7788c1e16bdaa78.js","648:static/chunks/d4618404-9177480d2b24e392.js","800:static/chunks/800-1aa97794a3790120.js"],"name":"default","async":false}
2:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
1:[["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":[["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children",["slug","advance-reusable-astro-components-using-type-script","d"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L5",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L6",null],"segment":"__PAGE__?{\"slug\":\"advance-reusable-astro-components-using-type-script\"}"},"styles":[]}],null],"segment":["slug","advance-reusable-astro-components-using-type-script","d"]},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/5c3b7f8d83f9d33e.css","precedence":"next"}]]}]}]}],null]
6:["$","div",null,{"children":[["$","h1",null,{"children":"Advance Reusable Astro Components using TypeScript"}],["$","div",null,{"children":[["$","h2",null,{"style":{"textAlign":"$undefined"},"children":["How would you add a ",["$","strong",null,{"children":"id"}]," prop conditionally in Astro"]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["In below example we are conditionally rendering the html based on id prop undefined or present. Yet, from first look you may get intuition it's not the way!!!"]}],["$","pre",null,{"children":["$","code",null,{"children":"---\ntype Props = { id?: string };\nconst { id } = Astro.props;\n---\n{id ? <h1 id={id}> ... </h1> : <h1> ... </h1>}"}]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Problems such as adding more props like ",["$","strong",null,{"children":"class"}],", ",["$","strong",null,{"children":"style"}]," you can't go on checking conditionally, so just let see how can we solve this issue,"]}],["$","h2",null,{"style":{"textAlign":"$undefined"},"children":["Using HTMLAttributes from ",["$","strong",null,{"children":"astro/types"}]]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Below, snippet just provides us the HTMLAttributes type for ",["$","strong",null,{"children":"h1"}]," and we used spread operator instead of doing ",["$","code",null,{"children":"class={class}"}]," or ",["$","code",null,{"children":"style={style}"}]," in pretty shorthand syntax."]}],["$","pre",null,{"children":["$","code",null,{"children":"---\nimport type { HTMLAttributes } from \"astro/types\";\nexport type Props = HTMLAttributes<\"h1\">;\n---\n<h1 {...Astro.props}>...</h1>"}]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Yet, another problem which you might face is Astro by default binds the ",["$","strong",null,{"children":"slot"}]," type with HTMLAttributes which is not needed So, we can fine tune it By using ",["$","strong",null,{"children":"Omit"}]]}],["$","pre",null,{"children":["$","code",null,{"children":"---\nimport type { HTMLAttributes } from \"astro/types\";\nexport type Props = Omit<HTMLAttributes<\"h2\">, \"slot\">;\n---\n<h1 {...Astro.props}>...</h1>"}]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Okay, Bonus tip do you want to use ",["$","strong",null,{"children":"tailwindcss"}]," without duplicating the styles in your reusable component use ",["$","a",null,{"href":"https://github.com/dcastil/tailwind-merge","children":["tailwind-merge"]}]," for solving duplicate classes issue."]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["install tailwind-merge"]}],["$","pre",null,{"children":["$","code",null,{"children":"# npm\nnpm i -D tailwind-merge\n# pnpm\npnpm i -D tailwind-merge\n# yarn\nyarn add -D tailwind-merge"}]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Now, Import it into your file"]}],["$","pre",null,{"children":["$","code",null,{"children":"---\nimport type { HTMLAttributes } from \"astro/types\";\nimport { twMerge } from \"tailwind-merge\";\nexport type Props = Omit<HTMLAttributes<\"h1\">, \"slot\">;\nconst { class: className, ...attrs } = Astro.props;\n---\n<h1 class={twMerge(\"font-bold text-2xl dark:text-white text-slate-800\", className)} {...attrs}>\n    <slot />\n</h1>"}]}],["$","p",null,{"style":{"textAlign":"$undefined"},"children":["Use Reusable component in your codebase with ease"]}]]}]]}]
